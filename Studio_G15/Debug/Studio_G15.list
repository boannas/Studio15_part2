
Studio_G15.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b790  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800b968  0800b968  0000c968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9c0  0800b9c0  0000d2b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b9c0  0800b9c0  0000c9c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9c8  0800b9c8  0000d2b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9c8  0800b9c8  0000c9c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b9cc  0800b9cc  0000c9cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002b0  20000000  0800b9d0  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000113c  200002b0  0800bc80  0000d2b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200013ec  0800bc80  0000d3ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d2b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f35f  00000000  00000000  0000d2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b64  00000000  00000000  0002c63f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e0  00000000  00000000  000301a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011d7  00000000  00000000  00031888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a215  00000000  00000000  00032a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d731  00000000  00000000  0005cc74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001154e7  00000000  00000000  0007a3a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018f88c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065c0  00000000  00000000  0018f8d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00195e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200002b0 	.word	0x200002b0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b950 	.word	0x0800b950

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200002b4 	.word	0x200002b4
 8000214:	0800b950 	.word	0x0800b950

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_frsub>:
 8000bd0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bd4:	e002      	b.n	8000bdc <__addsf3>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fsub>:
 8000bd8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bdc <__addsf3>:
 8000bdc:	0042      	lsls	r2, r0, #1
 8000bde:	bf1f      	itttt	ne
 8000be0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be4:	ea92 0f03 	teqne	r2, r3
 8000be8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf0:	d06a      	beq.n	8000cc8 <__addsf3+0xec>
 8000bf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bfa:	bfc1      	itttt	gt
 8000bfc:	18d2      	addgt	r2, r2, r3
 8000bfe:	4041      	eorgt	r1, r0
 8000c00:	4048      	eorgt	r0, r1
 8000c02:	4041      	eorgt	r1, r0
 8000c04:	bfb8      	it	lt
 8000c06:	425b      	neglt	r3, r3
 8000c08:	2b19      	cmp	r3, #25
 8000c0a:	bf88      	it	hi
 8000c0c:	4770      	bxhi	lr
 8000c0e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c16:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c1a:	bf18      	it	ne
 8000c1c:	4240      	negne	r0, r0
 8000c1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c22:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c26:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4249      	negne	r1, r1
 8000c2e:	ea92 0f03 	teq	r2, r3
 8000c32:	d03f      	beq.n	8000cb4 <__addsf3+0xd8>
 8000c34:	f1a2 0201 	sub.w	r2, r2, #1
 8000c38:	fa41 fc03 	asr.w	ip, r1, r3
 8000c3c:	eb10 000c 	adds.w	r0, r0, ip
 8000c40:	f1c3 0320 	rsb	r3, r3, #32
 8000c44:	fa01 f103 	lsl.w	r1, r1, r3
 8000c48:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c4c:	d502      	bpl.n	8000c54 <__addsf3+0x78>
 8000c4e:	4249      	negs	r1, r1
 8000c50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c58:	d313      	bcc.n	8000c82 <__addsf3+0xa6>
 8000c5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c5e:	d306      	bcc.n	8000c6e <__addsf3+0x92>
 8000c60:	0840      	lsrs	r0, r0, #1
 8000c62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c66:	f102 0201 	add.w	r2, r2, #1
 8000c6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c6c:	d251      	bcs.n	8000d12 <__addsf3+0x136>
 8000c6e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c76:	bf08      	it	eq
 8000c78:	f020 0001 	biceq.w	r0, r0, #1
 8000c7c:	ea40 0003 	orr.w	r0, r0, r3
 8000c80:	4770      	bx	lr
 8000c82:	0049      	lsls	r1, r1, #1
 8000c84:	eb40 0000 	adc.w	r0, r0, r0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c90:	d2ed      	bcs.n	8000c6e <__addsf3+0x92>
 8000c92:	fab0 fc80 	clz	ip, r0
 8000c96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ca2:	bfaa      	itet	ge
 8000ca4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca8:	4252      	neglt	r2, r2
 8000caa:	4318      	orrge	r0, r3
 8000cac:	bfbc      	itt	lt
 8000cae:	40d0      	lsrlt	r0, r2
 8000cb0:	4318      	orrlt	r0, r3
 8000cb2:	4770      	bx	lr
 8000cb4:	f092 0f00 	teq	r2, #0
 8000cb8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cbc:	bf06      	itte	eq
 8000cbe:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cc2:	3201      	addeq	r2, #1
 8000cc4:	3b01      	subne	r3, #1
 8000cc6:	e7b5      	b.n	8000c34 <__addsf3+0x58>
 8000cc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ccc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd0:	bf18      	it	ne
 8000cd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd6:	d021      	beq.n	8000d1c <__addsf3+0x140>
 8000cd8:	ea92 0f03 	teq	r2, r3
 8000cdc:	d004      	beq.n	8000ce8 <__addsf3+0x10c>
 8000cde:	f092 0f00 	teq	r2, #0
 8000ce2:	bf08      	it	eq
 8000ce4:	4608      	moveq	r0, r1
 8000ce6:	4770      	bx	lr
 8000ce8:	ea90 0f01 	teq	r0, r1
 8000cec:	bf1c      	itt	ne
 8000cee:	2000      	movne	r0, #0
 8000cf0:	4770      	bxne	lr
 8000cf2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cf6:	d104      	bne.n	8000d02 <__addsf3+0x126>
 8000cf8:	0040      	lsls	r0, r0, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d00:	4770      	bx	lr
 8000d02:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d06:	bf3c      	itt	cc
 8000d08:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d0c:	4770      	bxcc	lr
 8000d0e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d12:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d1a:	4770      	bx	lr
 8000d1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d20:	bf16      	itet	ne
 8000d22:	4608      	movne	r0, r1
 8000d24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d28:	4601      	movne	r1, r0
 8000d2a:	0242      	lsls	r2, r0, #9
 8000d2c:	bf06      	itte	eq
 8000d2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d32:	ea90 0f01 	teqeq	r0, r1
 8000d36:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_ui2f>:
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e004      	b.n	8000d4c <__aeabi_i2f+0x8>
 8000d42:	bf00      	nop

08000d44 <__aeabi_i2f>:
 8000d44:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d48:	bf48      	it	mi
 8000d4a:	4240      	negmi	r0, r0
 8000d4c:	ea5f 0c00 	movs.w	ip, r0
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d58:	4601      	mov	r1, r0
 8000d5a:	f04f 0000 	mov.w	r0, #0
 8000d5e:	e01c      	b.n	8000d9a <__aeabi_l2f+0x2a>

08000d60 <__aeabi_ul2f>:
 8000d60:	ea50 0201 	orrs.w	r2, r0, r1
 8000d64:	bf08      	it	eq
 8000d66:	4770      	bxeq	lr
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e00a      	b.n	8000d84 <__aeabi_l2f+0x14>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_l2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d7c:	d502      	bpl.n	8000d84 <__aeabi_l2f+0x14>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	ea5f 0c01 	movs.w	ip, r1
 8000d88:	bf02      	ittt	eq
 8000d8a:	4684      	moveq	ip, r0
 8000d8c:	4601      	moveq	r1, r0
 8000d8e:	2000      	moveq	r0, #0
 8000d90:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d94:	bf08      	it	eq
 8000d96:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d9a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d9e:	fabc f28c 	clz	r2, ip
 8000da2:	3a08      	subs	r2, #8
 8000da4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da8:	db10      	blt.n	8000dcc <__aeabi_l2f+0x5c>
 8000daa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dae:	4463      	add	r3, ip
 8000db0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db4:	f1c2 0220 	rsb	r2, r2, #32
 8000db8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000dbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc0:	eb43 0002 	adc.w	r0, r3, r2
 8000dc4:	bf08      	it	eq
 8000dc6:	f020 0001 	biceq.w	r0, r0, #1
 8000dca:	4770      	bx	lr
 8000dcc:	f102 0220 	add.w	r2, r2, #32
 8000dd0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ddc:	fa21 f202 	lsr.w	r2, r1, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dea:	4770      	bx	lr

08000dec <__aeabi_uldivmod>:
 8000dec:	b953      	cbnz	r3, 8000e04 <__aeabi_uldivmod+0x18>
 8000dee:	b94a      	cbnz	r2, 8000e04 <__aeabi_uldivmod+0x18>
 8000df0:	2900      	cmp	r1, #0
 8000df2:	bf08      	it	eq
 8000df4:	2800      	cmpeq	r0, #0
 8000df6:	bf1c      	itt	ne
 8000df8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000e00:	f000 b96a 	b.w	80010d8 <__aeabi_idiv0>
 8000e04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e0c:	f000 f806 	bl	8000e1c <__udivmoddi4>
 8000e10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e18:	b004      	add	sp, #16
 8000e1a:	4770      	bx	lr

08000e1c <__udivmoddi4>:
 8000e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e20:	9d08      	ldr	r5, [sp, #32]
 8000e22:	460c      	mov	r4, r1
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d14e      	bne.n	8000ec6 <__udivmoddi4+0xaa>
 8000e28:	4694      	mov	ip, r2
 8000e2a:	458c      	cmp	ip, r1
 8000e2c:	4686      	mov	lr, r0
 8000e2e:	fab2 f282 	clz	r2, r2
 8000e32:	d962      	bls.n	8000efa <__udivmoddi4+0xde>
 8000e34:	b14a      	cbz	r2, 8000e4a <__udivmoddi4+0x2e>
 8000e36:	f1c2 0320 	rsb	r3, r2, #32
 8000e3a:	4091      	lsls	r1, r2
 8000e3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000e40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e44:	4319      	orrs	r1, r3
 8000e46:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4e:	fa1f f68c 	uxth.w	r6, ip
 8000e52:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000e5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e62:	fb04 f106 	mul.w	r1, r4, r6
 8000e66:	4299      	cmp	r1, r3
 8000e68:	d90a      	bls.n	8000e80 <__udivmoddi4+0x64>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e72:	f080 8112 	bcs.w	800109a <__udivmoddi4+0x27e>
 8000e76:	4299      	cmp	r1, r3
 8000e78:	f240 810f 	bls.w	800109a <__udivmoddi4+0x27e>
 8000e7c:	3c02      	subs	r4, #2
 8000e7e:	4463      	add	r3, ip
 8000e80:	1a59      	subs	r1, r3, r1
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e8a:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e92:	fb00 f606 	mul.w	r6, r0, r6
 8000e96:	429e      	cmp	r6, r3
 8000e98:	d90a      	bls.n	8000eb0 <__udivmoddi4+0x94>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea2:	f080 80fc 	bcs.w	800109e <__udivmoddi4+0x282>
 8000ea6:	429e      	cmp	r6, r3
 8000ea8:	f240 80f9 	bls.w	800109e <__udivmoddi4+0x282>
 8000eac:	4463      	add	r3, ip
 8000eae:	3802      	subs	r0, #2
 8000eb0:	1b9b      	subs	r3, r3, r6
 8000eb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	b11d      	cbz	r5, 8000ec2 <__udivmoddi4+0xa6>
 8000eba:	40d3      	lsrs	r3, r2
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	e9c5 3200 	strd	r3, r2, [r5]
 8000ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d905      	bls.n	8000ed6 <__udivmoddi4+0xba>
 8000eca:	b10d      	cbz	r5, 8000ed0 <__udivmoddi4+0xb4>
 8000ecc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	e7f5      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8000ed6:	fab3 f183 	clz	r1, r3
 8000eda:	2900      	cmp	r1, #0
 8000edc:	d146      	bne.n	8000f6c <__udivmoddi4+0x150>
 8000ede:	42a3      	cmp	r3, r4
 8000ee0:	d302      	bcc.n	8000ee8 <__udivmoddi4+0xcc>
 8000ee2:	4290      	cmp	r0, r2
 8000ee4:	f0c0 80f0 	bcc.w	80010c8 <__udivmoddi4+0x2ac>
 8000ee8:	1a86      	subs	r6, r0, r2
 8000eea:	eb64 0303 	sbc.w	r3, r4, r3
 8000eee:	2001      	movs	r0, #1
 8000ef0:	2d00      	cmp	r5, #0
 8000ef2:	d0e6      	beq.n	8000ec2 <__udivmoddi4+0xa6>
 8000ef4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ef8:	e7e3      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8000efa:	2a00      	cmp	r2, #0
 8000efc:	f040 8090 	bne.w	8001020 <__udivmoddi4+0x204>
 8000f00:	eba1 040c 	sub.w	r4, r1, ip
 8000f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f08:	fa1f f78c 	uxth.w	r7, ip
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f16:	fb08 4416 	mls	r4, r8, r6, r4
 8000f1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f1e:	fb07 f006 	mul.w	r0, r7, r6
 8000f22:	4298      	cmp	r0, r3
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x11c>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x11a>
 8000f30:	4298      	cmp	r0, r3
 8000f32:	f200 80cd 	bhi.w	80010d0 <__udivmoddi4+0x2b4>
 8000f36:	4626      	mov	r6, r4
 8000f38:	1a1c      	subs	r4, r3, r0
 8000f3a:	fa1f f38e 	uxth.w	r3, lr
 8000f3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f42:	fb08 4410 	mls	r4, r8, r0, r4
 8000f46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f4a:	fb00 f707 	mul.w	r7, r0, r7
 8000f4e:	429f      	cmp	r7, r3
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x148>
 8000f52:	eb1c 0303 	adds.w	r3, ip, r3
 8000f56:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f5a:	d202      	bcs.n	8000f62 <__udivmoddi4+0x146>
 8000f5c:	429f      	cmp	r7, r3
 8000f5e:	f200 80b0 	bhi.w	80010c2 <__udivmoddi4+0x2a6>
 8000f62:	4620      	mov	r0, r4
 8000f64:	1bdb      	subs	r3, r3, r7
 8000f66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f6a:	e7a5      	b.n	8000eb8 <__udivmoddi4+0x9c>
 8000f6c:	f1c1 0620 	rsb	r6, r1, #32
 8000f70:	408b      	lsls	r3, r1
 8000f72:	fa22 f706 	lsr.w	r7, r2, r6
 8000f76:	431f      	orrs	r7, r3
 8000f78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000f80:	ea43 030c 	orr.w	r3, r3, ip
 8000f84:	40f4      	lsrs	r4, r6
 8000f86:	fa00 f801 	lsl.w	r8, r0, r1
 8000f8a:	0c38      	lsrs	r0, r7, #16
 8000f8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f90:	fbb4 fef0 	udiv	lr, r4, r0
 8000f94:	fa1f fc87 	uxth.w	ip, r7
 8000f98:	fb00 441e 	mls	r4, r0, lr, r4
 8000f9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fa0:	fb0e f90c 	mul.w	r9, lr, ip
 8000fa4:	45a1      	cmp	r9, r4
 8000fa6:	fa02 f201 	lsl.w	r2, r2, r1
 8000faa:	d90a      	bls.n	8000fc2 <__udivmoddi4+0x1a6>
 8000fac:	193c      	adds	r4, r7, r4
 8000fae:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000fb2:	f080 8084 	bcs.w	80010be <__udivmoddi4+0x2a2>
 8000fb6:	45a1      	cmp	r9, r4
 8000fb8:	f240 8081 	bls.w	80010be <__udivmoddi4+0x2a2>
 8000fbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fc0:	443c      	add	r4, r7
 8000fc2:	eba4 0409 	sub.w	r4, r4, r9
 8000fc6:	fa1f f983 	uxth.w	r9, r3
 8000fca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fce:	fb00 4413 	mls	r4, r0, r3, r4
 8000fd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fda:	45a4      	cmp	ip, r4
 8000fdc:	d907      	bls.n	8000fee <__udivmoddi4+0x1d2>
 8000fde:	193c      	adds	r4, r7, r4
 8000fe0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fe4:	d267      	bcs.n	80010b6 <__udivmoddi4+0x29a>
 8000fe6:	45a4      	cmp	ip, r4
 8000fe8:	d965      	bls.n	80010b6 <__udivmoddi4+0x29a>
 8000fea:	3b02      	subs	r3, #2
 8000fec:	443c      	add	r4, r7
 8000fee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ff2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ff6:	eba4 040c 	sub.w	r4, r4, ip
 8000ffa:	429c      	cmp	r4, r3
 8000ffc:	46ce      	mov	lr, r9
 8000ffe:	469c      	mov	ip, r3
 8001000:	d351      	bcc.n	80010a6 <__udivmoddi4+0x28a>
 8001002:	d04e      	beq.n	80010a2 <__udivmoddi4+0x286>
 8001004:	b155      	cbz	r5, 800101c <__udivmoddi4+0x200>
 8001006:	ebb8 030e 	subs.w	r3, r8, lr
 800100a:	eb64 040c 	sbc.w	r4, r4, ip
 800100e:	fa04 f606 	lsl.w	r6, r4, r6
 8001012:	40cb      	lsrs	r3, r1
 8001014:	431e      	orrs	r6, r3
 8001016:	40cc      	lsrs	r4, r1
 8001018:	e9c5 6400 	strd	r6, r4, [r5]
 800101c:	2100      	movs	r1, #0
 800101e:	e750      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8001020:	f1c2 0320 	rsb	r3, r2, #32
 8001024:	fa20 f103 	lsr.w	r1, r0, r3
 8001028:	fa0c fc02 	lsl.w	ip, ip, r2
 800102c:	fa24 f303 	lsr.w	r3, r4, r3
 8001030:	4094      	lsls	r4, r2
 8001032:	430c      	orrs	r4, r1
 8001034:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001038:	fa00 fe02 	lsl.w	lr, r0, r2
 800103c:	fa1f f78c 	uxth.w	r7, ip
 8001040:	fbb3 f0f8 	udiv	r0, r3, r8
 8001044:	fb08 3110 	mls	r1, r8, r0, r3
 8001048:	0c23      	lsrs	r3, r4, #16
 800104a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800104e:	fb00 f107 	mul.w	r1, r0, r7
 8001052:	4299      	cmp	r1, r3
 8001054:	d908      	bls.n	8001068 <__udivmoddi4+0x24c>
 8001056:	eb1c 0303 	adds.w	r3, ip, r3
 800105a:	f100 36ff 	add.w	r6, r0, #4294967295
 800105e:	d22c      	bcs.n	80010ba <__udivmoddi4+0x29e>
 8001060:	4299      	cmp	r1, r3
 8001062:	d92a      	bls.n	80010ba <__udivmoddi4+0x29e>
 8001064:	3802      	subs	r0, #2
 8001066:	4463      	add	r3, ip
 8001068:	1a5b      	subs	r3, r3, r1
 800106a:	b2a4      	uxth	r4, r4
 800106c:	fbb3 f1f8 	udiv	r1, r3, r8
 8001070:	fb08 3311 	mls	r3, r8, r1, r3
 8001074:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001078:	fb01 f307 	mul.w	r3, r1, r7
 800107c:	42a3      	cmp	r3, r4
 800107e:	d908      	bls.n	8001092 <__udivmoddi4+0x276>
 8001080:	eb1c 0404 	adds.w	r4, ip, r4
 8001084:	f101 36ff 	add.w	r6, r1, #4294967295
 8001088:	d213      	bcs.n	80010b2 <__udivmoddi4+0x296>
 800108a:	42a3      	cmp	r3, r4
 800108c:	d911      	bls.n	80010b2 <__udivmoddi4+0x296>
 800108e:	3902      	subs	r1, #2
 8001090:	4464      	add	r4, ip
 8001092:	1ae4      	subs	r4, r4, r3
 8001094:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001098:	e739      	b.n	8000f0e <__udivmoddi4+0xf2>
 800109a:	4604      	mov	r4, r0
 800109c:	e6f0      	b.n	8000e80 <__udivmoddi4+0x64>
 800109e:	4608      	mov	r0, r1
 80010a0:	e706      	b.n	8000eb0 <__udivmoddi4+0x94>
 80010a2:	45c8      	cmp	r8, r9
 80010a4:	d2ae      	bcs.n	8001004 <__udivmoddi4+0x1e8>
 80010a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80010aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80010ae:	3801      	subs	r0, #1
 80010b0:	e7a8      	b.n	8001004 <__udivmoddi4+0x1e8>
 80010b2:	4631      	mov	r1, r6
 80010b4:	e7ed      	b.n	8001092 <__udivmoddi4+0x276>
 80010b6:	4603      	mov	r3, r0
 80010b8:	e799      	b.n	8000fee <__udivmoddi4+0x1d2>
 80010ba:	4630      	mov	r0, r6
 80010bc:	e7d4      	b.n	8001068 <__udivmoddi4+0x24c>
 80010be:	46d6      	mov	lr, sl
 80010c0:	e77f      	b.n	8000fc2 <__udivmoddi4+0x1a6>
 80010c2:	4463      	add	r3, ip
 80010c4:	3802      	subs	r0, #2
 80010c6:	e74d      	b.n	8000f64 <__udivmoddi4+0x148>
 80010c8:	4606      	mov	r6, r0
 80010ca:	4623      	mov	r3, r4
 80010cc:	4608      	mov	r0, r1
 80010ce:	e70f      	b.n	8000ef0 <__udivmoddi4+0xd4>
 80010d0:	3e02      	subs	r6, #2
 80010d2:	4463      	add	r3, ip
 80010d4:	e730      	b.n	8000f38 <__udivmoddi4+0x11c>
 80010d6:	bf00      	nop

080010d8 <__aeabi_idiv0>:
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop

080010dc <easyCase>:
//void Reset(){  	Didn't use for now
//	registerFrame[0x01].U16 = 0;
//	registerFrame[0x10].U16 = 0;
//}

void easyCase(){
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
	base.Base_case = registerFrame[0x01].U16;
 80010e0:	4b09      	ldr	r3, [pc, #36]	@ (8001108 <easyCase+0x2c>)
 80010e2:	885a      	ldrh	r2, [r3, #2]
 80010e4:	4b09      	ldr	r3, [pc, #36]	@ (800110c <easyCase+0x30>)
 80010e6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	base.Vacuum_case = registerFrame[0x02].U16;
 80010ea:	4b07      	ldr	r3, [pc, #28]	@ (8001108 <easyCase+0x2c>)
 80010ec:	889a      	ldrh	r2, [r3, #4]
 80010ee:	4b07      	ldr	r3, [pc, #28]	@ (800110c <easyCase+0x30>)
 80010f0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
	base.Gripper_case = registerFrame[0x03].U16;
 80010f4:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <easyCase+0x2c>)
 80010f6:	88da      	ldrh	r2, [r3, #6]
 80010f8:	4b04      	ldr	r3, [pc, #16]	@ (800110c <easyCase+0x30>)
 80010fa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
}
 80010fe:	bf00      	nop
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	2000110c 	.word	0x2000110c
 800110c:	20000300 	.word	0x20000300

08001110 <Heartbeat>:

void Heartbeat(){
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
	registerFrame[0x00].U16 = 22881;
 8001114:	4b04      	ldr	r3, [pc, #16]	@ (8001128 <Heartbeat+0x18>)
 8001116:	f645 1261 	movw	r2, #22881	@ 0x5961
 800111a:	801a      	strh	r2, [r3, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	2000110c 	.word	0x2000110c

0800112c <Routine>:

void Routine(){
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	if(registerFrame[0x00].U16 == 18537)
 8001130:	4b29      	ldr	r3, [pc, #164]	@ (80011d8 <Routine+0xac>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	f644 0269 	movw	r2, #18537	@ 0x4869
 8001138:	4293      	cmp	r3, r2
 800113a:	d14a      	bne.n	80011d2 <Routine+0xa6>
	{
		//Gripper 0x04 not sure!?!?
		registerFrame[0x04].U16 = base.ReedStatus;   					//Gripper status 0b0010 = 0000 0000 0000 0010
 800113c:	4b27      	ldr	r3, [pc, #156]	@ (80011dc <Routine+0xb0>)
 800113e:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8001142:	4b25      	ldr	r3, [pc, #148]	@ (80011d8 <Routine+0xac>)
 8001144:	811a      	strh	r2, [r3, #8]
		registerFrame[0x10].U16 = base.BaseStatus;							//Z-axis status 0010 = 1
 8001146:	4b25      	ldr	r3, [pc, #148]	@ (80011dc <Routine+0xb0>)
 8001148:	881a      	ldrh	r2, [r3, #0]
 800114a:	4b23      	ldr	r3, [pc, #140]	@ (80011d8 <Routine+0xac>)
 800114c:	841a      	strh	r2, [r3, #32]
		registerFrame[0x11].U16 = AMT.Linear_Position			*10;	//Z-axis position
 800114e:	4b24      	ldr	r3, [pc, #144]	@ (80011e0 <Routine+0xb4>)
 8001150:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001154:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001158:	ee67 7a87 	vmul.f32	s15, s15, s14
 800115c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001160:	ee17 3a90 	vmov	r3, s15
 8001164:	b29a      	uxth	r2, r3
 8001166:	4b1c      	ldr	r3, [pc, #112]	@ (80011d8 <Routine+0xac>)
 8001168:	845a      	strh	r2, [r3, #34]	@ 0x22
		registerFrame[0x12].U16 = fabs(AMT.Linear_Velocity)		*10;	//Z-axis speed
 800116a:	4b1d      	ldr	r3, [pc, #116]	@ (80011e0 <Routine+0xb4>)
 800116c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001170:	eef0 7ae7 	vabs.f32	s15, s15
 8001174:	ee17 0a90 	vmov	r0, s15
 8001178:	f7ff f9b2 	bl	80004e0 <__aeabi_f2d>
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	4b18      	ldr	r3, [pc, #96]	@ (80011e4 <Routine+0xb8>)
 8001182:	f7ff fa05 	bl	8000590 <__aeabi_dmul>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f7ff fcaf 	bl	8000af0 <__aeabi_d2uiz>
 8001192:	4603      	mov	r3, r0
 8001194:	b29a      	uxth	r2, r3
 8001196:	4b10      	ldr	r3, [pc, #64]	@ (80011d8 <Routine+0xac>)
 8001198:	849a      	strh	r2, [r3, #36]	@ 0x24
		registerFrame[0x13].U16 = fabs(AMT.Linear_Acceleration)	*10;	//Z-axis acceleration
 800119a:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <Routine+0xb4>)
 800119c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80011a0:	eef0 7ae7 	vabs.f32	s15, s15
 80011a4:	ee17 0a90 	vmov	r0, s15
 80011a8:	f7ff f99a 	bl	80004e0 <__aeabi_f2d>
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <Routine+0xb8>)
 80011b2:	f7ff f9ed 	bl	8000590 <__aeabi_dmul>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4610      	mov	r0, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	f7ff fc97 	bl	8000af0 <__aeabi_d2uiz>
 80011c2:	4603      	mov	r3, r0
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	4b04      	ldr	r3, [pc, #16]	@ (80011d8 <Routine+0xac>)
 80011c8:	84da      	strh	r2, [r3, #38]	@ 0x26
		registerFrame[0x40].U16 = 4								*10;	//X-axis position
 80011ca:	4b03      	ldr	r3, [pc, #12]	@ (80011d8 <Routine+0xac>)
 80011cc:	2228      	movs	r2, #40	@ 0x28
 80011ce:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
	}
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	2000110c 	.word	0x2000110c
 80011dc:	20000300 	.word	0x20000300
 80011e0:	20000b48 	.word	0x20000b48
 80011e4:	40240000 	.word	0x40240000

080011e8 <Vacuum>:

void Vacuum(){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	if(registerFrame[0x02].U16 == 0b0000){
 80011ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001224 <Vacuum+0x3c>)
 80011ee:	889b      	ldrh	r3, [r3, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d108      	bne.n	8001206 <Vacuum+0x1e>
		base.Vacuum = 0;			//Vacuum status: Off
 80011f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001228 <Vacuum+0x40>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	829a      	strh	r2, [r3, #20]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, RESET);			// Vacuum off
 80011fa:	2200      	movs	r2, #0
 80011fc:	2120      	movs	r1, #32
 80011fe:	480b      	ldr	r0, [pc, #44]	@ (800122c <Vacuum+0x44>)
 8001200:	f005 f98c 	bl	800651c <HAL_GPIO_WritePin>
	else if(registerFrame[0x02].U16 == 0b0001){
		base.Vacuum = 1;			//Vacuum status: On
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, SET);			// Vacuum on

	}
}
 8001204:	e00b      	b.n	800121e <Vacuum+0x36>
	else if(registerFrame[0x02].U16 == 0b0001){
 8001206:	4b07      	ldr	r3, [pc, #28]	@ (8001224 <Vacuum+0x3c>)
 8001208:	889b      	ldrh	r3, [r3, #4]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d107      	bne.n	800121e <Vacuum+0x36>
		base.Vacuum = 1;			//Vacuum status: On
 800120e:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <Vacuum+0x40>)
 8001210:	2201      	movs	r2, #1
 8001212:	829a      	strh	r2, [r3, #20]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, SET);			// Vacuum on
 8001214:	2201      	movs	r2, #1
 8001216:	2120      	movs	r1, #32
 8001218:	4804      	ldr	r0, [pc, #16]	@ (800122c <Vacuum+0x44>)
 800121a:	f005 f97f 	bl	800651c <HAL_GPIO_WritePin>
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	2000110c 	.word	0x2000110c
 8001228:	20000300 	.word	0x20000300
 800122c:	48000800 	.word	0x48000800

08001230 <GripperMovement>:

void GripperMovement(){
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	if(registerFrame[0x03].U16 == 0b0000){
 8001234:	4b14      	ldr	r3, [pc, #80]	@ (8001288 <GripperMovement+0x58>)
 8001236:	88db      	ldrh	r3, [r3, #6]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d10f      	bne.n	800125c <GripperMovement+0x2c>
		base.Gripper = 0;			//Gripper Movement: Backward
 800123c:	4b13      	ldr	r3, [pc, #76]	@ (800128c <GripperMovement+0x5c>)
 800123e:	2200      	movs	r2, #0
 8001240:	82da      	strh	r2, [r3, #22]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, SET);			// Backward
 8001242:	2201      	movs	r2, #1
 8001244:	2110      	movs	r1, #16
 8001246:	4812      	ldr	r0, [pc, #72]	@ (8001290 <GripperMovement+0x60>)
 8001248:	f005 f968 	bl	800651c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 800124c:	2200      	movs	r2, #0
 800124e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001252:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001256:	f005 f961 	bl	800651c <HAL_GPIO_WritePin>
	else if(registerFrame[0x03].U16 == 0b0001){
		base.Gripper = 1;			//Gripper Movement: Forward
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);			//Forward
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
	}
}
 800125a:	e012      	b.n	8001282 <GripperMovement+0x52>
	else if(registerFrame[0x03].U16 == 0b0001){
 800125c:	4b0a      	ldr	r3, [pc, #40]	@ (8001288 <GripperMovement+0x58>)
 800125e:	88db      	ldrh	r3, [r3, #6]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d10e      	bne.n	8001282 <GripperMovement+0x52>
		base.Gripper = 1;			//Gripper Movement: Forward
 8001264:	4b09      	ldr	r3, [pc, #36]	@ (800128c <GripperMovement+0x5c>)
 8001266:	2201      	movs	r2, #1
 8001268:	82da      	strh	r2, [r3, #22]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);			//Forward
 800126a:	2200      	movs	r2, #0
 800126c:	2110      	movs	r1, #16
 800126e:	4808      	ldr	r0, [pc, #32]	@ (8001290 <GripperMovement+0x60>)
 8001270:	f005 f954 	bl	800651c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 8001274:	2201      	movs	r2, #1
 8001276:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800127a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800127e:	f005 f94d 	bl	800651c <HAL_GPIO_WritePin>
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	2000110c 	.word	0x2000110c
 800128c:	20000300 	.word	0x20000300
 8001290:	48000800 	.word	0x48000800

08001294 <SetShelves>:



void SetShelves(){
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	base.ShelveMode = 1;
 8001298:	4b40      	ldr	r3, [pc, #256]	@ (800139c <SetShelves+0x108>)
 800129a:	2201      	movs	r2, #1
 800129c:	831a      	strh	r2, [r3, #24]
	PS2X_Reader();
 800129e:	f001 fc51 	bl	8002b44 <PS2X_Reader>
	if(ps2.ps2RX[0] == 74){
 80012a2:	4b3f      	ldr	r3, [pc, #252]	@ (80013a0 <SetShelves+0x10c>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b4a      	cmp	r3, #74	@ 0x4a
 80012a8:	d102      	bne.n	80012b0 <SetShelves+0x1c>
		ps2.stop = 1;
 80012aa:	4b3d      	ldr	r3, [pc, #244]	@ (80013a0 <SetShelves+0x10c>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	671a      	str	r2, [r3, #112]	@ 0x70
	}
	if (ps2.stop == 1 && ps2.ps2RX[0] == 75){
 80012b0:	4b3b      	ldr	r3, [pc, #236]	@ (80013a0 <SetShelves+0x10c>)
 80012b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d10b      	bne.n	80012d0 <SetShelves+0x3c>
 80012b8:	4b39      	ldr	r3, [pc, #228]	@ (80013a0 <SetShelves+0x10c>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b4b      	cmp	r3, #75	@ 0x4b
 80012be:	d107      	bne.n	80012d0 <SetShelves+0x3c>
		ps2.stop = 0;
 80012c0:	4b37      	ldr	r3, [pc, #220]	@ (80013a0 <SetShelves+0x10c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	671a      	str	r2, [r3, #112]	@ 0x70
		base.MotorHome = 150;
 80012c6:	4b35      	ldr	r3, [pc, #212]	@ (800139c <SetShelves+0x108>)
 80012c8:	2296      	movs	r2, #150	@ 0x96
 80012ca:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
 80012ce:	e005      	b.n	80012dc <SetShelves+0x48>
	}
		  else if(ps2.stop == 0){
 80012d0:	4b33      	ldr	r3, [pc, #204]	@ (80013a0 <SetShelves+0x10c>)
 80012d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d101      	bne.n	80012dc <SetShelves+0x48>
			  PS2X_Reader();
 80012d8:	f001 fc34 	bl	8002b44 <PS2X_Reader>
	  	  }
	if (base.ShelveMode == 0)
 80012dc:	4b2f      	ldr	r3, [pc, #188]	@ (800139c <SetShelves+0x108>)
 80012de:	8b1b      	ldrh	r3, [r3, #24]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d158      	bne.n	8001396 <SetShelves+0x102>
	{
		registerFrame[0x23].U16 = base.Shelve[0] *10; 	//Position Shelve 1
 80012e4:	4b2d      	ldr	r3, [pc, #180]	@ (800139c <SetShelves+0x108>)
 80012e6:	edd3 7a07 	vldr	s15, [r3, #28]
 80012ea:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80012ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012f6:	ee17 3a90 	vmov	r3, s15
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	4b29      	ldr	r3, [pc, #164]	@ (80013a4 <SetShelves+0x110>)
 80012fe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
		registerFrame[0x24].U16 = base.Shelve[1] *10;
 8001302:	4b26      	ldr	r3, [pc, #152]	@ (800139c <SetShelves+0x108>)
 8001304:	edd3 7a08 	vldr	s15, [r3, #32]
 8001308:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800130c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001310:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001314:	ee17 3a90 	vmov	r3, s15
 8001318:	b29a      	uxth	r2, r3
 800131a:	4b22      	ldr	r3, [pc, #136]	@ (80013a4 <SetShelves+0x110>)
 800131c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
		registerFrame[0x25].U16 = base.Shelve[2] *10;
 8001320:	4b1e      	ldr	r3, [pc, #120]	@ (800139c <SetShelves+0x108>)
 8001322:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001326:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800132a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800132e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001332:	ee17 3a90 	vmov	r3, s15
 8001336:	b29a      	uxth	r2, r3
 8001338:	4b1a      	ldr	r3, [pc, #104]	@ (80013a4 <SetShelves+0x110>)
 800133a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
		registerFrame[0x26].U16 = base.Shelve[3] *10;
 800133e:	4b17      	ldr	r3, [pc, #92]	@ (800139c <SetShelves+0x108>)
 8001340:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001344:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001348:	ee67 7a87 	vmul.f32	s15, s15, s14
 800134c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001350:	ee17 3a90 	vmov	r3, s15
 8001354:	b29a      	uxth	r2, r3
 8001356:	4b13      	ldr	r3, [pc, #76]	@ (80013a4 <SetShelves+0x110>)
 8001358:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
		registerFrame[0x27].U16 = base.Shelve[4] *10;
 800135c:	4b0f      	ldr	r3, [pc, #60]	@ (800139c <SetShelves+0x108>)
 800135e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001362:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800136e:	ee17 3a90 	vmov	r3, s15
 8001372:	b29a      	uxth	r2, r3
 8001374:	4b0b      	ldr	r3, [pc, #44]	@ (80013a4 <SetShelves+0x110>)
 8001376:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

		//finish
		base.BaseStatus = 0;
 800137a:	4b08      	ldr	r3, [pc, #32]	@ (800139c <SetShelves+0x108>)
 800137c:	2200      	movs	r2, #0
 800137e:	801a      	strh	r2, [r3, #0]
		registerFrame[0x01].U16 = 0;
 8001380:	4b08      	ldr	r3, [pc, #32]	@ (80013a4 <SetShelves+0x110>)
 8001382:	2200      	movs	r2, #0
 8001384:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = base.BaseStatus;
 8001386:	4b05      	ldr	r3, [pc, #20]	@ (800139c <SetShelves+0x108>)
 8001388:	881a      	ldrh	r2, [r3, #0]
 800138a:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <SetShelves+0x110>)
 800138c:	841a      	strh	r2, [r3, #32]
		base.Base_case = 0;
 800138e:	4b03      	ldr	r3, [pc, #12]	@ (800139c <SetShelves+0x108>)
 8001390:	2200      	movs	r2, #0
 8001392:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	}
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000300 	.word	0x20000300
 80013a0:	20000b88 	.word	0x20000b88
 80013a4:	2000110c 	.word	0x2000110c

080013a8 <RunPoint>:

void RunPoint(){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
	base.GoalPoint = (registerFrame[0x30].U16)/10; //Get Goal point from BaseSytem(Point Mode) that we pick/write After pressing Run Button
 80013ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001428 <RunPoint+0x80>)
 80013ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80013b2:	4a1e      	ldr	r2, [pc, #120]	@ (800142c <RunPoint+0x84>)
 80013b4:	fba2 2303 	umull	r2, r3, r2, r3
 80013b8:	08db      	lsrs	r3, r3, #3
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	ee07 3a90 	vmov	s15, r3
 80013c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001430 <RunPoint+0x88>)
 80013c6:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
//	registerFrame[0x01].U16 = 8;
//	PID_controller_cascade(&PID_pos, &PID_velo, &AMT, Traj.currentPosition);
//	base.MotorHome = PID_velo.out;
	// Task Done
	if(fabs(AMT.Linear_Position - base.GoalPoint) <= 0.1){
 80013ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001434 <RunPoint+0x8c>)
 80013cc:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80013d0:	4b17      	ldr	r3, [pc, #92]	@ (8001430 <RunPoint+0x88>)
 80013d2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80013d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013da:	eef0 7ae7 	vabs.f32	s15, s15
 80013de:	ee17 0a90 	vmov	r0, s15
 80013e2:	f7ff f87d 	bl	80004e0 <__aeabi_f2d>
 80013e6:	a30e      	add	r3, pc, #56	@ (adr r3, 8001420 <RunPoint+0x78>)
 80013e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ec:	f7ff fb4c 	bl	8000a88 <__aeabi_dcmple>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d100      	bne.n	80013f8 <RunPoint+0x50>
		base.BaseStatus = 0;
		base.MotorHome = 150;
		registerFrame[0x01].U16 = 0;
		registerFrame[0x10].U16 = base.BaseStatus;
	}
}
 80013f6:	e011      	b.n	800141c <RunPoint+0x74>
		elapsedTime = 0;
 80013f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001438 <RunPoint+0x90>)
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
		base.BaseStatus = 0;
 8001400:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <RunPoint+0x88>)
 8001402:	2200      	movs	r2, #0
 8001404:	801a      	strh	r2, [r3, #0]
		base.MotorHome = 150;
 8001406:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <RunPoint+0x88>)
 8001408:	2296      	movs	r2, #150	@ 0x96
 800140a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
		registerFrame[0x01].U16 = 0;
 800140e:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <RunPoint+0x80>)
 8001410:	2200      	movs	r2, #0
 8001412:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = base.BaseStatus;
 8001414:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <RunPoint+0x88>)
 8001416:	881a      	ldrh	r2, [r3, #0]
 8001418:	4b03      	ldr	r3, [pc, #12]	@ (8001428 <RunPoint+0x80>)
 800141a:	841a      	strh	r2, [r3, #32]
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	9999999a 	.word	0x9999999a
 8001424:	3fb99999 	.word	0x3fb99999
 8001428:	2000110c 	.word	0x2000110c
 800142c:	cccccccd 	.word	0xcccccccd
 8001430:	20000300 	.word	0x20000300
 8001434:	20000b48 	.word	0x20000b48
 8001438:	20001108 	.word	0x20001108

0800143c <SetHome>:

void SetHome(){
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
	//	registerFrame[0x01].U16 = 2;
	base.MotorHome = 350;		// Set duty cycle to go upward at slowest speed
 8001440:	4b0f      	ldr	r3, [pc, #60]	@ (8001480 <SetHome+0x44>)
 8001442:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8001446:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET)		// Top photo limit was triggered
 800144a:	2140      	movs	r1, #64	@ 0x40
 800144c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001450:	f005 f84c 	bl	80064ec <HAL_GPIO_ReadPin>
 8001454:	4603      	mov	r3, r0
 8001456:	2b01      	cmp	r3, #1
 8001458:	d110      	bne.n	800147c <SetHome+0x40>
	{
		base.BaseStatus = 0;
 800145a:	4b09      	ldr	r3, [pc, #36]	@ (8001480 <SetHome+0x44>)
 800145c:	2200      	movs	r2, #0
 800145e:	801a      	strh	r2, [r3, #0]
		base.MotorHome = 150;		// Set duty cycle to hold position gripper
 8001460:	4b07      	ldr	r3, [pc, #28]	@ (8001480 <SetHome+0x44>)
 8001462:	2296      	movs	r2, #150	@ 0x96
 8001464:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
		AMT_encoder_reset(&AMT);	// Set linear position to ...
 8001468:	4806      	ldr	r0, [pc, #24]	@ (8001484 <SetHome+0x48>)
 800146a:	f000 fbcb 	bl	8001c04 <AMT_encoder_reset>
		registerFrame[0x01].U16 = 0;
 800146e:	4b06      	ldr	r3, [pc, #24]	@ (8001488 <SetHome+0x4c>)
 8001470:	2200      	movs	r2, #0
 8001472:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = base.BaseStatus;
 8001474:	4b02      	ldr	r3, [pc, #8]	@ (8001480 <SetHome+0x44>)
 8001476:	881a      	ldrh	r2, [r3, #0]
 8001478:	4b03      	ldr	r3, [pc, #12]	@ (8001488 <SetHome+0x4c>)
 800147a:	841a      	strh	r2, [r3, #32]

	}
}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000300 	.word	0x20000300
 8001484:	20000b48 	.word	0x20000b48
 8001488:	2000110c 	.word	0x2000110c
 800148c:	00000000 	.word	0x00000000

08001490 <RunJog>:

void RunJog(){
 8001490:	b5b0      	push	{r4, r5, r7, lr}
 8001492:	af00      	add	r7, sp, #0
//	base.Pick[0] = registerFrame[0x21].U16 ; 	//Get Pick from BaseSystem
	registerFrame[0x10].U16 = 4;
 8001494:	4bc6      	ldr	r3, [pc, #792]	@ (80017b0 <RunJog+0x320>)
 8001496:	2204      	movs	r2, #4
 8001498:	841a      	strh	r2, [r3, #32]
	base.Pick[4] = registerFrame[0x21].U16 % 10;
 800149a:	4bc5      	ldr	r3, [pc, #788]	@ (80017b0 <RunJog+0x320>)
 800149c:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 80014a0:	4bc4      	ldr	r3, [pc, #784]	@ (80017b4 <RunJog+0x324>)
 80014a2:	fba3 1302 	umull	r1, r3, r3, r2
 80014a6:	08d9      	lsrs	r1, r3, #3
 80014a8:	460b      	mov	r3, r1
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	440b      	add	r3, r1
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	4bc0      	ldr	r3, [pc, #768]	@ (80017b8 <RunJog+0x328>)
 80014b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
	base.Pick[3] = ((registerFrame[0x21].U16 - base.Pick[4]) % 100)/10;
 80014b8:	4bbd      	ldr	r3, [pc, #756]	@ (80017b0 <RunJog+0x320>)
 80014ba:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80014be:	461a      	mov	r2, r3
 80014c0:	4bbd      	ldr	r3, [pc, #756]	@ (80017b8 <RunJog+0x328>)
 80014c2:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80014c4:	1ad2      	subs	r2, r2, r3
 80014c6:	4bbd      	ldr	r3, [pc, #756]	@ (80017bc <RunJog+0x32c>)
 80014c8:	fb83 1302 	smull	r1, r3, r3, r2
 80014cc:	1159      	asrs	r1, r3, #5
 80014ce:	17d3      	asrs	r3, r2, #31
 80014d0:	1acb      	subs	r3, r1, r3
 80014d2:	2164      	movs	r1, #100	@ 0x64
 80014d4:	fb01 f303 	mul.w	r3, r1, r3
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	4ab9      	ldr	r2, [pc, #740]	@ (80017c0 <RunJog+0x330>)
 80014dc:	fb82 1203 	smull	r1, r2, r2, r3
 80014e0:	1092      	asrs	r2, r2, #2
 80014e2:	17db      	asrs	r3, r3, #31
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	4bb3      	ldr	r3, [pc, #716]	@ (80017b8 <RunJog+0x328>)
 80014ea:	875a      	strh	r2, [r3, #58]	@ 0x3a
	base.Pick[2] = ((registerFrame[0x21].U16 %1000) - ((base.Pick[3]*10)+base.Pick[4]))/100;
 80014ec:	4bb0      	ldr	r3, [pc, #704]	@ (80017b0 <RunJog+0x320>)
 80014ee:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80014f2:	4ab4      	ldr	r2, [pc, #720]	@ (80017c4 <RunJog+0x334>)
 80014f4:	fba2 1203 	umull	r1, r2, r2, r3
 80014f8:	0992      	lsrs	r2, r2, #6
 80014fa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80014fe:	fb01 f202 	mul.w	r2, r1, r2
 8001502:	1a9b      	subs	r3, r3, r2
 8001504:	b29b      	uxth	r3, r3
 8001506:	4619      	mov	r1, r3
 8001508:	4bab      	ldr	r3, [pc, #684]	@ (80017b8 <RunJog+0x328>)
 800150a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800150c:	461a      	mov	r2, r3
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	461a      	mov	r2, r3
 8001518:	4ba7      	ldr	r3, [pc, #668]	@ (80017b8 <RunJog+0x328>)
 800151a:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800151c:	4413      	add	r3, r2
 800151e:	1acb      	subs	r3, r1, r3
 8001520:	4aa6      	ldr	r2, [pc, #664]	@ (80017bc <RunJog+0x32c>)
 8001522:	fb82 1203 	smull	r1, r2, r2, r3
 8001526:	1152      	asrs	r2, r2, #5
 8001528:	17db      	asrs	r3, r3, #31
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	b29a      	uxth	r2, r3
 800152e:	4ba2      	ldr	r3, [pc, #648]	@ (80017b8 <RunJog+0x328>)
 8001530:	871a      	strh	r2, [r3, #56]	@ 0x38
	base.Pick[1] = ((registerFrame[0x21].U16 %10000)-(((base.Pick[2]*100)+(base.Pick[3]*10)+base.Pick[4])))/1000;
 8001532:	4b9f      	ldr	r3, [pc, #636]	@ (80017b0 <RunJog+0x320>)
 8001534:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001538:	4aa3      	ldr	r2, [pc, #652]	@ (80017c8 <RunJog+0x338>)
 800153a:	fba2 1203 	umull	r1, r2, r2, r3
 800153e:	0b52      	lsrs	r2, r2, #13
 8001540:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001544:	fb01 f202 	mul.w	r2, r1, r2
 8001548:	1a9b      	subs	r3, r3, r2
 800154a:	b29b      	uxth	r3, r3
 800154c:	4618      	mov	r0, r3
 800154e:	4b9a      	ldr	r3, [pc, #616]	@ (80017b8 <RunJog+0x328>)
 8001550:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8001552:	461a      	mov	r2, r3
 8001554:	2364      	movs	r3, #100	@ 0x64
 8001556:	fb03 f202 	mul.w	r2, r3, r2
 800155a:	4b97      	ldr	r3, [pc, #604]	@ (80017b8 <RunJog+0x328>)
 800155c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800155e:	4619      	mov	r1, r3
 8001560:	460b      	mov	r3, r1
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	4413      	add	r3, r2
 800156a:	4a93      	ldr	r2, [pc, #588]	@ (80017b8 <RunJog+0x328>)
 800156c:	8f92      	ldrh	r2, [r2, #60]	@ 0x3c
 800156e:	4413      	add	r3, r2
 8001570:	1ac3      	subs	r3, r0, r3
 8001572:	4a94      	ldr	r2, [pc, #592]	@ (80017c4 <RunJog+0x334>)
 8001574:	fb82 1203 	smull	r1, r2, r2, r3
 8001578:	1192      	asrs	r2, r2, #6
 800157a:	17db      	asrs	r3, r3, #31
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	b29a      	uxth	r2, r3
 8001580:	4b8d      	ldr	r3, [pc, #564]	@ (80017b8 <RunJog+0x328>)
 8001582:	86da      	strh	r2, [r3, #54]	@ 0x36
	base.Pick[0] = (registerFrame[0x21].U16-((base.Pick[1]*1000+base.Pick[2]*100+base.Pick[3]*10+base.Pick[4])))/10000;
 8001584:	4b8a      	ldr	r3, [pc, #552]	@ (80017b0 <RunJog+0x320>)
 8001586:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 800158a:	4618      	mov	r0, r3
 800158c:	4b8a      	ldr	r3, [pc, #552]	@ (80017b8 <RunJog+0x328>)
 800158e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001590:	461a      	mov	r2, r3
 8001592:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001596:	fb03 f202 	mul.w	r2, r3, r2
 800159a:	4b87      	ldr	r3, [pc, #540]	@ (80017b8 <RunJog+0x328>)
 800159c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800159e:	4619      	mov	r1, r3
 80015a0:	2364      	movs	r3, #100	@ 0x64
 80015a2:	fb01 f303 	mul.w	r3, r1, r3
 80015a6:	441a      	add	r2, r3
 80015a8:	4b83      	ldr	r3, [pc, #524]	@ (80017b8 <RunJog+0x328>)
 80015aa:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80015ac:	4619      	mov	r1, r3
 80015ae:	460b      	mov	r3, r1
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	440b      	add	r3, r1
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	4413      	add	r3, r2
 80015b8:	4a7f      	ldr	r2, [pc, #508]	@ (80017b8 <RunJog+0x328>)
 80015ba:	8f92      	ldrh	r2, [r2, #60]	@ 0x3c
 80015bc:	4413      	add	r3, r2
 80015be:	1ac3      	subs	r3, r0, r3
 80015c0:	4a82      	ldr	r2, [pc, #520]	@ (80017cc <RunJog+0x33c>)
 80015c2:	fb82 1203 	smull	r1, r2, r2, r3
 80015c6:	1312      	asrs	r2, r2, #12
 80015c8:	17db      	asrs	r3, r3, #31
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	4b7a      	ldr	r3, [pc, #488]	@ (80017b8 <RunJog+0x328>)
 80015d0:	869a      	strh	r2, [r3, #52]	@ 0x34

	base.Place[4] = registerFrame[0x22].U16 % 10;
 80015d2:	4b77      	ldr	r3, [pc, #476]	@ (80017b0 <RunJog+0x320>)
 80015d4:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 80015d8:	4b76      	ldr	r3, [pc, #472]	@ (80017b4 <RunJog+0x324>)
 80015da:	fba3 1302 	umull	r1, r3, r3, r2
 80015de:	08d9      	lsrs	r1, r3, #3
 80015e0:	460b      	mov	r3, r1
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	440b      	add	r3, r1
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	4b72      	ldr	r3, [pc, #456]	@ (80017b8 <RunJog+0x328>)
 80015ee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
	base.Place[3] = ((registerFrame[0x22].U16 - base.Place[4]) % 100)/10;
 80015f2:	4b6f      	ldr	r3, [pc, #444]	@ (80017b0 <RunJog+0x320>)
 80015f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b6f      	ldr	r3, [pc, #444]	@ (80017b8 <RunJog+0x328>)
 80015fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001600:	1ad2      	subs	r2, r2, r3
 8001602:	4b6e      	ldr	r3, [pc, #440]	@ (80017bc <RunJog+0x32c>)
 8001604:	fb83 1302 	smull	r1, r3, r3, r2
 8001608:	1159      	asrs	r1, r3, #5
 800160a:	17d3      	asrs	r3, r2, #31
 800160c:	1acb      	subs	r3, r1, r3
 800160e:	2164      	movs	r1, #100	@ 0x64
 8001610:	fb01 f303 	mul.w	r3, r1, r3
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	4a6a      	ldr	r2, [pc, #424]	@ (80017c0 <RunJog+0x330>)
 8001618:	fb82 1203 	smull	r1, r2, r2, r3
 800161c:	1092      	asrs	r2, r2, #2
 800161e:	17db      	asrs	r3, r3, #31
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	b29a      	uxth	r2, r3
 8001624:	4b64      	ldr	r3, [pc, #400]	@ (80017b8 <RunJog+0x328>)
 8001626:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	base.Place[2] = ((registerFrame[0x22].U16 %1000) - ((base.Place[3]*10)+base.Place[4]))/100;
 800162a:	4b61      	ldr	r3, [pc, #388]	@ (80017b0 <RunJog+0x320>)
 800162c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001630:	4a64      	ldr	r2, [pc, #400]	@ (80017c4 <RunJog+0x334>)
 8001632:	fba2 1203 	umull	r1, r2, r2, r3
 8001636:	0992      	lsrs	r2, r2, #6
 8001638:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800163c:	fb01 f202 	mul.w	r2, r1, r2
 8001640:	1a9b      	subs	r3, r3, r2
 8001642:	b29b      	uxth	r3, r3
 8001644:	4619      	mov	r1, r3
 8001646:	4b5c      	ldr	r3, [pc, #368]	@ (80017b8 <RunJog+0x328>)
 8001648:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800164c:	461a      	mov	r2, r3
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	461a      	mov	r2, r3
 8001658:	4b57      	ldr	r3, [pc, #348]	@ (80017b8 <RunJog+0x328>)
 800165a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800165e:	4413      	add	r3, r2
 8001660:	1acb      	subs	r3, r1, r3
 8001662:	4a56      	ldr	r2, [pc, #344]	@ (80017bc <RunJog+0x32c>)
 8001664:	fb82 1203 	smull	r1, r2, r2, r3
 8001668:	1152      	asrs	r2, r2, #5
 800166a:	17db      	asrs	r3, r3, #31
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	b29a      	uxth	r2, r3
 8001670:	4b51      	ldr	r3, [pc, #324]	@ (80017b8 <RunJog+0x328>)
 8001672:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
	base.Place[1] = ((registerFrame[0x22].U16 %10000)-(((base.Place[2]*100)+(base.Place[3]*10)+base.Place[4])))/1000;
 8001676:	4b4e      	ldr	r3, [pc, #312]	@ (80017b0 <RunJog+0x320>)
 8001678:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800167c:	4a52      	ldr	r2, [pc, #328]	@ (80017c8 <RunJog+0x338>)
 800167e:	fba2 1203 	umull	r1, r2, r2, r3
 8001682:	0b52      	lsrs	r2, r2, #13
 8001684:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001688:	fb01 f202 	mul.w	r2, r1, r2
 800168c:	1a9b      	subs	r3, r3, r2
 800168e:	b29b      	uxth	r3, r3
 8001690:	4618      	mov	r0, r3
 8001692:	4b49      	ldr	r3, [pc, #292]	@ (80017b8 <RunJog+0x328>)
 8001694:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001698:	461a      	mov	r2, r3
 800169a:	2364      	movs	r3, #100	@ 0x64
 800169c:	fb03 f202 	mul.w	r2, r3, r2
 80016a0:	4b45      	ldr	r3, [pc, #276]	@ (80017b8 <RunJog+0x328>)
 80016a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80016a6:	4619      	mov	r1, r3
 80016a8:	460b      	mov	r3, r1
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	440b      	add	r3, r1
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	4413      	add	r3, r2
 80016b2:	4a41      	ldr	r2, [pc, #260]	@ (80017b8 <RunJog+0x328>)
 80016b4:	f8b2 2046 	ldrh.w	r2, [r2, #70]	@ 0x46
 80016b8:	4413      	add	r3, r2
 80016ba:	1ac3      	subs	r3, r0, r3
 80016bc:	4a41      	ldr	r2, [pc, #260]	@ (80017c4 <RunJog+0x334>)
 80016be:	fb82 1203 	smull	r1, r2, r2, r3
 80016c2:	1192      	asrs	r2, r2, #6
 80016c4:	17db      	asrs	r3, r3, #31
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	4b3b      	ldr	r3, [pc, #236]	@ (80017b8 <RunJog+0x328>)
 80016cc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	base.Place[0] = (registerFrame[0x22].U16-((base.Place[1]*1000+base.Place[2]*100+base.Place[3]*10+base.Place[4])))/10000;
 80016d0:	4b37      	ldr	r3, [pc, #220]	@ (80017b0 <RunJog+0x320>)
 80016d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80016d6:	4618      	mov	r0, r3
 80016d8:	4b37      	ldr	r3, [pc, #220]	@ (80017b8 <RunJog+0x328>)
 80016da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80016de:	461a      	mov	r2, r3
 80016e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016e4:	fb03 f202 	mul.w	r2, r3, r2
 80016e8:	4b33      	ldr	r3, [pc, #204]	@ (80017b8 <RunJog+0x328>)
 80016ea:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80016ee:	4619      	mov	r1, r3
 80016f0:	2364      	movs	r3, #100	@ 0x64
 80016f2:	fb01 f303 	mul.w	r3, r1, r3
 80016f6:	441a      	add	r2, r3
 80016f8:	4b2f      	ldr	r3, [pc, #188]	@ (80017b8 <RunJog+0x328>)
 80016fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80016fe:	4619      	mov	r1, r3
 8001700:	460b      	mov	r3, r1
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	440b      	add	r3, r1
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	4413      	add	r3, r2
 800170a:	4a2b      	ldr	r2, [pc, #172]	@ (80017b8 <RunJog+0x328>)
 800170c:	f8b2 2046 	ldrh.w	r2, [r2, #70]	@ 0x46
 8001710:	4413      	add	r3, r2
 8001712:	1ac3      	subs	r3, r0, r3
 8001714:	4a2d      	ldr	r2, [pc, #180]	@ (80017cc <RunJog+0x33c>)
 8001716:	fb82 1203 	smull	r1, r2, r2, r3
 800171a:	1312      	asrs	r2, r2, #12
 800171c:	17db      	asrs	r3, r3, #31
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	b29a      	uxth	r2, r3
 8001722:	4b25      	ldr	r3, [pc, #148]	@ (80017b8 <RunJog+0x328>)
 8001724:	87da      	strh	r2, [r3, #62]	@ 0x3e

//	base.Place = registerFrame[0x22].U16 ;	//Get Place from BaseSystem
	if (registerFrame[0x10].U16 == 4)
 8001726:	4b22      	ldr	r3, [pc, #136]	@ (80017b0 <RunJog+0x320>)
 8001728:	8c1b      	ldrh	r3, [r3, #32]
 800172a:	2b04      	cmp	r3, #4
 800172c:	f040 8087 	bne.w	800183e <RunJog+0x3ae>
	{
		elapsedTime += 0.0002;
 8001730:	4b27      	ldr	r3, [pc, #156]	@ (80017d0 <RunJog+0x340>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4618      	mov	r0, r3
 8001736:	f7fe fed3 	bl	80004e0 <__aeabi_f2d>
 800173a:	a31b      	add	r3, pc, #108	@ (adr r3, 80017a8 <RunJog+0x318>)
 800173c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001740:	f7fe fd70 	bl	8000224 <__adddf3>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4610      	mov	r0, r2
 800174a:	4619      	mov	r1, r3
 800174c:	f7ff f9f0 	bl	8000b30 <__aeabi_d2f>
 8001750:	4603      	mov	r3, r0
 8001752:	4a1f      	ldr	r2, [pc, #124]	@ (80017d0 <RunJog+0x340>)
 8001754:	6013      	str	r3, [r2, #0]
		Traject(&Traj, AMT.Linear_Position, base.Pick[fuCount]);
 8001756:	4b1f      	ldr	r3, [pc, #124]	@ (80017d4 <RunJog+0x344>)
 8001758:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800175c:	4b1e      	ldr	r3, [pc, #120]	@ (80017d8 <RunJog+0x348>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a15      	ldr	r2, [pc, #84]	@ (80017b8 <RunJog+0x328>)
 8001762:	3318      	adds	r3, #24
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	4413      	add	r3, r2
 8001768:	889b      	ldrh	r3, [r3, #4]
 800176a:	ee07 3a10 	vmov	s14, r3
 800176e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001772:	eef0 0a47 	vmov.f32	s1, s14
 8001776:	eeb0 0a67 	vmov.f32	s0, s15
 800177a:	4818      	ldr	r0, [pc, #96]	@ (80017dc <RunJog+0x34c>)
 800177c:	f001 fbd4 	bl	8002f28 <Traject>
		PID_controller_cascade(&PID_pos, &PID_velo, &AMT, Traj.currentPosition);
 8001780:	4b16      	ldr	r3, [pc, #88]	@ (80017dc <RunJog+0x34c>)
 8001782:	edd3 7a02 	vldr	s15, [r3, #8]
 8001786:	eeb0 0a67 	vmov.f32	s0, s15
 800178a:	4a12      	ldr	r2, [pc, #72]	@ (80017d4 <RunJog+0x344>)
 800178c:	4914      	ldr	r1, [pc, #80]	@ (80017e0 <RunJog+0x350>)
 800178e:	4815      	ldr	r0, [pc, #84]	@ (80017e4 <RunJog+0x354>)
 8001790:	f001 f9bc 	bl	8002b0c <PID_controller_cascade>
		if (Traj.currentVelocity == 0 & fabs(AMT.Linear_Position-Traj.currentPosition) < 0.05)
 8001794:	4b11      	ldr	r3, [pc, #68]	@ (80017dc <RunJog+0x34c>)
 8001796:	edd3 7a03 	vldr	s15, [r3, #12]
 800179a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800179e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a2:	e021      	b.n	80017e8 <RunJog+0x358>
 80017a4:	f3af 8000 	nop.w
 80017a8:	eb1c432d 	.word	0xeb1c432d
 80017ac:	3f2a36e2 	.word	0x3f2a36e2
 80017b0:	2000110c 	.word	0x2000110c
 80017b4:	cccccccd 	.word	0xcccccccd
 80017b8:	20000300 	.word	0x20000300
 80017bc:	51eb851f 	.word	0x51eb851f
 80017c0:	66666667 	.word	0x66666667
 80017c4:	10624dd3 	.word	0x10624dd3
 80017c8:	d1b71759 	.word	0xd1b71759
 80017cc:	68db8bad 	.word	0x68db8bad
 80017d0:	20001108 	.word	0x20001108
 80017d4:	20000b48 	.word	0x20000b48
 80017d8:	200002cc 	.word	0x200002cc
 80017dc:	20000b30 	.word	0x20000b30
 80017e0:	20000c08 	.word	0x20000c08
 80017e4:	200002e4 	.word	0x200002e4
 80017e8:	bf0c      	ite	eq
 80017ea:	2301      	moveq	r3, #1
 80017ec:	2300      	movne	r3, #0
 80017ee:	b2dc      	uxtb	r4, r3
 80017f0:	4b5b      	ldr	r3, [pc, #364]	@ (8001960 <RunJog+0x4d0>)
 80017f2:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80017f6:	4b5b      	ldr	r3, [pc, #364]	@ (8001964 <RunJog+0x4d4>)
 80017f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80017fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001800:	eef0 7ae7 	vabs.f32	s15, s15
 8001804:	ee17 0a90 	vmov	r0, s15
 8001808:	f7fe fe6a 	bl	80004e0 <__aeabi_f2d>
 800180c:	2301      	movs	r3, #1
 800180e:	461d      	mov	r5, r3
 8001810:	a34f      	add	r3, pc, #316	@ (adr r3, 8001950 <RunJog+0x4c0>)
 8001812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001816:	f7ff f92d 	bl	8000a74 <__aeabi_dcmplt>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d101      	bne.n	8001824 <RunJog+0x394>
 8001820:	2300      	movs	r3, #0
 8001822:	461d      	mov	r5, r3
 8001824:	b2eb      	uxtb	r3, r5
 8001826:	4023      	ands	r3, r4
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d079      	beq.n	8001922 <RunJog+0x492>
		{
			registerFrame[0x10].U16 = 8;
 800182e:	4b4e      	ldr	r3, [pc, #312]	@ (8001968 <RunJog+0x4d8>)
 8001830:	2208      	movs	r2, #8
 8001832:	841a      	strh	r2, [r3, #32]
			PID_pos.out = 0;
 8001834:	4b4d      	ldr	r3, [pc, #308]	@ (800196c <RunJog+0x4dc>)
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	619a      	str	r2, [r3, #24]
 800183c:	e071      	b.n	8001922 <RunJog+0x492>
		}
	}
	else if (registerFrame[0x10].U16 == 8)
 800183e:	4b4a      	ldr	r3, [pc, #296]	@ (8001968 <RunJog+0x4d8>)
 8001840:	8c1b      	ldrh	r3, [r3, #32]
 8001842:	2b08      	cmp	r3, #8
 8001844:	d16d      	bne.n	8001922 <RunJog+0x492>
	{
		elapsedTime += 0.0002;
 8001846:	4b4a      	ldr	r3, [pc, #296]	@ (8001970 <RunJog+0x4e0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7fe fe48 	bl	80004e0 <__aeabi_f2d>
 8001850:	a341      	add	r3, pc, #260	@ (adr r3, 8001958 <RunJog+0x4c8>)
 8001852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001856:	f7fe fce5 	bl	8000224 <__adddf3>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4610      	mov	r0, r2
 8001860:	4619      	mov	r1, r3
 8001862:	f7ff f965 	bl	8000b30 <__aeabi_d2f>
 8001866:	4603      	mov	r3, r0
 8001868:	4a41      	ldr	r2, [pc, #260]	@ (8001970 <RunJog+0x4e0>)
 800186a:	6013      	str	r3, [r2, #0]
		Traject(&Traj, AMT.Linear_Position, base.Place[fuCount]);
 800186c:	4b3c      	ldr	r3, [pc, #240]	@ (8001960 <RunJog+0x4d0>)
 800186e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001872:	4b40      	ldr	r3, [pc, #256]	@ (8001974 <RunJog+0x4e4>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a40      	ldr	r2, [pc, #256]	@ (8001978 <RunJog+0x4e8>)
 8001878:	331c      	adds	r3, #28
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	4413      	add	r3, r2
 800187e:	88db      	ldrh	r3, [r3, #6]
 8001880:	ee07 3a10 	vmov	s14, r3
 8001884:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001888:	eef0 0a47 	vmov.f32	s1, s14
 800188c:	eeb0 0a67 	vmov.f32	s0, s15
 8001890:	4834      	ldr	r0, [pc, #208]	@ (8001964 <RunJog+0x4d4>)
 8001892:	f001 fb49 	bl	8002f28 <Traject>
		PID_controller_cascade(&PID_pos, &PID_velo, &AMT, Traj.currentPosition);
 8001896:	4b33      	ldr	r3, [pc, #204]	@ (8001964 <RunJog+0x4d4>)
 8001898:	edd3 7a02 	vldr	s15, [r3, #8]
 800189c:	eeb0 0a67 	vmov.f32	s0, s15
 80018a0:	4a2f      	ldr	r2, [pc, #188]	@ (8001960 <RunJog+0x4d0>)
 80018a2:	4936      	ldr	r1, [pc, #216]	@ (800197c <RunJog+0x4ec>)
 80018a4:	4831      	ldr	r0, [pc, #196]	@ (800196c <RunJog+0x4dc>)
 80018a6:	f001 f931 	bl	8002b0c <PID_controller_cascade>
		if (Traj.currentVelocity == 0 & fabs(AMT.Linear_Position-Traj.currentPosition) < 0.05)
 80018aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001964 <RunJog+0x4d4>)
 80018ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80018b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b8:	bf0c      	ite	eq
 80018ba:	2301      	moveq	r3, #1
 80018bc:	2300      	movne	r3, #0
 80018be:	b2dc      	uxtb	r4, r3
 80018c0:	4b27      	ldr	r3, [pc, #156]	@ (8001960 <RunJog+0x4d0>)
 80018c2:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80018c6:	4b27      	ldr	r3, [pc, #156]	@ (8001964 <RunJog+0x4d4>)
 80018c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80018cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018d0:	eef0 7ae7 	vabs.f32	s15, s15
 80018d4:	ee17 0a90 	vmov	r0, s15
 80018d8:	f7fe fe02 	bl	80004e0 <__aeabi_f2d>
 80018dc:	2301      	movs	r3, #1
 80018de:	461d      	mov	r5, r3
 80018e0:	a31b      	add	r3, pc, #108	@ (adr r3, 8001950 <RunJog+0x4c0>)
 80018e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e6:	f7ff f8c5 	bl	8000a74 <__aeabi_dcmplt>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d101      	bne.n	80018f4 <RunJog+0x464>
 80018f0:	2300      	movs	r3, #0
 80018f2:	461d      	mov	r5, r3
 80018f4:	b2eb      	uxtb	r3, r5
 80018f6:	4023      	ands	r3, r4
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d011      	beq.n	8001922 <RunJog+0x492>
		{
			base.BaseStatus = 0;
 80018fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001978 <RunJog+0x4e8>)
 8001900:	2200      	movs	r2, #0
 8001902:	801a      	strh	r2, [r3, #0]
			registerFrame[0x01].U16 = base.BaseStatus;
 8001904:	4b1c      	ldr	r3, [pc, #112]	@ (8001978 <RunJog+0x4e8>)
 8001906:	881a      	ldrh	r2, [r3, #0]
 8001908:	4b17      	ldr	r3, [pc, #92]	@ (8001968 <RunJog+0x4d8>)
 800190a:	805a      	strh	r2, [r3, #2]
			registerFrame[0x10].U16 = 0;
 800190c:	4b16      	ldr	r3, [pc, #88]	@ (8001968 <RunJog+0x4d8>)
 800190e:	2200      	movs	r2, #0
 8001910:	841a      	strh	r2, [r3, #32]
			base.sp = 0;
 8001912:	4b19      	ldr	r3, [pc, #100]	@ (8001978 <RunJog+0x4e8>)
 8001914:	2200      	movs	r2, #0
 8001916:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
			PID_pos.out = 0;
 800191a:	4b14      	ldr	r3, [pc, #80]	@ (800196c <RunJog+0x4dc>)
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	619a      	str	r2, [r3, #24]
		}
	}

	//pick place 5 time
	if(base.sp == 1){
 8001922:	4b15      	ldr	r3, [pc, #84]	@ (8001978 <RunJog+0x4e8>)
 8001924:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8001928:	2b01      	cmp	r3, #1
 800192a:	d10d      	bne.n	8001948 <RunJog+0x4b8>
		base.BaseStatus = 0;
 800192c:	4b12      	ldr	r3, [pc, #72]	@ (8001978 <RunJog+0x4e8>)
 800192e:	2200      	movs	r2, #0
 8001930:	801a      	strh	r2, [r3, #0]
		registerFrame[0x01].U16 = base.BaseStatus;
 8001932:	4b11      	ldr	r3, [pc, #68]	@ (8001978 <RunJog+0x4e8>)
 8001934:	881a      	ldrh	r2, [r3, #0]
 8001936:	4b0c      	ldr	r3, [pc, #48]	@ (8001968 <RunJog+0x4d8>)
 8001938:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 0;
 800193a:	4b0b      	ldr	r3, [pc, #44]	@ (8001968 <RunJog+0x4d8>)
 800193c:	2200      	movs	r2, #0
 800193e:	841a      	strh	r2, [r3, #32]
		base.sp = 0;
 8001940:	4b0d      	ldr	r3, [pc, #52]	@ (8001978 <RunJog+0x4e8>)
 8001942:	2200      	movs	r2, #0
 8001944:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
	}
}
 8001948:	bf00      	nop
 800194a:	bdb0      	pop	{r4, r5, r7, pc}
 800194c:	f3af 8000 	nop.w
 8001950:	9999999a 	.word	0x9999999a
 8001954:	3fa99999 	.word	0x3fa99999
 8001958:	eb1c432d 	.word	0xeb1c432d
 800195c:	3f2a36e2 	.word	0x3f2a36e2
 8001960:	20000b48 	.word	0x20000b48
 8001964:	20000b30 	.word	0x20000b30
 8001968:	2000110c 	.word	0x2000110c
 800196c:	200002e4 	.word	0x200002e4
 8001970:	20001108 	.word	0x20001108
 8001974:	200002cc 	.word	0x200002cc
 8001978:	20000300 	.word	0x20000300
 800197c:	20000c08 	.word	0x20000c08

08001980 <kalman_filter>:
const float one_million_inv = 1e-6f;

//-------------------------------------------Function Code-------------------------------------------------------//

long kalman_filter(long ADC_Value)
{
 8001980:	b480      	push	{r7}
 8001982:	b087      	sub	sp, #28
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
    static float Kg = 0;
    static float P_k_k1 = 1;

    float kalman_adc;
    static float kalman_adc_old=0;
    Z_k = ADC_Value;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	ee07 3a90 	vmov	s15, r3
 800198e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001992:	edc7 7a05 	vstr	s15, [r7, #20]
    x_k1_k1 = kalman_adc_old;
 8001996:	4b2e      	ldr	r3, [pc, #184]	@ (8001a50 <kalman_filter+0xd0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	613b      	str	r3, [r7, #16]

    x_k_k1 = x_k1_k1;
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	60fb      	str	r3, [r7, #12]
    P_k_k1 = P_k1_k1 + Q;
 80019a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001a54 <kalman_filter+0xd4>)
 80019a2:	ed93 7a00 	vldr	s14, [r3]
 80019a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001a58 <kalman_filter+0xd8>)
 80019a8:	edd3 7a00 	vldr	s15, [r3]
 80019ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b0:	4b2a      	ldr	r3, [pc, #168]	@ (8001a5c <kalman_filter+0xdc>)
 80019b2:	edc3 7a00 	vstr	s15, [r3]

    Kg = P_k_k1/(P_k_k1 + R);
 80019b6:	4b29      	ldr	r3, [pc, #164]	@ (8001a5c <kalman_filter+0xdc>)
 80019b8:	edd3 6a00 	vldr	s13, [r3]
 80019bc:	4b27      	ldr	r3, [pc, #156]	@ (8001a5c <kalman_filter+0xdc>)
 80019be:	ed93 7a00 	vldr	s14, [r3]
 80019c2:	4b27      	ldr	r3, [pc, #156]	@ (8001a60 <kalman_filter+0xe0>)
 80019c4:	edd3 7a00 	vldr	s15, [r3]
 80019c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019d0:	4b24      	ldr	r3, [pc, #144]	@ (8001a64 <kalman_filter+0xe4>)
 80019d2:	edc3 7a00 	vstr	s15, [r3]

    kalman_adc = x_k_k1 + Kg * (Z_k - kalman_adc_old);
 80019d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a50 <kalman_filter+0xd0>)
 80019d8:	edd3 7a00 	vldr	s15, [r3]
 80019dc:	ed97 7a05 	vldr	s14, [r7, #20]
 80019e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a64 <kalman_filter+0xe4>)
 80019e6:	edd3 7a00 	vldr	s15, [r3]
 80019ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ee:	ed97 7a03 	vldr	s14, [r7, #12]
 80019f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f6:	edc7 7a02 	vstr	s15, [r7, #8]
    P_k1_k1 = (1 - Kg)*P_k_k1;
 80019fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001a64 <kalman_filter+0xe4>)
 80019fc:	edd3 7a00 	vldr	s15, [r3]
 8001a00:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001a04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a08:	4b14      	ldr	r3, [pc, #80]	@ (8001a5c <kalman_filter+0xdc>)
 8001a0a:	edd3 7a00 	vldr	s15, [r3]
 8001a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a12:	4b10      	ldr	r3, [pc, #64]	@ (8001a54 <kalman_filter+0xd4>)
 8001a14:	edc3 7a00 	vstr	s15, [r3]
    P_k_k1 = P_k1_k1;
 8001a18:	4b0e      	ldr	r3, [pc, #56]	@ (8001a54 <kalman_filter+0xd4>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a0f      	ldr	r2, [pc, #60]	@ (8001a5c <kalman_filter+0xdc>)
 8001a1e:	6013      	str	r3, [r2, #0]

    ADC_OLD_Value = ADC_Value;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	ee07 3a90 	vmov	s15, r3
 8001a26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a68 <kalman_filter+0xe8>)
 8001a2c:	edc3 7a00 	vstr	s15, [r3]
    kalman_adc_old = kalman_adc;
 8001a30:	4a07      	ldr	r2, [pc, #28]	@ (8001a50 <kalman_filter+0xd0>)
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	6013      	str	r3, [r2, #0]

    return kalman_adc;
 8001a36:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a3e:	ee17 3a90 	vmov	r3, s15
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	371c      	adds	r7, #28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	200002d0 	.word	0x200002d0
 8001a54:	200002d4 	.word	0x200002d4
 8001a58:	20000008 	.word	0x20000008
 8001a5c:	2000000c 	.word	0x2000000c
 8001a60:	20000010 	.word	0x20000010
 8001a64:	200002d8 	.word	0x200002d8
 8001a68:	200002dc 	.word	0x200002dc

08001a6c <AMT_encoder_init>:


void AMT_encoder_init(AMT_Encoder *AMT_data,TIM_HandleTypeDef *Encoder_timer)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
	AMT_data->EncoderTIM = Encoder_timer;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_TIM_Encoder_Start(AMT_data->EncoderTIM, TIM_CHANNEL_ALL);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a80:	213c      	movs	r1, #60	@ 0x3c
 8001a82:	4618      	mov	r0, r3
 8001a84:	f006 fa7a 	bl	8007f7c <HAL_TIM_Encoder_Start>
	AMT_data->Position[QEI_NOW] = 0.0;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
	AMT_data->Position[QEI_PREV] = 0.0;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	605a      	str	r2, [r3, #4]
}
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <AMT_encoder_update>:
//	AMT_data->TimeStamp[QEI_PREV] = AMT_data->TimeStamp[QEI_NOW];
//	AMT_data->Linear_Velo[QEI_PREV] = AMT_data->Linear_Velo[QEI_NOW];
//}

void AMT_encoder_update(AMT_Encoder *AMT_data, TIM_HandleTypeDef *Encoder_timer, uint64_t current_time)
{
 8001a9c:	b5b0      	push	{r4, r5, r7, lr}
 8001a9e:	b08a      	sub	sp, #40	@ 0x28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	e9c7 2300 	strd	r2, r3, [r7]


    // Collect data
    AMT_data->TimeStamp[QEI_NOW] = current_time;
 8001aaa:	68f9      	ldr	r1, [r7, #12]
 8001aac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ab0:	e9c1 2302 	strd	r2, r3, [r1, #8]
    AMT_data->Position[QEI_NOW] = __HAL_TIM_GET_COUNTER(Encoder_timer);
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	601a      	str	r2, [r3, #0]

    // Position 1 turn calculation
    AMT_data->QEIPostion_1turn = AMT_data->Position[QEI_NOW] % cnt_per_rev;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a4b      	ldr	r2, [pc, #300]	@ (8001bf0 <AMT_encoder_update+0x154>)
 8001ac4:	6812      	ldr	r2, [r2, #0]
 8001ac6:	fbb3 f1f2 	udiv	r1, r3, r2
 8001aca:	fb01 f202 	mul.w	r2, r1, r2
 8001ace:	1a9b      	subs	r3, r3, r2
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	621a      	str	r2, [r3, #32]

    // Calculate dx
    int32_t diffPosition = AMT_data->Position[QEI_NOW] - AMT_data->Position[QEI_PREV];
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	627b      	str	r3, [r7, #36]	@ 0x24

    // Handle wrap-around
    if (diffPosition > 32767)
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ae8:	db04      	blt.n	8001af4 <AMT_encoder_update+0x58>
        diffPosition -= 65535;
 8001aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aec:	f5a3 437f 	sub.w	r3, r3, #65280	@ 0xff00
 8001af0:	3bff      	subs	r3, #255	@ 0xff
 8001af2:	627b      	str	r3, [r7, #36]	@ 0x24
    if (diffPosition < -32767)
 8001af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af6:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8001afa:	dc04      	bgt.n	8001b06 <AMT_encoder_update+0x6a>
        diffPosition += 65535;
 8001afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afe:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001b02:	33ff      	adds	r3, #255	@ 0xff
 8001b04:	627b      	str	r3, [r7, #36]	@ 0x24

    // Calculate dt
    uint64_t diffTime = AMT_data->TimeStamp[QEI_NOW] - AMT_data->TimeStamp[QEI_PREV];
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001b12:	1a84      	subs	r4, r0, r2
 8001b14:	eb61 0503 	sbc.w	r5, r1, r3
 8001b18:	e9c7 4506 	strd	r4, r5, [r7, #24]

    // Calculate angular velocity
    float time_seconds = diffTime * one_million_inv;
 8001b1c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b20:	f7ff f91e 	bl	8000d60 <__aeabi_ul2f>
 8001b24:	ee07 0a10 	vmov	s14, r0
 8001b28:	eddf 7a32 	vldr	s15, [pc, #200]	@ 8001bf4 <AMT_encoder_update+0x158>
 8001b2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b30:	edc7 7a05 	vstr	s15, [r7, #20]
    AMT_data->Angular_Velocity = ((diffPosition * 60.0f) * cnt_per_rev_inv / time_seconds); // RPM
 8001b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b36:	ee07 3a90 	vmov	s15, r3
 8001b3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b3e:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001bf8 <AMT_encoder_update+0x15c>
 8001b42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b46:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8001bfc <AMT_encoder_update+0x160>
 8001b4a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001b4e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    // Calculate linear position and velocity
    float position_change_mm = (diffPosition * pulley_cir) * cnt_per_rev_inv;
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5e:	ee07 3a90 	vmov	s15, r3
 8001b62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b66:	4b26      	ldr	r3, [pc, #152]	@ (8001c00 <AMT_encoder_update+0x164>)
 8001b68:	edd3 7a00 	vldr	s15, [r3]
 8001b6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b70:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001bfc <AMT_encoder_update+0x160>
 8001b74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b78:	edc7 7a04 	vstr	s15, [r7, #16]
//    float Vin = base.MotorHome * 24.0 / 1000;
    AMT_data->Linear_Position += position_change_mm; // mm
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001b82:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    AMT_data->Linear_Velocity = kalman_filter((AMT_data->Angular_Velocity / 60.0f * pulley_cir)); // mm/s
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001b96:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8001bf8 <AMT_encoder_update+0x15c>
 8001b9a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b9e:	4b18      	ldr	r3, [pc, #96]	@ (8001c00 <AMT_encoder_update+0x164>)
 8001ba0:	edd3 7a00 	vldr	s15, [r3]
 8001ba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bac:	ee17 0a90 	vmov	r0, s15
 8001bb0:	f7ff fee6 	bl	8001980 <kalman_filter>
 8001bb4:	ee07 0a90 	vmov	s15, r0
 8001bb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
//    AMT_data->Linear_kalmanVelocity = kalman_filter(AMT_data->Linear_Velocity);
    AMT_data->Linear_Velo[QEI_NOW] = AMT_data->Linear_Velocity; // Update Velo
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	619a      	str	r2, [r3, #24]

    // Store value for next loop
    AMT_data->Position[QEI_PREV] = AMT_data->Position[QEI_NOW];
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	605a      	str	r2, [r3, #4]
    AMT_data->TimeStamp[QEI_PREV] = AMT_data->TimeStamp[QEI_NOW];
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001bd8:	68f9      	ldr	r1, [r7, #12]
 8001bda:	e9c1 2304 	strd	r2, r3, [r1, #16]
    AMT_data->Linear_Velo[QEI_PREV] = AMT_data->Linear_Velo[QEI_NOW];
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	699a      	ldr	r2, [r3, #24]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	61da      	str	r2, [r3, #28]
}
 8001be6:	bf00      	nop
 8001be8:	3728      	adds	r7, #40	@ 0x28
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bdb0      	pop	{r4, r5, r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000000 	.word	0x20000000
 8001bf4:	358637bd 	.word	0x358637bd
 8001bf8:	42700000 	.word	0x42700000
 8001bfc:	39000000 	.word	0x39000000
 8001c00:	20000004 	.word	0x20000004

08001c04 <AMT_encoder_reset>:


void AMT_encoder_reset(AMT_Encoder *AMT_data)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	AMT_data->Linear_Position = 600;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a04      	ldr	r2, [pc, #16]	@ (8001c20 <AMT_encoder_reset+0x1c>)
 8001c10:	635a      	str	r2, [r3, #52]	@ 0x34
//	AMT_data->Position[QEI_NOW] = 0;

}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	44160000 	.word	0x44160000

08001c24 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001c28:	4b0d      	ldr	r3, [pc, #52]	@ (8001c60 <modbus_1t5_Timeout+0x3c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001c30:	4b0b      	ldr	r3, [pc, #44]	@ (8001c60 <modbus_1t5_Timeout+0x3c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001c3c:	4b08      	ldr	r3, [pc, #32]	@ (8001c60 <modbus_1t5_Timeout+0x3c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <modbus_1t5_Timeout+0x3c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 0201 	orr.w	r2, r2, #1
 8001c52:	601a      	str	r2, [r3, #0]
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	200002e0 	.word	0x200002e0

08001c64 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001c6c:	4b04      	ldr	r3, [pc, #16]	@ (8001c80 <modbus_3t5_Timeout+0x1c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2201      	movs	r2, #1
 8001c72:	755a      	strb	r2, [r3, #21]

}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	200002e0 	.word	0x200002e0

08001c84 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f008 fbf1 	bl	800a474 <HAL_UART_GetError>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b20      	cmp	r3, #32
 8001c96:	d101      	bne.n	8001c9c <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001c98:	f7ff ffc4 	bl	8001c24 <modbus_1t5_Timeout>

	}
}
 8001c9c:	bf00      	nop
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8001cae:	4a25      	ldr	r2, [pc, #148]	@ (8001d44 <Modbus_init+0xa0>)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8001cb4:	4b23      	ldr	r3, [pc, #140]	@ (8001d44 <Modbus_init+0xa0>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	4a21      	ldr	r2, [pc, #132]	@ (8001d48 <Modbus_init+0xa4>)
 8001cc2:	210e      	movs	r1, #14
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f006 fde5 	bl	8008894 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	2110      	movs	r1, #16
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f008 fb79 	bl	800a3c8 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f008 fb90 	bl	800a400 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	4a19      	ldr	r2, [pc, #100]	@ (8001d4c <Modbus_init+0xa8>)
 8001ce6:	2104      	movs	r1, #4
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f007 fd8f 	bl	800980c <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001cee:	4b15      	ldr	r3, [pc, #84]	@ (8001d44 <Modbus_init+0xa0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001cf4:	4b13      	ldr	r3, [pc, #76]	@ (8001d44 <Modbus_init+0xa0>)
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	4b12      	ldr	r3, [pc, #72]	@ (8001d44 <Modbus_init+0xa0>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001d00:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001d04:	4413      	add	r3, r2
 8001d06:	3302      	adds	r3, #2
 8001d08:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f007 ff7f 	bl	8009c10 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001d12:	4b0c      	ldr	r3, [pc, #48]	@ (8001d44 <Modbus_init+0xa0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d10c      	bne.n	8001d3c <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001d22:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <Modbus_init+0xa0>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f005 fd37 	bl	800779c <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001d2e:	4b05      	ldr	r3, [pc, #20]	@ (8001d44 <Modbus_init+0xa0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	2100      	movs	r1, #0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f005 ffde 	bl	8007cf8 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001d3c:	bf00      	nop
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	200002e0 	.word	0x200002e0
 8001d48:	08001c65 	.word	0x08001c65
 8001d4c:	08001c85 	.word	0x08001c85

08001d50 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001d5c:	23ff      	movs	r3, #255	@ 0xff
 8001d5e:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001d60:	23ff      	movs	r3, #255	@ 0xff
 8001d62:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001d64:	e013      	b.n	8001d8e <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	607a      	str	r2, [r7, #4]
 8001d6c:	781a      	ldrb	r2, [r3, #0]
 8001d6e:	7bbb      	ldrb	r3, [r7, #14]
 8001d70:	4053      	eors	r3, r2
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001d76:	4a0f      	ldr	r2, [pc, #60]	@ (8001db4 <CRC16+0x64>)
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	781a      	ldrb	r2, [r3, #0]
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
 8001d80:	4053      	eors	r3, r2
 8001d82:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001d84:	4a0c      	ldr	r2, [pc, #48]	@ (8001db8 <CRC16+0x68>)
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	4413      	add	r3, r2
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001d8e:	883b      	ldrh	r3, [r7, #0]
 8001d90:	1e5a      	subs	r2, r3, #1
 8001d92:	803a      	strh	r2, [r7, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1e6      	bne.n	8001d66 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
 8001d9a:	021b      	lsls	r3, r3, #8
 8001d9c:	b21a      	sxth	r2, r3
 8001d9e:	7bbb      	ldrb	r3, [r7, #14]
 8001da0:	b21b      	sxth	r3, r3
 8001da2:	4313      	orrs	r3, r2
 8001da4:	b21b      	sxth	r3, r3
 8001da6:	b29b      	uxth	r3, r3
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	20000114 	.word	0x20000114
 8001db8:	20000014 	.word	0x20000014

08001dbc <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8001dc2:	4b7e      	ldr	r3, [pc, #504]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	7ddb      	ldrb	r3, [r3, #23]
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d80a      	bhi.n	8001de4 <Modbus_Protocal_Worker+0x28>
 8001dce:	a201      	add	r2, pc, #4	@ (adr r2, 8001dd4 <Modbus_Protocal_Worker+0x18>)
 8001dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd4:	08001def 	.word	0x08001def
 8001dd8:	08001f83 	.word	0x08001f83
 8001ddc:	08001e7b 	.word	0x08001e7b
 8001de0:	08001ebf 	.word	0x08001ebf
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001de4:	4b75      	ldr	r3, [pc, #468]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2201      	movs	r2, #1
 8001dea:	75da      	strb	r2, [r3, #23]
		break;
 8001dec:	e0e1      	b.n	8001fb2 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8001dee:	4b73      	ldr	r3, [pc, #460]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d006      	beq.n	8001e08 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 8001dfa:	4b70      	ldr	r3, [pc, #448]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2202      	movs	r2, #2
 8001e00:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 8001e02:	f000 f9cd 	bl	80021a0 <Modbus_Emission>
 8001e06:	e018      	b.n	8001e3a <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 8001e08:	4b6c      	ldr	r3, [pc, #432]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8001e12:	4b6a      	ldr	r3, [pc, #424]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d00b      	beq.n	8001e3a <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001e22:	4b66      	ldr	r3, [pc, #408]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2200      	movs	r2, #0
 8001e28:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001e2a:	4b64      	ldr	r3, [pc, #400]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8001e32:	4b62      	ldr	r3, [pc, #392]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2203      	movs	r2, #3
 8001e38:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001e3a:	4b60      	ldr	r3, [pc, #384]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e44:	2b20      	cmp	r3, #32
 8001e46:	f040 80ad 	bne.w	8001fa4 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001e4a:	4b5c      	ldr	r3, [pc, #368]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001e54:	4b59      	ldr	r3, [pc, #356]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001e5a:	4b58      	ldr	r3, [pc, #352]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	4b57      	ldr	r3, [pc, #348]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001e66:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3302      	adds	r3, #2
 8001e6e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001e72:	4619      	mov	r1, r3
 8001e74:	f007 fecc 	bl	8009c10 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8001e78:	e094      	b.n	8001fa4 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001e7a:	4b50      	ldr	r3, [pc, #320]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	7d1b      	ldrb	r3, [r3, #20]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 8091 	beq.w	8001fa8 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001e86:	4b4d      	ldr	r3, [pc, #308]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	22fe      	movs	r2, #254	@ 0xfe
 8001e8c:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001e8e:	4b4b      	ldr	r3, [pc, #300]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8001e98:	4b48      	ldr	r3, [pc, #288]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8001ea8:	4b44      	ldr	r3, [pc, #272]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001eac:	1a8a      	subs	r2, r1, r2
 8001eae:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8001eb0:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001eb4:	4b41      	ldr	r3, [pc, #260]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2204      	movs	r2, #4
 8001eba:	75da      	strb	r2, [r3, #23]
		}
		break;
 8001ebc:	e074      	b.n	8001fa8 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8001ebe:	4b3f      	ldr	r3, [pc, #252]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001ec6:	f113 0f02 	cmn.w	r3, #2
 8001eca:	d150      	bne.n	8001f6e <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001ecc:	4b3b      	ldr	r3, [pc, #236]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001ed4:	4b39      	ldr	r3, [pc, #228]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8001edc:	4b37      	ldr	r3, [pc, #220]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001ee4:	3b02      	subs	r3, #2
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4610      	mov	r0, r2
 8001eea:	f7ff ff31 	bl	8001d50 <CRC16>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001ef2:	793a      	ldrb	r2, [r7, #4]
 8001ef4:	4b31      	ldr	r3, [pc, #196]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001ef6:	6819      	ldr	r1, [r3, #0]
 8001ef8:	4b30      	ldr	r3, [pc, #192]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001f00:	3b02      	subs	r3, #2
 8001f02:	440b      	add	r3, r1
 8001f04:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d10c      	bne.n	8001f26 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001f0c:	797a      	ldrb	r2, [r7, #5]
 8001f0e:	4b2b      	ldr	r3, [pc, #172]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001f10:	6819      	ldr	r1, [r3, #0]
 8001f12:	4b2a      	ldr	r3, [pc, #168]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	440b      	add	r3, r1
 8001f1e:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d004      	beq.n	8001f30 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001f26:	4b25      	ldr	r3, [pc, #148]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	22ff      	movs	r2, #255	@ 0xff
 8001f2c:	759a      	strb	r2, [r3, #22]
				break;
 8001f2e:	e040      	b.n	8001fb2 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001f30:	4b22      	ldr	r3, [pc, #136]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8001f38:	4b20      	ldr	r3, [pc, #128]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d113      	bne.n	8001f6a <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001f42:	4b1e      	ldr	r3, [pc, #120]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001f4a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8001f52:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001f54:	4b19      	ldr	r3, [pc, #100]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001f5c:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001f5e:	461a      	mov	r2, r3
 8001f60:	f009 fbe2 	bl	800b728 <memcpy>

			//execute command
			Modbus_frame_response();
 8001f64:	f000 f904 	bl	8002170 <Modbus_frame_response>
 8001f68:	e001      	b.n	8001f6e <Modbus_Protocal_Worker+0x1b2>
				break;
 8001f6a:	bf00      	nop
					}
		break;


	}
}
 8001f6c:	e021      	b.n	8001fb2 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 8001f6e:	4b13      	ldr	r3, [pc, #76]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	7d5b      	ldrb	r3, [r3, #21]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d019      	beq.n	8001fac <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8001f78:	4b10      	ldr	r3, [pc, #64]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	75da      	strb	r2, [r3, #23]
		break;
 8001f80:	e014      	b.n	8001fac <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001f82:	4b0e      	ldr	r3, [pc, #56]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f8c:	2b20      	cmp	r3, #32
 8001f8e:	d10f      	bne.n	8001fb0 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8001f90:	4b0a      	ldr	r3, [pc, #40]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8001f9a:	4b08      	ldr	r3, [pc, #32]	@ (8001fbc <Modbus_Protocal_Worker+0x200>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	75da      	strb	r2, [r3, #23]
		break;
 8001fa2:	e005      	b.n	8001fb0 <Modbus_Protocal_Worker+0x1f4>
		break;
 8001fa4:	bf00      	nop
 8001fa6:	e004      	b.n	8001fb2 <Modbus_Protocal_Worker+0x1f6>
		break;
 8001fa8:	bf00      	nop
 8001faa:	e002      	b.n	8001fb2 <Modbus_Protocal_Worker+0x1f6>
		break;
 8001fac:	bf00      	nop
 8001fae:	e000      	b.n	8001fb2 <Modbus_Protocal_Worker+0x1f6>
		break;
 8001fb0:	bf00      	nop
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	200002e0 	.word	0x200002e0

08001fc0 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	@ (800203c <modbusWrite1Register+0x7c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	7e5b      	ldrb	r3, [r3, #25]
 8001fcc:	021b      	lsls	r3, r3, #8
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	4a1a      	ldr	r2, [pc, #104]	@ (800203c <modbusWrite1Register+0x7c>)
 8001fd2:	6812      	ldr	r2, [r2, #0]
 8001fd4:	7e92      	ldrb	r2, [r2, #26]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8001fda:	88fa      	ldrh	r2, [r7, #6]
 8001fdc:	4b17      	ldr	r3, [pc, #92]	@ (800203c <modbusWrite1Register+0x7c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d903      	bls.n	8001fee <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001fe6:	2002      	movs	r0, #2
 8001fe8:	f000 f8a0 	bl	800212c <ModbusErrorReply>
			 return;
 8001fec:	e023      	b.n	8002036 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001fee:	4b13      	ldr	r3, [pc, #76]	@ (800203c <modbusWrite1Register+0x7c>)
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	4b12      	ldr	r3, [pc, #72]	@ (800203c <modbusWrite1Register+0x7c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6859      	ldr	r1, [r3, #4]
 8001ff8:	88fb      	ldrh	r3, [r7, #6]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	440b      	add	r3, r1
 8001ffe:	7ed2      	ldrb	r2, [r2, #27]
 8002000:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8002002:	4b0e      	ldr	r3, [pc, #56]	@ (800203c <modbusWrite1Register+0x7c>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	4b0d      	ldr	r3, [pc, #52]	@ (800203c <modbusWrite1Register+0x7c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6859      	ldr	r1, [r3, #4]
 800200c:	88fb      	ldrh	r3, [r7, #6]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	440b      	add	r3, r1
 8002012:	7f12      	ldrb	r2, [r2, #28]
 8002014:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8002016:	4b09      	ldr	r3, [pc, #36]	@ (800203c <modbusWrite1Register+0x7c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 800201e:	4b07      	ldr	r3, [pc, #28]	@ (800203c <modbusWrite1Register+0x7c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8002024:	2208      	movs	r2, #8
 8002026:	4619      	mov	r1, r3
 8002028:	f009 fb7e 	bl	800b728 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 800202c:	4b03      	ldr	r3, [pc, #12]	@ (800203c <modbusWrite1Register+0x7c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2205      	movs	r2, #5
 8002032:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	200002e0 	.word	0x200002e0

08002040 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8002040:	b590      	push	{r4, r7, lr}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8002046:	4b38      	ldr	r3, [pc, #224]	@ (8002128 <modbusRead1Register+0xe8>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	7edb      	ldrb	r3, [r3, #27]
 800204c:	021b      	lsls	r3, r3, #8
 800204e:	b29b      	uxth	r3, r3
 8002050:	4a35      	ldr	r2, [pc, #212]	@ (8002128 <modbusRead1Register+0xe8>)
 8002052:	6812      	ldr	r2, [r2, #0]
 8002054:	7f12      	ldrb	r2, [r2, #28]
 8002056:	4413      	add	r3, r2
 8002058:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 800205a:	4b33      	ldr	r3, [pc, #204]	@ (8002128 <modbusRead1Register+0xe8>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	7e5b      	ldrb	r3, [r3, #25]
 8002060:	021b      	lsls	r3, r3, #8
 8002062:	b29b      	uxth	r3, r3
 8002064:	4a30      	ldr	r2, [pc, #192]	@ (8002128 <modbusRead1Register+0xe8>)
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	7e92      	ldrb	r2, [r2, #26]
 800206a:	4413      	add	r3, r2
 800206c:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800206e:	88fb      	ldrh	r3, [r7, #6]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d002      	beq.n	800207a <modbusRead1Register+0x3a>
 8002074:	88fb      	ldrh	r3, [r7, #6]
 8002076:	2b7d      	cmp	r3, #125	@ 0x7d
 8002078:	d903      	bls.n	8002082 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800207a:	2003      	movs	r0, #3
 800207c:	f000 f856 	bl	800212c <ModbusErrorReply>
		 return;
 8002080:	e04e      	b.n	8002120 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8002082:	88ba      	ldrh	r2, [r7, #4]
 8002084:	4b28      	ldr	r3, [pc, #160]	@ (8002128 <modbusRead1Register+0xe8>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	429a      	cmp	r2, r3
 800208c:	d808      	bhi.n	80020a0 <modbusRead1Register+0x60>
 800208e:	88ba      	ldrh	r2, [r7, #4]
 8002090:	88fb      	ldrh	r3, [r7, #6]
 8002092:	4413      	add	r3, r2
 8002094:	461a      	mov	r2, r3
 8002096:	4b24      	ldr	r3, [pc, #144]	@ (8002128 <modbusRead1Register+0xe8>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	429a      	cmp	r2, r3
 800209e:	d903      	bls.n	80020a8 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80020a0:	2002      	movs	r0, #2
 80020a2:	f000 f843 	bl	800212c <ModbusErrorReply>
		 return;
 80020a6:	e03b      	b.n	8002120 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80020a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002128 <modbusRead1Register+0xe8>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2203      	movs	r2, #3
 80020ae:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80020b2:	88fb      	ldrh	r3, [r7, #6]
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002128 <modbusRead1Register+0xe8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	0052      	lsls	r2, r2, #1
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80020c2:	2400      	movs	r4, #0
 80020c4:	e020      	b.n	8002108 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80020c6:	4b18      	ldr	r3, [pc, #96]	@ (8002128 <modbusRead1Register+0xe8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	88bb      	ldrh	r3, [r7, #4]
 80020ce:	4423      	add	r3, r4
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	18d1      	adds	r1, r2, r3
 80020d4:	4b14      	ldr	r3, [pc, #80]	@ (8002128 <modbusRead1Register+0xe8>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	1c63      	adds	r3, r4, #1
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	7849      	ldrb	r1, [r1, #1]
 80020de:	4413      	add	r3, r2
 80020e0:	460a      	mov	r2, r1
 80020e2:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80020e6:	4b10      	ldr	r3, [pc, #64]	@ (8002128 <modbusRead1Register+0xe8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	88bb      	ldrh	r3, [r7, #4]
 80020ee:	4423      	add	r3, r4
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	18d1      	adds	r1, r2, r3
 80020f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002128 <modbusRead1Register+0xe8>)
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	0063      	lsls	r3, r4, #1
 80020fa:	3303      	adds	r3, #3
 80020fc:	7809      	ldrb	r1, [r1, #0]
 80020fe:	4413      	add	r3, r2
 8002100:	460a      	mov	r2, r1
 8002102:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 8002106:	3401      	adds	r4, #1
 8002108:	88fb      	ldrh	r3, [r7, #6]
 800210a:	429c      	cmp	r4, r3
 800210c:	dbdb      	blt.n	80020c6 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800210e:	88fb      	ldrh	r3, [r7, #6]
 8002110:	3301      	adds	r3, #1
 8002112:	b2da      	uxtb	r2, r3
 8002114:	4b04      	ldr	r3, [pc, #16]	@ (8002128 <modbusRead1Register+0xe8>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	0052      	lsls	r2, r2, #1
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	bd90      	pop	{r4, r7, pc}
 8002126:	bf00      	nop
 8002128:	200002e0 	.word	0x200002e0

0800212c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8002136:	4b0d      	ldr	r3, [pc, #52]	@ (800216c <ModbusErrorReply+0x40>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	7e1a      	ldrb	r2, [r3, #24]
 800213c:	4b0b      	ldr	r3, [pc, #44]	@ (800216c <ModbusErrorReply+0x40>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002144:	b2d2      	uxtb	r2, r2
 8002146:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 800214a:	4b08      	ldr	r3, [pc, #32]	@ (800216c <ModbusErrorReply+0x40>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	79fa      	ldrb	r2, [r7, #7]
 8002150:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8002154:	4b05      	ldr	r3, [pc, #20]	@ (800216c <ModbusErrorReply+0x40>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2202      	movs	r2, #2
 800215a:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	200002e0 	.word	0x200002e0

08002170 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8002174:	4b09      	ldr	r3, [pc, #36]	@ (800219c <Modbus_frame_response+0x2c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	7e1b      	ldrb	r3, [r3, #24]
 800217a:	2b03      	cmp	r3, #3
 800217c:	d004      	beq.n	8002188 <Modbus_frame_response+0x18>
 800217e:	2b06      	cmp	r3, #6
 8002180:	d105      	bne.n	800218e <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8002182:	f7ff ff1d 	bl	8001fc0 <modbusWrite1Register>
		break;
 8002186:	e006      	b.n	8002196 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8002188:	f7ff ff5a 	bl	8002040 <modbusRead1Register>
		break;
 800218c:	e003      	b.n	8002196 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800218e:	2001      	movs	r0, #1
 8002190:	f7ff ffcc 	bl	800212c <ModbusErrorReply>
		break;
 8002194:	bf00      	nop

	}
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	200002e0 	.word	0x200002e0

080021a0 <Modbus_Emission>:

void Modbus_Emission()
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80021a6:	4b38      	ldr	r3, [pc, #224]	@ (8002288 <Modbus_Emission+0xe8>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b0:	2b20      	cmp	r3, #32
 80021b2:	d15d      	bne.n	8002270 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80021b4:	4b34      	ldr	r3, [pc, #208]	@ (8002288 <Modbus_Emission+0xe8>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4b33      	ldr	r3, [pc, #204]	@ (8002288 <Modbus_Emission+0xe8>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	7812      	ldrb	r2, [r2, #0]
 80021be:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80021c2:	4b31      	ldr	r3, [pc, #196]	@ (8002288 <Modbus_Emission+0xe8>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 80021ca:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80021cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002288 <Modbus_Emission+0xe8>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 80021d4:	4b2c      	ldr	r3, [pc, #176]	@ (8002288 <Modbus_Emission+0xe8>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 80021dc:	461a      	mov	r2, r3
 80021de:	f009 faa3 	bl	800b728 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80021e2:	4b29      	ldr	r3, [pc, #164]	@ (8002288 <Modbus_Emission+0xe8>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80021ea:	461a      	mov	r2, r3
 80021ec:	4b26      	ldr	r3, [pc, #152]	@ (8002288 <Modbus_Emission+0xe8>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	3203      	adds	r2, #3
 80021f2:	b292      	uxth	r2, r2
 80021f4:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80021f8:	4b23      	ldr	r3, [pc, #140]	@ (8002288 <Modbus_Emission+0xe8>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8002200:	4b21      	ldr	r3, [pc, #132]	@ (8002288 <Modbus_Emission+0xe8>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8002208:	3b02      	subs	r3, #2
 800220a:	4619      	mov	r1, r3
 800220c:	4610      	mov	r0, r2
 800220e:	f7ff fd9f 	bl	8001d50 <CRC16>
 8002212:	4603      	mov	r3, r0
 8002214:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8002216:	4b1c      	ldr	r3, [pc, #112]	@ (8002288 <Modbus_Emission+0xe8>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	4b1b      	ldr	r3, [pc, #108]	@ (8002288 <Modbus_Emission+0xe8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8002222:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8002224:	7939      	ldrb	r1, [r7, #4]
 8002226:	4413      	add	r3, r2
 8002228:	460a      	mov	r2, r1
 800222a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 800222e:	4b16      	ldr	r3, [pc, #88]	@ (8002288 <Modbus_Emission+0xe8>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	4b15      	ldr	r3, [pc, #84]	@ (8002288 <Modbus_Emission+0xe8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800223a:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 800223c:	7979      	ldrb	r1, [r7, #5]
 800223e:	4413      	add	r3, r2
 8002240:	460a      	mov	r2, r1
 8002242:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002246:	4b10      	ldr	r3, [pc, #64]	@ (8002288 <Modbus_Emission+0xe8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002250:	2b20      	cmp	r3, #32
 8002252:	d10d      	bne.n	8002270 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8002254:	4b0c      	ldr	r3, [pc, #48]	@ (8002288 <Modbus_Emission+0xe8>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 800225a:	4b0b      	ldr	r3, [pc, #44]	@ (8002288 <Modbus_Emission+0xe8>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8002262:	4b09      	ldr	r3, [pc, #36]	@ (8002288 <Modbus_Emission+0xe8>)
 8002264:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8002266:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800226a:	461a      	mov	r2, r3
 800226c:	f007 fc50 	bl	8009b10 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8002270:	4b05      	ldr	r3, [pc, #20]	@ (8002288 <Modbus_Emission+0xe8>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2200      	movs	r2, #0
 8002276:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8002278:	4b03      	ldr	r3, [pc, #12]	@ (8002288 <Modbus_Emission+0xe8>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2200      	movs	r2, #0
 800227e:	755a      	strb	r2, [r3, #21]

}
 8002280:	bf00      	nop
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	200002e0 	.word	0x200002e0

0800228c <MOTOR_init>:
#include "math.h"

//-------------------------------------------Function Code-------------------------------------------------------//

void MOTOR_init(MOTOR* MT,TIM_HandleTypeDef* htimx,uint16_t timd_chx,uint16_t timp_chx)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	4611      	mov	r1, r2
 8002298:	461a      	mov	r2, r3
 800229a:	460b      	mov	r3, r1
 800229c:	80fb      	strh	r3, [r7, #6]
 800229e:	4613      	mov	r3, r2
 80022a0:	80bb      	strh	r3, [r7, #4]
	MT->htimx = htimx;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	601a      	str	r2, [r3, #0]
	MT->timd_chx = timd_chx;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	88fa      	ldrh	r2, [r7, #6]
 80022ac:	809a      	strh	r2, [r3, #4]
	MT->timp_chx = timp_chx;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	88ba      	ldrh	r2, [r7, #4]
 80022b2:	80da      	strh	r2, [r3, #6]
	HAL_TIM_PWM_Start_IT(htimx, timp_chx);		// PWM
 80022b4:	88bb      	ldrh	r3, [r7, #4]
 80022b6:	4619      	mov	r1, r3
 80022b8:	68b8      	ldr	r0, [r7, #8]
 80022ba:	f005 fb55 	bl	8007968 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(htimx, timd_chx);		// Direction
 80022be:	88fb      	ldrh	r3, [r7, #6]
 80022c0:	4619      	mov	r1, r3
 80022c2:	68b8      	ldr	r0, [r7, #8]
 80022c4:	f005 fb50 	bl	8007968 <HAL_TIM_PWM_Start_IT>

}
 80022c8:	bf00      	nop
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <MOTOR_set_duty>:

void MOTOR_set_duty(MOTOR* MT, float percent_duty)
{
 80022d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022d4:	b089      	sub	sp, #36	@ 0x24
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	61f8      	str	r0, [r7, #28]
 80022da:	ed87 0a06 	vstr	s0, [r7, #24]
    if (MT == NULL || MT->htimx == NULL) {
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 8263 	beq.w	80027ac <MOTOR_set_duty+0x4dc>
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 825e 	beq.w	80027ac <MOTOR_set_duty+0x4dc>
        return;
    }
    if(percent_duty*42.499 >= 42499) percent_duty = 42499;
 80022f0:	69b8      	ldr	r0, [r7, #24]
 80022f2:	f7fe f8f5 	bl	80004e0 <__aeabi_f2d>
 80022f6:	a394      	add	r3, pc, #592	@ (adr r3, 8002548 <MOTOR_set_duty+0x278>)
 80022f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fc:	f7fe f948 	bl	8000590 <__aeabi_dmul>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	4610      	mov	r0, r2
 8002306:	4619      	mov	r1, r3
 8002308:	a395      	add	r3, pc, #596	@ (adr r3, 8002560 <MOTOR_set_duty+0x290>)
 800230a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230e:	f7fe fbc5 	bl	8000a9c <__aeabi_dcmpge>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MOTOR_set_duty+0x4c>
 8002318:	4b8f      	ldr	r3, [pc, #572]	@ (8002558 <MOTOR_set_duty+0x288>)
 800231a:	61bb      	str	r3, [r7, #24]
    if(percent_duty*42.499 <= -42499) percent_duty = -42499;
 800231c:	69b8      	ldr	r0, [r7, #24]
 800231e:	f7fe f8df 	bl	80004e0 <__aeabi_f2d>
 8002322:	a389      	add	r3, pc, #548	@ (adr r3, 8002548 <MOTOR_set_duty+0x278>)
 8002324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002328:	f7fe f932 	bl	8000590 <__aeabi_dmul>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	4610      	mov	r0, r2
 8002332:	4619      	mov	r1, r3
 8002334:	a386      	add	r3, pc, #536	@ (adr r3, 8002550 <MOTOR_set_duty+0x280>)
 8002336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233a:	f7fe fba5 	bl	8000a88 <__aeabi_dcmple>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MOTOR_set_duty+0x78>
 8002344:	4b85      	ldr	r3, [pc, #532]	@ (800255c <MOTOR_set_duty+0x28c>)
 8002346:	61bb      	str	r3, [r7, #24]

    if (percent_duty == 0) {
 8002348:	edd7 7a06 	vldr	s15, [r7, #24]
 800234c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002354:	d16e      	bne.n	8002434 <MOTOR_set_duty+0x164>
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timd_chx, 0);
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	889b      	ldrh	r3, [r3, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d105      	bne.n	800236a <MOTOR_set_duty+0x9a>
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2200      	movs	r2, #0
 8002366:	635a      	str	r2, [r3, #52]	@ 0x34
 8002368:	e02c      	b.n	80023c4 <MOTOR_set_duty+0xf4>
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	889b      	ldrh	r3, [r3, #4]
 800236e:	2b04      	cmp	r3, #4
 8002370:	d105      	bne.n	800237e <MOTOR_set_duty+0xae>
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	2300      	movs	r3, #0
 800237a:	6393      	str	r3, [r2, #56]	@ 0x38
 800237c:	e022      	b.n	80023c4 <MOTOR_set_duty+0xf4>
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	889b      	ldrh	r3, [r3, #4]
 8002382:	2b08      	cmp	r3, #8
 8002384:	d105      	bne.n	8002392 <MOTOR_set_duty+0xc2>
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	2300      	movs	r3, #0
 800238e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002390:	e018      	b.n	80023c4 <MOTOR_set_duty+0xf4>
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	889b      	ldrh	r3, [r3, #4]
 8002396:	2b0c      	cmp	r3, #12
 8002398:	d105      	bne.n	80023a6 <MOTOR_set_duty+0xd6>
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	2300      	movs	r3, #0
 80023a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80023a4:	e00e      	b.n	80023c4 <MOTOR_set_duty+0xf4>
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	889b      	ldrh	r3, [r3, #4]
 80023aa:	2b10      	cmp	r3, #16
 80023ac:	d105      	bne.n	80023ba <MOTOR_set_duty+0xea>
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	2300      	movs	r3, #0
 80023b6:	6493      	str	r3, [r2, #72]	@ 0x48
 80023b8:	e004      	b.n	80023c4 <MOTOR_set_duty+0xf4>
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	2300      	movs	r3, #0
 80023c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timp_chx, 0);
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	88db      	ldrh	r3, [r3, #6]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d105      	bne.n	80023d8 <MOTOR_set_duty+0x108>
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2200      	movs	r2, #0
 80023d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80023d6:	e1ea      	b.n	80027ae <MOTOR_set_duty+0x4de>
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	88db      	ldrh	r3, [r3, #6]
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d105      	bne.n	80023ec <MOTOR_set_duty+0x11c>
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	2300      	movs	r3, #0
 80023e8:	6393      	str	r3, [r2, #56]	@ 0x38
 80023ea:	e1e0      	b.n	80027ae <MOTOR_set_duty+0x4de>
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	88db      	ldrh	r3, [r3, #6]
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d105      	bne.n	8002400 <MOTOR_set_duty+0x130>
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	2300      	movs	r3, #0
 80023fc:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80023fe:	e1d6      	b.n	80027ae <MOTOR_set_duty+0x4de>
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	88db      	ldrh	r3, [r3, #6]
 8002404:	2b0c      	cmp	r3, #12
 8002406:	d105      	bne.n	8002414 <MOTOR_set_duty+0x144>
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	2300      	movs	r3, #0
 8002410:	6413      	str	r3, [r2, #64]	@ 0x40
 8002412:	e1cc      	b.n	80027ae <MOTOR_set_duty+0x4de>
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	88db      	ldrh	r3, [r3, #6]
 8002418:	2b10      	cmp	r3, #16
 800241a:	d105      	bne.n	8002428 <MOTOR_set_duty+0x158>
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	2300      	movs	r3, #0
 8002424:	6493      	str	r3, [r2, #72]	@ 0x48
 8002426:	e1c2      	b.n	80027ae <MOTOR_set_duty+0x4de>
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	2300      	movs	r3, #0
 8002430:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002432:	e1bc      	b.n	80027ae <MOTOR_set_duty+0x4de>
    } else if (percent_duty > 0) {
 8002434:	edd7 7a06 	vldr	s15, [r7, #24]
 8002438:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800243c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002440:	f340 80d6 	ble.w	80025f0 <MOTOR_set_duty+0x320>
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timd_chx, 0);
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	889b      	ldrh	r3, [r3, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d105      	bne.n	8002458 <MOTOR_set_duty+0x188>
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2200      	movs	r2, #0
 8002454:	635a      	str	r2, [r3, #52]	@ 0x34
 8002456:	e02c      	b.n	80024b2 <MOTOR_set_duty+0x1e2>
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	889b      	ldrh	r3, [r3, #4]
 800245c:	2b04      	cmp	r3, #4
 800245e:	d105      	bne.n	800246c <MOTOR_set_duty+0x19c>
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	2300      	movs	r3, #0
 8002468:	6393      	str	r3, [r2, #56]	@ 0x38
 800246a:	e022      	b.n	80024b2 <MOTOR_set_duty+0x1e2>
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	889b      	ldrh	r3, [r3, #4]
 8002470:	2b08      	cmp	r3, #8
 8002472:	d105      	bne.n	8002480 <MOTOR_set_duty+0x1b0>
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	2300      	movs	r3, #0
 800247c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800247e:	e018      	b.n	80024b2 <MOTOR_set_duty+0x1e2>
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	889b      	ldrh	r3, [r3, #4]
 8002484:	2b0c      	cmp	r3, #12
 8002486:	d105      	bne.n	8002494 <MOTOR_set_duty+0x1c4>
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	2300      	movs	r3, #0
 8002490:	6413      	str	r3, [r2, #64]	@ 0x40
 8002492:	e00e      	b.n	80024b2 <MOTOR_set_duty+0x1e2>
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	889b      	ldrh	r3, [r3, #4]
 8002498:	2b10      	cmp	r3, #16
 800249a:	d105      	bne.n	80024a8 <MOTOR_set_duty+0x1d8>
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	2300      	movs	r3, #0
 80024a4:	6493      	str	r3, [r2, #72]	@ 0x48
 80024a6:	e004      	b.n	80024b2 <MOTOR_set_duty+0x1e2>
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	2300      	movs	r3, #0
 80024b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timp_chx, (uint32_t)(percent_duty*42.499));
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	88db      	ldrh	r3, [r3, #6]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d113      	bne.n	80024e2 <MOTOR_set_duty+0x212>
 80024ba:	69b8      	ldr	r0, [r7, #24]
 80024bc:	f7fe f810 	bl	80004e0 <__aeabi_f2d>
 80024c0:	a321      	add	r3, pc, #132	@ (adr r3, 8002548 <MOTOR_set_duty+0x278>)
 80024c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c6:	f7fe f863 	bl	8000590 <__aeabi_dmul>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	4610      	mov	r0, r2
 80024d0:	4619      	mov	r1, r3
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681c      	ldr	r4, [r3, #0]
 80024d8:	f7fe fb0a 	bl	8000af0 <__aeabi_d2uiz>
 80024dc:	4603      	mov	r3, r0
 80024de:	6363      	str	r3, [r4, #52]	@ 0x34
 80024e0:	e165      	b.n	80027ae <MOTOR_set_duty+0x4de>
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	88db      	ldrh	r3, [r3, #6]
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d113      	bne.n	8002512 <MOTOR_set_duty+0x242>
 80024ea:	69b8      	ldr	r0, [r7, #24]
 80024ec:	f7fd fff8 	bl	80004e0 <__aeabi_f2d>
 80024f0:	a315      	add	r3, pc, #84	@ (adr r3, 8002548 <MOTOR_set_duty+0x278>)
 80024f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f6:	f7fe f84b 	bl	8000590 <__aeabi_dmul>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4610      	mov	r0, r2
 8002500:	4619      	mov	r1, r3
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681c      	ldr	r4, [r3, #0]
 8002508:	f7fe faf2 	bl	8000af0 <__aeabi_d2uiz>
 800250c:	4603      	mov	r3, r0
 800250e:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002510:	e14d      	b.n	80027ae <MOTOR_set_duty+0x4de>
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	88db      	ldrh	r3, [r3, #6]
 8002516:	2b08      	cmp	r3, #8
 8002518:	d126      	bne.n	8002568 <MOTOR_set_duty+0x298>
 800251a:	69b8      	ldr	r0, [r7, #24]
 800251c:	f7fd ffe0 	bl	80004e0 <__aeabi_f2d>
 8002520:	a309      	add	r3, pc, #36	@ (adr r3, 8002548 <MOTOR_set_duty+0x278>)
 8002522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002526:	f7fe f833 	bl	8000590 <__aeabi_dmul>
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	4610      	mov	r0, r2
 8002530:	4619      	mov	r1, r3
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681c      	ldr	r4, [r3, #0]
 8002538:	f7fe fada 	bl	8000af0 <__aeabi_d2uiz>
 800253c:	4603      	mov	r3, r0
 800253e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8002540:	e135      	b.n	80027ae <MOTOR_set_duty+0x4de>
 8002542:	bf00      	nop
 8002544:	f3af 8000 	nop.w
 8002548:	3b645a1d 	.word	0x3b645a1d
 800254c:	40453fdf 	.word	0x40453fdf
 8002550:	00000000 	.word	0x00000000
 8002554:	c0e4c060 	.word	0xc0e4c060
 8002558:	47260300 	.word	0x47260300
 800255c:	c7260300 	.word	0xc7260300
 8002560:	00000000 	.word	0x00000000
 8002564:	40e4c060 	.word	0x40e4c060
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	88db      	ldrh	r3, [r3, #6]
 800256c:	2b0c      	cmp	r3, #12
 800256e:	d113      	bne.n	8002598 <MOTOR_set_duty+0x2c8>
 8002570:	69b8      	ldr	r0, [r7, #24]
 8002572:	f7fd ffb5 	bl	80004e0 <__aeabi_f2d>
 8002576:	a390      	add	r3, pc, #576	@ (adr r3, 80027b8 <MOTOR_set_duty+0x4e8>)
 8002578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257c:	f7fe f808 	bl	8000590 <__aeabi_dmul>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	4610      	mov	r0, r2
 8002586:	4619      	mov	r1, r3
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681c      	ldr	r4, [r3, #0]
 800258e:	f7fe faaf 	bl	8000af0 <__aeabi_d2uiz>
 8002592:	4603      	mov	r3, r0
 8002594:	6423      	str	r3, [r4, #64]	@ 0x40
 8002596:	e10a      	b.n	80027ae <MOTOR_set_duty+0x4de>
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	88db      	ldrh	r3, [r3, #6]
 800259c:	2b10      	cmp	r3, #16
 800259e:	d113      	bne.n	80025c8 <MOTOR_set_duty+0x2f8>
 80025a0:	69b8      	ldr	r0, [r7, #24]
 80025a2:	f7fd ff9d 	bl	80004e0 <__aeabi_f2d>
 80025a6:	a384      	add	r3, pc, #528	@ (adr r3, 80027b8 <MOTOR_set_duty+0x4e8>)
 80025a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ac:	f7fd fff0 	bl	8000590 <__aeabi_dmul>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	4610      	mov	r0, r2
 80025b6:	4619      	mov	r1, r3
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681c      	ldr	r4, [r3, #0]
 80025be:	f7fe fa97 	bl	8000af0 <__aeabi_d2uiz>
 80025c2:	4603      	mov	r3, r0
 80025c4:	64a3      	str	r3, [r4, #72]	@ 0x48
 80025c6:	e0f2      	b.n	80027ae <MOTOR_set_duty+0x4de>
 80025c8:	69b8      	ldr	r0, [r7, #24]
 80025ca:	f7fd ff89 	bl	80004e0 <__aeabi_f2d>
 80025ce:	a37a      	add	r3, pc, #488	@ (adr r3, 80027b8 <MOTOR_set_duty+0x4e8>)
 80025d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d4:	f7fd ffdc 	bl	8000590 <__aeabi_dmul>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	4610      	mov	r0, r2
 80025de:	4619      	mov	r1, r3
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681c      	ldr	r4, [r3, #0]
 80025e6:	f7fe fa83 	bl	8000af0 <__aeabi_d2uiz>
 80025ea:	4603      	mov	r3, r0
 80025ec:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80025ee:	e0de      	b.n	80027ae <MOTOR_set_duty+0x4de>
    } else {
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timd_chx, 42499);
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	889b      	ldrh	r3, [r3, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d106      	bne.n	8002606 <MOTOR_set_duty+0x336>
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f24a 6203 	movw	r2, #42499	@ 0xa603
 8002602:	635a      	str	r2, [r3, #52]	@ 0x34
 8002604:	e031      	b.n	800266a <MOTOR_set_duty+0x39a>
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	889b      	ldrh	r3, [r3, #4]
 800260a:	2b04      	cmp	r3, #4
 800260c:	d106      	bne.n	800261c <MOTOR_set_duty+0x34c>
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	f24a 6303 	movw	r3, #42499	@ 0xa603
 8002618:	6393      	str	r3, [r2, #56]	@ 0x38
 800261a:	e026      	b.n	800266a <MOTOR_set_duty+0x39a>
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	889b      	ldrh	r3, [r3, #4]
 8002620:	2b08      	cmp	r3, #8
 8002622:	d106      	bne.n	8002632 <MOTOR_set_duty+0x362>
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	f24a 6303 	movw	r3, #42499	@ 0xa603
 800262e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002630:	e01b      	b.n	800266a <MOTOR_set_duty+0x39a>
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	889b      	ldrh	r3, [r3, #4]
 8002636:	2b0c      	cmp	r3, #12
 8002638:	d106      	bne.n	8002648 <MOTOR_set_duty+0x378>
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	f24a 6303 	movw	r3, #42499	@ 0xa603
 8002644:	6413      	str	r3, [r2, #64]	@ 0x40
 8002646:	e010      	b.n	800266a <MOTOR_set_duty+0x39a>
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	889b      	ldrh	r3, [r3, #4]
 800264c:	2b10      	cmp	r3, #16
 800264e:	d106      	bne.n	800265e <MOTOR_set_duty+0x38e>
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	f24a 6303 	movw	r3, #42499	@ 0xa603
 800265a:	6493      	str	r3, [r2, #72]	@ 0x48
 800265c:	e005      	b.n	800266a <MOTOR_set_duty+0x39a>
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	f24a 6303 	movw	r3, #42499	@ 0xa603
 8002668:	64d3      	str	r3, [r2, #76]	@ 0x4c
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timp_chx, (uint32_t)fabs((percent_duty*42.499)));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	88db      	ldrh	r3, [r3, #6]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d117      	bne.n	80026a2 <MOTOR_set_duty+0x3d2>
 8002672:	69b8      	ldr	r0, [r7, #24]
 8002674:	f7fd ff34 	bl	80004e0 <__aeabi_f2d>
 8002678:	a34f      	add	r3, pc, #316	@ (adr r3, 80027b8 <MOTOR_set_duty+0x4e8>)
 800267a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267e:	f7fd ff87 	bl	8000590 <__aeabi_dmul>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	613a      	str	r2, [r7, #16]
 8002688:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800268c:	617b      	str	r3, [r7, #20]
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681c      	ldr	r4, [r3, #0]
 8002694:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002698:	f7fe fa2a 	bl	8000af0 <__aeabi_d2uiz>
 800269c:	4603      	mov	r3, r0
 800269e:	6363      	str	r3, [r4, #52]	@ 0x34
 80026a0:	e085      	b.n	80027ae <MOTOR_set_duty+0x4de>
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	88db      	ldrh	r3, [r3, #6]
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d117      	bne.n	80026da <MOTOR_set_duty+0x40a>
 80026aa:	69b8      	ldr	r0, [r7, #24]
 80026ac:	f7fd ff18 	bl	80004e0 <__aeabi_f2d>
 80026b0:	a341      	add	r3, pc, #260	@ (adr r3, 80027b8 <MOTOR_set_duty+0x4e8>)
 80026b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b6:	f7fd ff6b 	bl	8000590 <__aeabi_dmul>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	60ba      	str	r2, [r7, #8]
 80026c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681c      	ldr	r4, [r3, #0]
 80026cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026d0:	f7fe fa0e 	bl	8000af0 <__aeabi_d2uiz>
 80026d4:	4603      	mov	r3, r0
 80026d6:	63a3      	str	r3, [r4, #56]	@ 0x38
 80026d8:	e069      	b.n	80027ae <MOTOR_set_duty+0x4de>
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	88db      	ldrh	r3, [r3, #6]
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d117      	bne.n	8002712 <MOTOR_set_duty+0x442>
 80026e2:	69b8      	ldr	r0, [r7, #24]
 80026e4:	f7fd fefc 	bl	80004e0 <__aeabi_f2d>
 80026e8:	a333      	add	r3, pc, #204	@ (adr r3, 80027b8 <MOTOR_set_duty+0x4e8>)
 80026ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ee:	f7fd ff4f 	bl	8000590 <__aeabi_dmul>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	603a      	str	r2, [r7, #0]
 80026f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026fc:	607b      	str	r3, [r7, #4]
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681c      	ldr	r4, [r3, #0]
 8002704:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002708:	f7fe f9f2 	bl	8000af0 <__aeabi_d2uiz>
 800270c:	4603      	mov	r3, r0
 800270e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8002710:	e04d      	b.n	80027ae <MOTOR_set_duty+0x4de>
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	88db      	ldrh	r3, [r3, #6]
 8002716:	2b0c      	cmp	r3, #12
 8002718:	d116      	bne.n	8002748 <MOTOR_set_duty+0x478>
 800271a:	69b8      	ldr	r0, [r7, #24]
 800271c:	f7fd fee0 	bl	80004e0 <__aeabi_f2d>
 8002720:	a325      	add	r3, pc, #148	@ (adr r3, 80027b8 <MOTOR_set_duty+0x4e8>)
 8002722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002726:	f7fd ff33 	bl	8000590 <__aeabi_dmul>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	4615      	mov	r5, r2
 8002730:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681c      	ldr	r4, [r3, #0]
 800273a:	4628      	mov	r0, r5
 800273c:	4631      	mov	r1, r6
 800273e:	f7fe f9d7 	bl	8000af0 <__aeabi_d2uiz>
 8002742:	4603      	mov	r3, r0
 8002744:	6423      	str	r3, [r4, #64]	@ 0x40
 8002746:	e032      	b.n	80027ae <MOTOR_set_duty+0x4de>
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	88db      	ldrh	r3, [r3, #6]
 800274c:	2b10      	cmp	r3, #16
 800274e:	d116      	bne.n	800277e <MOTOR_set_duty+0x4ae>
 8002750:	69b8      	ldr	r0, [r7, #24]
 8002752:	f7fd fec5 	bl	80004e0 <__aeabi_f2d>
 8002756:	a318      	add	r3, pc, #96	@ (adr r3, 80027b8 <MOTOR_set_duty+0x4e8>)
 8002758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275c:	f7fd ff18 	bl	8000590 <__aeabi_dmul>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4692      	mov	sl, r2
 8002766:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681c      	ldr	r4, [r3, #0]
 8002770:	4650      	mov	r0, sl
 8002772:	4659      	mov	r1, fp
 8002774:	f7fe f9bc 	bl	8000af0 <__aeabi_d2uiz>
 8002778:	4603      	mov	r3, r0
 800277a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800277c:	e017      	b.n	80027ae <MOTOR_set_duty+0x4de>
 800277e:	69b8      	ldr	r0, [r7, #24]
 8002780:	f7fd feae 	bl	80004e0 <__aeabi_f2d>
 8002784:	a30c      	add	r3, pc, #48	@ (adr r3, 80027b8 <MOTOR_set_duty+0x4e8>)
 8002786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800278a:	f7fd ff01 	bl	8000590 <__aeabi_dmul>
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	4690      	mov	r8, r2
 8002794:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681c      	ldr	r4, [r3, #0]
 800279e:	4640      	mov	r0, r8
 80027a0:	4649      	mov	r1, r9
 80027a2:	f7fe f9a5 	bl	8000af0 <__aeabi_d2uiz>
 80027a6:	4603      	mov	r3, r0
 80027a8:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80027aa:	e000      	b.n	80027ae <MOTOR_set_duty+0x4de>
        return;
 80027ac:	bf00      	nop
    }
}
 80027ae:	3724      	adds	r7, #36	@ 0x24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027b6:	bf00      	nop
 80027b8:	3b645a1d 	.word	0x3b645a1d
 80027bc:	40453fdf 	.word	0x40453fdf

080027c0 <PID_controller_init>:
float boundary = 0.05;

//-------------------------------------------Function Code-------------------------------------------------------//

void PID_controller_init(PID_struct* PID,float UP_Kp, float UP_Ki, float UP_Kd)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80027cc:	edc7 0a01 	vstr	s1, [r7, #4]
 80027d0:	ed87 1a00 	vstr	s2, [r7]
 PID->Kp = UP_Kp;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	601a      	str	r2, [r3, #0]
 PID->Ki = UP_Ki;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	605a      	str	r2, [r3, #4]
 PID->Kd = UP_Kd;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	609a      	str	r2, [r3, #8]

 PID->Error[n] = 0;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	60da      	str	r2, [r3, #12]
 PID->Error[n_1] = 0;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	611a      	str	r2, [r3, #16]
 PID->Error[n_2] = 0;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	615a      	str	r2, [r3, #20]
 PID->out = 0;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	619a      	str	r2, [r3, #24]
}
 8002806:	bf00      	nop
 8002808:	3714      	adds	r7, #20
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
	...

08002814 <PID_controller_calculate_pos>:
void PID_controller_calculate_pos(PID_struct* PID,AMT_Encoder* Feedback, float setpoint)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	ed87 0a01 	vstr	s0, [r7, #4]
 // Output velocity in boundary of 550mm/s
 PID->Error[n] = setpoint - Feedback->Linear_Position;
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002828:	ed97 7a01 	vldr	s14, [r7, #4]
 800282c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	edc3 7a03 	vstr	s15, [r3, #12]
 if (!((PID->out >= 550 && PID->Error[n] > 0) || (PID->out <= -550 && PID->Error[n] < 0))) {
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	edd3 7a06 	vldr	s15, [r3, #24]
 800283c:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8002978 <PID_controller_calculate_pos+0x164>
 8002840:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002848:	bfac      	ite	ge
 800284a:	2301      	movge	r3, #1
 800284c:	2300      	movlt	r3, #0
 800284e:	b2db      	uxtb	r3, r3
 8002850:	f083 0301 	eor.w	r3, r3, #1
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10f      	bne.n	800287a <PID_controller_calculate_pos+0x66>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002860:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002868:	bfcc      	ite	gt
 800286a:	2301      	movgt	r3, #1
 800286c:	2300      	movle	r3, #0
 800286e:	b2db      	uxtb	r3, r3
 8002870:	f083 0301 	eor.w	r3, r3, #1
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d056      	beq.n	8002928 <PID_controller_calculate_pos+0x114>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002880:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 800297c <PID_controller_calculate_pos+0x168>
 8002884:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800288c:	bf94      	ite	ls
 800288e:	2301      	movls	r3, #1
 8002890:	2300      	movhi	r3, #0
 8002892:	b2db      	uxtb	r3, r3
 8002894:	f083 0301 	eor.w	r3, r3, #1
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10f      	bne.n	80028be <PID_controller_calculate_pos+0xaa>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80028a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ac:	bf4c      	ite	mi
 80028ae:	2301      	movmi	r3, #1
 80028b0:	2300      	movpl	r3, #0
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	f083 0301 	eor.w	r3, r3, #1
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d034      	beq.n	8002928 <PID_controller_calculate_pos+0x114>
     PID->out += ((PID->Kp + PID->Ki + PID->Kd) * PID->Error[n])
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	ed93 7a06 	vldr	s14, [r3, #24]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	edd3 6a00 	vldr	s13, [r3]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80028d0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80028da:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	edd3 7a03 	vldr	s15, [r3, #12]
 80028e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
                      - ((PID->Kp + (2 * PID->Kd)) * PID->Error[n_1])
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	ed93 6a00 	vldr	s12, [r3]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80028f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80028f8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	edd3 7a04 	vldr	s15, [r3, #16]
 8002902:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002906:	ee76 6ae7 	vsub.f32	s13, s13, s15
                      + (PID->Kd * PID->Error[n_2]);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	ed93 6a02 	vldr	s12, [r3, #8]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	edd3 7a05 	vldr	s15, [r3, #20]
 8002916:	ee66 7a27 	vmul.f32	s15, s12, s15
 800291a:	ee76 7aa7 	vadd.f32	s15, s13, s15
     PID->out += ((PID->Kp + PID->Ki + PID->Kd) * PID->Error[n])
 800291e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	edc3 7a06 	vstr	s15, [r3, #24]
 }
 if(PID->out > 550){
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	edd3 7a06 	vldr	s15, [r3, #24]
 800292e:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002978 <PID_controller_calculate_pos+0x164>
 8002932:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800293a:	dd02      	ble.n	8002942 <PID_controller_calculate_pos+0x12e>
	 PID->out = 550;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4a10      	ldr	r2, [pc, #64]	@ (8002980 <PID_controller_calculate_pos+0x16c>)
 8002940:	619a      	str	r2, [r3, #24]
 }
 if(PID->out < -550){
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	edd3 7a06 	vldr	s15, [r3, #24]
 8002948:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800297c <PID_controller_calculate_pos+0x168>
 800294c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002954:	d502      	bpl.n	800295c <PID_controller_calculate_pos+0x148>
	 PID->out = -550;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	4a0a      	ldr	r2, [pc, #40]	@ (8002984 <PID_controller_calculate_pos+0x170>)
 800295a:	619a      	str	r2, [r3, #24]
 }
 PID->Error[n_2] = PID->Error[n_1];
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	691a      	ldr	r2, [r3, #16]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	615a      	str	r2, [r3, #20]
 PID->Error[n_1] = PID->Error[n];
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	68da      	ldr	r2, [r3, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	611a      	str	r2, [r3, #16]
}
 800296c:	bf00      	nop
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	44098000 	.word	0x44098000
 800297c:	c4098000 	.word	0xc4098000
 8002980:	44098000 	.word	0x44098000
 8002984:	c4098000 	.word	0xc4098000

08002988 <PID_controller_calculate_velo>:

void PID_controller_calculate_velo(PID_struct* PID,AMT_Encoder* Feedback, float setpoint)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	ed87 0a01 	vstr	s0, [r7, #4]
 // Output pwm to drive the motor
 PID->Error[n] = setpoint - Feedback->Linear_Velocity + Traj.currentVelocity;
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800299c:	ed97 7a01 	vldr	s14, [r7, #4]
 80029a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029a4:	4b54      	ldr	r3, [pc, #336]	@ (8002af8 <PID_controller_calculate_velo+0x170>)
 80029a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80029aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	edc3 7a03 	vstr	s15, [r3, #12]
 if (!((PID->out >= 1000 && PID->Error[n] > 0) || (PID->out <= -1000 && PID->Error[n] < 0))) {
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	edd3 7a06 	vldr	s15, [r3, #24]
 80029ba:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8002afc <PID_controller_calculate_velo+0x174>
 80029be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029c6:	bfac      	ite	ge
 80029c8:	2301      	movge	r3, #1
 80029ca:	2300      	movlt	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	f083 0301 	eor.w	r3, r3, #1
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10f      	bne.n	80029f8 <PID_controller_calculate_velo+0x70>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	edd3 7a03 	vldr	s15, [r3, #12]
 80029de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e6:	bfcc      	ite	gt
 80029e8:	2301      	movgt	r3, #1
 80029ea:	2300      	movle	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	f083 0301 	eor.w	r3, r3, #1
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d056      	beq.n	8002aa6 <PID_controller_calculate_velo+0x11e>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	edd3 7a06 	vldr	s15, [r3, #24]
 80029fe:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8002b00 <PID_controller_calculate_velo+0x178>
 8002a02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a0a:	bf94      	ite	ls
 8002a0c:	2301      	movls	r3, #1
 8002a0e:	2300      	movhi	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	f083 0301 	eor.w	r3, r3, #1
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10f      	bne.n	8002a3c <PID_controller_calculate_velo+0xb4>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a2a:	bf4c      	ite	mi
 8002a2c:	2301      	movmi	r3, #1
 8002a2e:	2300      	movpl	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	f083 0301 	eor.w	r3, r3, #1
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d034      	beq.n	8002aa6 <PID_controller_calculate_velo+0x11e>
     PID->out += ((PID->Kp + PID->Ki + PID->Kd) * PID->Error[n])
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	ed93 7a06 	vldr	s14, [r3, #24]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	edd3 6a00 	vldr	s13, [r3]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a4e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a58:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a62:	ee66 6aa7 	vmul.f32	s13, s13, s15
                      - ((PID->Kp + (2 * PID->Kd)) * PID->Error[n_1])
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	ed93 6a00 	vldr	s12, [r3]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a72:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002a76:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a80:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002a84:	ee76 6ae7 	vsub.f32	s13, s13, s15
                      + (PID->Kd * PID->Error[n_2]);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	ed93 6a02 	vldr	s12, [r3, #8]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	edd3 7a05 	vldr	s15, [r3, #20]
 8002a94:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002a98:	ee76 7aa7 	vadd.f32	s15, s13, s15
     PID->out += ((PID->Kp + PID->Ki + PID->Kd) * PID->Error[n])
 8002a9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	edc3 7a06 	vstr	s15, [r3, #24]
 }
 if(PID->out > 1000){
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	edd3 7a06 	vldr	s15, [r3, #24]
 8002aac:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8002afc <PID_controller_calculate_velo+0x174>
 8002ab0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ab8:	dd02      	ble.n	8002ac0 <PID_controller_calculate_velo+0x138>
	 PID->out = 1000;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4a11      	ldr	r2, [pc, #68]	@ (8002b04 <PID_controller_calculate_velo+0x17c>)
 8002abe:	619a      	str	r2, [r3, #24]
 }
 if(PID->out < -1000){
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ac6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002b00 <PID_controller_calculate_velo+0x178>
 8002aca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad2:	d502      	bpl.n	8002ada <PID_controller_calculate_velo+0x152>
	 PID->out = -1000;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4a0c      	ldr	r2, [pc, #48]	@ (8002b08 <PID_controller_calculate_velo+0x180>)
 8002ad8:	619a      	str	r2, [r3, #24]
 }
 PID->Error[n_2] = PID->Error[n_1];
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	691a      	ldr	r2, [r3, #16]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	615a      	str	r2, [r3, #20]
 PID->Error[n_1] = PID->Error[n];
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	611a      	str	r2, [r3, #16]
}
 8002aea:	bf00      	nop
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20000b30 	.word	0x20000b30
 8002afc:	447a0000 	.word	0x447a0000
 8002b00:	c47a0000 	.word	0xc47a0000
 8002b04:	447a0000 	.word	0x447a0000
 8002b08:	c47a0000 	.word	0xc47a0000

08002b0c <PID_controller_cascade>:

void PID_controller_cascade(PID_struct* PID_pos, PID_struct* PID_vel, AMT_Encoder* QEI, float setpoint)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
 8002b18:	ed87 0a00 	vstr	s0, [r7]
	PID_controller_calculate_pos(PID_pos, QEI , setpoint);
 8002b1c:	ed97 0a00 	vldr	s0, [r7]
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f7ff fe76 	bl	8002814 <PID_controller_calculate_pos>
	PID_controller_calculate_velo(PID_vel, QEI, ((PID_pos->out)));
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b2e:	eeb0 0a67 	vmov.f32	s0, s15
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	68b8      	ldr	r0, [r7, #8]
 8002b36:	f7ff ff27 	bl	8002988 <PID_controller_calculate_velo>
//	PID_controller_calculate_velo(PID_vel, QEI, Traj.currentVelocity);
}
 8002b3a:	bf00      	nop
 8002b3c:	3710      	adds	r7, #16
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
	...

08002b44 <PS2X_Reader>:
    PS2->PIDPos = 0;
    PS2->on = 0;
}

void PS2X_Reader()
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
    if (ps2.ps2RX[0] == 69) 		// Press L4 to switch to use Joy stick
 8002b4a:	4b86      	ldr	r3, [pc, #536]	@ (8002d64 <PS2X_Reader+0x220>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b45      	cmp	r3, #69	@ 0x45
 8002b50:	d105      	bne.n	8002b5e <PS2X_Reader+0x1a>
    {
        ps2.mode = 1;
 8002b52:	4b84      	ldr	r3, [pc, #528]	@ (8002d64 <PS2X_Reader+0x220>)
 8002b54:	2201      	movs	r2, #1
 8002b56:	66da      	str	r2, [r3, #108]	@ 0x6c
        ps2.on = 0;
 8002b58:	4b82      	ldr	r3, [pc, #520]	@ (8002d64 <PS2X_Reader+0x220>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	67da      	str	r2, [r3, #124]	@ 0x7c
    }
    if (ps2.ps2RX[0] == 70)		// Press L5 to switch to use Button
 8002b5e:	4b81      	ldr	r3, [pc, #516]	@ (8002d64 <PS2X_Reader+0x220>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	2b46      	cmp	r3, #70	@ 0x46
 8002b64:	d10d      	bne.n	8002b82 <PS2X_Reader+0x3e>
    {
        ps2.mode = 2;
 8002b66:	4b7f      	ldr	r3, [pc, #508]	@ (8002d64 <PS2X_Reader+0x220>)
 8002b68:	2202      	movs	r2, #2
 8002b6a:	66da      	str	r2, [r3, #108]	@ 0x6c
        PID_velo.out = 0;
 8002b6c:	4b7e      	ldr	r3, [pc, #504]	@ (8002d68 <PS2X_Reader+0x224>)
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	619a      	str	r2, [r3, #24]
        ps2.on = 1;
 8002b74:	4b7b      	ldr	r3, [pc, #492]	@ (8002d64 <PS2X_Reader+0x220>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	67da      	str	r2, [r3, #124]	@ 0x7c
        ps2.PIDPos = AMT.Linear_Position;
 8002b7a:	4b7c      	ldr	r3, [pc, #496]	@ (8002d6c <PS2X_Reader+0x228>)
 8002b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b7e:	4a79      	ldr	r2, [pc, #484]	@ (8002d64 <PS2X_Reader+0x220>)
 8002b80:	6793      	str	r3, [r2, #120]	@ 0x78
    }

    // Mode Joy stick
    if (ps2.mode == 1)
 8002b82:	4b78      	ldr	r3, [pc, #480]	@ (8002d64 <PS2X_Reader+0x220>)
 8002b84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	f040 8086 	bne.w	8002c98 <PS2X_Reader+0x154>
    {
        // Read Ps2 Joy stick in VERTICAL
        if (ps2.ps2RX[0] == 81)
 8002b8c:	4b75      	ldr	r3, [pc, #468]	@ (8002d64 <PS2X_Reader+0x220>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b51      	cmp	r3, #81	@ 0x51
 8002b92:	d169      	bne.n	8002c68 <PS2X_Reader+0x124>
        {
            if (ps2.ps2RX[2] == 83) {
 8002b94:	4b73      	ldr	r3, [pc, #460]	@ (8002d64 <PS2X_Reader+0x220>)
 8002b96:	789b      	ldrb	r3, [r3, #2]
 8002b98:	2b53      	cmp	r3, #83	@ 0x53
 8002b9a:	d103      	bne.n	8002ba4 <PS2X_Reader+0x60>
                ps2.digit = 1;
 8002b9c:	4b71      	ldr	r3, [pc, #452]	@ (8002d64 <PS2X_Reader+0x220>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	e00e      	b.n	8002bc2 <PS2X_Reader+0x7e>
            }
            else if (ps2.ps2RX[3] == 83) {
 8002ba4:	4b6f      	ldr	r3, [pc, #444]	@ (8002d64 <PS2X_Reader+0x220>)
 8002ba6:	78db      	ldrb	r3, [r3, #3]
 8002ba8:	2b53      	cmp	r3, #83	@ 0x53
 8002baa:	d103      	bne.n	8002bb4 <PS2X_Reader+0x70>
                ps2.digit = 2;
 8002bac:	4b6d      	ldr	r3, [pc, #436]	@ (8002d64 <PS2X_Reader+0x220>)
 8002bae:	2202      	movs	r2, #2
 8002bb0:	60da      	str	r2, [r3, #12]
 8002bb2:	e006      	b.n	8002bc2 <PS2X_Reader+0x7e>
            }
            else if (ps2.ps2RX[4] == 83) {
 8002bb4:	4b6b      	ldr	r3, [pc, #428]	@ (8002d64 <PS2X_Reader+0x220>)
 8002bb6:	791b      	ldrb	r3, [r3, #4]
 8002bb8:	2b53      	cmp	r3, #83	@ 0x53
 8002bba:	d102      	bne.n	8002bc2 <PS2X_Reader+0x7e>
                ps2.digit = 3;
 8002bbc:	4b69      	ldr	r3, [pc, #420]	@ (8002d64 <PS2X_Reader+0x220>)
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	60da      	str	r2, [r3, #12]
            }
            for (int k = 1; k < 5; k++) {
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	e01d      	b.n	8002c04 <PS2X_Reader+0xc0>
                for (int l = 0; l < 10; l++) {
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60bb      	str	r3, [r7, #8]
 8002bcc:	e014      	b.n	8002bf8 <PS2X_Reader+0xb4>
                    if (ps2.ps2RX[k] == num[l]) {
 8002bce:	4a65      	ldr	r2, [pc, #404]	@ (8002d64 <PS2X_Reader+0x220>)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4a65      	ldr	r2, [pc, #404]	@ (8002d70 <PS2X_Reader+0x22c>)
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be0:	4299      	cmp	r1, r3
 8002be2:	d106      	bne.n	8002bf2 <PS2X_Reader+0xae>
                        ps2.gain[k - 1] = l;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	3b01      	subs	r3, #1
 8002be8:	495e      	ldr	r1, [pc, #376]	@ (8002d64 <PS2X_Reader+0x220>)
 8002bea:	3304      	adds	r3, #4
 8002bec:	68ba      	ldr	r2, [r7, #8]
 8002bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                for (int l = 0; l < 10; l++) {
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	60bb      	str	r3, [r7, #8]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2b09      	cmp	r3, #9
 8002bfc:	dde7      	ble.n	8002bce <PS2X_Reader+0x8a>
            for (int k = 1; k < 5; k++) {
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	3301      	adds	r3, #1
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	ddde      	ble.n	8002bc8 <PS2X_Reader+0x84>
                    }
                }
            }
            if (ps2.digit == 1) {
 8002c0a:	4b56      	ldr	r3, [pc, #344]	@ (8002d64 <PS2X_Reader+0x220>)
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d104      	bne.n	8002c1c <PS2X_Reader+0xd8>
                ps2.ps2YPos = ps2.gain[0];
 8002c12:	4b54      	ldr	r3, [pc, #336]	@ (8002d64 <PS2X_Reader+0x220>)
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	4a53      	ldr	r2, [pc, #332]	@ (8002d64 <PS2X_Reader+0x220>)
 8002c18:	6213      	str	r3, [r2, #32]
 8002c1a:	e025      	b.n	8002c68 <PS2X_Reader+0x124>
            }
            else if (ps2.digit == 2) {
 8002c1c:	4b51      	ldr	r3, [pc, #324]	@ (8002d64 <PS2X_Reader+0x220>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d10c      	bne.n	8002c3e <PS2X_Reader+0xfa>
                ps2.ps2YPos = (ps2.gain[0] * 10) + ps2.gain[1];
 8002c24:	4b4f      	ldr	r3, [pc, #316]	@ (8002d64 <PS2X_Reader+0x220>)
 8002c26:	691a      	ldr	r2, [r3, #16]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	461a      	mov	r2, r3
 8002c32:	4b4c      	ldr	r3, [pc, #304]	@ (8002d64 <PS2X_Reader+0x220>)
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	4413      	add	r3, r2
 8002c38:	4a4a      	ldr	r2, [pc, #296]	@ (8002d64 <PS2X_Reader+0x220>)
 8002c3a:	6213      	str	r3, [r2, #32]
 8002c3c:	e014      	b.n	8002c68 <PS2X_Reader+0x124>
            }
            else if (ps2.digit == 3) {
 8002c3e:	4b49      	ldr	r3, [pc, #292]	@ (8002d64 <PS2X_Reader+0x220>)
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	2b03      	cmp	r3, #3
 8002c44:	d110      	bne.n	8002c68 <PS2X_Reader+0x124>
                ps2.ps2YPos = (ps2.gain[0] * 100) + (ps2.gain[1] * 10) + ps2.gain[2];
 8002c46:	4b47      	ldr	r3, [pc, #284]	@ (8002d64 <PS2X_Reader+0x220>)
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	2264      	movs	r2, #100	@ 0x64
 8002c4c:	fb02 f103 	mul.w	r1, r2, r3
 8002c50:	4b44      	ldr	r3, [pc, #272]	@ (8002d64 <PS2X_Reader+0x220>)
 8002c52:	695a      	ldr	r2, [r3, #20]
 8002c54:	4613      	mov	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	18ca      	adds	r2, r1, r3
 8002c5e:	4b41      	ldr	r3, [pc, #260]	@ (8002d64 <PS2X_Reader+0x220>)
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	4413      	add	r3, r2
 8002c64:	4a3f      	ldr	r2, [pc, #252]	@ (8002d64 <PS2X_Reader+0x220>)
 8002c66:	6213      	str	r3, [r2, #32]
            }
        }

        // Convert from 0 - 255 to -128 - 128
//        ps2.pwmOut = ((ps2.ps2Y / 132.0) * 300) + 150;
        ps2.pwmOut = 320 - ps2.ps2YPos;
 8002c68:	4b3e      	ldr	r3, [pc, #248]	@ (8002d64 <PS2X_Reader+0x220>)
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8002c70:	4a3c      	ldr	r2, [pc, #240]	@ (8002d64 <PS2X_Reader+0x220>)
 8002c72:	6693      	str	r3, [r2, #104]	@ 0x68
        if (ps2.pwmOut > 300) {
 8002c74:	4b3b      	ldr	r3, [pc, #236]	@ (8002d64 <PS2X_Reader+0x220>)
 8002c76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c78:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002c7c:	dd03      	ble.n	8002c86 <PS2X_Reader+0x142>
            ps2.pwmOut = 350;
 8002c7e:	4b39      	ldr	r3, [pc, #228]	@ (8002d64 <PS2X_Reader+0x220>)
 8002c80:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8002c84:	669a      	str	r2, [r3, #104]	@ 0x68
        }
        if (ps2.pwmOut < -300) {
 8002c86:	4b37      	ldr	r3, [pc, #220]	@ (8002d64 <PS2X_Reader+0x220>)
 8002c88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c8a:	f513 7f96 	cmn.w	r3, #300	@ 0x12c
 8002c8e:	da64      	bge.n	8002d5a <PS2X_Reader+0x216>
            ps2.pwmOut = 0;
 8002c90:	4b34      	ldr	r3, [pc, #208]	@ (8002d64 <PS2X_Reader+0x220>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	669a      	str	r2, [r3, #104]	@ 0x68
        }

        handle_shelve_mode();
        handle_PIDPos_adjustment();
    }
}
 8002c96:	e060      	b.n	8002d5a <PS2X_Reader+0x216>
    else if (ps2.mode == 2)
 8002c98:	4b32      	ldr	r3, [pc, #200]	@ (8002d64 <PS2X_Reader+0x220>)
 8002c9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d15c      	bne.n	8002d5a <PS2X_Reader+0x216>
        ps2.on = 1;
 8002ca0:	4b30      	ldr	r3, [pc, #192]	@ (8002d64 <PS2X_Reader+0x220>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	67da      	str	r2, [r3, #124]	@ 0x7c
        ps2.ps2Y = 0;
 8002ca6:	4b2f      	ldr	r3, [pc, #188]	@ (8002d64 <PS2X_Reader+0x220>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	61da      	str	r2, [r3, #28]
        if (timestamp < HAL_GetTick())
 8002cac:	f001 fd4e 	bl	800474c <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	4b30      	ldr	r3, [pc, #192]	@ (8002d74 <PS2X_Reader+0x230>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d908      	bls.n	8002ccc <PS2X_Reader+0x188>
            timestamp = HAL_GetTick() + 25;
 8002cba:	f001 fd47 	bl	800474c <HAL_GetTick>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	3319      	adds	r3, #25
 8002cc2:	4a2c      	ldr	r2, [pc, #176]	@ (8002d74 <PS2X_Reader+0x230>)
 8002cc4:	6013      	str	r3, [r2, #0]
            ps2.ps2RX[0] = 0;
 8002cc6:	4b27      	ldr	r3, [pc, #156]	@ (8002d64 <PS2X_Reader+0x220>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 6; i++)
 8002ccc:	2300      	movs	r3, #0
 8002cce:	607b      	str	r3, [r7, #4]
 8002cd0:	e00e      	b.n	8002cf0 <PS2X_Reader+0x1ac>
            ps2.l[i] = 0;
 8002cd2:	4a24      	ldr	r2, [pc, #144]	@ (8002d64 <PS2X_Reader+0x220>)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3314      	adds	r3, #20
 8002cd8:	2100      	movs	r1, #0
 8002cda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            ps2.r[i] = 0;
 8002cde:	4a21      	ldr	r2, [pc, #132]	@ (8002d64 <PS2X_Reader+0x220>)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	330e      	adds	r3, #14
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (int i = 0; i < 6; i++)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3301      	adds	r3, #1
 8002cee:	607b      	str	r3, [r7, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b05      	cmp	r3, #5
 8002cf4:	dded      	ble.n	8002cd2 <PS2X_Reader+0x18e>
        if (ps2.ps2RX[0] >= 65 && ps2.ps2RX[0] <= 70) {
 8002cf6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d64 <PS2X_Reader+0x220>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b40      	cmp	r3, #64	@ 0x40
 8002cfc:	d90b      	bls.n	8002d16 <PS2X_Reader+0x1d2>
 8002cfe:	4b19      	ldr	r3, [pc, #100]	@ (8002d64 <PS2X_Reader+0x220>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b46      	cmp	r3, #70	@ 0x46
 8002d04:	d807      	bhi.n	8002d16 <PS2X_Reader+0x1d2>
            ps2.l[ps2.ps2RX[0] - 65] = 1;
 8002d06:	4b17      	ldr	r3, [pc, #92]	@ (8002d64 <PS2X_Reader+0x220>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	3b41      	subs	r3, #65	@ 0x41
 8002d0c:	4a15      	ldr	r2, [pc, #84]	@ (8002d64 <PS2X_Reader+0x220>)
 8002d0e:	3314      	adds	r3, #20
 8002d10:	2101      	movs	r1, #1
 8002d12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if (ps2.ps2RX[0] >= 73 && ps2.ps2RX[0] <= 78) {
 8002d16:	4b13      	ldr	r3, [pc, #76]	@ (8002d64 <PS2X_Reader+0x220>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b48      	cmp	r3, #72	@ 0x48
 8002d1c:	d90b      	bls.n	8002d36 <PS2X_Reader+0x1f2>
 8002d1e:	4b11      	ldr	r3, [pc, #68]	@ (8002d64 <PS2X_Reader+0x220>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b4e      	cmp	r3, #78	@ 0x4e
 8002d24:	d807      	bhi.n	8002d36 <PS2X_Reader+0x1f2>
            ps2.r[ps2.ps2RX[0] - 73] = 1;
 8002d26:	4b0f      	ldr	r3, [pc, #60]	@ (8002d64 <PS2X_Reader+0x220>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	3b49      	subs	r3, #73	@ 0x49
 8002d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8002d64 <PS2X_Reader+0x220>)
 8002d2e:	330e      	adds	r3, #14
 8002d30:	2101      	movs	r1, #1
 8002d32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if (ps2.ps2RX[0] == 67) {
 8002d36:	4b0b      	ldr	r3, [pc, #44]	@ (8002d64 <PS2X_Reader+0x220>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b43      	cmp	r3, #67	@ 0x43
 8002d3c:	d102      	bne.n	8002d44 <PS2X_Reader+0x200>
            ps2.l[2] = 1;
 8002d3e:	4b09      	ldr	r3, [pc, #36]	@ (8002d64 <PS2X_Reader+0x220>)
 8002d40:	2201      	movs	r2, #1
 8002d42:	659a      	str	r2, [r3, #88]	@ 0x58
        if (ps2.ps2RX[0] == 68) {
 8002d44:	4b07      	ldr	r3, [pc, #28]	@ (8002d64 <PS2X_Reader+0x220>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b44      	cmp	r3, #68	@ 0x44
 8002d4a:	d102      	bne.n	8002d52 <PS2X_Reader+0x20e>
            ps2.l[3] = 1;
 8002d4c:	4b05      	ldr	r3, [pc, #20]	@ (8002d64 <PS2X_Reader+0x220>)
 8002d4e:	2201      	movs	r2, #1
 8002d50:	65da      	str	r2, [r3, #92]	@ 0x5c
        handle_shelve_mode();
 8002d52:	f000 f811 	bl	8002d78 <handle_shelve_mode>
        handle_PIDPos_adjustment();
 8002d56:	f000 f877 	bl	8002e48 <handle_PIDPos_adjustment>
}
 8002d5a:	bf00      	nop
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	20000b88 	.word	0x20000b88
 8002d68:	20000c08 	.word	0x20000c08
 8002d6c:	20000b48 	.word	0x20000b48
 8002d70:	20000214 	.word	0x20000214
 8002d74:	2000035c 	.word	0x2000035c

08002d78 <handle_shelve_mode>:

void handle_shelve_mode()
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
    static uint32_t debounce_time = 0;
    uint32_t current_time = HAL_GetTick();
 8002d7e:	f001 fce5 	bl	800474c <HAL_GetTick>
 8002d82:	6078      	str	r0, [r7, #4]
    if (base.ShelveMode == 1)
 8002d84:	4b2b      	ldr	r3, [pc, #172]	@ (8002e34 <handle_shelve_mode+0xbc>)
 8002d86:	8b1b      	ldrh	r3, [r3, #24]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d14f      	bne.n	8002e2c <handle_shelve_mode+0xb4>
    {
        if (ps2.ps2RX[0] == 76 && current_time > debounce_time)
 8002d8c:	4b2a      	ldr	r3, [pc, #168]	@ (8002e38 <handle_shelve_mode+0xc0>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b4c      	cmp	r3, #76	@ 0x4c
 8002d92:	d11d      	bne.n	8002dd0 <handle_shelve_mode+0x58>
 8002d94:	4b29      	ldr	r3, [pc, #164]	@ (8002e3c <handle_shelve_mode+0xc4>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d918      	bls.n	8002dd0 <handle_shelve_mode+0x58>
        {
            // Press Select to save shelve
            base.Shelve[(count - 1) / 2] = AMT.Linear_Position;
 8002d9e:	4b28      	ldr	r3, [pc, #160]	@ (8002e40 <handle_shelve_mode+0xc8>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	0fda      	lsrs	r2, r3, #31
 8002da6:	4413      	add	r3, r2
 8002da8:	105b      	asrs	r3, r3, #1
 8002daa:	4618      	mov	r0, r3
 8002dac:	4b25      	ldr	r3, [pc, #148]	@ (8002e44 <handle_shelve_mode+0xcc>)
 8002dae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002db0:	4920      	ldr	r1, [pc, #128]	@ (8002e34 <handle_shelve_mode+0xbc>)
 8002db2:	1d83      	adds	r3, r0, #6
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	440b      	add	r3, r1
 8002db8:	3304      	adds	r3, #4
 8002dba:	601a      	str	r2, [r3, #0]
            count += 1;
 8002dbc:	4b20      	ldr	r3, [pc, #128]	@ (8002e40 <handle_shelve_mode+0xc8>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	4a1f      	ldr	r2, [pc, #124]	@ (8002e40 <handle_shelve_mode+0xc8>)
 8002dc4:	6013      	str	r3, [r2, #0]
            debounce_time = current_time + 250; // Debounce delay of 250ms
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	33fa      	adds	r3, #250	@ 0xfa
 8002dca:	4a1c      	ldr	r2, [pc, #112]	@ (8002e3c <handle_shelve_mode+0xc4>)
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	e02d      	b.n	8002e2c <handle_shelve_mode+0xb4>
        }
        else if (ps2.ps2RX[0] == 73 && current_time > debounce_time)
 8002dd0:	4b19      	ldr	r3, [pc, #100]	@ (8002e38 <handle_shelve_mode+0xc0>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b49      	cmp	r3, #73	@ 0x49
 8002dd6:	d11d      	bne.n	8002e14 <handle_shelve_mode+0x9c>
 8002dd8:	4b18      	ldr	r3, [pc, #96]	@ (8002e3c <handle_shelve_mode+0xc4>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d918      	bls.n	8002e14 <handle_shelve_mode+0x9c>
        {
            // Press Triangle to delete old array
            base.Shelve[((count - 1) / 2) - 1] = 0;
 8002de2:	4b17      	ldr	r3, [pc, #92]	@ (8002e40 <handle_shelve_mode+0xc8>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	3b01      	subs	r3, #1
 8002de8:	0fda      	lsrs	r2, r3, #31
 8002dea:	4413      	add	r3, r2
 8002dec:	105b      	asrs	r3, r3, #1
 8002dee:	3b01      	subs	r3, #1
 8002df0:	4a10      	ldr	r2, [pc, #64]	@ (8002e34 <handle_shelve_mode+0xbc>)
 8002df2:	3306      	adds	r3, #6
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	3304      	adds	r3, #4
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
            count -= 1;
 8002e00:	4b0f      	ldr	r3, [pc, #60]	@ (8002e40 <handle_shelve_mode+0xc8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	3b01      	subs	r3, #1
 8002e06:	4a0e      	ldr	r2, [pc, #56]	@ (8002e40 <handle_shelve_mode+0xc8>)
 8002e08:	6013      	str	r3, [r2, #0]
            debounce_time = current_time + 250; // Debounce delay of 250ms
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	33fa      	adds	r3, #250	@ 0xfa
 8002e0e:	4a0b      	ldr	r2, [pc, #44]	@ (8002e3c <handle_shelve_mode+0xc4>)
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	e00b      	b.n	8002e2c <handle_shelve_mode+0xb4>
        }
        else if (ps2.ps2RX[0] == 72 && base.ShelveMode == 1)
 8002e14:	4b08      	ldr	r3, [pc, #32]	@ (8002e38 <handle_shelve_mode+0xc0>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b48      	cmp	r3, #72	@ 0x48
 8002e1a:	d107      	bne.n	8002e2c <handle_shelve_mode+0xb4>
 8002e1c:	4b05      	ldr	r3, [pc, #20]	@ (8002e34 <handle_shelve_mode+0xbc>)
 8002e1e:	8b1b      	ldrh	r3, [r3, #24]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d103      	bne.n	8002e2c <handle_shelve_mode+0xb4>
        {
            // Press Start to finish set shelves and send data to basesystem
            base.ShelveMode = 0;
 8002e24:	4b03      	ldr	r3, [pc, #12]	@ (8002e34 <handle_shelve_mode+0xbc>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	831a      	strh	r2, [r3, #24]
        }
    }
}
 8002e2a:	e7ff      	b.n	8002e2c <handle_shelve_mode+0xb4>
 8002e2c:	bf00      	nop
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	20000300 	.word	0x20000300
 8002e38:	20000b88 	.word	0x20000b88
 8002e3c:	20000360 	.word	0x20000360
 8002e40:	2000023c 	.word	0x2000023c
 8002e44:	20000b48 	.word	0x20000b48

08002e48 <handle_PIDPos_adjustment>:

void handle_PIDPos_adjustment()
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
    static uint32_t debounce_time = 0;
    uint32_t current_time = HAL_GetTick();
 8002e4e:	f001 fc7d 	bl	800474c <HAL_GetTick>
 8002e52:	6078      	str	r0, [r7, #4]

    if (current_time > debounce_time)
 8002e54:	4b22      	ldr	r3, [pc, #136]	@ (8002ee0 <handle_PIDPos_adjustment+0x98>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d936      	bls.n	8002ecc <handle_PIDPos_adjustment+0x84>
    {
        if (ps2.l[2] == 1)
 8002e5e:	4b21      	ldr	r3, [pc, #132]	@ (8002ee4 <handle_PIDPos_adjustment+0x9c>)
 8002e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d117      	bne.n	8002e96 <handle_PIDPos_adjustment+0x4e>
        {
            // Increase ps2.PIDPos
            ps2.PIDPos += 0.1;
 8002e66:	4b1f      	ldr	r3, [pc, #124]	@ (8002ee4 <handle_PIDPos_adjustment+0x9c>)
 8002e68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fd fb38 	bl	80004e0 <__aeabi_f2d>
 8002e70:	a319      	add	r3, pc, #100	@ (adr r3, 8002ed8 <handle_PIDPos_adjustment+0x90>)
 8002e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e76:	f7fd f9d5 	bl	8000224 <__adddf3>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	4610      	mov	r0, r2
 8002e80:	4619      	mov	r1, r3
 8002e82:	f7fd fe55 	bl	8000b30 <__aeabi_d2f>
 8002e86:	4603      	mov	r3, r0
 8002e88:	4a16      	ldr	r2, [pc, #88]	@ (8002ee4 <handle_PIDPos_adjustment+0x9c>)
 8002e8a:	6793      	str	r3, [r2, #120]	@ 0x78
            debounce_time = current_time + 250; // Debounce delay of 250ms
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	33fa      	adds	r3, #250	@ 0xfa
 8002e90:	4a13      	ldr	r2, [pc, #76]	@ (8002ee0 <handle_PIDPos_adjustment+0x98>)
 8002e92:	6013      	str	r3, [r2, #0]
            // Decrease ps2.PIDPos
            ps2.PIDPos -= 0.1;
            debounce_time = current_time + 250; // Debounce delay of 250ms
        }
    }
}
 8002e94:	e01a      	b.n	8002ecc <handle_PIDPos_adjustment+0x84>
        else if (ps2.l[3] == 1)
 8002e96:	4b13      	ldr	r3, [pc, #76]	@ (8002ee4 <handle_PIDPos_adjustment+0x9c>)
 8002e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d116      	bne.n	8002ecc <handle_PIDPos_adjustment+0x84>
            ps2.PIDPos -= 0.1;
 8002e9e:	4b11      	ldr	r3, [pc, #68]	@ (8002ee4 <handle_PIDPos_adjustment+0x9c>)
 8002ea0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fd fb1c 	bl	80004e0 <__aeabi_f2d>
 8002ea8:	a30b      	add	r3, pc, #44	@ (adr r3, 8002ed8 <handle_PIDPos_adjustment+0x90>)
 8002eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eae:	f7fd f9b7 	bl	8000220 <__aeabi_dsub>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4610      	mov	r0, r2
 8002eb8:	4619      	mov	r1, r3
 8002eba:	f7fd fe39 	bl	8000b30 <__aeabi_d2f>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	4a08      	ldr	r2, [pc, #32]	@ (8002ee4 <handle_PIDPos_adjustment+0x9c>)
 8002ec2:	6793      	str	r3, [r2, #120]	@ 0x78
            debounce_time = current_time + 250; // Debounce delay of 250ms
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	33fa      	adds	r3, #250	@ 0xfa
 8002ec8:	4a05      	ldr	r2, [pc, #20]	@ (8002ee0 <handle_PIDPos_adjustment+0x98>)
 8002eca:	6013      	str	r3, [r2, #0]
}
 8002ecc:	bf00      	nop
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	f3af 8000 	nop.w
 8002ed8:	9999999a 	.word	0x9999999a
 8002edc:	3fb99999 	.word	0x3fb99999
 8002ee0:	20000364 	.word	0x20000364
 8002ee4:	20000b88 	.word	0x20000b88

08002ee8 <Traject_init>:
float Time_dec;

//-------------------------------------------Function Code-------------------------------------------------------//

void Traject_init(Trap_Traj* Traj, float v_max, float a_max)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	ed87 0a02 	vstr	s0, [r7, #8]
 8002ef4:	edc7 0a01 	vstr	s1, [r7, #4]
	Traj->Velo_max = v_max;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	601a      	str	r2, [r3, #0]
	Traj->Accel_max = a_max;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	605a      	str	r2, [r3, #4]

	Traj->currentAcceleration = 0;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	611a      	str	r2, [r3, #16]
	Traj->currentVelocity = 0;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f04f 0200 	mov.w	r2, #0
 8002f12:	60da      	str	r2, [r3, #12]
	Traj->currentPosition = 0;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	609a      	str	r2, [r3, #8]
}
 8002f1c:	bf00      	nop
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <Traject>:

void Traject(Trap_Traj* Traj, float Pos_initial, float Pos_final)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	ed87 0a02 	vstr	s0, [r7, #8]
 8002f34:	edc7 0a01 	vstr	s1, [r7, #4]

	  Distance = Pos_final - Pos_initial;
 8002f38:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f44:	4bb1      	ldr	r3, [pc, #708]	@ (800320c <Traject+0x2e4>)
 8002f46:	edc3 7a00 	vstr	s15, [r3]
	  Time_acc = Traj->Velo_max / Traj->Accel_max;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	edd3 6a00 	vldr	s13, [r3]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f5a:	4bad      	ldr	r3, [pc, #692]	@ (8003210 <Traject+0x2e8>)
 8002f5c:	edc3 7a00 	vstr	s15, [r3]
	  Time_dec = Time_acc;
 8002f60:	4bab      	ldr	r3, [pc, #684]	@ (8003210 <Traject+0x2e8>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4aab      	ldr	r2, [pc, #684]	@ (8003214 <Traject+0x2ec>)
 8002f66:	6013      	str	r3, [r2, #0]


	  if (Distance >0)
 8002f68:	4ba8      	ldr	r3, [pc, #672]	@ (800320c <Traject+0x2e4>)
 8002f6a:	edd3 7a00 	vldr	s15, [r3]
 8002f6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f76:	dd23      	ble.n	8002fc0 <Traject+0x98>
			{
		  Acc_max = Traj->Accel_max;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	4aa6      	ldr	r2, [pc, #664]	@ (8003218 <Traject+0x2f0>)
 8002f7e:	6013      	str	r3, [r2, #0]
		  Vel_max = Traj->Velo_max;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4aa5      	ldr	r2, [pc, #660]	@ (800321c <Traject+0x2f4>)
 8002f86:	6013      	str	r3, [r2, #0]
		  Distance_Velo_Max = Distance - (Vel_max * Time_acc);
 8002f88:	4ba0      	ldr	r3, [pc, #640]	@ (800320c <Traject+0x2e4>)
 8002f8a:	ed93 7a00 	vldr	s14, [r3]
 8002f8e:	4ba3      	ldr	r3, [pc, #652]	@ (800321c <Traject+0x2f4>)
 8002f90:	edd3 6a00 	vldr	s13, [r3]
 8002f94:	4b9e      	ldr	r3, [pc, #632]	@ (8003210 <Traject+0x2e8>)
 8002f96:	edd3 7a00 	vldr	s15, [r3]
 8002f9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fa2:	4b9f      	ldr	r3, [pc, #636]	@ (8003220 <Traject+0x2f8>)
 8002fa4:	edc3 7a00 	vstr	s15, [r3]
		  Time_Velo_const = Distance_Velo_Max / Vel_max;
 8002fa8:	4b9d      	ldr	r3, [pc, #628]	@ (8003220 <Traject+0x2f8>)
 8002faa:	edd3 6a00 	vldr	s13, [r3]
 8002fae:	4b9b      	ldr	r3, [pc, #620]	@ (800321c <Traject+0x2f4>)
 8002fb0:	ed93 7a00 	vldr	s14, [r3]
 8002fb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fb8:	4b9a      	ldr	r3, [pc, #616]	@ (8003224 <Traject+0x2fc>)
 8002fba:	edc3 7a00 	vstr	s15, [r3]
 8002fbe:	e032      	b.n	8003026 <Traject+0xfe>
			}
	  else if(Distance < 0)
 8002fc0:	4b92      	ldr	r3, [pc, #584]	@ (800320c <Traject+0x2e4>)
 8002fc2:	edd3 7a00 	vldr	s15, [r3]
 8002fc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fce:	d52a      	bpl.n	8003026 <Traject+0xfe>
	  {
		  Acc_max = -Traj->Accel_max;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	edd3 7a01 	vldr	s15, [r3, #4]
 8002fd6:	eef1 7a67 	vneg.f32	s15, s15
 8002fda:	4b8f      	ldr	r3, [pc, #572]	@ (8003218 <Traject+0x2f0>)
 8002fdc:	edc3 7a00 	vstr	s15, [r3]
		  Vel_max = -Traj->Velo_max;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	edd3 7a00 	vldr	s15, [r3]
 8002fe6:	eef1 7a67 	vneg.f32	s15, s15
 8002fea:	4b8c      	ldr	r3, [pc, #560]	@ (800321c <Traject+0x2f4>)
 8002fec:	edc3 7a00 	vstr	s15, [r3]
		  Distance_Velo_Max = Distance - (Vel_max * Time_acc);
 8002ff0:	4b86      	ldr	r3, [pc, #536]	@ (800320c <Traject+0x2e4>)
 8002ff2:	ed93 7a00 	vldr	s14, [r3]
 8002ff6:	4b89      	ldr	r3, [pc, #548]	@ (800321c <Traject+0x2f4>)
 8002ff8:	edd3 6a00 	vldr	s13, [r3]
 8002ffc:	4b84      	ldr	r3, [pc, #528]	@ (8003210 <Traject+0x2e8>)
 8002ffe:	edd3 7a00 	vldr	s15, [r3]
 8003002:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003006:	ee77 7a67 	vsub.f32	s15, s14, s15
 800300a:	4b85      	ldr	r3, [pc, #532]	@ (8003220 <Traject+0x2f8>)
 800300c:	edc3 7a00 	vstr	s15, [r3]
		  Time_Velo_const = Distance_Velo_Max / Vel_max;
 8003010:	4b83      	ldr	r3, [pc, #524]	@ (8003220 <Traject+0x2f8>)
 8003012:	edd3 6a00 	vldr	s13, [r3]
 8003016:	4b81      	ldr	r3, [pc, #516]	@ (800321c <Traject+0x2f4>)
 8003018:	ed93 7a00 	vldr	s14, [r3]
 800301c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003020:	4b80      	ldr	r3, [pc, #512]	@ (8003224 <Traject+0x2fc>)
 8003022:	edc3 7a00 	vstr	s15, [r3]
	}
	// Update trajectory phase
	time_ref1 = Time_acc + Time_Velo_const;
 8003026:	4b7a      	ldr	r3, [pc, #488]	@ (8003210 <Traject+0x2e8>)
 8003028:	ed93 7a00 	vldr	s14, [r3]
 800302c:	4b7d      	ldr	r3, [pc, #500]	@ (8003224 <Traject+0x2fc>)
 800302e:	edd3 7a00 	vldr	s15, [r3]
 8003032:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003036:	4b7c      	ldr	r3, [pc, #496]	@ (8003228 <Traject+0x300>)
 8003038:	edc3 7a00 	vstr	s15, [r3]
	time_ref2 = time_ref1 + Time_dec;
 800303c:	4b7a      	ldr	r3, [pc, #488]	@ (8003228 <Traject+0x300>)
 800303e:	ed93 7a00 	vldr	s14, [r3]
 8003042:	4b74      	ldr	r3, [pc, #464]	@ (8003214 <Traject+0x2ec>)
 8003044:	edd3 7a00 	vldr	s15, [r3]
 8003048:	ee77 7a27 	vadd.f32	s15, s14, s15
 800304c:	4b77      	ldr	r3, [pc, #476]	@ (800322c <Traject+0x304>)
 800304e:	edc3 7a00 	vstr	s15, [r3]
	if(Time_Velo_const >0)
 8003052:	4b74      	ldr	r3, [pc, #464]	@ (8003224 <Traject+0x2fc>)
 8003054:	edd3 7a00 	vldr	s15, [r3]
 8003058:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800305c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003060:	f340 80cb 	ble.w	80031fa <Traject+0x2d2>
	{
//		Time_acc_under = sqrt(Distance/Acc_max);
		if (elapsedTime < Time_acc)
 8003064:	4b72      	ldr	r3, [pc, #456]	@ (8003230 <Traject+0x308>)
 8003066:	ed93 7a00 	vldr	s14, [r3]
 800306a:	4b69      	ldr	r3, [pc, #420]	@ (8003210 <Traject+0x2e8>)
 800306c:	edd3 7a00 	vldr	s15, [r3]
 8003070:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003078:	d52f      	bpl.n	80030da <Traject+0x1b2>
		{
			// Acceleration phase
			Traj->currentAcceleration = Acc_max;
 800307a:	4b67      	ldr	r3, [pc, #412]	@ (8003218 <Traject+0x2f0>)
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	611a      	str	r2, [r3, #16]
			Traj->currentVelocity = Acc_max * elapsedTime;
 8003082:	4b65      	ldr	r3, [pc, #404]	@ (8003218 <Traject+0x2f0>)
 8003084:	ed93 7a00 	vldr	s14, [r3]
 8003088:	4b69      	ldr	r3, [pc, #420]	@ (8003230 <Traject+0x308>)
 800308a:	edd3 7a00 	vldr	s15, [r3]
 800308e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	edc3 7a03 	vstr	s15, [r3, #12]
			Traj->currentPosition = 0.5f * Acc_max * elapsedTime * elapsedTime + Pos_initial;
 8003098:	4b5f      	ldr	r3, [pc, #380]	@ (8003218 <Traject+0x2f0>)
 800309a:	edd3 7a00 	vldr	s15, [r3]
 800309e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80030a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030a6:	4b62      	ldr	r3, [pc, #392]	@ (8003230 <Traject+0x308>)
 80030a8:	edd3 7a00 	vldr	s15, [r3]
 80030ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030b0:	4b5f      	ldr	r3, [pc, #380]	@ (8003230 <Traject+0x308>)
 80030b2:	edd3 7a00 	vldr	s15, [r3]
 80030b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80030be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	edc3 7a02 	vstr	s15, [r3, #8]
			temp_pos_acc = Traj->currentPosition;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	4a59      	ldr	r2, [pc, #356]	@ (8003234 <Traject+0x30c>)
 80030ce:	6013      	str	r3, [r2, #0]
			temp_pos_const = Traj->currentPosition;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	4a58      	ldr	r2, [pc, #352]	@ (8003238 <Traject+0x310>)
 80030d6:	6013      	str	r3, [r2, #0]
 80030d8:	e08f      	b.n	80031fa <Traject+0x2d2>
		}
		else if (elapsedTime < time_ref1 )
 80030da:	4b55      	ldr	r3, [pc, #340]	@ (8003230 <Traject+0x308>)
 80030dc:	ed93 7a00 	vldr	s14, [r3]
 80030e0:	4b51      	ldr	r3, [pc, #324]	@ (8003228 <Traject+0x300>)
 80030e2:	edd3 7a00 	vldr	s15, [r3]
 80030e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ee:	d521      	bpl.n	8003134 <Traject+0x20c>
		{
			// Constant velocity phase
			Traj->currentAcceleration = 0;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	611a      	str	r2, [r3, #16]
			Traj->currentVelocity = Vel_max;
 80030f8:	4b48      	ldr	r3, [pc, #288]	@ (800321c <Traject+0x2f4>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	60da      	str	r2, [r3, #12]
			Traj->currentPosition = (Vel_max * (elapsedTime-Time_acc)) + temp_pos_acc;
 8003100:	4b4b      	ldr	r3, [pc, #300]	@ (8003230 <Traject+0x308>)
 8003102:	ed93 7a00 	vldr	s14, [r3]
 8003106:	4b42      	ldr	r3, [pc, #264]	@ (8003210 <Traject+0x2e8>)
 8003108:	edd3 7a00 	vldr	s15, [r3]
 800310c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003110:	4b42      	ldr	r3, [pc, #264]	@ (800321c <Traject+0x2f4>)
 8003112:	edd3 7a00 	vldr	s15, [r3]
 8003116:	ee27 7a27 	vmul.f32	s14, s14, s15
 800311a:	4b46      	ldr	r3, [pc, #280]	@ (8003234 <Traject+0x30c>)
 800311c:	edd3 7a00 	vldr	s15, [r3]
 8003120:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	edc3 7a02 	vstr	s15, [r3, #8]
			temp_pos_const = Traj->currentPosition;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	4a42      	ldr	r2, [pc, #264]	@ (8003238 <Traject+0x310>)
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	e062      	b.n	80031fa <Traject+0x2d2>
		}
		else if (elapsedTime < time_ref2)
 8003134:	4b3e      	ldr	r3, [pc, #248]	@ (8003230 <Traject+0x308>)
 8003136:	ed93 7a00 	vldr	s14, [r3]
 800313a:	4b3c      	ldr	r3, [pc, #240]	@ (800322c <Traject+0x304>)
 800313c:	edd3 7a00 	vldr	s15, [r3]
 8003140:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003148:	d54f      	bpl.n	80031ea <Traject+0x2c2>
		{
			// Deceleration phase
			Traj->currentAcceleration = -Acc_max;
 800314a:	4b33      	ldr	r3, [pc, #204]	@ (8003218 <Traject+0x2f0>)
 800314c:	edd3 7a00 	vldr	s15, [r3]
 8003150:	eef1 7a67 	vneg.f32	s15, s15
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	edc3 7a04 	vstr	s15, [r3, #16]
			Traj->currentVelocity = -(Acc_max * (elapsedTime-time_ref1)) + Vel_max;
 800315a:	4b30      	ldr	r3, [pc, #192]	@ (800321c <Traject+0x2f4>)
 800315c:	ed93 7a00 	vldr	s14, [r3]
 8003160:	4b33      	ldr	r3, [pc, #204]	@ (8003230 <Traject+0x308>)
 8003162:	edd3 6a00 	vldr	s13, [r3]
 8003166:	4b30      	ldr	r3, [pc, #192]	@ (8003228 <Traject+0x300>)
 8003168:	edd3 7a00 	vldr	s15, [r3]
 800316c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003170:	4b29      	ldr	r3, [pc, #164]	@ (8003218 <Traject+0x2f0>)
 8003172:	edd3 7a00 	vldr	s15, [r3]
 8003176:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800317a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	edc3 7a03 	vstr	s15, [r3, #12]
			Traj->currentPosition = Traj->currentVelocity*(elapsedTime-time_ref1)+(0.5f*Acc_max*(elapsedTime-time_ref1)*(elapsedTime-time_ref1))+temp_pos_const ;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	ed93 7a03 	vldr	s14, [r3, #12]
 800318a:	4b29      	ldr	r3, [pc, #164]	@ (8003230 <Traject+0x308>)
 800318c:	edd3 6a00 	vldr	s13, [r3]
 8003190:	4b25      	ldr	r3, [pc, #148]	@ (8003228 <Traject+0x300>)
 8003192:	edd3 7a00 	vldr	s15, [r3]
 8003196:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800319a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800319e:	4b1e      	ldr	r3, [pc, #120]	@ (8003218 <Traject+0x2f0>)
 80031a0:	edd3 7a00 	vldr	s15, [r3]
 80031a4:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80031a8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80031ac:	4b20      	ldr	r3, [pc, #128]	@ (8003230 <Traject+0x308>)
 80031ae:	ed93 6a00 	vldr	s12, [r3]
 80031b2:	4b1d      	ldr	r3, [pc, #116]	@ (8003228 <Traject+0x300>)
 80031b4:	edd3 7a00 	vldr	s15, [r3]
 80031b8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80031bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80031c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003230 <Traject+0x308>)
 80031c2:	ed93 6a00 	vldr	s12, [r3]
 80031c6:	4b18      	ldr	r3, [pc, #96]	@ (8003228 <Traject+0x300>)
 80031c8:	edd3 7a00 	vldr	s15, [r3]
 80031cc:	ee76 7a67 	vsub.f32	s15, s12, s15
 80031d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031d8:	4b17      	ldr	r3, [pc, #92]	@ (8003238 <Traject+0x310>)
 80031da:	edd3 7a00 	vldr	s15, [r3]
 80031de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	edc3 7a02 	vstr	s15, [r3, #8]
 80031e8:	e007      	b.n	80031fa <Traject+0x2d2>
		}
		else {
			// Trajectory complete
			Traj->currentAcceleration = 0.0f;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	611a      	str	r2, [r3, #16]
			Traj->currentVelocity = 0.0f;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f04f 0200 	mov.w	r2, #0
 80031f8:	60da      	str	r2, [r3, #12]
//			elapsedTime = 0.0f;
		}
	}
	if (Time_Velo_const <= 0)
 80031fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003224 <Traject+0x2fc>)
 80031fc:	edd3 7a00 	vldr	s15, [r3]
 8003200:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003208:	d918      	bls.n	800323c <Traject+0x314>

		}


	}
}
 800320a:	e0d2      	b.n	80033b2 <Traject+0x48a>
 800320c:	20000390 	.word	0x20000390
 8003210:	20000394 	.word	0x20000394
 8003214:	20000398 	.word	0x20000398
 8003218:	20000368 	.word	0x20000368
 800321c:	2000036c 	.word	0x2000036c
 8003220:	20000370 	.word	0x20000370
 8003224:	20000374 	.word	0x20000374
 8003228:	20000388 	.word	0x20000388
 800322c:	2000038c 	.word	0x2000038c
 8003230:	20001108 	.word	0x20001108
 8003234:	2000037c 	.word	0x2000037c
 8003238:	20000380 	.word	0x20000380
		Time_acc_under = sqrt(Distance/Acc_max);
 800323c:	4b5f      	ldr	r3, [pc, #380]	@ (80033bc <Traject+0x494>)
 800323e:	ed93 7a00 	vldr	s14, [r3]
 8003242:	4b5f      	ldr	r3, [pc, #380]	@ (80033c0 <Traject+0x498>)
 8003244:	edd3 7a00 	vldr	s15, [r3]
 8003248:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800324c:	ee16 0a90 	vmov	r0, s13
 8003250:	f7fd f946 	bl	80004e0 <__aeabi_f2d>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	ec43 2b10 	vmov	d0, r2, r3
 800325c:	f008 fa72 	bl	800b744 <sqrt>
 8003260:	ec53 2b10 	vmov	r2, r3, d0
 8003264:	4610      	mov	r0, r2
 8003266:	4619      	mov	r1, r3
 8003268:	f7fd fc62 	bl	8000b30 <__aeabi_d2f>
 800326c:	4603      	mov	r3, r0
 800326e:	4a55      	ldr	r2, [pc, #340]	@ (80033c4 <Traject+0x49c>)
 8003270:	6013      	str	r3, [r2, #0]
		if (elapsedTime < Time_acc_under)
 8003272:	4b55      	ldr	r3, [pc, #340]	@ (80033c8 <Traject+0x4a0>)
 8003274:	ed93 7a00 	vldr	s14, [r3]
 8003278:	4b52      	ldr	r3, [pc, #328]	@ (80033c4 <Traject+0x49c>)
 800327a:	edd3 7a00 	vldr	s15, [r3]
 800327e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003286:	d52f      	bpl.n	80032e8 <Traject+0x3c0>
			Traj->currentAcceleration = Acc_max;
 8003288:	4b4d      	ldr	r3, [pc, #308]	@ (80033c0 <Traject+0x498>)
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	611a      	str	r2, [r3, #16]
			Traj->currentVelocity = Acc_max * elapsedTime;
 8003290:	4b4b      	ldr	r3, [pc, #300]	@ (80033c0 <Traject+0x498>)
 8003292:	ed93 7a00 	vldr	s14, [r3]
 8003296:	4b4c      	ldr	r3, [pc, #304]	@ (80033c8 <Traject+0x4a0>)
 8003298:	edd3 7a00 	vldr	s15, [r3]
 800329c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	edc3 7a03 	vstr	s15, [r3, #12]
			Traj->currentPosition = Pos_initial + 0.5f * Acc_max * elapsedTime * elapsedTime;
 80032a6:	4b46      	ldr	r3, [pc, #280]	@ (80033c0 <Traject+0x498>)
 80032a8:	edd3 7a00 	vldr	s15, [r3]
 80032ac:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80032b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032b4:	4b44      	ldr	r3, [pc, #272]	@ (80033c8 <Traject+0x4a0>)
 80032b6:	edd3 7a00 	vldr	s15, [r3]
 80032ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032be:	4b42      	ldr	r3, [pc, #264]	@ (80033c8 <Traject+0x4a0>)
 80032c0:	edd3 7a00 	vldr	s15, [r3]
 80032c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80032cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	edc3 7a02 	vstr	s15, [r3, #8]
			temp_pos_acc = Traj->currentPosition;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	4a3c      	ldr	r2, [pc, #240]	@ (80033cc <Traject+0x4a4>)
 80032dc:	6013      	str	r3, [r2, #0]
			temp_velo_acc = Traj->currentVelocity;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	4a3b      	ldr	r2, [pc, #236]	@ (80033d0 <Traject+0x4a8>)
 80032e4:	6013      	str	r3, [r2, #0]
}
 80032e6:	e064      	b.n	80033b2 <Traject+0x48a>
		else if (elapsedTime < 2*Time_acc_under)
 80032e8:	4b36      	ldr	r3, [pc, #216]	@ (80033c4 <Traject+0x49c>)
 80032ea:	edd3 7a00 	vldr	s15, [r3]
 80032ee:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80032f2:	4b35      	ldr	r3, [pc, #212]	@ (80033c8 <Traject+0x4a0>)
 80032f4:	edd3 7a00 	vldr	s15, [r3]
 80032f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003300:	dd4f      	ble.n	80033a2 <Traject+0x47a>
			Traj->currentAcceleration = -Acc_max;
 8003302:	4b2f      	ldr	r3, [pc, #188]	@ (80033c0 <Traject+0x498>)
 8003304:	edd3 7a00 	vldr	s15, [r3]
 8003308:	eef1 7a67 	vneg.f32	s15, s15
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	edc3 7a04 	vstr	s15, [r3, #16]
			Traj->currentVelocity = temp_velo_acc - Acc_max*(elapsedTime-Time_acc_under);
 8003312:	4b2f      	ldr	r3, [pc, #188]	@ (80033d0 <Traject+0x4a8>)
 8003314:	ed93 7a00 	vldr	s14, [r3]
 8003318:	4b2b      	ldr	r3, [pc, #172]	@ (80033c8 <Traject+0x4a0>)
 800331a:	edd3 6a00 	vldr	s13, [r3]
 800331e:	4b29      	ldr	r3, [pc, #164]	@ (80033c4 <Traject+0x49c>)
 8003320:	edd3 7a00 	vldr	s15, [r3]
 8003324:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003328:	4b25      	ldr	r3, [pc, #148]	@ (80033c0 <Traject+0x498>)
 800332a:	edd3 7a00 	vldr	s15, [r3]
 800332e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003332:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	edc3 7a03 	vstr	s15, [r3, #12]
			Traj->currentPosition = temp_pos_acc + Traj->currentVelocity *(elapsedTime-Time_acc_under)+(0.5f*Acc_max*(elapsedTime-Time_acc_under)*(elapsedTime-Time_acc_under));
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	ed93 7a03 	vldr	s14, [r3, #12]
 8003342:	4b21      	ldr	r3, [pc, #132]	@ (80033c8 <Traject+0x4a0>)
 8003344:	edd3 6a00 	vldr	s13, [r3]
 8003348:	4b1e      	ldr	r3, [pc, #120]	@ (80033c4 <Traject+0x49c>)
 800334a:	edd3 7a00 	vldr	s15, [r3]
 800334e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003352:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003356:	4b1d      	ldr	r3, [pc, #116]	@ (80033cc <Traject+0x4a4>)
 8003358:	edd3 7a00 	vldr	s15, [r3]
 800335c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003360:	4b17      	ldr	r3, [pc, #92]	@ (80033c0 <Traject+0x498>)
 8003362:	edd3 7a00 	vldr	s15, [r3]
 8003366:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800336a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800336e:	4b16      	ldr	r3, [pc, #88]	@ (80033c8 <Traject+0x4a0>)
 8003370:	ed93 6a00 	vldr	s12, [r3]
 8003374:	4b13      	ldr	r3, [pc, #76]	@ (80033c4 <Traject+0x49c>)
 8003376:	edd3 7a00 	vldr	s15, [r3]
 800337a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800337e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003382:	4b11      	ldr	r3, [pc, #68]	@ (80033c8 <Traject+0x4a0>)
 8003384:	ed93 6a00 	vldr	s12, [r3]
 8003388:	4b0e      	ldr	r3, [pc, #56]	@ (80033c4 <Traject+0x49c>)
 800338a:	edd3 7a00 	vldr	s15, [r3]
 800338e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003392:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003396:	ee77 7a27 	vadd.f32	s15, s14, s15
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80033a0:	e007      	b.n	80033b2 <Traject+0x48a>
			Traj->currentAcceleration = 0.0f;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f04f 0200 	mov.w	r2, #0
 80033a8:	611a      	str	r2, [r3, #16]
			Traj->currentVelocity = 0.0f;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f04f 0200 	mov.w	r2, #0
 80033b0:	60da      	str	r2, [r3, #12]
}
 80033b2:	bf00      	nop
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	20000390 	.word	0x20000390
 80033c0:	20000368 	.word	0x20000368
 80033c4:	20000378 	.word	0x20000378
 80033c8:	20001108 	.word	0x20001108
 80033cc:	2000037c 	.word	0x2000037c
 80033d0:	20000384 	.word	0x20000384

080033d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80033d8:	b086      	sub	sp, #24
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033dc:	f001 f951 	bl	8004682 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033e0:	f000 f8d0 	bl	8003584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033e4:	f000 fc38 	bl	8003c58 <MX_GPIO_Init>
  MX_DMA_Init();
 80033e8:	f000 fc04 	bl	8003bf4 <MX_DMA_Init>
  MX_TIM2_Init();
 80033ec:	f000 f98e 	bl	800370c <MX_TIM2_Init>
  MX_TIM3_Init();
 80033f0:	f000 f9e0 	bl	80037b4 <MX_TIM3_Init>
  MX_TIM5_Init();
 80033f4:	f000 faae 	bl	8003954 <MX_TIM5_Init>
  MX_UART4_Init();
 80033f8:	f000 fb60 	bl	8003abc <MX_UART4_Init>
  MX_TIM4_Init();
 80033fc:	f000 fa5c 	bl	80038b8 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8003400:	f000 fbaa 	bl	8003b58 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8003404:	f000 fb2a 	bl	8003a5c <MX_TIM16_Init>
  MX_TIM6_Init();
 8003408:	f000 faf2 	bl	80039f0 <MX_TIM6_Init>
  MX_ADC1_Init();
 800340c:	f000 f906 	bl	800361c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);					// AMT Encoder
 8003410:	4846      	ldr	r0, [pc, #280]	@ (800352c <main+0x158>)
 8003412:	f004 f953 	bl	80076bc <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);					// Output compare
 8003416:	4846      	ldr	r0, [pc, #280]	@ (8003530 <main+0x15c>)
 8003418:	f004 f950 	bl	80076bc <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim6);					// Trajectory trigger
 800341c:	4845      	ldr	r0, [pc, #276]	@ (8003534 <main+0x160>)
 800341e:	f004 f94d 	bl	80076bc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);        // PWM
 8003422:	2100      	movs	r1, #0
 8003424:	4842      	ldr	r0, [pc, #264]	@ (8003530 <main+0x15c>)
 8003426:	f004 fa9f 	bl	8007968 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);        // Direction
 800342a:	2104      	movs	r1, #4
 800342c:	4840      	ldr	r0, [pc, #256]	@ (8003530 <main+0x15c>)
 800342e:	f004 fa9b 	bl	8007968 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8003432:	4841      	ldr	r0, [pc, #260]	@ (8003538 <main+0x164>)
 8003434:	f004 f9b2 	bl	800779c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8003438:	4840      	ldr	r0, [pc, #256]	@ (800353c <main+0x168>)
 800343a:	f004 f9af 	bl	800779c <HAL_TIM_Base_Start_IT>
  hmodbus.huart = &huart2;
 800343e:	4b40      	ldr	r3, [pc, #256]	@ (8003540 <main+0x16c>)
 8003440:	4a40      	ldr	r2, [pc, #256]	@ (8003544 <main+0x170>)
 8003442:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 8003444:	4b3e      	ldr	r3, [pc, #248]	@ (8003540 <main+0x16c>)
 8003446:	4a40      	ldr	r2, [pc, #256]	@ (8003548 <main+0x174>)
 8003448:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 800344a:	4b3d      	ldr	r3, [pc, #244]	@ (8003540 <main+0x16c>)
 800344c:	2215      	movs	r2, #21
 800344e:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 8003450:	4b3b      	ldr	r3, [pc, #236]	@ (8003540 <main+0x16c>)
 8003452:	22c8      	movs	r2, #200	@ 0xc8
 8003454:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8003456:	493d      	ldr	r1, [pc, #244]	@ (800354c <main+0x178>)
 8003458:	4839      	ldr	r0, [pc, #228]	@ (8003540 <main+0x16c>)
 800345a:	f7fe fc23 	bl	8001ca4 <Modbus_init>

  float PID_pos_K[3] = {17 ,0.0026, 0.0001};
 800345e:	4a3c      	ldr	r2, [pc, #240]	@ (8003550 <main+0x17c>)
 8003460:	f107 030c 	add.w	r3, r7, #12
 8003464:	ca07      	ldmia	r2, {r0, r1, r2}
 8003466:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    float PID_velo_K[3] = {7.0 ,0.00002, 0.0};
 800346a:	4a3a      	ldr	r2, [pc, #232]	@ (8003554 <main+0x180>)
 800346c:	463b      	mov	r3, r7
 800346e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003470:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  // Velocity 450 mm/s
//  float PID_pos_K[3] = {17 ,0.002, 0.0001};
//  float PID_velo_K[3] = {9 ,0.00002, 0.0};

  // Initialize ASRS
  Traject_init(&Traj,550, 500);				// V_max, A_max
 8003474:	eddf 0a38 	vldr	s1, [pc, #224]	@ 8003558 <main+0x184>
 8003478:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 800355c <main+0x188>
 800347c:	4838      	ldr	r0, [pc, #224]	@ (8003560 <main+0x18c>)
 800347e:	f7ff fd33 	bl	8002ee8 <Traject_init>
//  Kalman_Start(&Vel_filtered);
  AMT_encoder_init(&AMT, &htim2);
 8003482:	492a      	ldr	r1, [pc, #168]	@ (800352c <main+0x158>)
 8003484:	4837      	ldr	r0, [pc, #220]	@ (8003564 <main+0x190>)
 8003486:	f7fe faf1 	bl	8001a6c <AMT_encoder_init>
  MOTOR_init(&MT, &htim3,TIM_CHANNEL_2, TIM_CHANNEL_1);
 800348a:	2300      	movs	r3, #0
 800348c:	2204      	movs	r2, #4
 800348e:	4928      	ldr	r1, [pc, #160]	@ (8003530 <main+0x15c>)
 8003490:	4835      	ldr	r0, [pc, #212]	@ (8003568 <main+0x194>)
 8003492:	f7fe fefb 	bl	800228c <MOTOR_init>
  PID_controller_init(&PID_pos,PID_pos_K[0],PID_pos_K[1],PID_pos_K[2]);
 8003496:	edd7 7a03 	vldr	s15, [r7, #12]
 800349a:	ed97 7a04 	vldr	s14, [r7, #16]
 800349e:	edd7 6a05 	vldr	s13, [r7, #20]
 80034a2:	eeb0 1a66 	vmov.f32	s2, s13
 80034a6:	eef0 0a47 	vmov.f32	s1, s14
 80034aa:	eeb0 0a67 	vmov.f32	s0, s15
 80034ae:	482f      	ldr	r0, [pc, #188]	@ (800356c <main+0x198>)
 80034b0:	f7ff f986 	bl	80027c0 <PID_controller_init>
  PID_controller_init(&PID_velo,PID_velo_K[0],PID_velo_K[1],PID_velo_K[3]);
 80034b4:	edd7 7a00 	vldr	s15, [r7]
 80034b8:	ed97 7a01 	vldr	s14, [r7, #4]
 80034bc:	edd7 6a03 	vldr	s13, [r7, #12]
 80034c0:	eeb0 1a66 	vmov.f32	s2, s13
 80034c4:	eef0 0a47 	vmov.f32	s1, s14
 80034c8:	eeb0 0a67 	vmov.f32	s0, s15
 80034cc:	4828      	ldr	r0, [pc, #160]	@ (8003570 <main+0x19c>)
 80034ce:	f7ff f977 	bl	80027c0 <PID_controller_init>

    /* USER CODE BEGIN 3 */

	  // Feedback to base system 5 Hz
	  static uint64_t timestamps =0;
	  if(HAL_GetTick() > timestamps)
 80034d2:	f001 f93b 	bl	800474c <HAL_GetTick>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2200      	movs	r2, #0
 80034da:	461c      	mov	r4, r3
 80034dc:	4615      	mov	r5, r2
 80034de:	4b25      	ldr	r3, [pc, #148]	@ (8003574 <main+0x1a0>)
 80034e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e4:	42a2      	cmp	r2, r4
 80034e6:	41ab      	sbcs	r3, r5
 80034e8:	d20b      	bcs.n	8003502 <main+0x12e>
	  {
		  timestamps =HAL_GetTick() + 50;		//ms
 80034ea:	f001 f92f 	bl	800474c <HAL_GetTick>
 80034ee:	4603      	mov	r3, r0
 80034f0:	3332      	adds	r3, #50	@ 0x32
 80034f2:	2200      	movs	r2, #0
 80034f4:	4698      	mov	r8, r3
 80034f6:	4691      	mov	r9, r2
 80034f8:	4b1e      	ldr	r3, [pc, #120]	@ (8003574 <main+0x1a0>)
 80034fa:	e9c3 8900 	strd	r8, r9, [r3]
	  	  Heartbeat();
 80034fe:	f7fd fe07 	bl	8001110 <Heartbeat>
//	  AMT_encoder_update(&AMT, &htim2, micros());
//	  }



	  Vacuum();
 8003502:	f7fd fe71 	bl	80011e8 <Vacuum>
	  GripperMovement();
 8003506:	f7fd fe93 	bl	8001230 <GripperMovement>
	  Modbus_Protocal_Worker();
 800350a:	f7fe fc57 	bl	8001dbc <Modbus_Protocal_Worker>
	  Routine();
 800350e:	f7fd fe0d 	bl	800112c <Routine>

////	  //Ps2
	  HAL_UART_Receive(&huart4,ps2.ps2RX, 10 ,10);
 8003512:	230a      	movs	r3, #10
 8003514:	220a      	movs	r2, #10
 8003516:	4918      	ldr	r1, [pc, #96]	@ (8003578 <main+0x1a4>)
 8003518:	4818      	ldr	r0, [pc, #96]	@ (800357c <main+0x1a8>)
 800351a:	f006 fa31 	bl	8009980 <HAL_UART_Receive>
	  if (base.BaseStatus == 1){
 800351e:	4b18      	ldr	r3, [pc, #96]	@ (8003580 <main+0x1ac>)
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d1d5      	bne.n	80034d2 <main+0xfe>
		  SetShelves();
 8003526:	f7fd feb5 	bl	8001294 <SetShelves>
  {
 800352a:	e7d2      	b.n	80034d2 <main+0xfe>
 800352c:	20000408 	.word	0x20000408
 8003530:	200004d4 	.word	0x200004d4
 8003534:	20000738 	.word	0x20000738
 8003538:	200005a0 	.word	0x200005a0
 800353c:	2000066c 	.word	0x2000066c
 8003540:	20000c24 	.word	0x20000c24
 8003544:	2000099c 	.word	0x2000099c
 8003548:	20000804 	.word	0x20000804
 800354c:	2000110c 	.word	0x2000110c
 8003550:	0800b968 	.word	0x0800b968
 8003554:	0800b974 	.word	0x0800b974
 8003558:	43fa0000 	.word	0x43fa0000
 800355c:	44098000 	.word	0x44098000
 8003560:	20000b30 	.word	0x20000b30
 8003564:	20000b48 	.word	0x20000b48
 8003568:	20000b28 	.word	0x20000b28
 800356c:	200002e4 	.word	0x200002e4
 8003570:	20000c08 	.word	0x20000c08
 8003574:	200012a8 	.word	0x200012a8
 8003578:	20000b88 	.word	0x20000b88
 800357c:	200008d0 	.word	0x200008d0
 8003580:	20000300 	.word	0x20000300

08003584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b094      	sub	sp, #80	@ 0x50
 8003588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800358a:	f107 0318 	add.w	r3, r7, #24
 800358e:	2238      	movs	r2, #56	@ 0x38
 8003590:	2100      	movs	r1, #0
 8003592:	4618      	mov	r0, r3
 8003594:	f008 f896 	bl	800b6c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003598:	1d3b      	adds	r3, r7, #4
 800359a:	2200      	movs	r2, #0
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	605a      	str	r2, [r3, #4]
 80035a0:	609a      	str	r2, [r3, #8]
 80035a2:	60da      	str	r2, [r3, #12]
 80035a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80035a6:	2000      	movs	r0, #0
 80035a8:	f002 fff4 	bl	8006594 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80035ac:	2302      	movs	r3, #2
 80035ae:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80035b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80035b6:	2340      	movs	r3, #64	@ 0x40
 80035b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035ba:	2302      	movs	r3, #2
 80035bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80035be:	2302      	movs	r3, #2
 80035c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80035c2:	2304      	movs	r3, #4
 80035c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80035c6:	2355      	movs	r3, #85	@ 0x55
 80035c8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80035ca:	2302      	movs	r3, #2
 80035cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80035ce:	2302      	movs	r3, #2
 80035d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80035d2:	2302      	movs	r3, #2
 80035d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035d6:	f107 0318 	add.w	r3, r7, #24
 80035da:	4618      	mov	r0, r3
 80035dc:	f003 f88e 	bl	80066fc <HAL_RCC_OscConfig>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <SystemClock_Config+0x66>
  {
    Error_Handler();
 80035e6:	f000 fd25 	bl	8004034 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035ea:	230f      	movs	r3, #15
 80035ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035ee:	2303      	movs	r3, #3
 80035f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035f2:	2300      	movs	r3, #0
 80035f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80035f6:	2300      	movs	r3, #0
 80035f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80035fa:	2300      	movs	r3, #0
 80035fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80035fe:	1d3b      	adds	r3, r7, #4
 8003600:	2104      	movs	r1, #4
 8003602:	4618      	mov	r0, r3
 8003604:	f003 fb8c 	bl	8006d20 <HAL_RCC_ClockConfig>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800360e:	f000 fd11 	bl	8004034 <Error_Handler>
  }
}
 8003612:	bf00      	nop
 8003614:	3750      	adds	r7, #80	@ 0x50
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
	...

0800361c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08c      	sub	sp, #48	@ 0x30
 8003620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8003622:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003626:	2200      	movs	r2, #0
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	605a      	str	r2, [r3, #4]
 800362c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800362e:	1d3b      	adds	r3, r7, #4
 8003630:	2220      	movs	r2, #32
 8003632:	2100      	movs	r1, #0
 8003634:	4618      	mov	r0, r3
 8003636:	f008 f845 	bl	800b6c4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800363a:	4b32      	ldr	r3, [pc, #200]	@ (8003704 <MX_ADC1_Init+0xe8>)
 800363c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8003640:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003642:	4b30      	ldr	r3, [pc, #192]	@ (8003704 <MX_ADC1_Init+0xe8>)
 8003644:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003648:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800364a:	4b2e      	ldr	r3, [pc, #184]	@ (8003704 <MX_ADC1_Init+0xe8>)
 800364c:	2200      	movs	r2, #0
 800364e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003650:	4b2c      	ldr	r3, [pc, #176]	@ (8003704 <MX_ADC1_Init+0xe8>)
 8003652:	2200      	movs	r2, #0
 8003654:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8003656:	4b2b      	ldr	r3, [pc, #172]	@ (8003704 <MX_ADC1_Init+0xe8>)
 8003658:	2200      	movs	r2, #0
 800365a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800365c:	4b29      	ldr	r3, [pc, #164]	@ (8003704 <MX_ADC1_Init+0xe8>)
 800365e:	2200      	movs	r2, #0
 8003660:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003662:	4b28      	ldr	r3, [pc, #160]	@ (8003704 <MX_ADC1_Init+0xe8>)
 8003664:	2204      	movs	r2, #4
 8003666:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003668:	4b26      	ldr	r3, [pc, #152]	@ (8003704 <MX_ADC1_Init+0xe8>)
 800366a:	2200      	movs	r2, #0
 800366c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800366e:	4b25      	ldr	r3, [pc, #148]	@ (8003704 <MX_ADC1_Init+0xe8>)
 8003670:	2200      	movs	r2, #0
 8003672:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8003674:	4b23      	ldr	r3, [pc, #140]	@ (8003704 <MX_ADC1_Init+0xe8>)
 8003676:	2201      	movs	r2, #1
 8003678:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800367a:	4b22      	ldr	r3, [pc, #136]	@ (8003704 <MX_ADC1_Init+0xe8>)
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003682:	4b20      	ldr	r3, [pc, #128]	@ (8003704 <MX_ADC1_Init+0xe8>)
 8003684:	2200      	movs	r2, #0
 8003686:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003688:	4b1e      	ldr	r3, [pc, #120]	@ (8003704 <MX_ADC1_Init+0xe8>)
 800368a:	2200      	movs	r2, #0
 800368c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800368e:	4b1d      	ldr	r3, [pc, #116]	@ (8003704 <MX_ADC1_Init+0xe8>)
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003696:	4b1b      	ldr	r3, [pc, #108]	@ (8003704 <MX_ADC1_Init+0xe8>)
 8003698:	2200      	movs	r2, #0
 800369a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800369c:	4b19      	ldr	r3, [pc, #100]	@ (8003704 <MX_ADC1_Init+0xe8>)
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80036a4:	4817      	ldr	r0, [pc, #92]	@ (8003704 <MX_ADC1_Init+0xe8>)
 80036a6:	f001 fa33 	bl	8004b10 <HAL_ADC_Init>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80036b0:	f000 fcc0 	bl	8004034 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80036b4:	2300      	movs	r3, #0
 80036b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80036b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036bc:	4619      	mov	r1, r3
 80036be:	4811      	ldr	r0, [pc, #68]	@ (8003704 <MX_ADC1_Init+0xe8>)
 80036c0:	f002 f848 	bl	8005754 <HAL_ADCEx_MultiModeConfigChannel>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80036ca:	f000 fcb3 	bl	8004034 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80036ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003708 <MX_ADC1_Init+0xec>)
 80036d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80036d2:	2306      	movs	r3, #6
 80036d4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80036d6:	2300      	movs	r3, #0
 80036d8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80036da:	237f      	movs	r3, #127	@ 0x7f
 80036dc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80036de:	2304      	movs	r3, #4
 80036e0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80036e2:	2300      	movs	r3, #0
 80036e4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80036e6:	1d3b      	adds	r3, r7, #4
 80036e8:	4619      	mov	r1, r3
 80036ea:	4806      	ldr	r0, [pc, #24]	@ (8003704 <MX_ADC1_Init+0xe8>)
 80036ec:	f001 fbcc 	bl	8004e88 <HAL_ADC_ConfigChannel>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80036f6:	f000 fc9d 	bl	8004034 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80036fa:	bf00      	nop
 80036fc:	3730      	adds	r7, #48	@ 0x30
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	2000039c 	.word	0x2000039c
 8003708:	19200040 	.word	0x19200040

0800370c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b08c      	sub	sp, #48	@ 0x30
 8003710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003712:	f107 030c 	add.w	r3, r7, #12
 8003716:	2224      	movs	r2, #36	@ 0x24
 8003718:	2100      	movs	r1, #0
 800371a:	4618      	mov	r0, r3
 800371c:	f007 ffd2 	bl	800b6c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003720:	463b      	mov	r3, r7
 8003722:	2200      	movs	r2, #0
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	605a      	str	r2, [r3, #4]
 8003728:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800372a:	4b21      	ldr	r3, [pc, #132]	@ (80037b0 <MX_TIM2_Init+0xa4>)
 800372c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003730:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003732:	4b1f      	ldr	r3, [pc, #124]	@ (80037b0 <MX_TIM2_Init+0xa4>)
 8003734:	2200      	movs	r2, #0
 8003736:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003738:	4b1d      	ldr	r3, [pc, #116]	@ (80037b0 <MX_TIM2_Init+0xa4>)
 800373a:	2200      	movs	r2, #0
 800373c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800373e:	4b1c      	ldr	r3, [pc, #112]	@ (80037b0 <MX_TIM2_Init+0xa4>)
 8003740:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003744:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003746:	4b1a      	ldr	r3, [pc, #104]	@ (80037b0 <MX_TIM2_Init+0xa4>)
 8003748:	2200      	movs	r2, #0
 800374a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800374c:	4b18      	ldr	r3, [pc, #96]	@ (80037b0 <MX_TIM2_Init+0xa4>)
 800374e:	2200      	movs	r2, #0
 8003750:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003752:	2303      	movs	r3, #3
 8003754:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003756:	2300      	movs	r3, #0
 8003758:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800375a:	2301      	movs	r3, #1
 800375c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800375e:	2300      	movs	r3, #0
 8003760:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003762:	2300      	movs	r3, #0
 8003764:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003766:	2300      	movs	r3, #0
 8003768:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800376a:	2301      	movs	r3, #1
 800376c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800376e:	2300      	movs	r3, #0
 8003770:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003772:	2300      	movs	r3, #0
 8003774:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003776:	f107 030c 	add.w	r3, r7, #12
 800377a:	4619      	mov	r1, r3
 800377c:	480c      	ldr	r0, [pc, #48]	@ (80037b0 <MX_TIM2_Init+0xa4>)
 800377e:	f004 fb49 	bl	8007e14 <HAL_TIM_Encoder_Init>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8003788:	f000 fc54 	bl	8004034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800378c:	2300      	movs	r3, #0
 800378e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003790:	2300      	movs	r3, #0
 8003792:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003794:	463b      	mov	r3, r7
 8003796:	4619      	mov	r1, r3
 8003798:	4805      	ldr	r0, [pc, #20]	@ (80037b0 <MX_TIM2_Init+0xa4>)
 800379a:	f005 fef1 	bl	8009580 <HAL_TIMEx_MasterConfigSynchronization>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80037a4:	f000 fc46 	bl	8004034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80037a8:	bf00      	nop
 80037aa:	3730      	adds	r7, #48	@ 0x30
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	20000408 	.word	0x20000408

080037b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b08e      	sub	sp, #56	@ 0x38
 80037b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	605a      	str	r2, [r3, #4]
 80037c4:	609a      	str	r2, [r3, #8]
 80037c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037c8:	f107 031c 	add.w	r3, r7, #28
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	605a      	str	r2, [r3, #4]
 80037d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037d4:	463b      	mov	r3, r7
 80037d6:	2200      	movs	r2, #0
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	605a      	str	r2, [r3, #4]
 80037dc:	609a      	str	r2, [r3, #8]
 80037de:	60da      	str	r2, [r3, #12]
 80037e0:	611a      	str	r2, [r3, #16]
 80037e2:	615a      	str	r2, [r3, #20]
 80037e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80037e6:	4b32      	ldr	r3, [pc, #200]	@ (80038b0 <MX_TIM3_Init+0xfc>)
 80037e8:	4a32      	ldr	r2, [pc, #200]	@ (80038b4 <MX_TIM3_Init+0x100>)
 80037ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80037ec:	4b30      	ldr	r3, [pc, #192]	@ (80038b0 <MX_TIM3_Init+0xfc>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037f2:	4b2f      	ldr	r3, [pc, #188]	@ (80038b0 <MX_TIM3_Init+0xfc>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 42499;
 80037f8:	4b2d      	ldr	r3, [pc, #180]	@ (80038b0 <MX_TIM3_Init+0xfc>)
 80037fa:	f24a 6203 	movw	r2, #42499	@ 0xa603
 80037fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003800:	4b2b      	ldr	r3, [pc, #172]	@ (80038b0 <MX_TIM3_Init+0xfc>)
 8003802:	2200      	movs	r2, #0
 8003804:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003806:	4b2a      	ldr	r3, [pc, #168]	@ (80038b0 <MX_TIM3_Init+0xfc>)
 8003808:	2200      	movs	r2, #0
 800380a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800380c:	4828      	ldr	r0, [pc, #160]	@ (80038b0 <MX_TIM3_Init+0xfc>)
 800380e:	f003 fef1 	bl	80075f4 <HAL_TIM_Base_Init>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003818:	f000 fc0c 	bl	8004034 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800381c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003820:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003822:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003826:	4619      	mov	r1, r3
 8003828:	4821      	ldr	r0, [pc, #132]	@ (80038b0 <MX_TIM3_Init+0xfc>)
 800382a:	f004 fec3 	bl	80085b4 <HAL_TIM_ConfigClockSource>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003834:	f000 fbfe 	bl	8004034 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003838:	481d      	ldr	r0, [pc, #116]	@ (80038b0 <MX_TIM3_Init+0xfc>)
 800383a:	f004 f827 	bl	800788c <HAL_TIM_PWM_Init>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003844:	f000 fbf6 	bl	8004034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003848:	2300      	movs	r3, #0
 800384a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800384c:	2300      	movs	r3, #0
 800384e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003850:	f107 031c 	add.w	r3, r7, #28
 8003854:	4619      	mov	r1, r3
 8003856:	4816      	ldr	r0, [pc, #88]	@ (80038b0 <MX_TIM3_Init+0xfc>)
 8003858:	f005 fe92 	bl	8009580 <HAL_TIMEx_MasterConfigSynchronization>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003862:	f000 fbe7 	bl	8004034 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003866:	2360      	movs	r3, #96	@ 0x60
 8003868:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800386a:	2300      	movs	r3, #0
 800386c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800386e:	2300      	movs	r3, #0
 8003870:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003872:	2300      	movs	r3, #0
 8003874:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003876:	463b      	mov	r3, r7
 8003878:	2200      	movs	r2, #0
 800387a:	4619      	mov	r1, r3
 800387c:	480c      	ldr	r0, [pc, #48]	@ (80038b0 <MX_TIM3_Init+0xfc>)
 800387e:	f004 fd85 	bl	800838c <HAL_TIM_PWM_ConfigChannel>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003888:	f000 fbd4 	bl	8004034 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800388c:	463b      	mov	r3, r7
 800388e:	2204      	movs	r2, #4
 8003890:	4619      	mov	r1, r3
 8003892:	4807      	ldr	r0, [pc, #28]	@ (80038b0 <MX_TIM3_Init+0xfc>)
 8003894:	f004 fd7a 	bl	800838c <HAL_TIM_PWM_ConfigChannel>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800389e:	f000 fbc9 	bl	8004034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80038a2:	4803      	ldr	r0, [pc, #12]	@ (80038b0 <MX_TIM3_Init+0xfc>)
 80038a4:	f000 fd0a 	bl	80042bc <HAL_TIM_MspPostInit>

}
 80038a8:	bf00      	nop
 80038aa:	3738      	adds	r7, #56	@ 0x38
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	200004d4 	.word	0x200004d4
 80038b4:	40000400 	.word	0x40000400

080038b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b088      	sub	sp, #32
 80038bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038be:	f107 0310 	add.w	r3, r7, #16
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	605a      	str	r2, [r3, #4]
 80038c8:	609a      	str	r2, [r3, #8]
 80038ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038cc:	1d3b      	adds	r3, r7, #4
 80038ce:	2200      	movs	r2, #0
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	605a      	str	r2, [r3, #4]
 80038d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80038d6:	4b1d      	ldr	r3, [pc, #116]	@ (800394c <MX_TIM4_Init+0x94>)
 80038d8:	4a1d      	ldr	r2, [pc, #116]	@ (8003950 <MX_TIM4_Init+0x98>)
 80038da:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 80038dc:	4b1b      	ldr	r3, [pc, #108]	@ (800394c <MX_TIM4_Init+0x94>)
 80038de:	22a9      	movs	r2, #169	@ 0xa9
 80038e0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038e2:	4b1a      	ldr	r3, [pc, #104]	@ (800394c <MX_TIM4_Init+0x94>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50;
 80038e8:	4b18      	ldr	r3, [pc, #96]	@ (800394c <MX_TIM4_Init+0x94>)
 80038ea:	2232      	movs	r2, #50	@ 0x32
 80038ec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038ee:	4b17      	ldr	r3, [pc, #92]	@ (800394c <MX_TIM4_Init+0x94>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038f4:	4b15      	ldr	r3, [pc, #84]	@ (800394c <MX_TIM4_Init+0x94>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80038fa:	4814      	ldr	r0, [pc, #80]	@ (800394c <MX_TIM4_Init+0x94>)
 80038fc:	f003 fe7a 	bl	80075f4 <HAL_TIM_Base_Init>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8003906:	f000 fb95 	bl	8004034 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800390a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800390e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003910:	f107 0310 	add.w	r3, r7, #16
 8003914:	4619      	mov	r1, r3
 8003916:	480d      	ldr	r0, [pc, #52]	@ (800394c <MX_TIM4_Init+0x94>)
 8003918:	f004 fe4c 	bl	80085b4 <HAL_TIM_ConfigClockSource>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8003922:	f000 fb87 	bl	8004034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003926:	2300      	movs	r3, #0
 8003928:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800392a:	2300      	movs	r3, #0
 800392c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800392e:	1d3b      	adds	r3, r7, #4
 8003930:	4619      	mov	r1, r3
 8003932:	4806      	ldr	r0, [pc, #24]	@ (800394c <MX_TIM4_Init+0x94>)
 8003934:	f005 fe24 	bl	8009580 <HAL_TIMEx_MasterConfigSynchronization>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800393e:	f000 fb79 	bl	8004034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003942:	bf00      	nop
 8003944:	3720      	adds	r7, #32
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	200005a0 	.word	0x200005a0
 8003950:	40000800 	.word	0x40000800

08003954 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b088      	sub	sp, #32
 8003958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800395a:	f107 0310 	add.w	r3, r7, #16
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	605a      	str	r2, [r3, #4]
 8003964:	609a      	str	r2, [r3, #8]
 8003966:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003968:	1d3b      	adds	r3, r7, #4
 800396a:	2200      	movs	r2, #0
 800396c:	601a      	str	r2, [r3, #0]
 800396e:	605a      	str	r2, [r3, #4]
 8003970:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003972:	4b1d      	ldr	r3, [pc, #116]	@ (80039e8 <MX_TIM5_Init+0x94>)
 8003974:	4a1d      	ldr	r2, [pc, #116]	@ (80039ec <MX_TIM5_Init+0x98>)
 8003976:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8003978:	4b1b      	ldr	r3, [pc, #108]	@ (80039e8 <MX_TIM5_Init+0x94>)
 800397a:	22a9      	movs	r2, #169	@ 0xa9
 800397c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800397e:	4b1a      	ldr	r3, [pc, #104]	@ (80039e8 <MX_TIM5_Init+0x94>)
 8003980:	2200      	movs	r2, #0
 8003982:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003984:	4b18      	ldr	r3, [pc, #96]	@ (80039e8 <MX_TIM5_Init+0x94>)
 8003986:	f04f 32ff 	mov.w	r2, #4294967295
 800398a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800398c:	4b16      	ldr	r3, [pc, #88]	@ (80039e8 <MX_TIM5_Init+0x94>)
 800398e:	2200      	movs	r2, #0
 8003990:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003992:	4b15      	ldr	r3, [pc, #84]	@ (80039e8 <MX_TIM5_Init+0x94>)
 8003994:	2200      	movs	r2, #0
 8003996:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003998:	4813      	ldr	r0, [pc, #76]	@ (80039e8 <MX_TIM5_Init+0x94>)
 800399a:	f003 fe2b 	bl	80075f4 <HAL_TIM_Base_Init>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80039a4:	f000 fb46 	bl	8004034 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80039ae:	f107 0310 	add.w	r3, r7, #16
 80039b2:	4619      	mov	r1, r3
 80039b4:	480c      	ldr	r0, [pc, #48]	@ (80039e8 <MX_TIM5_Init+0x94>)
 80039b6:	f004 fdfd 	bl	80085b4 <HAL_TIM_ConfigClockSource>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80039c0:	f000 fb38 	bl	8004034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039c4:	2300      	movs	r3, #0
 80039c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039c8:	2300      	movs	r3, #0
 80039ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80039cc:	1d3b      	adds	r3, r7, #4
 80039ce:	4619      	mov	r1, r3
 80039d0:	4805      	ldr	r0, [pc, #20]	@ (80039e8 <MX_TIM5_Init+0x94>)
 80039d2:	f005 fdd5 	bl	8009580 <HAL_TIMEx_MasterConfigSynchronization>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80039dc:	f000 fb2a 	bl	8004034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80039e0:	bf00      	nop
 80039e2:	3720      	adds	r7, #32
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	2000066c 	.word	0x2000066c
 80039ec:	40000c00 	.word	0x40000c00

080039f0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039f6:	1d3b      	adds	r3, r7, #4
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	605a      	str	r2, [r3, #4]
 80039fe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003a00:	4b14      	ldr	r3, [pc, #80]	@ (8003a54 <MX_TIM6_Init+0x64>)
 8003a02:	4a15      	ldr	r2, [pc, #84]	@ (8003a58 <MX_TIM6_Init+0x68>)
 8003a04:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8003a06:	4b13      	ldr	r3, [pc, #76]	@ (8003a54 <MX_TIM6_Init+0x64>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a0c:	4b11      	ldr	r3, [pc, #68]	@ (8003a54 <MX_TIM6_Init+0x64>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8003a12:	4b10      	ldr	r3, [pc, #64]	@ (8003a54 <MX_TIM6_Init+0x64>)
 8003a14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003a18:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8003a54 <MX_TIM6_Init+0x64>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003a20:	480c      	ldr	r0, [pc, #48]	@ (8003a54 <MX_TIM6_Init+0x64>)
 8003a22:	f003 fde7 	bl	80075f4 <HAL_TIM_Base_Init>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003a2c:	f000 fb02 	bl	8004034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a30:	2300      	movs	r3, #0
 8003a32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a34:	2300      	movs	r3, #0
 8003a36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003a38:	1d3b      	adds	r3, r7, #4
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	4805      	ldr	r0, [pc, #20]	@ (8003a54 <MX_TIM6_Init+0x64>)
 8003a3e:	f005 fd9f 	bl	8009580 <HAL_TIMEx_MasterConfigSynchronization>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003a48:	f000 faf4 	bl	8004034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003a4c:	bf00      	nop
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	20000738 	.word	0x20000738
 8003a58:	40001000 	.word	0x40001000

08003a5c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003a60:	4b14      	ldr	r3, [pc, #80]	@ (8003ab4 <MX_TIM16_Init+0x58>)
 8003a62:	4a15      	ldr	r2, [pc, #84]	@ (8003ab8 <MX_TIM16_Init+0x5c>)
 8003a64:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8003a66:	4b13      	ldr	r3, [pc, #76]	@ (8003ab4 <MX_TIM16_Init+0x58>)
 8003a68:	22a9      	movs	r2, #169	@ 0xa9
 8003a6a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a6c:	4b11      	ldr	r3, [pc, #68]	@ (8003ab4 <MX_TIM16_Init+0x58>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8003a72:	4b10      	ldr	r3, [pc, #64]	@ (8003ab4 <MX_TIM16_Init+0x58>)
 8003a74:	f240 4279 	movw	r2, #1145	@ 0x479
 8003a78:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8003ab4 <MX_TIM16_Init+0x58>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003a80:	4b0c      	ldr	r3, [pc, #48]	@ (8003ab4 <MX_TIM16_Init+0x58>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a86:	4b0b      	ldr	r3, [pc, #44]	@ (8003ab4 <MX_TIM16_Init+0x58>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003a8c:	4809      	ldr	r0, [pc, #36]	@ (8003ab4 <MX_TIM16_Init+0x58>)
 8003a8e:	f003 fdb1 	bl	80075f4 <HAL_TIM_Base_Init>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8003a98:	f000 facc 	bl	8004034 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8003a9c:	2108      	movs	r1, #8
 8003a9e:	4805      	ldr	r0, [pc, #20]	@ (8003ab4 <MX_TIM16_Init+0x58>)
 8003aa0:	f004 f8c2 	bl	8007c28 <HAL_TIM_OnePulse_Init>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8003aaa:	f000 fac3 	bl	8004034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003aae:	bf00      	nop
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	20000804 	.word	0x20000804
 8003ab8:	40014400 	.word	0x40014400

08003abc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003ac0:	4b23      	ldr	r3, [pc, #140]	@ (8003b50 <MX_UART4_Init+0x94>)
 8003ac2:	4a24      	ldr	r2, [pc, #144]	@ (8003b54 <MX_UART4_Init+0x98>)
 8003ac4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003ac6:	4b22      	ldr	r3, [pc, #136]	@ (8003b50 <MX_UART4_Init+0x94>)
 8003ac8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003acc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003ace:	4b20      	ldr	r3, [pc, #128]	@ (8003b50 <MX_UART4_Init+0x94>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003ad4:	4b1e      	ldr	r3, [pc, #120]	@ (8003b50 <MX_UART4_Init+0x94>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003ada:	4b1d      	ldr	r3, [pc, #116]	@ (8003b50 <MX_UART4_Init+0x94>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b50 <MX_UART4_Init+0x94>)
 8003ae2:	220c      	movs	r2, #12
 8003ae4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8003b50 <MX_UART4_Init+0x94>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003aec:	4b18      	ldr	r3, [pc, #96]	@ (8003b50 <MX_UART4_Init+0x94>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 8003af2:	4b17      	ldr	r3, [pc, #92]	@ (8003b50 <MX_UART4_Init+0x94>)
 8003af4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003af8:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003afa:	4b15      	ldr	r3, [pc, #84]	@ (8003b50 <MX_UART4_Init+0x94>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b00:	4b13      	ldr	r3, [pc, #76]	@ (8003b50 <MX_UART4_Init+0x94>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003b06:	4812      	ldr	r0, [pc, #72]	@ (8003b50 <MX_UART4_Init+0x94>)
 8003b08:	f005 fe20 	bl	800974c <HAL_UART_Init>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <MX_UART4_Init+0x5a>
  {
    Error_Handler();
 8003b12:	f000 fa8f 	bl	8004034 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b16:	2100      	movs	r1, #0
 8003b18:	480d      	ldr	r0, [pc, #52]	@ (8003b50 <MX_UART4_Init+0x94>)
 8003b1a:	f007 fd08 	bl	800b52e <HAL_UARTEx_SetTxFifoThreshold>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <MX_UART4_Init+0x6c>
  {
    Error_Handler();
 8003b24:	f000 fa86 	bl	8004034 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8003b28:	f04f 6120 	mov.w	r1, #167772160	@ 0xa000000
 8003b2c:	4808      	ldr	r0, [pc, #32]	@ (8003b50 <MX_UART4_Init+0x94>)
 8003b2e:	f007 fd3c 	bl	800b5aa <HAL_UARTEx_SetRxFifoThreshold>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <MX_UART4_Init+0x80>
  {
    Error_Handler();
 8003b38:	f000 fa7c 	bl	8004034 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003b3c:	4804      	ldr	r0, [pc, #16]	@ (8003b50 <MX_UART4_Init+0x94>)
 8003b3e:	f007 fcbd 	bl	800b4bc <HAL_UARTEx_DisableFifoMode>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <MX_UART4_Init+0x90>
  {
    Error_Handler();
 8003b48:	f000 fa74 	bl	8004034 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003b4c:	bf00      	nop
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	200008d0 	.word	0x200008d0
 8003b54:	40004c00 	.word	0x40004c00

08003b58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b5c:	4b23      	ldr	r3, [pc, #140]	@ (8003bec <MX_USART2_UART_Init+0x94>)
 8003b5e:	4a24      	ldr	r2, [pc, #144]	@ (8003bf0 <MX_USART2_UART_Init+0x98>)
 8003b60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8003b62:	4b22      	ldr	r3, [pc, #136]	@ (8003bec <MX_USART2_UART_Init+0x94>)
 8003b64:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8003b68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8003b6a:	4b20      	ldr	r3, [pc, #128]	@ (8003bec <MX_USART2_UART_Init+0x94>)
 8003b6c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003b70:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b72:	4b1e      	ldr	r3, [pc, #120]	@ (8003bec <MX_USART2_UART_Init+0x94>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8003b78:	4b1c      	ldr	r3, [pc, #112]	@ (8003bec <MX_USART2_UART_Init+0x94>)
 8003b7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b80:	4b1a      	ldr	r3, [pc, #104]	@ (8003bec <MX_USART2_UART_Init+0x94>)
 8003b82:	220c      	movs	r2, #12
 8003b84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b86:	4b19      	ldr	r3, [pc, #100]	@ (8003bec <MX_USART2_UART_Init+0x94>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b8c:	4b17      	ldr	r3, [pc, #92]	@ (8003bec <MX_USART2_UART_Init+0x94>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b92:	4b16      	ldr	r3, [pc, #88]	@ (8003bec <MX_USART2_UART_Init+0x94>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003b98:	4b14      	ldr	r3, [pc, #80]	@ (8003bec <MX_USART2_UART_Init+0x94>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b9e:	4b13      	ldr	r3, [pc, #76]	@ (8003bec <MX_USART2_UART_Init+0x94>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003ba4:	4811      	ldr	r0, [pc, #68]	@ (8003bec <MX_USART2_UART_Init+0x94>)
 8003ba6:	f005 fdd1 	bl	800974c <HAL_UART_Init>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8003bb0:	f000 fa40 	bl	8004034 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	480d      	ldr	r0, [pc, #52]	@ (8003bec <MX_USART2_UART_Init+0x94>)
 8003bb8:	f007 fcb9 	bl	800b52e <HAL_UARTEx_SetTxFifoThreshold>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8003bc2:	f000 fa37 	bl	8004034 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	4808      	ldr	r0, [pc, #32]	@ (8003bec <MX_USART2_UART_Init+0x94>)
 8003bca:	f007 fcee 	bl	800b5aa <HAL_UARTEx_SetRxFifoThreshold>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8003bd4:	f000 fa2e 	bl	8004034 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003bd8:	4804      	ldr	r0, [pc, #16]	@ (8003bec <MX_USART2_UART_Init+0x94>)
 8003bda:	f007 fc6f 	bl	800b4bc <HAL_UARTEx_DisableFifoMode>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8003be4:	f000 fa26 	bl	8004034 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003be8:	bf00      	nop
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	2000099c 	.word	0x2000099c
 8003bf0:	40004400 	.word	0x40004400

08003bf4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003bfa:	4b16      	ldr	r3, [pc, #88]	@ (8003c54 <MX_DMA_Init+0x60>)
 8003bfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bfe:	4a15      	ldr	r2, [pc, #84]	@ (8003c54 <MX_DMA_Init+0x60>)
 8003c00:	f043 0304 	orr.w	r3, r3, #4
 8003c04:	6493      	str	r3, [r2, #72]	@ 0x48
 8003c06:	4b13      	ldr	r3, [pc, #76]	@ (8003c54 <MX_DMA_Init+0x60>)
 8003c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c0a:	f003 0304 	and.w	r3, r3, #4
 8003c0e:	607b      	str	r3, [r7, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003c12:	4b10      	ldr	r3, [pc, #64]	@ (8003c54 <MX_DMA_Init+0x60>)
 8003c14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c16:	4a0f      	ldr	r2, [pc, #60]	@ (8003c54 <MX_DMA_Init+0x60>)
 8003c18:	f043 0301 	orr.w	r3, r3, #1
 8003c1c:	6493      	str	r3, [r2, #72]	@ 0x48
 8003c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c54 <MX_DMA_Init+0x60>)
 8003c20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	603b      	str	r3, [r7, #0]
 8003c28:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	200b      	movs	r0, #11
 8003c30:	f001 ff73 	bl	8005b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003c34:	200b      	movs	r0, #11
 8003c36:	f001 ff8a 	bl	8005b4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	200c      	movs	r0, #12
 8003c40:	f001 ff6b 	bl	8005b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003c44:	200c      	movs	r0, #12
 8003c46:	f001 ff82 	bl	8005b4e <HAL_NVIC_EnableIRQ>

}
 8003c4a:	bf00      	nop
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	40021000 	.word	0x40021000

08003c58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08a      	sub	sp, #40	@ 0x28
 8003c5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c5e:	f107 0314 	add.w	r3, r7, #20
 8003c62:	2200      	movs	r2, #0
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	605a      	str	r2, [r3, #4]
 8003c68:	609a      	str	r2, [r3, #8]
 8003c6a:	60da      	str	r2, [r3, #12]
 8003c6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c6e:	4b4c      	ldr	r3, [pc, #304]	@ (8003da0 <MX_GPIO_Init+0x148>)
 8003c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c72:	4a4b      	ldr	r2, [pc, #300]	@ (8003da0 <MX_GPIO_Init+0x148>)
 8003c74:	f043 0304 	orr.w	r3, r3, #4
 8003c78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c7a:	4b49      	ldr	r3, [pc, #292]	@ (8003da0 <MX_GPIO_Init+0x148>)
 8003c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c7e:	f003 0304 	and.w	r3, r3, #4
 8003c82:	613b      	str	r3, [r7, #16]
 8003c84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c86:	4b46      	ldr	r3, [pc, #280]	@ (8003da0 <MX_GPIO_Init+0x148>)
 8003c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c8a:	4a45      	ldr	r2, [pc, #276]	@ (8003da0 <MX_GPIO_Init+0x148>)
 8003c8c:	f043 0320 	orr.w	r3, r3, #32
 8003c90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c92:	4b43      	ldr	r3, [pc, #268]	@ (8003da0 <MX_GPIO_Init+0x148>)
 8003c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c96:	f003 0320 	and.w	r3, r3, #32
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c9e:	4b40      	ldr	r3, [pc, #256]	@ (8003da0 <MX_GPIO_Init+0x148>)
 8003ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ca2:	4a3f      	ldr	r2, [pc, #252]	@ (8003da0 <MX_GPIO_Init+0x148>)
 8003ca4:	f043 0301 	orr.w	r3, r3, #1
 8003ca8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003caa:	4b3d      	ldr	r3, [pc, #244]	@ (8003da0 <MX_GPIO_Init+0x148>)
 8003cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	60bb      	str	r3, [r7, #8]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cb6:	4b3a      	ldr	r3, [pc, #232]	@ (8003da0 <MX_GPIO_Init+0x148>)
 8003cb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cba:	4a39      	ldr	r2, [pc, #228]	@ (8003da0 <MX_GPIO_Init+0x148>)
 8003cbc:	f043 0302 	orr.w	r3, r3, #2
 8003cc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cc2:	4b37      	ldr	r3, [pc, #220]	@ (8003da0 <MX_GPIO_Init+0x148>)
 8003cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	607b      	str	r3, [r7, #4]
 8003ccc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Push_solenoid_Pin, GPIO_PIN_RESET);
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8003cd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003cd8:	f002 fc20 	bl	800651c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Pull_solenoid_Pin|Suck_solenoid_Pin, GPIO_PIN_RESET);
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2130      	movs	r1, #48	@ 0x30
 8003ce0:	4830      	ldr	r0, [pc, #192]	@ (8003da4 <MX_GPIO_Init+0x14c>)
 8003ce2:	f002 fc1b 	bl	800651c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003ce6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003cec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003cf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003cf6:	f107 0314 	add.w	r3, r7, #20
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4829      	ldr	r0, [pc, #164]	@ (8003da4 <MX_GPIO_Init+0x14c>)
 8003cfe:	f002 fa73 	bl	80061e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Base_Pin Limit_Top_Pin Reed_pull_Pin */
  GPIO_InitStruct.Pin = Limit_Base_Pin|Limit_Top_Pin|Reed_pull_Pin;
 8003d02:	23d0      	movs	r3, #208	@ 0xd0
 8003d04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d06:	2300      	movs	r3, #0
 8003d08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d0e:	f107 0314 	add.w	r3, r7, #20
 8003d12:	4619      	mov	r1, r3
 8003d14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d18:	f002 fa66 	bl	80061e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Push_solenoid_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Push_solenoid_Pin;
 8003d1c:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8003d20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d22:	2301      	movs	r3, #1
 8003d24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d2e:	f107 0314 	add.w	r3, r7, #20
 8003d32:	4619      	mov	r1, r3
 8003d34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d38:	f002 fa56 	bl	80061e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pull_solenoid_Pin Suck_solenoid_Pin */
  GPIO_InitStruct.Pin = Pull_solenoid_Pin|Suck_solenoid_Pin;
 8003d3c:	2330      	movs	r3, #48	@ 0x30
 8003d3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d40:	2301      	movs	r3, #1
 8003d42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d44:	2300      	movs	r3, #0
 8003d46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d4c:	f107 0314 	add.w	r3, r7, #20
 8003d50:	4619      	mov	r1, r3
 8003d52:	4814      	ldr	r0, [pc, #80]	@ (8003da4 <MX_GPIO_Init+0x14c>)
 8003d54:	f002 fa48 	bl	80061e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Signal_Pin */
  GPIO_InitStruct.Pin = Emergency_Signal_Pin;
 8003d58:	2380      	movs	r3, #128	@ 0x80
 8003d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003d60:	2302      	movs	r3, #2
 8003d62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_Signal_GPIO_Port, &GPIO_InitStruct);
 8003d64:	f107 0314 	add.w	r3, r7, #20
 8003d68:	4619      	mov	r1, r3
 8003d6a:	480e      	ldr	r0, [pc, #56]	@ (8003da4 <MX_GPIO_Init+0x14c>)
 8003d6c:	f002 fa3c 	bl	80061e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Reed_push_Pin */
  GPIO_InitStruct.Pin = Reed_push_Pin;
 8003d70:	2340      	movs	r3, #64	@ 0x40
 8003d72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d74:	2300      	movs	r3, #0
 8003d76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003d78:	2302      	movs	r3, #2
 8003d7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Reed_push_GPIO_Port, &GPIO_InitStruct);
 8003d7c:	f107 0314 	add.w	r3, r7, #20
 8003d80:	4619      	mov	r1, r3
 8003d82:	4809      	ldr	r0, [pc, #36]	@ (8003da8 <MX_GPIO_Init+0x150>)
 8003d84:	f002 fa30 	bl	80061e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003d88:	2200      	movs	r2, #0
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	2028      	movs	r0, #40	@ 0x28
 8003d8e:	f001 fec4 	bl	8005b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003d92:	2028      	movs	r0, #40	@ 0x28
 8003d94:	f001 fedb 	bl	8005b4e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003d98:	bf00      	nop
 8003d9a:	3728      	adds	r7, #40	@ 0x28
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40021000 	.word	0x40021000
 8003da4:	48000800 	.word	0x48000800
 8003da8:	48000400 	.word	0x48000400
 8003dac:	00000000 	.word	0x00000000

08003db0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */

volatile uint32_t interrupt_counter = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
 8003db0:	b5b0      	push	{r4, r5, r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
		if(htim == &htim5)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a7f      	ldr	r2, [pc, #508]	@ (8003fb8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d108      	bne.n	8003dd2 <HAL_TIM_PeriodElapsedCallback+0x22>
			{
			_micros += UINT32_MAX;
 8003dc0:	4b7e      	ldr	r3, [pc, #504]	@ (8003fbc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8003dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc6:	1e54      	subs	r4, r2, #1
 8003dc8:	f143 0500 	adc.w	r5, r3, #0
 8003dcc:	4b7b      	ldr	r3, [pc, #492]	@ (8003fbc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8003dce:	e9c3 4500 	strd	r4, r5, [r3]
			}
		if(htim == &htim4)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a7a      	ldr	r2, [pc, #488]	@ (8003fc0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	f040 80e6 	bne.w	8003fa8 <HAL_TIM_PeriodElapsedCallback+0x1f8>
		{
			interrupt_counter++;
 8003ddc:	4b79      	ldr	r3, [pc, #484]	@ (8003fc4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	3301      	adds	r3, #1
 8003de2:	4a78      	ldr	r2, [pc, #480]	@ (8003fc4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8003de4:	6013      	str	r3, [r2, #0]



			// For 10 kHz
			//-------For AMT Encoder & Base Status check----------//
			if(interrupt_counter % 2 == 0)
 8003de6:	4b77      	ldr	r3, [pc, #476]	@ (8003fc4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d15d      	bne.n	8003eae <HAL_TIM_PeriodElapsedCallback+0xfe>
			{

			    AMT_encoder_update(&AMT, &htim2, micros());
 8003df2:	f000 f905 	bl	8004000 <micros>
 8003df6:	4602      	mov	r2, r0
 8003df8:	460b      	mov	r3, r1
 8003dfa:	4973      	ldr	r1, [pc, #460]	@ (8003fc8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8003dfc:	4873      	ldr	r0, [pc, #460]	@ (8003fcc <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8003dfe:	f7fd fe4d 	bl	8001a9c <AMT_encoder_update>

				//Modbus
				easyCase();
 8003e02:	f7fd f96b 	bl	80010dc <easyCase>
				switch(base.Base_case){
 8003e06:	4b72      	ldr	r3, [pc, #456]	@ (8003fd0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8003e08:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	2b07      	cmp	r3, #7
 8003e10:	d828      	bhi.n	8003e64 <HAL_TIM_PeriodElapsedCallback+0xb4>
 8003e12:	a201      	add	r2, pc, #4	@ (adr r2, 8003e18 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e18:	08003e39 	.word	0x08003e39
 8003e1c:	08003e41 	.word	0x08003e41
 8003e20:	08003e65 	.word	0x08003e65
 8003e24:	08003e4d 	.word	0x08003e4d
 8003e28:	08003e65 	.word	0x08003e65
 8003e2c:	08003e65 	.word	0x08003e65
 8003e30:	08003e65 	.word	0x08003e65
 8003e34:	08003e59 	.word	0x08003e59
					case 1:
						base.BaseStatus = 1;
 8003e38:	4b65      	ldr	r3, [pc, #404]	@ (8003fd0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	801a      	strh	r2, [r3, #0]
						break;
 8003e3e:	e014      	b.n	8003e6a <HAL_TIM_PeriodElapsedCallback+0xba>
					case 2:
						base.BaseStatus = 2;
 8003e40:	4b63      	ldr	r3, [pc, #396]	@ (8003fd0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8003e42:	2202      	movs	r2, #2
 8003e44:	801a      	strh	r2, [r3, #0]
						SetHome();
 8003e46:	f7fd faf9 	bl	800143c <SetHome>
						break;
 8003e4a:	e00e      	b.n	8003e6a <HAL_TIM_PeriodElapsedCallback+0xba>
					case 4:
						base.BaseStatus = 4;
 8003e4c:	4b60      	ldr	r3, [pc, #384]	@ (8003fd0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8003e4e:	2204      	movs	r2, #4
 8003e50:	801a      	strh	r2, [r3, #0]
						RunJog();
 8003e52:	f7fd fb1d 	bl	8001490 <RunJog>
						break;
 8003e56:	e008      	b.n	8003e6a <HAL_TIM_PeriodElapsedCallback+0xba>
					case 8:
						base.BaseStatus = 8;
 8003e58:	4b5d      	ldr	r3, [pc, #372]	@ (8003fd0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8003e5a:	2208      	movs	r2, #8
 8003e5c:	801a      	strh	r2, [r3, #0]
						RunPoint();
 8003e5e:	f7fd faa3 	bl	80013a8 <RunPoint>
						break;
 8003e62:	e002      	b.n	8003e6a <HAL_TIM_PeriodElapsedCallback+0xba>
					default :
						base.BaseStatus = 0;
 8003e64:	4b5a      	ldr	r3, [pc, #360]	@ (8003fd0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	801a      	strh	r2, [r3, #0]
				}

				// Reed Switch Status
				int pinCombination = (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) | HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 8003e6a:	2140      	movs	r1, #64	@ 0x40
 8003e6c:	4859      	ldr	r0, [pc, #356]	@ (8003fd4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8003e6e:	f002 fb3d 	bl	80064ec <HAL_GPIO_ReadPin>
 8003e72:	4603      	mov	r3, r0
 8003e74:	005c      	lsls	r4, r3, #1
 8003e76:	2180      	movs	r1, #128	@ 0x80
 8003e78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e7c:	f002 fb36 	bl	80064ec <HAL_GPIO_ReadPin>
 8003e80:	4603      	mov	r3, r0
 8003e82:	4323      	orrs	r3, r4
 8003e84:	60fb      	str	r3, [r7, #12]
				switch(pinCombination) {
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d007      	beq.n	8003e9c <HAL_TIM_PeriodElapsedCallback+0xec>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d109      	bne.n	8003ea6 <HAL_TIM_PeriodElapsedCallback+0xf6>
					case 2: // Binary 10: B is SET, A is RESET
						base.ReedStatus = 0b0001;
 8003e92:	4b4f      	ldr	r3, [pc, #316]	@ (8003fd0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8003e94:	2201      	movs	r2, #1
 8003e96:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
						break;
 8003e9a:	e008      	b.n	8003eae <HAL_TIM_PeriodElapsedCallback+0xfe>
					case 1: // Binary 01: B is RESET, A is SET
						base.ReedStatus = 0b0010;
 8003e9c:	4b4c      	ldr	r3, [pc, #304]	@ (8003fd0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
						break;
 8003ea4:	e003      	b.n	8003eae <HAL_TIM_PeriodElapsedCallback+0xfe>
					default:
						base.ReedStatus = 0b0000;
 8003ea6:	4b4a      	ldr	r3, [pc, #296]	@ (8003fd0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e



			// For 5 KHz
			//----------------For PID & Trajectory----------------//
			if(interrupt_counter % 4 == 0)
 8003eae:	4b45      	ldr	r3, [pc, #276]	@ (8003fc4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0303 	and.w	r3, r3, #3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d15d      	bne.n	8003f76 <HAL_TIM_PeriodElapsedCallback+0x1c6>
			{
				if(ppp == 1){
 8003eba:	4b47      	ldr	r3, [pc, #284]	@ (8003fd8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d12e      	bne.n	8003f20 <HAL_TIM_PeriodElapsedCallback+0x170>
					elapsedTime += 0.0002;
 8003ec2:	4b46      	ldr	r3, [pc, #280]	@ (8003fdc <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fc fb0a 	bl	80004e0 <__aeabi_f2d>
 8003ecc:	a338      	add	r3, pc, #224	@ (adr r3, 8003fb0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8003ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed2:	f7fc f9a7 	bl	8000224 <__adddf3>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	460b      	mov	r3, r1
 8003eda:	4610      	mov	r0, r2
 8003edc:	4619      	mov	r1, r3
 8003ede:	f7fc fe27 	bl	8000b30 <__aeabi_d2f>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	4a3d      	ldr	r2, [pc, #244]	@ (8003fdc <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8003ee6:	6013      	str	r3, [r2, #0]
					Traject(&Traj, 600, 100);
 8003ee8:	eddf 0a3d 	vldr	s1, [pc, #244]	@ 8003fe0 <HAL_TIM_PeriodElapsedCallback+0x230>
 8003eec:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 8003fe4 <HAL_TIM_PeriodElapsedCallback+0x234>
 8003ef0:	483d      	ldr	r0, [pc, #244]	@ (8003fe8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8003ef2:	f7ff f819 	bl	8002f28 <Traject>
					PID_controller_cascade(&PID_pos, &PID_velo, &AMT, Traj.currentPosition);
 8003ef6:	4b3c      	ldr	r3, [pc, #240]	@ (8003fe8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8003ef8:	edd3 7a02 	vldr	s15, [r3, #8]
 8003efc:	eeb0 0a67 	vmov.f32	s0, s15
 8003f00:	4a32      	ldr	r2, [pc, #200]	@ (8003fcc <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8003f02:	493a      	ldr	r1, [pc, #232]	@ (8003fec <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8003f04:	483a      	ldr	r0, [pc, #232]	@ (8003ff0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8003f06:	f7fe fe01 	bl	8002b0c <PID_controller_cascade>
					base.MotorHome = PID_velo.out;
 8003f0a:	4b38      	ldr	r3, [pc, #224]	@ (8003fec <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8003f0c:	edd3 7a06 	vldr	s15, [r3, #24]
 8003f10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f14:	ee17 3a90 	vmov	r3, s15
 8003f18:	b21a      	sxth	r2, r3
 8003f1a:	4b2d      	ldr	r3, [pc, #180]	@ (8003fd0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8003f1c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
				}
				// Coarse Step Joy
				if (ps2.mode == 1){
 8003f20:	4b34      	ldr	r3, [pc, #208]	@ (8003ff4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8003f22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d10d      	bne.n	8003f44 <HAL_TIM_PeriodElapsedCallback+0x194>
					base.MotorHome = ps2.pwmOut;
 8003f28:	4b32      	ldr	r3, [pc, #200]	@ (8003ff4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8003f2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f2c:	b21a      	sxth	r2, r3
 8003f2e:	4b28      	ldr	r3, [pc, #160]	@ (8003fd0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8003f30:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
					if (ps2.pwmOut < 0)
 8003f34:	4b2f      	ldr	r3, [pc, #188]	@ (8003ff4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8003f36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	da03      	bge.n	8003f44 <HAL_TIM_PeriodElapsedCallback+0x194>
					{
						base.MotorHome = 0;
 8003f3c:	4b24      	ldr	r3, [pc, #144]	@ (8003fd0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
					}
				}

				// Fine Step Joy
				if (ps2.mode == 2){
 8003f44:	4b2b      	ldr	r3, [pc, #172]	@ (8003ff4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8003f46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d114      	bne.n	8003f76 <HAL_TIM_PeriodElapsedCallback+0x1c6>
					PID_controller_cascade(&PID_pos, &PID_velo, &AMT, ps2.PIDPos);
 8003f4c:	4b29      	ldr	r3, [pc, #164]	@ (8003ff4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8003f4e:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 8003f52:	eeb0 0a67 	vmov.f32	s0, s15
 8003f56:	4a1d      	ldr	r2, [pc, #116]	@ (8003fcc <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8003f58:	4924      	ldr	r1, [pc, #144]	@ (8003fec <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8003f5a:	4825      	ldr	r0, [pc, #148]	@ (8003ff0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8003f5c:	f7fe fdd6 	bl	8002b0c <PID_controller_cascade>
					base.MotorHome = PID_velo.out;
 8003f60:	4b22      	ldr	r3, [pc, #136]	@ (8003fec <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8003f62:	edd3 7a06 	vldr	s15, [r3, #24]
 8003f66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f6a:	ee17 3a90 	vmov	r3, s15
 8003f6e:	b21a      	sxth	r2, r3
 8003f70:	4b17      	ldr	r3, [pc, #92]	@ (8003fd0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8003f72:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58



			// For 2 kHz
			//------------------For control PWM-------------------//
			if(interrupt_counter % 10 == 0)
 8003f76:	4b13      	ldr	r3, [pc, #76]	@ (8003fc4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8003f78:	6819      	ldr	r1, [r3, #0]
 8003f7a:	4b1f      	ldr	r3, [pc, #124]	@ (8003ff8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003f7c:	fba3 2301 	umull	r2, r3, r3, r1
 8003f80:	08da      	lsrs	r2, r3, #3
 8003f82:	4613      	mov	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	1aca      	subs	r2, r1, r3
 8003f8c:	2a00      	cmp	r2, #0
 8003f8e:	d10b      	bne.n	8003fa8 <HAL_TIM_PeriodElapsedCallback+0x1f8>
//					MOTOR_set_duty(&MT, base.MotorHome);
//			}
//
//}

				MOTOR_set_duty(&MT, base.MotorHome);
 8003f90:	4b0f      	ldr	r3, [pc, #60]	@ (8003fd0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8003f92:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	@ 0x58
 8003f96:	ee07 3a90 	vmov	s15, r3
 8003f9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f9e:	eeb0 0a67 	vmov.f32	s0, s15
 8003fa2:	4816      	ldr	r0, [pc, #88]	@ (8003ffc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8003fa4:	f7fe f994 	bl	80022d0 <MOTOR_set_duty>
			}
	}
	}
 8003fa8:	bf00      	nop
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bdb0      	pop	{r4, r5, r7, pc}
 8003fb0:	eb1c432d 	.word	0xeb1c432d
 8003fb4:	3f2a36e2 	.word	0x3f2a36e2
 8003fb8:	2000066c 	.word	0x2000066c
 8003fbc:	20001100 	.word	0x20001100
 8003fc0:	200005a0 	.word	0x200005a0
 8003fc4:	200012a0 	.word	0x200012a0
 8003fc8:	20000408 	.word	0x20000408
 8003fcc:	20000b48 	.word	0x20000b48
 8003fd0:	20000300 	.word	0x20000300
 8003fd4:	48000400 	.word	0x48000400
 8003fd8:	2000129c 	.word	0x2000129c
 8003fdc:	20001108 	.word	0x20001108
 8003fe0:	42c80000 	.word	0x42c80000
 8003fe4:	44160000 	.word	0x44160000
 8003fe8:	20000b30 	.word	0x20000b30
 8003fec:	20000c08 	.word	0x20000c08
 8003ff0:	200002e4 	.word	0x200002e4
 8003ff4:	20000b88 	.word	0x20000b88
 8003ff8:	cccccccd 	.word	0xcccccccd
 8003ffc:	20000b28 	.word	0x20000b28

08004000 <micros>:

uint64_t micros()
	{
 8004000:	b4b0      	push	{r4, r5, r7}
 8004002:	af00      	add	r7, sp, #0
		return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 8004004:	4b09      	ldr	r3, [pc, #36]	@ (800402c <micros+0x2c>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400a:	2200      	movs	r2, #0
 800400c:	4618      	mov	r0, r3
 800400e:	4611      	mov	r1, r2
 8004010:	4b07      	ldr	r3, [pc, #28]	@ (8004030 <micros+0x30>)
 8004012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004016:	1884      	adds	r4, r0, r2
 8004018:	eb41 0503 	adc.w	r5, r1, r3
 800401c:	4622      	mov	r2, r4
 800401e:	462b      	mov	r3, r5
	}
 8004020:	4610      	mov	r0, r2
 8004022:	4619      	mov	r1, r3
 8004024:	46bd      	mov	sp, r7
 8004026:	bcb0      	pop	{r4, r5, r7}
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	2000066c 	.word	0x2000066c
 8004030:	20001100 	.word	0x20001100

08004034 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004034:	b480      	push	{r7}
 8004036:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004038:	b672      	cpsid	i
}
 800403a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800403c:	bf00      	nop
 800403e:	e7fd      	b.n	800403c <Error_Handler+0x8>

08004040 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004046:	4b0f      	ldr	r3, [pc, #60]	@ (8004084 <HAL_MspInit+0x44>)
 8004048:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800404a:	4a0e      	ldr	r2, [pc, #56]	@ (8004084 <HAL_MspInit+0x44>)
 800404c:	f043 0301 	orr.w	r3, r3, #1
 8004050:	6613      	str	r3, [r2, #96]	@ 0x60
 8004052:	4b0c      	ldr	r3, [pc, #48]	@ (8004084 <HAL_MspInit+0x44>)
 8004054:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	607b      	str	r3, [r7, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800405e:	4b09      	ldr	r3, [pc, #36]	@ (8004084 <HAL_MspInit+0x44>)
 8004060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004062:	4a08      	ldr	r2, [pc, #32]	@ (8004084 <HAL_MspInit+0x44>)
 8004064:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004068:	6593      	str	r3, [r2, #88]	@ 0x58
 800406a:	4b06      	ldr	r3, [pc, #24]	@ (8004084 <HAL_MspInit+0x44>)
 800406c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800406e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004072:	603b      	str	r3, [r7, #0]
 8004074:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004076:	f002 fb31 	bl	80066dc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800407a:	bf00      	nop
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	40021000 	.word	0x40021000

08004088 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b09e      	sub	sp, #120	@ 0x78
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004090:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	605a      	str	r2, [r3, #4]
 800409a:	609a      	str	r2, [r3, #8]
 800409c:	60da      	str	r2, [r3, #12]
 800409e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80040a0:	f107 0310 	add.w	r3, r7, #16
 80040a4:	2254      	movs	r2, #84	@ 0x54
 80040a6:	2100      	movs	r1, #0
 80040a8:	4618      	mov	r0, r3
 80040aa:	f007 fb0b 	bl	800b6c4 <memset>
  if(hadc->Instance==ADC1)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040b6:	d133      	bne.n	8004120 <HAL_ADC_MspInit+0x98>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80040b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040bc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80040be:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80040c2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040c4:	f107 0310 	add.w	r3, r7, #16
 80040c8:	4618      	mov	r0, r3
 80040ca:	f003 f845 	bl	8007158 <HAL_RCCEx_PeriphCLKConfig>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80040d4:	f7ff ffae 	bl	8004034 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80040d8:	4b13      	ldr	r3, [pc, #76]	@ (8004128 <HAL_ADC_MspInit+0xa0>)
 80040da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040dc:	4a12      	ldr	r2, [pc, #72]	@ (8004128 <HAL_ADC_MspInit+0xa0>)
 80040de:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80040e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040e4:	4b10      	ldr	r3, [pc, #64]	@ (8004128 <HAL_ADC_MspInit+0xa0>)
 80040e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040ec:	60fb      	str	r3, [r7, #12]
 80040ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040f0:	4b0d      	ldr	r3, [pc, #52]	@ (8004128 <HAL_ADC_MspInit+0xa0>)
 80040f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040f4:	4a0c      	ldr	r2, [pc, #48]	@ (8004128 <HAL_ADC_MspInit+0xa0>)
 80040f6:	f043 0304 	orr.w	r3, r3, #4
 80040fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004128 <HAL_ADC_MspInit+0xa0>)
 80040fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	60bb      	str	r3, [r7, #8]
 8004106:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Current_sensor_Pin;
 8004108:	2301      	movs	r3, #1
 800410a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800410c:	2303      	movs	r3, #3
 800410e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004110:	2300      	movs	r3, #0
 8004112:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(Current_sensor_GPIO_Port, &GPIO_InitStruct);
 8004114:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004118:	4619      	mov	r1, r3
 800411a:	4804      	ldr	r0, [pc, #16]	@ (800412c <HAL_ADC_MspInit+0xa4>)
 800411c:	f002 f864 	bl	80061e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004120:	bf00      	nop
 8004122:	3778      	adds	r7, #120	@ 0x78
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	40021000 	.word	0x40021000
 800412c:	48000800 	.word	0x48000800

08004130 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b08a      	sub	sp, #40	@ 0x28
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004138:	f107 0314 	add.w	r3, r7, #20
 800413c:	2200      	movs	r2, #0
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	605a      	str	r2, [r3, #4]
 8004142:	609a      	str	r2, [r3, #8]
 8004144:	60da      	str	r2, [r3, #12]
 8004146:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004150:	d128      	bne.n	80041a4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004152:	4b16      	ldr	r3, [pc, #88]	@ (80041ac <HAL_TIM_Encoder_MspInit+0x7c>)
 8004154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004156:	4a15      	ldr	r2, [pc, #84]	@ (80041ac <HAL_TIM_Encoder_MspInit+0x7c>)
 8004158:	f043 0301 	orr.w	r3, r3, #1
 800415c:	6593      	str	r3, [r2, #88]	@ 0x58
 800415e:	4b13      	ldr	r3, [pc, #76]	@ (80041ac <HAL_TIM_Encoder_MspInit+0x7c>)
 8004160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	613b      	str	r3, [r7, #16]
 8004168:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800416a:	4b10      	ldr	r3, [pc, #64]	@ (80041ac <HAL_TIM_Encoder_MspInit+0x7c>)
 800416c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800416e:	4a0f      	ldr	r2, [pc, #60]	@ (80041ac <HAL_TIM_Encoder_MspInit+0x7c>)
 8004170:	f043 0301 	orr.w	r3, r3, #1
 8004174:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004176:	4b0d      	ldr	r3, [pc, #52]	@ (80041ac <HAL_TIM_Encoder_MspInit+0x7c>)
 8004178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004182:	2303      	movs	r3, #3
 8004184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004186:	2302      	movs	r3, #2
 8004188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418a:	2300      	movs	r3, #0
 800418c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800418e:	2300      	movs	r3, #0
 8004190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004192:	2301      	movs	r3, #1
 8004194:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004196:	f107 0314 	add.w	r3, r7, #20
 800419a:	4619      	mov	r1, r3
 800419c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80041a0:	f002 f822 	bl	80061e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80041a4:	bf00      	nop
 80041a6:	3728      	adds	r7, #40	@ 0x28
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	40021000 	.word	0x40021000

080041b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b088      	sub	sp, #32
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a39      	ldr	r2, [pc, #228]	@ (80042a4 <HAL_TIM_Base_MspInit+0xf4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d10c      	bne.n	80041dc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80041c2:	4b39      	ldr	r3, [pc, #228]	@ (80042a8 <HAL_TIM_Base_MspInit+0xf8>)
 80041c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c6:	4a38      	ldr	r2, [pc, #224]	@ (80042a8 <HAL_TIM_Base_MspInit+0xf8>)
 80041c8:	f043 0302 	orr.w	r3, r3, #2
 80041cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80041ce:	4b36      	ldr	r3, [pc, #216]	@ (80042a8 <HAL_TIM_Base_MspInit+0xf8>)
 80041d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	61fb      	str	r3, [r7, #28]
 80041d8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80041da:	e05e      	b.n	800429a <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM4)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a32      	ldr	r2, [pc, #200]	@ (80042ac <HAL_TIM_Base_MspInit+0xfc>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d114      	bne.n	8004210 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80041e6:	4b30      	ldr	r3, [pc, #192]	@ (80042a8 <HAL_TIM_Base_MspInit+0xf8>)
 80041e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ea:	4a2f      	ldr	r2, [pc, #188]	@ (80042a8 <HAL_TIM_Base_MspInit+0xf8>)
 80041ec:	f043 0304 	orr.w	r3, r3, #4
 80041f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80041f2:	4b2d      	ldr	r3, [pc, #180]	@ (80042a8 <HAL_TIM_Base_MspInit+0xf8>)
 80041f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f6:	f003 0304 	and.w	r3, r3, #4
 80041fa:	61bb      	str	r3, [r7, #24]
 80041fc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80041fe:	2200      	movs	r2, #0
 8004200:	2100      	movs	r1, #0
 8004202:	201e      	movs	r0, #30
 8004204:	f001 fc89 	bl	8005b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004208:	201e      	movs	r0, #30
 800420a:	f001 fca0 	bl	8005b4e <HAL_NVIC_EnableIRQ>
}
 800420e:	e044      	b.n	800429a <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM5)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a26      	ldr	r2, [pc, #152]	@ (80042b0 <HAL_TIM_Base_MspInit+0x100>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d114      	bne.n	8004244 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800421a:	4b23      	ldr	r3, [pc, #140]	@ (80042a8 <HAL_TIM_Base_MspInit+0xf8>)
 800421c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800421e:	4a22      	ldr	r2, [pc, #136]	@ (80042a8 <HAL_TIM_Base_MspInit+0xf8>)
 8004220:	f043 0308 	orr.w	r3, r3, #8
 8004224:	6593      	str	r3, [r2, #88]	@ 0x58
 8004226:	4b20      	ldr	r3, [pc, #128]	@ (80042a8 <HAL_TIM_Base_MspInit+0xf8>)
 8004228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	617b      	str	r3, [r7, #20]
 8004230:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004232:	2200      	movs	r2, #0
 8004234:	2100      	movs	r1, #0
 8004236:	2032      	movs	r0, #50	@ 0x32
 8004238:	f001 fc6f 	bl	8005b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800423c:	2032      	movs	r0, #50	@ 0x32
 800423e:	f001 fc86 	bl	8005b4e <HAL_NVIC_EnableIRQ>
}
 8004242:	e02a      	b.n	800429a <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM6)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a1a      	ldr	r2, [pc, #104]	@ (80042b4 <HAL_TIM_Base_MspInit+0x104>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d10c      	bne.n	8004268 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800424e:	4b16      	ldr	r3, [pc, #88]	@ (80042a8 <HAL_TIM_Base_MspInit+0xf8>)
 8004250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004252:	4a15      	ldr	r2, [pc, #84]	@ (80042a8 <HAL_TIM_Base_MspInit+0xf8>)
 8004254:	f043 0310 	orr.w	r3, r3, #16
 8004258:	6593      	str	r3, [r2, #88]	@ 0x58
 800425a:	4b13      	ldr	r3, [pc, #76]	@ (80042a8 <HAL_TIM_Base_MspInit+0xf8>)
 800425c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800425e:	f003 0310 	and.w	r3, r3, #16
 8004262:	613b      	str	r3, [r7, #16]
 8004264:	693b      	ldr	r3, [r7, #16]
}
 8004266:	e018      	b.n	800429a <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM16)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a12      	ldr	r2, [pc, #72]	@ (80042b8 <HAL_TIM_Base_MspInit+0x108>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d113      	bne.n	800429a <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004272:	4b0d      	ldr	r3, [pc, #52]	@ (80042a8 <HAL_TIM_Base_MspInit+0xf8>)
 8004274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004276:	4a0c      	ldr	r2, [pc, #48]	@ (80042a8 <HAL_TIM_Base_MspInit+0xf8>)
 8004278:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800427c:	6613      	str	r3, [r2, #96]	@ 0x60
 800427e:	4b0a      	ldr	r3, [pc, #40]	@ (80042a8 <HAL_TIM_Base_MspInit+0xf8>)
 8004280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800428a:	2200      	movs	r2, #0
 800428c:	2100      	movs	r1, #0
 800428e:	2019      	movs	r0, #25
 8004290:	f001 fc43 	bl	8005b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004294:	2019      	movs	r0, #25
 8004296:	f001 fc5a 	bl	8005b4e <HAL_NVIC_EnableIRQ>
}
 800429a:	bf00      	nop
 800429c:	3720      	adds	r7, #32
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	40000400 	.word	0x40000400
 80042a8:	40021000 	.word	0x40021000
 80042ac:	40000800 	.word	0x40000800
 80042b0:	40000c00 	.word	0x40000c00
 80042b4:	40001000 	.word	0x40001000
 80042b8:	40014400 	.word	0x40014400

080042bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042c4:	f107 030c 	add.w	r3, r7, #12
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	605a      	str	r2, [r3, #4]
 80042ce:	609a      	str	r2, [r3, #8]
 80042d0:	60da      	str	r2, [r3, #12]
 80042d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a11      	ldr	r2, [pc, #68]	@ (8004320 <HAL_TIM_MspPostInit+0x64>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d11b      	bne.n	8004316 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042de:	4b11      	ldr	r3, [pc, #68]	@ (8004324 <HAL_TIM_MspPostInit+0x68>)
 80042e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042e2:	4a10      	ldr	r2, [pc, #64]	@ (8004324 <HAL_TIM_MspPostInit+0x68>)
 80042e4:	f043 0302 	orr.w	r3, r3, #2
 80042e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042ea:	4b0e      	ldr	r3, [pc, #56]	@ (8004324 <HAL_TIM_MspPostInit+0x68>)
 80042ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	60bb      	str	r3, [r7, #8]
 80042f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80042f6:	2330      	movs	r3, #48	@ 0x30
 80042f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042fa:	2302      	movs	r3, #2
 80042fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042fe:	2300      	movs	r3, #0
 8004300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004302:	2300      	movs	r3, #0
 8004304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004306:	2302      	movs	r3, #2
 8004308:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800430a:	f107 030c 	add.w	r3, r7, #12
 800430e:	4619      	mov	r1, r3
 8004310:	4805      	ldr	r0, [pc, #20]	@ (8004328 <HAL_TIM_MspPostInit+0x6c>)
 8004312:	f001 ff69 	bl	80061e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004316:	bf00      	nop
 8004318:	3720      	adds	r7, #32
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	40000400 	.word	0x40000400
 8004324:	40021000 	.word	0x40021000
 8004328:	48000400 	.word	0x48000400

0800432c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b0a0      	sub	sp, #128	@ 0x80
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004334:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]
 800433c:	605a      	str	r2, [r3, #4]
 800433e:	609a      	str	r2, [r3, #8]
 8004340:	60da      	str	r2, [r3, #12]
 8004342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004344:	f107 0318 	add.w	r3, r7, #24
 8004348:	2254      	movs	r2, #84	@ 0x54
 800434a:	2100      	movs	r1, #0
 800434c:	4618      	mov	r0, r3
 800434e:	f007 f9b9 	bl	800b6c4 <memset>
  if(huart->Instance==UART4)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a6b      	ldr	r2, [pc, #428]	@ (8004504 <HAL_UART_MspInit+0x1d8>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d137      	bne.n	80043cc <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800435c:	2308      	movs	r3, #8
 800435e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8004360:	2300      	movs	r3, #0
 8004362:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004364:	f107 0318 	add.w	r3, r7, #24
 8004368:	4618      	mov	r0, r3
 800436a:	f002 fef5 	bl	8007158 <HAL_RCCEx_PeriphCLKConfig>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004374:	f7ff fe5e 	bl	8004034 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004378:	4b63      	ldr	r3, [pc, #396]	@ (8004508 <HAL_UART_MspInit+0x1dc>)
 800437a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800437c:	4a62      	ldr	r2, [pc, #392]	@ (8004508 <HAL_UART_MspInit+0x1dc>)
 800437e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004382:	6593      	str	r3, [r2, #88]	@ 0x58
 8004384:	4b60      	ldr	r3, [pc, #384]	@ (8004508 <HAL_UART_MspInit+0x1dc>)
 8004386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004388:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800438c:	617b      	str	r3, [r7, #20]
 800438e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004390:	4b5d      	ldr	r3, [pc, #372]	@ (8004508 <HAL_UART_MspInit+0x1dc>)
 8004392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004394:	4a5c      	ldr	r2, [pc, #368]	@ (8004508 <HAL_UART_MspInit+0x1dc>)
 8004396:	f043 0304 	orr.w	r3, r3, #4
 800439a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800439c:	4b5a      	ldr	r3, [pc, #360]	@ (8004508 <HAL_UART_MspInit+0x1dc>)
 800439e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	613b      	str	r3, [r7, #16]
 80043a6:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80043a8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80043ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ae:	2302      	movs	r3, #2
 80043b0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b2:	2300      	movs	r3, #0
 80043b4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043b6:	2300      	movs	r3, #0
 80043b8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80043ba:	2305      	movs	r3, #5
 80043bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043be:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80043c2:	4619      	mov	r1, r3
 80043c4:	4851      	ldr	r0, [pc, #324]	@ (800450c <HAL_UART_MspInit+0x1e0>)
 80043c6:	f001 ff0f 	bl	80061e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80043ca:	e097      	b.n	80044fc <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART2)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a4f      	ldr	r2, [pc, #316]	@ (8004510 <HAL_UART_MspInit+0x1e4>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	f040 8092 	bne.w	80044fc <HAL_UART_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80043d8:	2302      	movs	r3, #2
 80043da:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80043dc:	2300      	movs	r3, #0
 80043de:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80043e0:	f107 0318 	add.w	r3, r7, #24
 80043e4:	4618      	mov	r0, r3
 80043e6:	f002 feb7 	bl	8007158 <HAL_RCCEx_PeriphCLKConfig>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d001      	beq.n	80043f4 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 80043f0:	f7ff fe20 	bl	8004034 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80043f4:	4b44      	ldr	r3, [pc, #272]	@ (8004508 <HAL_UART_MspInit+0x1dc>)
 80043f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f8:	4a43      	ldr	r2, [pc, #268]	@ (8004508 <HAL_UART_MspInit+0x1dc>)
 80043fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004400:	4b41      	ldr	r3, [pc, #260]	@ (8004508 <HAL_UART_MspInit+0x1dc>)
 8004402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004404:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800440c:	4b3e      	ldr	r3, [pc, #248]	@ (8004508 <HAL_UART_MspInit+0x1dc>)
 800440e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004410:	4a3d      	ldr	r2, [pc, #244]	@ (8004508 <HAL_UART_MspInit+0x1dc>)
 8004412:	f043 0301 	orr.w	r3, r3, #1
 8004416:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004418:	4b3b      	ldr	r3, [pc, #236]	@ (8004508 <HAL_UART_MspInit+0x1dc>)
 800441a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	60bb      	str	r3, [r7, #8]
 8004422:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004424:	230c      	movs	r3, #12
 8004426:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004428:	2302      	movs	r3, #2
 800442a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800442c:	2300      	movs	r3, #0
 800442e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004430:	2300      	movs	r3, #0
 8004432:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004434:	2307      	movs	r3, #7
 8004436:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004438:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800443c:	4619      	mov	r1, r3
 800443e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004442:	f001 fed1 	bl	80061e8 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8004446:	4b33      	ldr	r3, [pc, #204]	@ (8004514 <HAL_UART_MspInit+0x1e8>)
 8004448:	4a33      	ldr	r2, [pc, #204]	@ (8004518 <HAL_UART_MspInit+0x1ec>)
 800444a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800444c:	4b31      	ldr	r3, [pc, #196]	@ (8004514 <HAL_UART_MspInit+0x1e8>)
 800444e:	221b      	movs	r2, #27
 8004450:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004452:	4b30      	ldr	r3, [pc, #192]	@ (8004514 <HAL_UART_MspInit+0x1e8>)
 8004454:	2210      	movs	r2, #16
 8004456:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004458:	4b2e      	ldr	r3, [pc, #184]	@ (8004514 <HAL_UART_MspInit+0x1e8>)
 800445a:	2200      	movs	r2, #0
 800445c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800445e:	4b2d      	ldr	r3, [pc, #180]	@ (8004514 <HAL_UART_MspInit+0x1e8>)
 8004460:	2280      	movs	r2, #128	@ 0x80
 8004462:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004464:	4b2b      	ldr	r3, [pc, #172]	@ (8004514 <HAL_UART_MspInit+0x1e8>)
 8004466:	2200      	movs	r2, #0
 8004468:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800446a:	4b2a      	ldr	r3, [pc, #168]	@ (8004514 <HAL_UART_MspInit+0x1e8>)
 800446c:	2200      	movs	r2, #0
 800446e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004470:	4b28      	ldr	r3, [pc, #160]	@ (8004514 <HAL_UART_MspInit+0x1e8>)
 8004472:	2200      	movs	r2, #0
 8004474:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004476:	4b27      	ldr	r3, [pc, #156]	@ (8004514 <HAL_UART_MspInit+0x1e8>)
 8004478:	2200      	movs	r2, #0
 800447a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800447c:	4825      	ldr	r0, [pc, #148]	@ (8004514 <HAL_UART_MspInit+0x1e8>)
 800447e:	f001 fb81 	bl	8005b84 <HAL_DMA_Init>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <HAL_UART_MspInit+0x160>
      Error_Handler();
 8004488:	f7ff fdd4 	bl	8004034 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a21      	ldr	r2, [pc, #132]	@ (8004514 <HAL_UART_MspInit+0x1e8>)
 8004490:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004492:	4a20      	ldr	r2, [pc, #128]	@ (8004514 <HAL_UART_MspInit+0x1e8>)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8004498:	4b20      	ldr	r3, [pc, #128]	@ (800451c <HAL_UART_MspInit+0x1f0>)
 800449a:	4a21      	ldr	r2, [pc, #132]	@ (8004520 <HAL_UART_MspInit+0x1f4>)
 800449c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800449e:	4b1f      	ldr	r3, [pc, #124]	@ (800451c <HAL_UART_MspInit+0x1f0>)
 80044a0:	221a      	movs	r2, #26
 80044a2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044a4:	4b1d      	ldr	r3, [pc, #116]	@ (800451c <HAL_UART_MspInit+0x1f0>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044aa:	4b1c      	ldr	r3, [pc, #112]	@ (800451c <HAL_UART_MspInit+0x1f0>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80044b0:	4b1a      	ldr	r3, [pc, #104]	@ (800451c <HAL_UART_MspInit+0x1f0>)
 80044b2:	2280      	movs	r2, #128	@ 0x80
 80044b4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044b6:	4b19      	ldr	r3, [pc, #100]	@ (800451c <HAL_UART_MspInit+0x1f0>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044bc:	4b17      	ldr	r3, [pc, #92]	@ (800451c <HAL_UART_MspInit+0x1f0>)
 80044be:	2200      	movs	r2, #0
 80044c0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80044c2:	4b16      	ldr	r3, [pc, #88]	@ (800451c <HAL_UART_MspInit+0x1f0>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80044c8:	4b14      	ldr	r3, [pc, #80]	@ (800451c <HAL_UART_MspInit+0x1f0>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80044ce:	4813      	ldr	r0, [pc, #76]	@ (800451c <HAL_UART_MspInit+0x1f0>)
 80044d0:	f001 fb58 	bl	8005b84 <HAL_DMA_Init>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <HAL_UART_MspInit+0x1b2>
      Error_Handler();
 80044da:	f7ff fdab 	bl	8004034 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a0e      	ldr	r2, [pc, #56]	@ (800451c <HAL_UART_MspInit+0x1f0>)
 80044e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80044e6:	4a0d      	ldr	r2, [pc, #52]	@ (800451c <HAL_UART_MspInit+0x1f0>)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80044ec:	2200      	movs	r2, #0
 80044ee:	2100      	movs	r1, #0
 80044f0:	2026      	movs	r0, #38	@ 0x26
 80044f2:	f001 fb12 	bl	8005b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80044f6:	2026      	movs	r0, #38	@ 0x26
 80044f8:	f001 fb29 	bl	8005b4e <HAL_NVIC_EnableIRQ>
}
 80044fc:	bf00      	nop
 80044fe:	3780      	adds	r7, #128	@ 0x80
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40004c00 	.word	0x40004c00
 8004508:	40021000 	.word	0x40021000
 800450c:	48000800 	.word	0x48000800
 8004510:	40004400 	.word	0x40004400
 8004514:	20000a68 	.word	0x20000a68
 8004518:	40020008 	.word	0x40020008
 800451c:	20000ac8 	.word	0x20000ac8
 8004520:	4002001c 	.word	0x4002001c

08004524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004528:	bf00      	nop
 800452a:	e7fd      	b.n	8004528 <NMI_Handler+0x4>

0800452c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004530:	bf00      	nop
 8004532:	e7fd      	b.n	8004530 <HardFault_Handler+0x4>

08004534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004538:	bf00      	nop
 800453a:	e7fd      	b.n	8004538 <MemManage_Handler+0x4>

0800453c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004540:	bf00      	nop
 8004542:	e7fd      	b.n	8004540 <BusFault_Handler+0x4>

08004544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004548:	bf00      	nop
 800454a:	e7fd      	b.n	8004548 <UsageFault_Handler+0x4>

0800454c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004550:	bf00      	nop
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800455a:	b480      	push	{r7}
 800455c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800455e:	bf00      	nop
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800456c:	bf00      	nop
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800457a:	f000 f8d5 	bl	8004728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800457e:	bf00      	nop
 8004580:	bd80      	pop	{r7, pc}
	...

08004584 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004588:	4802      	ldr	r0, [pc, #8]	@ (8004594 <DMA1_Channel1_IRQHandler+0x10>)
 800458a:	f001 fcde 	bl	8005f4a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800458e:	bf00      	nop
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	20000a68 	.word	0x20000a68

08004598 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800459c:	4802      	ldr	r0, [pc, #8]	@ (80045a8 <DMA1_Channel2_IRQHandler+0x10>)
 800459e:	f001 fcd4 	bl	8005f4a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80045a2:	bf00      	nop
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	20000ac8 	.word	0x20000ac8

080045ac <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80045b0:	4802      	ldr	r0, [pc, #8]	@ (80045bc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80045b2:	f003 fd71 	bl	8008098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80045b6:	bf00      	nop
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	20000804 	.word	0x20000804

080045c0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80045c4:	4802      	ldr	r0, [pc, #8]	@ (80045d0 <TIM4_IRQHandler+0x10>)
 80045c6:	f003 fd67 	bl	8008098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80045ca:	bf00      	nop
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	200005a0 	.word	0x200005a0

080045d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80045d8:	4802      	ldr	r0, [pc, #8]	@ (80045e4 <USART2_IRQHandler+0x10>)
 80045da:	f005 fb65 	bl	8009ca8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80045de:	bf00      	nop
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	2000099c 	.word	0x2000099c

080045e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80045ec:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80045f0:	f001 ffac 	bl	800654c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80045f4:	bf00      	nop
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80045fc:	4802      	ldr	r0, [pc, #8]	@ (8004608 <TIM5_IRQHandler+0x10>)
 80045fe:	f003 fd4b 	bl	8008098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004602:	bf00      	nop
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	2000066c 	.word	0x2000066c

0800460c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004610:	4b06      	ldr	r3, [pc, #24]	@ (800462c <SystemInit+0x20>)
 8004612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004616:	4a05      	ldr	r2, [pc, #20]	@ (800462c <SystemInit+0x20>)
 8004618:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800461c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004620:	bf00      	nop
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	e000ed00 	.word	0xe000ed00

08004630 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004630:	480d      	ldr	r0, [pc, #52]	@ (8004668 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004632:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004634:	f7ff ffea 	bl	800460c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004638:	480c      	ldr	r0, [pc, #48]	@ (800466c <LoopForever+0x6>)
  ldr r1, =_edata
 800463a:	490d      	ldr	r1, [pc, #52]	@ (8004670 <LoopForever+0xa>)
  ldr r2, =_sidata
 800463c:	4a0d      	ldr	r2, [pc, #52]	@ (8004674 <LoopForever+0xe>)
  movs r3, #0
 800463e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004640:	e002      	b.n	8004648 <LoopCopyDataInit>

08004642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004646:	3304      	adds	r3, #4

08004648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800464a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800464c:	d3f9      	bcc.n	8004642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800464e:	4a0a      	ldr	r2, [pc, #40]	@ (8004678 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004650:	4c0a      	ldr	r4, [pc, #40]	@ (800467c <LoopForever+0x16>)
  movs r3, #0
 8004652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004654:	e001      	b.n	800465a <LoopFillZerobss>

08004656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004658:	3204      	adds	r2, #4

0800465a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800465a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800465c:	d3fb      	bcc.n	8004656 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800465e:	f007 f83f 	bl	800b6e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004662:	f7fe feb7 	bl	80033d4 <main>

08004666 <LoopForever>:

LoopForever:
    b LoopForever
 8004666:	e7fe      	b.n	8004666 <LoopForever>
  ldr   r0, =_estack
 8004668:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800466c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004670:	200002b0 	.word	0x200002b0
  ldr r2, =_sidata
 8004674:	0800b9d0 	.word	0x0800b9d0
  ldr r2, =_sbss
 8004678:	200002b0 	.word	0x200002b0
  ldr r4, =_ebss
 800467c:	200013ec 	.word	0x200013ec

08004680 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004680:	e7fe      	b.n	8004680 <ADC1_2_IRQHandler>

08004682 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b082      	sub	sp, #8
 8004686:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004688:	2300      	movs	r3, #0
 800468a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800468c:	2003      	movs	r0, #3
 800468e:	f001 fa39 	bl	8005b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004692:	2000      	movs	r0, #0
 8004694:	f000 f80e 	bl	80046b4 <HAL_InitTick>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d002      	beq.n	80046a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	71fb      	strb	r3, [r7, #7]
 80046a2:	e001      	b.n	80046a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80046a4:	f7ff fccc 	bl	8004040 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80046a8:	79fb      	ldrb	r3, [r7, #7]

}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
	...

080046b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80046bc:	2300      	movs	r3, #0
 80046be:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80046c0:	4b16      	ldr	r3, [pc, #88]	@ (800471c <HAL_InitTick+0x68>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d022      	beq.n	800470e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80046c8:	4b15      	ldr	r3, [pc, #84]	@ (8004720 <HAL_InitTick+0x6c>)
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	4b13      	ldr	r3, [pc, #76]	@ (800471c <HAL_InitTick+0x68>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80046d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80046d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046dc:	4618      	mov	r0, r3
 80046de:	f001 fa44 	bl	8005b6a <HAL_SYSTICK_Config>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10f      	bne.n	8004708 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b0f      	cmp	r3, #15
 80046ec:	d809      	bhi.n	8004702 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046ee:	2200      	movs	r2, #0
 80046f0:	6879      	ldr	r1, [r7, #4]
 80046f2:	f04f 30ff 	mov.w	r0, #4294967295
 80046f6:	f001 fa10 	bl	8005b1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80046fa:	4a0a      	ldr	r2, [pc, #40]	@ (8004724 <HAL_InitTick+0x70>)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6013      	str	r3, [r2, #0]
 8004700:	e007      	b.n	8004712 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	73fb      	strb	r3, [r7, #15]
 8004706:	e004      	b.n	8004712 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	73fb      	strb	r3, [r7, #15]
 800470c:	e001      	b.n	8004712 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004712:	7bfb      	ldrb	r3, [r7, #15]
}
 8004714:	4618      	mov	r0, r3
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	20000248 	.word	0x20000248
 8004720:	20000240 	.word	0x20000240
 8004724:	20000244 	.word	0x20000244

08004728 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800472c:	4b05      	ldr	r3, [pc, #20]	@ (8004744 <HAL_IncTick+0x1c>)
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	4b05      	ldr	r3, [pc, #20]	@ (8004748 <HAL_IncTick+0x20>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4413      	add	r3, r2
 8004736:	4a03      	ldr	r2, [pc, #12]	@ (8004744 <HAL_IncTick+0x1c>)
 8004738:	6013      	str	r3, [r2, #0]
}
 800473a:	bf00      	nop
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	200012b0 	.word	0x200012b0
 8004748:	20000248 	.word	0x20000248

0800474c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800474c:	b480      	push	{r7}
 800474e:	af00      	add	r7, sp, #0
  return uwTick;
 8004750:	4b03      	ldr	r3, [pc, #12]	@ (8004760 <HAL_GetTick+0x14>)
 8004752:	681b      	ldr	r3, [r3, #0]
}
 8004754:	4618      	mov	r0, r3
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	200012b0 	.word	0x200012b0

08004764 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	431a      	orrs	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	609a      	str	r2, [r3, #8]
}
 800477e:	bf00      	nop
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800478a:	b480      	push	{r7}
 800478c:	b083      	sub	sp, #12
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
 8004792:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	609a      	str	r2, [r3, #8]
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b087      	sub	sp, #28
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
 80047d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	3360      	adds	r3, #96	@ 0x60
 80047de:	461a      	mov	r2, r3
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4413      	add	r3, r2
 80047e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	4b08      	ldr	r3, [pc, #32]	@ (8004810 <LL_ADC_SetOffset+0x44>)
 80047ee:	4013      	ands	r3, r2
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	430a      	orrs	r2, r1
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004804:	bf00      	nop
 8004806:	371c      	adds	r7, #28
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	03fff000 	.word	0x03fff000

08004814 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	3360      	adds	r3, #96	@ 0x60
 8004822:	461a      	mov	r2, r3
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004834:	4618      	mov	r0, r3
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004840:	b480      	push	{r7}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	3360      	adds	r3, #96	@ 0x60
 8004850:	461a      	mov	r2, r3
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	4413      	add	r3, r2
 8004858:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	431a      	orrs	r2, r3
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800486a:	bf00      	nop
 800486c:	371c      	adds	r7, #28
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004876:	b480      	push	{r7}
 8004878:	b087      	sub	sp, #28
 800487a:	af00      	add	r7, sp, #0
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	60b9      	str	r1, [r7, #8]
 8004880:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	3360      	adds	r3, #96	@ 0x60
 8004886:	461a      	mov	r2, r3
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	431a      	orrs	r2, r3
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80048a0:	bf00      	nop
 80048a2:	371c      	adds	r7, #28
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	3360      	adds	r3, #96	@ 0x60
 80048bc:	461a      	mov	r2, r3
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	431a      	orrs	r2, r3
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80048d6:	bf00      	nop
 80048d8:	371c      	adds	r7, #28
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
 80048ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	615a      	str	r2, [r3, #20]
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004908:	b480      	push	{r7}
 800490a:	b087      	sub	sp, #28
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	3330      	adds	r3, #48	@ 0x30
 8004918:	461a      	mov	r2, r3
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	0a1b      	lsrs	r3, r3, #8
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	f003 030c 	and.w	r3, r3, #12
 8004924:	4413      	add	r3, r2
 8004926:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	f003 031f 	and.w	r3, r3, #31
 8004932:	211f      	movs	r1, #31
 8004934:	fa01 f303 	lsl.w	r3, r1, r3
 8004938:	43db      	mvns	r3, r3
 800493a:	401a      	ands	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	0e9b      	lsrs	r3, r3, #26
 8004940:	f003 011f 	and.w	r1, r3, #31
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f003 031f 	and.w	r3, r3, #31
 800494a:	fa01 f303 	lsl.w	r3, r1, r3
 800494e:	431a      	orrs	r2, r3
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004954:	bf00      	nop
 8004956:	371c      	adds	r7, #28
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004960:	b480      	push	{r7}
 8004962:	b087      	sub	sp, #28
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	3314      	adds	r3, #20
 8004970:	461a      	mov	r2, r3
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	0e5b      	lsrs	r3, r3, #25
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	4413      	add	r3, r2
 800497e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	0d1b      	lsrs	r3, r3, #20
 8004988:	f003 031f 	and.w	r3, r3, #31
 800498c:	2107      	movs	r1, #7
 800498e:	fa01 f303 	lsl.w	r3, r1, r3
 8004992:	43db      	mvns	r3, r3
 8004994:	401a      	ands	r2, r3
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	0d1b      	lsrs	r3, r3, #20
 800499a:	f003 031f 	and.w	r3, r3, #31
 800499e:	6879      	ldr	r1, [r7, #4]
 80049a0:	fa01 f303 	lsl.w	r3, r1, r3
 80049a4:	431a      	orrs	r2, r3
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80049aa:	bf00      	nop
 80049ac:	371c      	adds	r7, #28
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
	...

080049b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049d0:	43db      	mvns	r3, r3
 80049d2:	401a      	ands	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f003 0318 	and.w	r3, r3, #24
 80049da:	4908      	ldr	r1, [pc, #32]	@ (80049fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80049dc:	40d9      	lsrs	r1, r3
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	400b      	ands	r3, r1
 80049e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049e6:	431a      	orrs	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80049ee:	bf00      	nop
 80049f0:	3714      	adds	r7, #20
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	0007ffff 	.word	0x0007ffff

08004a00 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004a10:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	6093      	str	r3, [r2, #8]
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a38:	d101      	bne.n	8004a3e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e000      	b.n	8004a40 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004a5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004a60:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a88:	d101      	bne.n	8004a8e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e000      	b.n	8004a90 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d101      	bne.n	8004ab4 <LL_ADC_IsEnabled+0x18>
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e000      	b.n	8004ab6 <LL_ADC_IsEnabled+0x1a>
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	2b04      	cmp	r3, #4
 8004ad4:	d101      	bne.n	8004ada <LL_ADC_REG_IsConversionOngoing+0x18>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e000      	b.n	8004adc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d101      	bne.n	8004b00 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004afc:	2301      	movs	r3, #1
 8004afe:	e000      	b.n	8004b02 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
	...

08004b10 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004b10:	b590      	push	{r4, r7, lr}
 8004b12:	b089      	sub	sp, #36	@ 0x24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e1a9      	b.n	8004e7e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d109      	bne.n	8004b4c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f7ff faa5 	bl	8004088 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7ff ff67 	bl	8004a24 <LL_ADC_IsDeepPowerDownEnabled>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d004      	beq.n	8004b66 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7ff ff4d 	bl	8004a00 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7ff ff82 	bl	8004a74 <LL_ADC_IsInternalRegulatorEnabled>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d115      	bne.n	8004ba2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff ff66 	bl	8004a4c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b80:	4b9c      	ldr	r3, [pc, #624]	@ (8004df4 <HAL_ADC_Init+0x2e4>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	099b      	lsrs	r3, r3, #6
 8004b86:	4a9c      	ldr	r2, [pc, #624]	@ (8004df8 <HAL_ADC_Init+0x2e8>)
 8004b88:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8c:	099b      	lsrs	r3, r3, #6
 8004b8e:	3301      	adds	r3, #1
 8004b90:	005b      	lsls	r3, r3, #1
 8004b92:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004b94:	e002      	b.n	8004b9c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1f9      	bne.n	8004b96 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7ff ff64 	bl	8004a74 <LL_ADC_IsInternalRegulatorEnabled>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10d      	bne.n	8004bce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bb6:	f043 0210 	orr.w	r2, r3, #16
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bc2:	f043 0201 	orr.w	r2, r3, #1
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7ff ff75 	bl	8004ac2 <LL_ADC_REG_IsConversionOngoing>
 8004bd8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bde:	f003 0310 	and.w	r3, r3, #16
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f040 8142 	bne.w	8004e6c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f040 813e 	bne.w	8004e6c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bf4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004bf8:	f043 0202 	orr.w	r2, r3, #2
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7ff ff49 	bl	8004a9c <LL_ADC_IsEnabled>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d141      	bne.n	8004c94 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c18:	d004      	beq.n	8004c24 <HAL_ADC_Init+0x114>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a77      	ldr	r2, [pc, #476]	@ (8004dfc <HAL_ADC_Init+0x2ec>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d10f      	bne.n	8004c44 <HAL_ADC_Init+0x134>
 8004c24:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004c28:	f7ff ff38 	bl	8004a9c <LL_ADC_IsEnabled>
 8004c2c:	4604      	mov	r4, r0
 8004c2e:	4873      	ldr	r0, [pc, #460]	@ (8004dfc <HAL_ADC_Init+0x2ec>)
 8004c30:	f7ff ff34 	bl	8004a9c <LL_ADC_IsEnabled>
 8004c34:	4603      	mov	r3, r0
 8004c36:	4323      	orrs	r3, r4
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	bf0c      	ite	eq
 8004c3c:	2301      	moveq	r3, #1
 8004c3e:	2300      	movne	r3, #0
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	e012      	b.n	8004c6a <HAL_ADC_Init+0x15a>
 8004c44:	486e      	ldr	r0, [pc, #440]	@ (8004e00 <HAL_ADC_Init+0x2f0>)
 8004c46:	f7ff ff29 	bl	8004a9c <LL_ADC_IsEnabled>
 8004c4a:	4604      	mov	r4, r0
 8004c4c:	486d      	ldr	r0, [pc, #436]	@ (8004e04 <HAL_ADC_Init+0x2f4>)
 8004c4e:	f7ff ff25 	bl	8004a9c <LL_ADC_IsEnabled>
 8004c52:	4603      	mov	r3, r0
 8004c54:	431c      	orrs	r4, r3
 8004c56:	486c      	ldr	r0, [pc, #432]	@ (8004e08 <HAL_ADC_Init+0x2f8>)
 8004c58:	f7ff ff20 	bl	8004a9c <LL_ADC_IsEnabled>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	4323      	orrs	r3, r4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	bf0c      	ite	eq
 8004c64:	2301      	moveq	r3, #1
 8004c66:	2300      	movne	r3, #0
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d012      	beq.n	8004c94 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c76:	d004      	beq.n	8004c82 <HAL_ADC_Init+0x172>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a5f      	ldr	r2, [pc, #380]	@ (8004dfc <HAL_ADC_Init+0x2ec>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d101      	bne.n	8004c86 <HAL_ADC_Init+0x176>
 8004c82:	4a62      	ldr	r2, [pc, #392]	@ (8004e0c <HAL_ADC_Init+0x2fc>)
 8004c84:	e000      	b.n	8004c88 <HAL_ADC_Init+0x178>
 8004c86:	4a62      	ldr	r2, [pc, #392]	@ (8004e10 <HAL_ADC_Init+0x300>)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	4610      	mov	r0, r2
 8004c90:	f7ff fd68 	bl	8004764 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	7f5b      	ldrb	r3, [r3, #29]
 8004c98:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004c9e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004ca4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004caa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004cb2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d106      	bne.n	8004cd0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	045b      	lsls	r3, r3, #17
 8004cca:	69ba      	ldr	r2, [r7, #24]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d009      	beq.n	8004cec <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cdc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68da      	ldr	r2, [r3, #12]
 8004cf2:	4b48      	ldr	r3, [pc, #288]	@ (8004e14 <HAL_ADC_Init+0x304>)
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6812      	ldr	r2, [r2, #0]
 8004cfa:	69b9      	ldr	r1, [r7, #24]
 8004cfc:	430b      	orrs	r3, r1
 8004cfe:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7ff fee4 	bl	8004ae8 <LL_ADC_INJ_IsConversionOngoing>
 8004d20:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d17f      	bne.n	8004e28 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d17c      	bne.n	8004e28 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004d32:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004d3a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d4a:	f023 0302 	bic.w	r3, r3, #2
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	6812      	ldr	r2, [r2, #0]
 8004d52:	69b9      	ldr	r1, [r7, #24]
 8004d54:	430b      	orrs	r3, r1
 8004d56:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d017      	beq.n	8004d90 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	691a      	ldr	r2, [r3, #16]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004d6e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004d78:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004d7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	6911      	ldr	r1, [r2, #16]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	6812      	ldr	r2, [r2, #0]
 8004d88:	430b      	orrs	r3, r1
 8004d8a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004d8e:	e013      	b.n	8004db8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	691a      	ldr	r2, [r3, #16]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004d9e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6812      	ldr	r2, [r2, #0]
 8004dac:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004db0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004db4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d12a      	bne.n	8004e18 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004dcc:	f023 0304 	bic.w	r3, r3, #4
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004dd8:	4311      	orrs	r1, r2
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004dde:	4311      	orrs	r1, r2
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004de4:	430a      	orrs	r2, r1
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f042 0201 	orr.w	r2, r2, #1
 8004df0:	611a      	str	r2, [r3, #16]
 8004df2:	e019      	b.n	8004e28 <HAL_ADC_Init+0x318>
 8004df4:	20000240 	.word	0x20000240
 8004df8:	053e2d63 	.word	0x053e2d63
 8004dfc:	50000100 	.word	0x50000100
 8004e00:	50000400 	.word	0x50000400
 8004e04:	50000500 	.word	0x50000500
 8004e08:	50000600 	.word	0x50000600
 8004e0c:	50000300 	.word	0x50000300
 8004e10:	50000700 	.word	0x50000700
 8004e14:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	691a      	ldr	r2, [r3, #16]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 0201 	bic.w	r2, r2, #1
 8004e26:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d10c      	bne.n	8004e4a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e36:	f023 010f 	bic.w	r1, r3, #15
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	1e5a      	subs	r2, r3, #1
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	430a      	orrs	r2, r1
 8004e46:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e48:	e007      	b.n	8004e5a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f022 020f 	bic.w	r2, r2, #15
 8004e58:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e5e:	f023 0303 	bic.w	r3, r3, #3
 8004e62:	f043 0201 	orr.w	r2, r3, #1
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004e6a:	e007      	b.n	8004e7c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e70:	f043 0210 	orr.w	r2, r3, #16
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004e7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3724      	adds	r7, #36	@ 0x24
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd90      	pop	{r4, r7, pc}
 8004e86:	bf00      	nop

08004e88 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b0b6      	sub	sp, #216	@ 0xd8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e92:	2300      	movs	r3, #0
 8004e94:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d102      	bne.n	8004eac <HAL_ADC_ConfigChannel+0x24>
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	f000 bc13 	b.w	80056d2 <HAL_ADC_ConfigChannel+0x84a>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff fe02 	bl	8004ac2 <LL_ADC_REG_IsConversionOngoing>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f040 83f3 	bne.w	80056ac <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6818      	ldr	r0, [r3, #0]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	6859      	ldr	r1, [r3, #4]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	f7ff fd18 	bl	8004908 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7ff fdf0 	bl	8004ac2 <LL_ADC_REG_IsConversionOngoing>
 8004ee2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7ff fdfc 	bl	8004ae8 <LL_ADC_INJ_IsConversionOngoing>
 8004ef0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004ef4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f040 81d9 	bne.w	80052b0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004efe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f040 81d4 	bne.w	80052b0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f10:	d10f      	bne.n	8004f32 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6818      	ldr	r0, [r3, #0]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	f7ff fd1f 	bl	8004960 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7ff fcd9 	bl	80048e2 <LL_ADC_SetSamplingTimeCommonConfig>
 8004f30:	e00e      	b.n	8004f50 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6818      	ldr	r0, [r3, #0]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	6819      	ldr	r1, [r3, #0]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	f7ff fd0e 	bl	8004960 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2100      	movs	r1, #0
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7ff fcc9 	bl	80048e2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	695a      	ldr	r2, [r3, #20]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	08db      	lsrs	r3, r3, #3
 8004f5c:	f003 0303 	and.w	r3, r3, #3
 8004f60:	005b      	lsls	r3, r3, #1
 8004f62:	fa02 f303 	lsl.w	r3, r2, r3
 8004f66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	2b04      	cmp	r3, #4
 8004f70:	d022      	beq.n	8004fb8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6818      	ldr	r0, [r3, #0]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	6919      	ldr	r1, [r3, #16]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004f82:	f7ff fc23 	bl	80047cc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6818      	ldr	r0, [r3, #0]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	6919      	ldr	r1, [r3, #16]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	461a      	mov	r2, r3
 8004f94:	f7ff fc6f 	bl	8004876 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6818      	ldr	r0, [r3, #0]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d102      	bne.n	8004fae <HAL_ADC_ConfigChannel+0x126>
 8004fa8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004fac:	e000      	b.n	8004fb0 <HAL_ADC_ConfigChannel+0x128>
 8004fae:	2300      	movs	r3, #0
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	f7ff fc7b 	bl	80048ac <LL_ADC_SetOffsetSaturation>
 8004fb6:	e17b      	b.n	80052b0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7ff fc28 	bl	8004814 <LL_ADC_GetOffsetChannel>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10a      	bne.n	8004fe4 <HAL_ADC_ConfigChannel+0x15c>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff fc1d 	bl	8004814 <LL_ADC_GetOffsetChannel>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	0e9b      	lsrs	r3, r3, #26
 8004fde:	f003 021f 	and.w	r2, r3, #31
 8004fe2:	e01e      	b.n	8005022 <HAL_ADC_ConfigChannel+0x19a>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2100      	movs	r1, #0
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7ff fc12 	bl	8004814 <LL_ADC_GetOffsetChannel>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004ffa:	fa93 f3a3 	rbit	r3, r3
 8004ffe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005002:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005006:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800500a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8005012:	2320      	movs	r3, #32
 8005014:	e004      	b.n	8005020 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8005016:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800501a:	fab3 f383 	clz	r3, r3
 800501e:	b2db      	uxtb	r3, r3
 8005020:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800502a:	2b00      	cmp	r3, #0
 800502c:	d105      	bne.n	800503a <HAL_ADC_ConfigChannel+0x1b2>
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	0e9b      	lsrs	r3, r3, #26
 8005034:	f003 031f 	and.w	r3, r3, #31
 8005038:	e018      	b.n	800506c <HAL_ADC_ConfigChannel+0x1e4>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005042:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005046:	fa93 f3a3 	rbit	r3, r3
 800504a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800504e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005052:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8005056:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800505e:	2320      	movs	r3, #32
 8005060:	e004      	b.n	800506c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8005062:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005066:	fab3 f383 	clz	r3, r3
 800506a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800506c:	429a      	cmp	r2, r3
 800506e:	d106      	bne.n	800507e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2200      	movs	r2, #0
 8005076:	2100      	movs	r1, #0
 8005078:	4618      	mov	r0, r3
 800507a:	f7ff fbe1 	bl	8004840 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2101      	movs	r1, #1
 8005084:	4618      	mov	r0, r3
 8005086:	f7ff fbc5 	bl	8004814 <LL_ADC_GetOffsetChannel>
 800508a:	4603      	mov	r3, r0
 800508c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10a      	bne.n	80050aa <HAL_ADC_ConfigChannel+0x222>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2101      	movs	r1, #1
 800509a:	4618      	mov	r0, r3
 800509c:	f7ff fbba 	bl	8004814 <LL_ADC_GetOffsetChannel>
 80050a0:	4603      	mov	r3, r0
 80050a2:	0e9b      	lsrs	r3, r3, #26
 80050a4:	f003 021f 	and.w	r2, r3, #31
 80050a8:	e01e      	b.n	80050e8 <HAL_ADC_ConfigChannel+0x260>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2101      	movs	r1, #1
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7ff fbaf 	bl	8004814 <LL_ADC_GetOffsetChannel>
 80050b6:	4603      	mov	r3, r0
 80050b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80050c0:	fa93 f3a3 	rbit	r3, r3
 80050c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80050c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80050cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80050d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80050d8:	2320      	movs	r3, #32
 80050da:	e004      	b.n	80050e6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80050dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80050e0:	fab3 f383 	clz	r3, r3
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d105      	bne.n	8005100 <HAL_ADC_ConfigChannel+0x278>
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	0e9b      	lsrs	r3, r3, #26
 80050fa:	f003 031f 	and.w	r3, r3, #31
 80050fe:	e018      	b.n	8005132 <HAL_ADC_ConfigChannel+0x2aa>
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005108:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800510c:	fa93 f3a3 	rbit	r3, r3
 8005110:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005114:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005118:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800511c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005124:	2320      	movs	r3, #32
 8005126:	e004      	b.n	8005132 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005128:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800512c:	fab3 f383 	clz	r3, r3
 8005130:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005132:	429a      	cmp	r2, r3
 8005134:	d106      	bne.n	8005144 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2200      	movs	r2, #0
 800513c:	2101      	movs	r1, #1
 800513e:	4618      	mov	r0, r3
 8005140:	f7ff fb7e 	bl	8004840 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2102      	movs	r1, #2
 800514a:	4618      	mov	r0, r3
 800514c:	f7ff fb62 	bl	8004814 <LL_ADC_GetOffsetChannel>
 8005150:	4603      	mov	r3, r0
 8005152:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10a      	bne.n	8005170 <HAL_ADC_ConfigChannel+0x2e8>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2102      	movs	r1, #2
 8005160:	4618      	mov	r0, r3
 8005162:	f7ff fb57 	bl	8004814 <LL_ADC_GetOffsetChannel>
 8005166:	4603      	mov	r3, r0
 8005168:	0e9b      	lsrs	r3, r3, #26
 800516a:	f003 021f 	and.w	r2, r3, #31
 800516e:	e01e      	b.n	80051ae <HAL_ADC_ConfigChannel+0x326>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2102      	movs	r1, #2
 8005176:	4618      	mov	r0, r3
 8005178:	f7ff fb4c 	bl	8004814 <LL_ADC_GetOffsetChannel>
 800517c:	4603      	mov	r3, r0
 800517e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005182:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005186:	fa93 f3a3 	rbit	r3, r3
 800518a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800518e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005192:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8005196:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800519e:	2320      	movs	r3, #32
 80051a0:	e004      	b.n	80051ac <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80051a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80051a6:	fab3 f383 	clz	r3, r3
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d105      	bne.n	80051c6 <HAL_ADC_ConfigChannel+0x33e>
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	0e9b      	lsrs	r3, r3, #26
 80051c0:	f003 031f 	and.w	r3, r3, #31
 80051c4:	e016      	b.n	80051f4 <HAL_ADC_ConfigChannel+0x36c>
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80051d2:	fa93 f3a3 	rbit	r3, r3
 80051d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80051d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80051da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80051de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80051e6:	2320      	movs	r3, #32
 80051e8:	e004      	b.n	80051f4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80051ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80051ee:	fab3 f383 	clz	r3, r3
 80051f2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d106      	bne.n	8005206 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2200      	movs	r2, #0
 80051fe:	2102      	movs	r1, #2
 8005200:	4618      	mov	r0, r3
 8005202:	f7ff fb1d 	bl	8004840 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2103      	movs	r1, #3
 800520c:	4618      	mov	r0, r3
 800520e:	f7ff fb01 	bl	8004814 <LL_ADC_GetOffsetChannel>
 8005212:	4603      	mov	r3, r0
 8005214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10a      	bne.n	8005232 <HAL_ADC_ConfigChannel+0x3aa>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2103      	movs	r1, #3
 8005222:	4618      	mov	r0, r3
 8005224:	f7ff faf6 	bl	8004814 <LL_ADC_GetOffsetChannel>
 8005228:	4603      	mov	r3, r0
 800522a:	0e9b      	lsrs	r3, r3, #26
 800522c:	f003 021f 	and.w	r2, r3, #31
 8005230:	e017      	b.n	8005262 <HAL_ADC_ConfigChannel+0x3da>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2103      	movs	r1, #3
 8005238:	4618      	mov	r0, r3
 800523a:	f7ff faeb 	bl	8004814 <LL_ADC_GetOffsetChannel>
 800523e:	4603      	mov	r3, r0
 8005240:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005242:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005244:	fa93 f3a3 	rbit	r3, r3
 8005248:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800524a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800524c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800524e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005250:	2b00      	cmp	r3, #0
 8005252:	d101      	bne.n	8005258 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8005254:	2320      	movs	r3, #32
 8005256:	e003      	b.n	8005260 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8005258:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800525a:	fab3 f383 	clz	r3, r3
 800525e:	b2db      	uxtb	r3, r3
 8005260:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800526a:	2b00      	cmp	r3, #0
 800526c:	d105      	bne.n	800527a <HAL_ADC_ConfigChannel+0x3f2>
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	0e9b      	lsrs	r3, r3, #26
 8005274:	f003 031f 	and.w	r3, r3, #31
 8005278:	e011      	b.n	800529e <HAL_ADC_ConfigChannel+0x416>
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005280:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005282:	fa93 f3a3 	rbit	r3, r3
 8005286:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8005288:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800528a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800528c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8005292:	2320      	movs	r3, #32
 8005294:	e003      	b.n	800529e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8005296:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005298:	fab3 f383 	clz	r3, r3
 800529c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800529e:	429a      	cmp	r2, r3
 80052a0:	d106      	bne.n	80052b0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2200      	movs	r2, #0
 80052a8:	2103      	movs	r1, #3
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7ff fac8 	bl	8004840 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7ff fbf1 	bl	8004a9c <LL_ADC_IsEnabled>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f040 813d 	bne.w	800553c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6818      	ldr	r0, [r3, #0]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	6819      	ldr	r1, [r3, #0]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	461a      	mov	r2, r3
 80052d0:	f7ff fb72 	bl	80049b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	4aa2      	ldr	r2, [pc, #648]	@ (8005564 <HAL_ADC_ConfigChannel+0x6dc>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	f040 812e 	bne.w	800553c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10b      	bne.n	8005308 <HAL_ADC_ConfigChannel+0x480>
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	0e9b      	lsrs	r3, r3, #26
 80052f6:	3301      	adds	r3, #1
 80052f8:	f003 031f 	and.w	r3, r3, #31
 80052fc:	2b09      	cmp	r3, #9
 80052fe:	bf94      	ite	ls
 8005300:	2301      	movls	r3, #1
 8005302:	2300      	movhi	r3, #0
 8005304:	b2db      	uxtb	r3, r3
 8005306:	e019      	b.n	800533c <HAL_ADC_ConfigChannel+0x4b4>
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800530e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005310:	fa93 f3a3 	rbit	r3, r3
 8005314:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8005316:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005318:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800531a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005320:	2320      	movs	r3, #32
 8005322:	e003      	b.n	800532c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005324:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005326:	fab3 f383 	clz	r3, r3
 800532a:	b2db      	uxtb	r3, r3
 800532c:	3301      	adds	r3, #1
 800532e:	f003 031f 	and.w	r3, r3, #31
 8005332:	2b09      	cmp	r3, #9
 8005334:	bf94      	ite	ls
 8005336:	2301      	movls	r3, #1
 8005338:	2300      	movhi	r3, #0
 800533a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800533c:	2b00      	cmp	r3, #0
 800533e:	d079      	beq.n	8005434 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005348:	2b00      	cmp	r3, #0
 800534a:	d107      	bne.n	800535c <HAL_ADC_ConfigChannel+0x4d4>
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	0e9b      	lsrs	r3, r3, #26
 8005352:	3301      	adds	r3, #1
 8005354:	069b      	lsls	r3, r3, #26
 8005356:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800535a:	e015      	b.n	8005388 <HAL_ADC_ConfigChannel+0x500>
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005362:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005364:	fa93 f3a3 	rbit	r3, r3
 8005368:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800536a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800536c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800536e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005374:	2320      	movs	r3, #32
 8005376:	e003      	b.n	8005380 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8005378:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800537a:	fab3 f383 	clz	r3, r3
 800537e:	b2db      	uxtb	r3, r3
 8005380:	3301      	adds	r3, #1
 8005382:	069b      	lsls	r3, r3, #26
 8005384:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005390:	2b00      	cmp	r3, #0
 8005392:	d109      	bne.n	80053a8 <HAL_ADC_ConfigChannel+0x520>
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	0e9b      	lsrs	r3, r3, #26
 800539a:	3301      	adds	r3, #1
 800539c:	f003 031f 	and.w	r3, r3, #31
 80053a0:	2101      	movs	r1, #1
 80053a2:	fa01 f303 	lsl.w	r3, r1, r3
 80053a6:	e017      	b.n	80053d8 <HAL_ADC_ConfigChannel+0x550>
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053b0:	fa93 f3a3 	rbit	r3, r3
 80053b4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80053b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80053ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80053c0:	2320      	movs	r3, #32
 80053c2:	e003      	b.n	80053cc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80053c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053c6:	fab3 f383 	clz	r3, r3
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	3301      	adds	r3, #1
 80053ce:	f003 031f 	and.w	r3, r3, #31
 80053d2:	2101      	movs	r1, #1
 80053d4:	fa01 f303 	lsl.w	r3, r1, r3
 80053d8:	ea42 0103 	orr.w	r1, r2, r3
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10a      	bne.n	80053fe <HAL_ADC_ConfigChannel+0x576>
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	0e9b      	lsrs	r3, r3, #26
 80053ee:	3301      	adds	r3, #1
 80053f0:	f003 021f 	and.w	r2, r3, #31
 80053f4:	4613      	mov	r3, r2
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	4413      	add	r3, r2
 80053fa:	051b      	lsls	r3, r3, #20
 80053fc:	e018      	b.n	8005430 <HAL_ADC_ConfigChannel+0x5a8>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005406:	fa93 f3a3 	rbit	r3, r3
 800540a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800540c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800540e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005410:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005416:	2320      	movs	r3, #32
 8005418:	e003      	b.n	8005422 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800541a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800541c:	fab3 f383 	clz	r3, r3
 8005420:	b2db      	uxtb	r3, r3
 8005422:	3301      	adds	r3, #1
 8005424:	f003 021f 	and.w	r2, r3, #31
 8005428:	4613      	mov	r3, r2
 800542a:	005b      	lsls	r3, r3, #1
 800542c:	4413      	add	r3, r2
 800542e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005430:	430b      	orrs	r3, r1
 8005432:	e07e      	b.n	8005532 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800543c:	2b00      	cmp	r3, #0
 800543e:	d107      	bne.n	8005450 <HAL_ADC_ConfigChannel+0x5c8>
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	0e9b      	lsrs	r3, r3, #26
 8005446:	3301      	adds	r3, #1
 8005448:	069b      	lsls	r3, r3, #26
 800544a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800544e:	e015      	b.n	800547c <HAL_ADC_ConfigChannel+0x5f4>
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005458:	fa93 f3a3 	rbit	r3, r3
 800545c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800545e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005460:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005464:	2b00      	cmp	r3, #0
 8005466:	d101      	bne.n	800546c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005468:	2320      	movs	r3, #32
 800546a:	e003      	b.n	8005474 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800546c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546e:	fab3 f383 	clz	r3, r3
 8005472:	b2db      	uxtb	r3, r3
 8005474:	3301      	adds	r3, #1
 8005476:	069b      	lsls	r3, r3, #26
 8005478:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005484:	2b00      	cmp	r3, #0
 8005486:	d109      	bne.n	800549c <HAL_ADC_ConfigChannel+0x614>
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	0e9b      	lsrs	r3, r3, #26
 800548e:	3301      	adds	r3, #1
 8005490:	f003 031f 	and.w	r3, r3, #31
 8005494:	2101      	movs	r1, #1
 8005496:	fa01 f303 	lsl.w	r3, r1, r3
 800549a:	e017      	b.n	80054cc <HAL_ADC_ConfigChannel+0x644>
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a2:	6a3b      	ldr	r3, [r7, #32]
 80054a4:	fa93 f3a3 	rbit	r3, r3
 80054a8:	61fb      	str	r3, [r7, #28]
  return result;
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80054ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80054b4:	2320      	movs	r3, #32
 80054b6:	e003      	b.n	80054c0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80054b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ba:	fab3 f383 	clz	r3, r3
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	3301      	adds	r3, #1
 80054c2:	f003 031f 	and.w	r3, r3, #31
 80054c6:	2101      	movs	r1, #1
 80054c8:	fa01 f303 	lsl.w	r3, r1, r3
 80054cc:	ea42 0103 	orr.w	r1, r2, r3
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10d      	bne.n	80054f8 <HAL_ADC_ConfigChannel+0x670>
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	0e9b      	lsrs	r3, r3, #26
 80054e2:	3301      	adds	r3, #1
 80054e4:	f003 021f 	and.w	r2, r3, #31
 80054e8:	4613      	mov	r3, r2
 80054ea:	005b      	lsls	r3, r3, #1
 80054ec:	4413      	add	r3, r2
 80054ee:	3b1e      	subs	r3, #30
 80054f0:	051b      	lsls	r3, r3, #20
 80054f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80054f6:	e01b      	b.n	8005530 <HAL_ADC_ConfigChannel+0x6a8>
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	fa93 f3a3 	rbit	r3, r3
 8005504:	613b      	str	r3, [r7, #16]
  return result;
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005510:	2320      	movs	r3, #32
 8005512:	e003      	b.n	800551c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	fab3 f383 	clz	r3, r3
 800551a:	b2db      	uxtb	r3, r3
 800551c:	3301      	adds	r3, #1
 800551e:	f003 021f 	and.w	r2, r3, #31
 8005522:	4613      	mov	r3, r2
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	4413      	add	r3, r2
 8005528:	3b1e      	subs	r3, #30
 800552a:	051b      	lsls	r3, r3, #20
 800552c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005530:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005536:	4619      	mov	r1, r3
 8005538:	f7ff fa12 	bl	8004960 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	4b09      	ldr	r3, [pc, #36]	@ (8005568 <HAL_ADC_ConfigChannel+0x6e0>)
 8005542:	4013      	ands	r3, r2
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 80be 	beq.w	80056c6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005552:	d004      	beq.n	800555e <HAL_ADC_ConfigChannel+0x6d6>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a04      	ldr	r2, [pc, #16]	@ (800556c <HAL_ADC_ConfigChannel+0x6e4>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d10a      	bne.n	8005574 <HAL_ADC_ConfigChannel+0x6ec>
 800555e:	4b04      	ldr	r3, [pc, #16]	@ (8005570 <HAL_ADC_ConfigChannel+0x6e8>)
 8005560:	e009      	b.n	8005576 <HAL_ADC_ConfigChannel+0x6ee>
 8005562:	bf00      	nop
 8005564:	407f0000 	.word	0x407f0000
 8005568:	80080000 	.word	0x80080000
 800556c:	50000100 	.word	0x50000100
 8005570:	50000300 	.word	0x50000300
 8005574:	4b59      	ldr	r3, [pc, #356]	@ (80056dc <HAL_ADC_ConfigChannel+0x854>)
 8005576:	4618      	mov	r0, r3
 8005578:	f7ff f91a 	bl	80047b0 <LL_ADC_GetCommonPathInternalCh>
 800557c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a56      	ldr	r2, [pc, #344]	@ (80056e0 <HAL_ADC_ConfigChannel+0x858>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d004      	beq.n	8005594 <HAL_ADC_ConfigChannel+0x70c>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a55      	ldr	r2, [pc, #340]	@ (80056e4 <HAL_ADC_ConfigChannel+0x85c>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d13a      	bne.n	800560a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005594:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005598:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d134      	bne.n	800560a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055a8:	d005      	beq.n	80055b6 <HAL_ADC_ConfigChannel+0x72e>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a4e      	ldr	r2, [pc, #312]	@ (80056e8 <HAL_ADC_ConfigChannel+0x860>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	f040 8085 	bne.w	80056c0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055be:	d004      	beq.n	80055ca <HAL_ADC_ConfigChannel+0x742>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a49      	ldr	r2, [pc, #292]	@ (80056ec <HAL_ADC_ConfigChannel+0x864>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d101      	bne.n	80055ce <HAL_ADC_ConfigChannel+0x746>
 80055ca:	4a49      	ldr	r2, [pc, #292]	@ (80056f0 <HAL_ADC_ConfigChannel+0x868>)
 80055cc:	e000      	b.n	80055d0 <HAL_ADC_ConfigChannel+0x748>
 80055ce:	4a43      	ldr	r2, [pc, #268]	@ (80056dc <HAL_ADC_ConfigChannel+0x854>)
 80055d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80055d4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80055d8:	4619      	mov	r1, r3
 80055da:	4610      	mov	r0, r2
 80055dc:	f7ff f8d5 	bl	800478a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80055e0:	4b44      	ldr	r3, [pc, #272]	@ (80056f4 <HAL_ADC_ConfigChannel+0x86c>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	099b      	lsrs	r3, r3, #6
 80055e6:	4a44      	ldr	r2, [pc, #272]	@ (80056f8 <HAL_ADC_ConfigChannel+0x870>)
 80055e8:	fba2 2303 	umull	r2, r3, r2, r3
 80055ec:	099b      	lsrs	r3, r3, #6
 80055ee:	1c5a      	adds	r2, r3, #1
 80055f0:	4613      	mov	r3, r2
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	4413      	add	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80055fa:	e002      	b.n	8005602 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	3b01      	subs	r3, #1
 8005600:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1f9      	bne.n	80055fc <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005608:	e05a      	b.n	80056c0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a3b      	ldr	r2, [pc, #236]	@ (80056fc <HAL_ADC_ConfigChannel+0x874>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d125      	bne.n	8005660 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005614:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005618:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d11f      	bne.n	8005660 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a31      	ldr	r2, [pc, #196]	@ (80056ec <HAL_ADC_ConfigChannel+0x864>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d104      	bne.n	8005634 <HAL_ADC_ConfigChannel+0x7ac>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a34      	ldr	r2, [pc, #208]	@ (8005700 <HAL_ADC_ConfigChannel+0x878>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d047      	beq.n	80056c4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800563c:	d004      	beq.n	8005648 <HAL_ADC_ConfigChannel+0x7c0>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a2a      	ldr	r2, [pc, #168]	@ (80056ec <HAL_ADC_ConfigChannel+0x864>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d101      	bne.n	800564c <HAL_ADC_ConfigChannel+0x7c4>
 8005648:	4a29      	ldr	r2, [pc, #164]	@ (80056f0 <HAL_ADC_ConfigChannel+0x868>)
 800564a:	e000      	b.n	800564e <HAL_ADC_ConfigChannel+0x7c6>
 800564c:	4a23      	ldr	r2, [pc, #140]	@ (80056dc <HAL_ADC_ConfigChannel+0x854>)
 800564e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005652:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005656:	4619      	mov	r1, r3
 8005658:	4610      	mov	r0, r2
 800565a:	f7ff f896 	bl	800478a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800565e:	e031      	b.n	80056c4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a27      	ldr	r2, [pc, #156]	@ (8005704 <HAL_ADC_ConfigChannel+0x87c>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d12d      	bne.n	80056c6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800566a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800566e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d127      	bne.n	80056c6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a1c      	ldr	r2, [pc, #112]	@ (80056ec <HAL_ADC_ConfigChannel+0x864>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d022      	beq.n	80056c6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005688:	d004      	beq.n	8005694 <HAL_ADC_ConfigChannel+0x80c>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a17      	ldr	r2, [pc, #92]	@ (80056ec <HAL_ADC_ConfigChannel+0x864>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d101      	bne.n	8005698 <HAL_ADC_ConfigChannel+0x810>
 8005694:	4a16      	ldr	r2, [pc, #88]	@ (80056f0 <HAL_ADC_ConfigChannel+0x868>)
 8005696:	e000      	b.n	800569a <HAL_ADC_ConfigChannel+0x812>
 8005698:	4a10      	ldr	r2, [pc, #64]	@ (80056dc <HAL_ADC_ConfigChannel+0x854>)
 800569a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800569e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80056a2:	4619      	mov	r1, r3
 80056a4:	4610      	mov	r0, r2
 80056a6:	f7ff f870 	bl	800478a <LL_ADC_SetCommonPathInternalCh>
 80056aa:	e00c      	b.n	80056c6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056b0:	f043 0220 	orr.w	r2, r3, #32
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80056be:	e002      	b.n	80056c6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80056c0:	bf00      	nop
 80056c2:	e000      	b.n	80056c6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80056c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80056ce:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	37d8      	adds	r7, #216	@ 0xd8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	50000700 	.word	0x50000700
 80056e0:	c3210000 	.word	0xc3210000
 80056e4:	90c00010 	.word	0x90c00010
 80056e8:	50000600 	.word	0x50000600
 80056ec:	50000100 	.word	0x50000100
 80056f0:	50000300 	.word	0x50000300
 80056f4:	20000240 	.word	0x20000240
 80056f8:	053e2d63 	.word	0x053e2d63
 80056fc:	c7520000 	.word	0xc7520000
 8005700:	50000500 	.word	0x50000500
 8005704:	cb840000 	.word	0xcb840000

08005708 <LL_ADC_IsEnabled>:
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f003 0301 	and.w	r3, r3, #1
 8005718:	2b01      	cmp	r3, #1
 800571a:	d101      	bne.n	8005720 <LL_ADC_IsEnabled+0x18>
 800571c:	2301      	movs	r3, #1
 800571e:	e000      	b.n	8005722 <LL_ADC_IsEnabled+0x1a>
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	370c      	adds	r7, #12
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <LL_ADC_REG_IsConversionOngoing>:
{
 800572e:	b480      	push	{r7}
 8005730:	b083      	sub	sp, #12
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f003 0304 	and.w	r3, r3, #4
 800573e:	2b04      	cmp	r3, #4
 8005740:	d101      	bne.n	8005746 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005742:	2301      	movs	r3, #1
 8005744:	e000      	b.n	8005748 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005754:	b590      	push	{r4, r7, lr}
 8005756:	b0a1      	sub	sp, #132	@ 0x84
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800576a:	2b01      	cmp	r3, #1
 800576c:	d101      	bne.n	8005772 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800576e:	2302      	movs	r3, #2
 8005770:	e0e7      	b.n	8005942 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800577a:	2300      	movs	r3, #0
 800577c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800577e:	2300      	movs	r3, #0
 8005780:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800578a:	d102      	bne.n	8005792 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800578c:	4b6f      	ldr	r3, [pc, #444]	@ (800594c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800578e:	60bb      	str	r3, [r7, #8]
 8005790:	e009      	b.n	80057a6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a6e      	ldr	r2, [pc, #440]	@ (8005950 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d102      	bne.n	80057a2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800579c:	4b6d      	ldr	r3, [pc, #436]	@ (8005954 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800579e:	60bb      	str	r3, [r7, #8]
 80057a0:	e001      	b.n	80057a6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80057a2:	2300      	movs	r3, #0
 80057a4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10b      	bne.n	80057c4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057b0:	f043 0220 	orr.w	r2, r3, #32
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e0be      	b.n	8005942 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7ff ffb1 	bl	800572e <LL_ADC_REG_IsConversionOngoing>
 80057cc:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7ff ffab 	bl	800572e <LL_ADC_REG_IsConversionOngoing>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f040 80a0 	bne.w	8005920 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80057e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f040 809c 	bne.w	8005920 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057f0:	d004      	beq.n	80057fc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a55      	ldr	r2, [pc, #340]	@ (800594c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d101      	bne.n	8005800 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80057fc:	4b56      	ldr	r3, [pc, #344]	@ (8005958 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80057fe:	e000      	b.n	8005802 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005800:	4b56      	ldr	r3, [pc, #344]	@ (800595c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005802:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d04b      	beq.n	80058a4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800580c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	6859      	ldr	r1, [r3, #4]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800581e:	035b      	lsls	r3, r3, #13
 8005820:	430b      	orrs	r3, r1
 8005822:	431a      	orrs	r2, r3
 8005824:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005826:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005830:	d004      	beq.n	800583c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a45      	ldr	r2, [pc, #276]	@ (800594c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d10f      	bne.n	800585c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800583c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005840:	f7ff ff62 	bl	8005708 <LL_ADC_IsEnabled>
 8005844:	4604      	mov	r4, r0
 8005846:	4841      	ldr	r0, [pc, #260]	@ (800594c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005848:	f7ff ff5e 	bl	8005708 <LL_ADC_IsEnabled>
 800584c:	4603      	mov	r3, r0
 800584e:	4323      	orrs	r3, r4
 8005850:	2b00      	cmp	r3, #0
 8005852:	bf0c      	ite	eq
 8005854:	2301      	moveq	r3, #1
 8005856:	2300      	movne	r3, #0
 8005858:	b2db      	uxtb	r3, r3
 800585a:	e012      	b.n	8005882 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800585c:	483c      	ldr	r0, [pc, #240]	@ (8005950 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800585e:	f7ff ff53 	bl	8005708 <LL_ADC_IsEnabled>
 8005862:	4604      	mov	r4, r0
 8005864:	483b      	ldr	r0, [pc, #236]	@ (8005954 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005866:	f7ff ff4f 	bl	8005708 <LL_ADC_IsEnabled>
 800586a:	4603      	mov	r3, r0
 800586c:	431c      	orrs	r4, r3
 800586e:	483c      	ldr	r0, [pc, #240]	@ (8005960 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005870:	f7ff ff4a 	bl	8005708 <LL_ADC_IsEnabled>
 8005874:	4603      	mov	r3, r0
 8005876:	4323      	orrs	r3, r4
 8005878:	2b00      	cmp	r3, #0
 800587a:	bf0c      	ite	eq
 800587c:	2301      	moveq	r3, #1
 800587e:	2300      	movne	r3, #0
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d056      	beq.n	8005934 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005886:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800588e:	f023 030f 	bic.w	r3, r3, #15
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	6811      	ldr	r1, [r2, #0]
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	6892      	ldr	r2, [r2, #8]
 800589a:	430a      	orrs	r2, r1
 800589c:	431a      	orrs	r2, r3
 800589e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058a0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80058a2:	e047      	b.n	8005934 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80058a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80058ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058ae:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058b8:	d004      	beq.n	80058c4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a23      	ldr	r2, [pc, #140]	@ (800594c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d10f      	bne.n	80058e4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80058c4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80058c8:	f7ff ff1e 	bl	8005708 <LL_ADC_IsEnabled>
 80058cc:	4604      	mov	r4, r0
 80058ce:	481f      	ldr	r0, [pc, #124]	@ (800594c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80058d0:	f7ff ff1a 	bl	8005708 <LL_ADC_IsEnabled>
 80058d4:	4603      	mov	r3, r0
 80058d6:	4323      	orrs	r3, r4
 80058d8:	2b00      	cmp	r3, #0
 80058da:	bf0c      	ite	eq
 80058dc:	2301      	moveq	r3, #1
 80058de:	2300      	movne	r3, #0
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	e012      	b.n	800590a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80058e4:	481a      	ldr	r0, [pc, #104]	@ (8005950 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80058e6:	f7ff ff0f 	bl	8005708 <LL_ADC_IsEnabled>
 80058ea:	4604      	mov	r4, r0
 80058ec:	4819      	ldr	r0, [pc, #100]	@ (8005954 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80058ee:	f7ff ff0b 	bl	8005708 <LL_ADC_IsEnabled>
 80058f2:	4603      	mov	r3, r0
 80058f4:	431c      	orrs	r4, r3
 80058f6:	481a      	ldr	r0, [pc, #104]	@ (8005960 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80058f8:	f7ff ff06 	bl	8005708 <LL_ADC_IsEnabled>
 80058fc:	4603      	mov	r3, r0
 80058fe:	4323      	orrs	r3, r4
 8005900:	2b00      	cmp	r3, #0
 8005902:	bf0c      	ite	eq
 8005904:	2301      	moveq	r3, #1
 8005906:	2300      	movne	r3, #0
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d012      	beq.n	8005934 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800590e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005916:	f023 030f 	bic.w	r3, r3, #15
 800591a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800591c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800591e:	e009      	b.n	8005934 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005924:	f043 0220 	orr.w	r2, r3, #32
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005932:	e000      	b.n	8005936 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005934:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800593e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005942:	4618      	mov	r0, r3
 8005944:	3784      	adds	r7, #132	@ 0x84
 8005946:	46bd      	mov	sp, r7
 8005948:	bd90      	pop	{r4, r7, pc}
 800594a:	bf00      	nop
 800594c:	50000100 	.word	0x50000100
 8005950:	50000400 	.word	0x50000400
 8005954:	50000500 	.word	0x50000500
 8005958:	50000300 	.word	0x50000300
 800595c:	50000700 	.word	0x50000700
 8005960:	50000600 	.word	0x50000600

08005964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f003 0307 	and.w	r3, r3, #7
 8005972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005974:	4b0c      	ldr	r3, [pc, #48]	@ (80059a8 <__NVIC_SetPriorityGrouping+0x44>)
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005980:	4013      	ands	r3, r2
 8005982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800598c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005996:	4a04      	ldr	r2, [pc, #16]	@ (80059a8 <__NVIC_SetPriorityGrouping+0x44>)
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	60d3      	str	r3, [r2, #12]
}
 800599c:	bf00      	nop
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	e000ed00 	.word	0xe000ed00

080059ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80059ac:	b480      	push	{r7}
 80059ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059b0:	4b04      	ldr	r3, [pc, #16]	@ (80059c4 <__NVIC_GetPriorityGrouping+0x18>)
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	0a1b      	lsrs	r3, r3, #8
 80059b6:	f003 0307 	and.w	r3, r3, #7
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr
 80059c4:	e000ed00 	.word	0xe000ed00

080059c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	4603      	mov	r3, r0
 80059d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	db0b      	blt.n	80059f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059da:	79fb      	ldrb	r3, [r7, #7]
 80059dc:	f003 021f 	and.w	r2, r3, #31
 80059e0:	4907      	ldr	r1, [pc, #28]	@ (8005a00 <__NVIC_EnableIRQ+0x38>)
 80059e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059e6:	095b      	lsrs	r3, r3, #5
 80059e8:	2001      	movs	r0, #1
 80059ea:	fa00 f202 	lsl.w	r2, r0, r2
 80059ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80059f2:	bf00      	nop
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	e000e100 	.word	0xe000e100

08005a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	6039      	str	r1, [r7, #0]
 8005a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	db0a      	blt.n	8005a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	b2da      	uxtb	r2, r3
 8005a1c:	490c      	ldr	r1, [pc, #48]	@ (8005a50 <__NVIC_SetPriority+0x4c>)
 8005a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a22:	0112      	lsls	r2, r2, #4
 8005a24:	b2d2      	uxtb	r2, r2
 8005a26:	440b      	add	r3, r1
 8005a28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a2c:	e00a      	b.n	8005a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	b2da      	uxtb	r2, r3
 8005a32:	4908      	ldr	r1, [pc, #32]	@ (8005a54 <__NVIC_SetPriority+0x50>)
 8005a34:	79fb      	ldrb	r3, [r7, #7]
 8005a36:	f003 030f 	and.w	r3, r3, #15
 8005a3a:	3b04      	subs	r3, #4
 8005a3c:	0112      	lsls	r2, r2, #4
 8005a3e:	b2d2      	uxtb	r2, r2
 8005a40:	440b      	add	r3, r1
 8005a42:	761a      	strb	r2, [r3, #24]
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr
 8005a50:	e000e100 	.word	0xe000e100
 8005a54:	e000ed00 	.word	0xe000ed00

08005a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b089      	sub	sp, #36	@ 0x24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f003 0307 	and.w	r3, r3, #7
 8005a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	f1c3 0307 	rsb	r3, r3, #7
 8005a72:	2b04      	cmp	r3, #4
 8005a74:	bf28      	it	cs
 8005a76:	2304      	movcs	r3, #4
 8005a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	2b06      	cmp	r3, #6
 8005a80:	d902      	bls.n	8005a88 <NVIC_EncodePriority+0x30>
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	3b03      	subs	r3, #3
 8005a86:	e000      	b.n	8005a8a <NVIC_EncodePriority+0x32>
 8005a88:	2300      	movs	r3, #0
 8005a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	fa02 f303 	lsl.w	r3, r2, r3
 8005a96:	43da      	mvns	r2, r3
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	401a      	ands	r2, r3
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8005aaa:	43d9      	mvns	r1, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ab0:	4313      	orrs	r3, r2
         );
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3724      	adds	r7, #36	@ 0x24
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
	...

08005ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	3b01      	subs	r3, #1
 8005acc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ad0:	d301      	bcc.n	8005ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e00f      	b.n	8005af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8005b00 <SysTick_Config+0x40>)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	3b01      	subs	r3, #1
 8005adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ade:	210f      	movs	r1, #15
 8005ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae4:	f7ff ff8e 	bl	8005a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ae8:	4b05      	ldr	r3, [pc, #20]	@ (8005b00 <SysTick_Config+0x40>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005aee:	4b04      	ldr	r3, [pc, #16]	@ (8005b00 <SysTick_Config+0x40>)
 8005af0:	2207      	movs	r2, #7
 8005af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3708      	adds	r7, #8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	e000e010 	.word	0xe000e010

08005b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7ff ff29 	bl	8005964 <__NVIC_SetPriorityGrouping>
}
 8005b12:	bf00      	nop
 8005b14:	3708      	adds	r7, #8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b086      	sub	sp, #24
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	4603      	mov	r3, r0
 8005b22:	60b9      	str	r1, [r7, #8]
 8005b24:	607a      	str	r2, [r7, #4]
 8005b26:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005b28:	f7ff ff40 	bl	80059ac <__NVIC_GetPriorityGrouping>
 8005b2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	68b9      	ldr	r1, [r7, #8]
 8005b32:	6978      	ldr	r0, [r7, #20]
 8005b34:	f7ff ff90 	bl	8005a58 <NVIC_EncodePriority>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b3e:	4611      	mov	r1, r2
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7ff ff5f 	bl	8005a04 <__NVIC_SetPriority>
}
 8005b46:	bf00      	nop
 8005b48:	3718      	adds	r7, #24
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b082      	sub	sp, #8
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	4603      	mov	r3, r0
 8005b56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7ff ff33 	bl	80059c8 <__NVIC_EnableIRQ>
}
 8005b62:	bf00      	nop
 8005b64:	3708      	adds	r7, #8
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b082      	sub	sp, #8
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7ff ffa4 	bl	8005ac0 <SysTick_Config>
 8005b78:	4603      	mov	r3, r0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
	...

08005b84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e08d      	b.n	8005cb2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	4b47      	ldr	r3, [pc, #284]	@ (8005cbc <HAL_DMA_Init+0x138>)
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d80f      	bhi.n	8005bc2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	4b45      	ldr	r3, [pc, #276]	@ (8005cc0 <HAL_DMA_Init+0x13c>)
 8005baa:	4413      	add	r3, r2
 8005bac:	4a45      	ldr	r2, [pc, #276]	@ (8005cc4 <HAL_DMA_Init+0x140>)
 8005bae:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb2:	091b      	lsrs	r3, r3, #4
 8005bb4:	009a      	lsls	r2, r3, #2
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a42      	ldr	r2, [pc, #264]	@ (8005cc8 <HAL_DMA_Init+0x144>)
 8005bbe:	641a      	str	r2, [r3, #64]	@ 0x40
 8005bc0:	e00e      	b.n	8005be0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	4b40      	ldr	r3, [pc, #256]	@ (8005ccc <HAL_DMA_Init+0x148>)
 8005bca:	4413      	add	r3, r2
 8005bcc:	4a3d      	ldr	r2, [pc, #244]	@ (8005cc4 <HAL_DMA_Init+0x140>)
 8005bce:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd2:	091b      	lsrs	r3, r3, #4
 8005bd4:	009a      	lsls	r2, r3, #2
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a3c      	ldr	r2, [pc, #240]	@ (8005cd0 <HAL_DMA_Init+0x14c>)
 8005bde:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2202      	movs	r2, #2
 8005be4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005bf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bfa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005c04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 fa76 	bl	8006124 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c40:	d102      	bne.n	8005c48 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c50:	b2d2      	uxtb	r2, r2
 8005c52:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005c5c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d010      	beq.n	8005c88 <HAL_DMA_Init+0x104>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	2b04      	cmp	r3, #4
 8005c6c:	d80c      	bhi.n	8005c88 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 fa96 	bl	80061a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c78:	2200      	movs	r2, #0
 8005c7a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005c84:	605a      	str	r2, [r3, #4]
 8005c86:	e008      	b.n	8005c9a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	40020407 	.word	0x40020407
 8005cc0:	bffdfff8 	.word	0xbffdfff8
 8005cc4:	cccccccd 	.word	0xcccccccd
 8005cc8:	40020000 	.word	0x40020000
 8005ccc:	bffdfbf8 	.word	0xbffdfbf8
 8005cd0:	40020400 	.word	0x40020400

08005cd4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b086      	sub	sp, #24
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
 8005ce0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d101      	bne.n	8005cf4 <HAL_DMA_Start_IT+0x20>
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	e066      	b.n	8005dc2 <HAL_DMA_Start_IT+0xee>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d155      	bne.n	8005db4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 0201 	bic.w	r2, r2, #1
 8005d24:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	68b9      	ldr	r1, [r7, #8]
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f000 f9bb 	bl	80060a8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d008      	beq.n	8005d4c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f042 020e 	orr.w	r2, r2, #14
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	e00f      	b.n	8005d6c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 0204 	bic.w	r2, r2, #4
 8005d5a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f042 020a 	orr.w	r2, r2, #10
 8005d6a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d007      	beq.n	8005d8a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d88:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d007      	beq.n	8005da2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005da0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f042 0201 	orr.w	r2, r2, #1
 8005db0:	601a      	str	r2, [r3, #0]
 8005db2:	e005      	b.n	8005dc0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3718      	adds	r7, #24
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b085      	sub	sp, #20
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d005      	beq.n	8005dee <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2204      	movs	r2, #4
 8005de6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	73fb      	strb	r3, [r7, #15]
 8005dec:	e037      	b.n	8005e5e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 020e 	bic.w	r2, r2, #14
 8005dfc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e0c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 0201 	bic.w	r2, r2, #1
 8005e1c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e22:	f003 021f 	and.w	r2, r3, #31
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e2a:	2101      	movs	r1, #1
 8005e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8005e30:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005e3a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00c      	beq.n	8005e5e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e4e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e52:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005e5c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3714      	adds	r7, #20
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e84:	2300      	movs	r3, #0
 8005e86:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d00d      	beq.n	8005eb0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2204      	movs	r2, #4
 8005e98:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	73fb      	strb	r3, [r7, #15]
 8005eae:	e047      	b.n	8005f40 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f022 020e 	bic.w	r2, r2, #14
 8005ebe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f022 0201 	bic.w	r2, r2, #1
 8005ece:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005eda:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ede:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ee4:	f003 021f 	and.w	r2, r3, #31
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eec:	2101      	movs	r1, #1
 8005eee:	fa01 f202 	lsl.w	r2, r1, r2
 8005ef2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005efc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00c      	beq.n	8005f20 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f14:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005f1e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d003      	beq.n	8005f40 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	4798      	blx	r3
    }
  }
  return status;
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b084      	sub	sp, #16
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f66:	f003 031f 	and.w	r3, r3, #31
 8005f6a:	2204      	movs	r2, #4
 8005f6c:	409a      	lsls	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	4013      	ands	r3, r2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d026      	beq.n	8005fc4 <HAL_DMA_IRQHandler+0x7a>
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	f003 0304 	and.w	r3, r3, #4
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d021      	beq.n	8005fc4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0320 	and.w	r3, r3, #32
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d107      	bne.n	8005f9e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 0204 	bic.w	r2, r2, #4
 8005f9c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fa2:	f003 021f 	and.w	r2, r3, #31
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005faa:	2104      	movs	r1, #4
 8005fac:	fa01 f202 	lsl.w	r2, r1, r2
 8005fb0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d071      	beq.n	800609e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005fc2:	e06c      	b.n	800609e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fc8:	f003 031f 	and.w	r3, r3, #31
 8005fcc:	2202      	movs	r2, #2
 8005fce:	409a      	lsls	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d02e      	beq.n	8006036 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d029      	beq.n	8006036 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0320 	and.w	r3, r3, #32
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10b      	bne.n	8006008 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 020a 	bic.w	r2, r2, #10
 8005ffe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800600c:	f003 021f 	and.w	r2, r3, #31
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006014:	2102      	movs	r1, #2
 8006016:	fa01 f202 	lsl.w	r2, r1, r2
 800601a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006028:	2b00      	cmp	r3, #0
 800602a:	d038      	beq.n	800609e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006034:	e033      	b.n	800609e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800603a:	f003 031f 	and.w	r3, r3, #31
 800603e:	2208      	movs	r2, #8
 8006040:	409a      	lsls	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	4013      	ands	r3, r2
 8006046:	2b00      	cmp	r3, #0
 8006048:	d02a      	beq.n	80060a0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	f003 0308 	and.w	r3, r3, #8
 8006050:	2b00      	cmp	r3, #0
 8006052:	d025      	beq.n	80060a0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 020e 	bic.w	r2, r2, #14
 8006062:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006068:	f003 021f 	and.w	r2, r3, #31
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006070:	2101      	movs	r1, #1
 8006072:	fa01 f202 	lsl.w	r2, r1, r2
 8006076:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006092:	2b00      	cmp	r3, #0
 8006094:	d004      	beq.n	80060a0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800609e:	bf00      	nop
 80060a0:	bf00      	nop
}
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
 80060b4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80060be:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d004      	beq.n	80060d2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80060d0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060d6:	f003 021f 	and.w	r2, r3, #31
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060de:	2101      	movs	r1, #1
 80060e0:	fa01 f202 	lsl.w	r2, r1, r2
 80060e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	2b10      	cmp	r3, #16
 80060f4:	d108      	bne.n	8006108 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006106:	e007      	b.n	8006118 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	60da      	str	r2, [r3, #12]
}
 8006118:	bf00      	nop
 800611a:	3714      	adds	r7, #20
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006124:	b480      	push	{r7}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	461a      	mov	r2, r3
 8006132:	4b16      	ldr	r3, [pc, #88]	@ (800618c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006134:	429a      	cmp	r2, r3
 8006136:	d802      	bhi.n	800613e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006138:	4b15      	ldr	r3, [pc, #84]	@ (8006190 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800613a:	617b      	str	r3, [r7, #20]
 800613c:	e001      	b.n	8006142 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800613e:	4b15      	ldr	r3, [pc, #84]	@ (8006194 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006140:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	b2db      	uxtb	r3, r3
 800614c:	3b08      	subs	r3, #8
 800614e:	4a12      	ldr	r2, [pc, #72]	@ (8006198 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006150:	fba2 2303 	umull	r2, r3, r2, r3
 8006154:	091b      	lsrs	r3, r3, #4
 8006156:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800615c:	089b      	lsrs	r3, r3, #2
 800615e:	009a      	lsls	r2, r3, #2
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	4413      	add	r3, r2
 8006164:	461a      	mov	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a0b      	ldr	r2, [pc, #44]	@ (800619c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800616e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f003 031f 	and.w	r3, r3, #31
 8006176:	2201      	movs	r2, #1
 8006178:	409a      	lsls	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800617e:	bf00      	nop
 8006180:	371c      	adds	r7, #28
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	40020407 	.word	0x40020407
 8006190:	40020800 	.word	0x40020800
 8006194:	40020820 	.word	0x40020820
 8006198:	cccccccd 	.word	0xcccccccd
 800619c:	40020880 	.word	0x40020880

080061a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	4b0b      	ldr	r3, [pc, #44]	@ (80061e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80061b4:	4413      	add	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	461a      	mov	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a08      	ldr	r2, [pc, #32]	@ (80061e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80061c2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	3b01      	subs	r3, #1
 80061c8:	f003 031f 	and.w	r3, r3, #31
 80061cc:	2201      	movs	r2, #1
 80061ce:	409a      	lsls	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80061d4:	bf00      	nop
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	1000823f 	.word	0x1000823f
 80061e4:	40020940 	.word	0x40020940

080061e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80061f2:	2300      	movs	r3, #0
 80061f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80061f6:	e15a      	b.n	80064ae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	2101      	movs	r1, #1
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	fa01 f303 	lsl.w	r3, r1, r3
 8006204:	4013      	ands	r3, r2
 8006206:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2b00      	cmp	r3, #0
 800620c:	f000 814c 	beq.w	80064a8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f003 0303 	and.w	r3, r3, #3
 8006218:	2b01      	cmp	r3, #1
 800621a:	d005      	beq.n	8006228 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006224:	2b02      	cmp	r3, #2
 8006226:	d130      	bne.n	800628a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	005b      	lsls	r3, r3, #1
 8006232:	2203      	movs	r2, #3
 8006234:	fa02 f303 	lsl.w	r3, r2, r3
 8006238:	43db      	mvns	r3, r3
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	4013      	ands	r3, r2
 800623e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	68da      	ldr	r2, [r3, #12]
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	005b      	lsls	r3, r3, #1
 8006248:	fa02 f303 	lsl.w	r3, r2, r3
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	4313      	orrs	r3, r2
 8006250:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	693a      	ldr	r2, [r7, #16]
 8006256:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800625e:	2201      	movs	r2, #1
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	fa02 f303 	lsl.w	r3, r2, r3
 8006266:	43db      	mvns	r3, r3
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	4013      	ands	r3, r2
 800626c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	091b      	lsrs	r3, r3, #4
 8006274:	f003 0201 	and.w	r2, r3, #1
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	fa02 f303 	lsl.w	r3, r2, r3
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	4313      	orrs	r3, r2
 8006282:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	f003 0303 	and.w	r3, r3, #3
 8006292:	2b03      	cmp	r3, #3
 8006294:	d017      	beq.n	80062c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	005b      	lsls	r3, r3, #1
 80062a0:	2203      	movs	r2, #3
 80062a2:	fa02 f303 	lsl.w	r3, r2, r3
 80062a6:	43db      	mvns	r3, r3
 80062a8:	693a      	ldr	r2, [r7, #16]
 80062aa:	4013      	ands	r3, r2
 80062ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	689a      	ldr	r2, [r3, #8]
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	005b      	lsls	r3, r3, #1
 80062b6:	fa02 f303 	lsl.w	r3, r2, r3
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	4313      	orrs	r3, r2
 80062be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f003 0303 	and.w	r3, r3, #3
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d123      	bne.n	800631a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	08da      	lsrs	r2, r3, #3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	3208      	adds	r2, #8
 80062da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	f003 0307 	and.w	r3, r3, #7
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	220f      	movs	r2, #15
 80062ea:	fa02 f303 	lsl.w	r3, r2, r3
 80062ee:	43db      	mvns	r3, r3
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	4013      	ands	r3, r2
 80062f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	691a      	ldr	r2, [r3, #16]
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f003 0307 	and.w	r3, r3, #7
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	fa02 f303 	lsl.w	r3, r2, r3
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	4313      	orrs	r3, r2
 800630a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	08da      	lsrs	r2, r3, #3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	3208      	adds	r2, #8
 8006314:	6939      	ldr	r1, [r7, #16]
 8006316:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	005b      	lsls	r3, r3, #1
 8006324:	2203      	movs	r2, #3
 8006326:	fa02 f303 	lsl.w	r3, r2, r3
 800632a:	43db      	mvns	r3, r3
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	4013      	ands	r3, r2
 8006330:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f003 0203 	and.w	r2, r3, #3
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	005b      	lsls	r3, r3, #1
 800633e:	fa02 f303 	lsl.w	r3, r2, r3
 8006342:	693a      	ldr	r2, [r7, #16]
 8006344:	4313      	orrs	r3, r2
 8006346:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006356:	2b00      	cmp	r3, #0
 8006358:	f000 80a6 	beq.w	80064a8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800635c:	4b5b      	ldr	r3, [pc, #364]	@ (80064cc <HAL_GPIO_Init+0x2e4>)
 800635e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006360:	4a5a      	ldr	r2, [pc, #360]	@ (80064cc <HAL_GPIO_Init+0x2e4>)
 8006362:	f043 0301 	orr.w	r3, r3, #1
 8006366:	6613      	str	r3, [r2, #96]	@ 0x60
 8006368:	4b58      	ldr	r3, [pc, #352]	@ (80064cc <HAL_GPIO_Init+0x2e4>)
 800636a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	60bb      	str	r3, [r7, #8]
 8006372:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006374:	4a56      	ldr	r2, [pc, #344]	@ (80064d0 <HAL_GPIO_Init+0x2e8>)
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	089b      	lsrs	r3, r3, #2
 800637a:	3302      	adds	r3, #2
 800637c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006380:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	f003 0303 	and.w	r3, r3, #3
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	220f      	movs	r2, #15
 800638c:	fa02 f303 	lsl.w	r3, r2, r3
 8006390:	43db      	mvns	r3, r3
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	4013      	ands	r3, r2
 8006396:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800639e:	d01f      	beq.n	80063e0 <HAL_GPIO_Init+0x1f8>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a4c      	ldr	r2, [pc, #304]	@ (80064d4 <HAL_GPIO_Init+0x2ec>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d019      	beq.n	80063dc <HAL_GPIO_Init+0x1f4>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a4b      	ldr	r2, [pc, #300]	@ (80064d8 <HAL_GPIO_Init+0x2f0>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d013      	beq.n	80063d8 <HAL_GPIO_Init+0x1f0>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a4a      	ldr	r2, [pc, #296]	@ (80064dc <HAL_GPIO_Init+0x2f4>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d00d      	beq.n	80063d4 <HAL_GPIO_Init+0x1ec>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a49      	ldr	r2, [pc, #292]	@ (80064e0 <HAL_GPIO_Init+0x2f8>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d007      	beq.n	80063d0 <HAL_GPIO_Init+0x1e8>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a48      	ldr	r2, [pc, #288]	@ (80064e4 <HAL_GPIO_Init+0x2fc>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d101      	bne.n	80063cc <HAL_GPIO_Init+0x1e4>
 80063c8:	2305      	movs	r3, #5
 80063ca:	e00a      	b.n	80063e2 <HAL_GPIO_Init+0x1fa>
 80063cc:	2306      	movs	r3, #6
 80063ce:	e008      	b.n	80063e2 <HAL_GPIO_Init+0x1fa>
 80063d0:	2304      	movs	r3, #4
 80063d2:	e006      	b.n	80063e2 <HAL_GPIO_Init+0x1fa>
 80063d4:	2303      	movs	r3, #3
 80063d6:	e004      	b.n	80063e2 <HAL_GPIO_Init+0x1fa>
 80063d8:	2302      	movs	r3, #2
 80063da:	e002      	b.n	80063e2 <HAL_GPIO_Init+0x1fa>
 80063dc:	2301      	movs	r3, #1
 80063de:	e000      	b.n	80063e2 <HAL_GPIO_Init+0x1fa>
 80063e0:	2300      	movs	r3, #0
 80063e2:	697a      	ldr	r2, [r7, #20]
 80063e4:	f002 0203 	and.w	r2, r2, #3
 80063e8:	0092      	lsls	r2, r2, #2
 80063ea:	4093      	lsls	r3, r2
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80063f2:	4937      	ldr	r1, [pc, #220]	@ (80064d0 <HAL_GPIO_Init+0x2e8>)
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	089b      	lsrs	r3, r3, #2
 80063f8:	3302      	adds	r3, #2
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006400:	4b39      	ldr	r3, [pc, #228]	@ (80064e8 <HAL_GPIO_Init+0x300>)
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	43db      	mvns	r3, r3
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	4013      	ands	r3, r2
 800640e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d003      	beq.n	8006424 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	4313      	orrs	r3, r2
 8006422:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006424:	4a30      	ldr	r2, [pc, #192]	@ (80064e8 <HAL_GPIO_Init+0x300>)
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800642a:	4b2f      	ldr	r3, [pc, #188]	@ (80064e8 <HAL_GPIO_Init+0x300>)
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	43db      	mvns	r3, r3
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	4013      	ands	r3, r2
 8006438:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	4313      	orrs	r3, r2
 800644c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800644e:	4a26      	ldr	r2, [pc, #152]	@ (80064e8 <HAL_GPIO_Init+0x300>)
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006454:	4b24      	ldr	r3, [pc, #144]	@ (80064e8 <HAL_GPIO_Init+0x300>)
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	43db      	mvns	r3, r3
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	4013      	ands	r3, r2
 8006462:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d003      	beq.n	8006478 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	4313      	orrs	r3, r2
 8006476:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006478:	4a1b      	ldr	r2, [pc, #108]	@ (80064e8 <HAL_GPIO_Init+0x300>)
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800647e:	4b1a      	ldr	r3, [pc, #104]	@ (80064e8 <HAL_GPIO_Init+0x300>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	43db      	mvns	r3, r3
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	4013      	ands	r3, r2
 800648c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006496:	2b00      	cmp	r3, #0
 8006498:	d003      	beq.n	80064a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800649a:	693a      	ldr	r2, [r7, #16]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	4313      	orrs	r3, r2
 80064a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80064a2:	4a11      	ldr	r2, [pc, #68]	@ (80064e8 <HAL_GPIO_Init+0x300>)
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	3301      	adds	r3, #1
 80064ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	fa22 f303 	lsr.w	r3, r2, r3
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f47f ae9d 	bne.w	80061f8 <HAL_GPIO_Init+0x10>
  }
}
 80064be:	bf00      	nop
 80064c0:	bf00      	nop
 80064c2:	371c      	adds	r7, #28
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr
 80064cc:	40021000 	.word	0x40021000
 80064d0:	40010000 	.word	0x40010000
 80064d4:	48000400 	.word	0x48000400
 80064d8:	48000800 	.word	0x48000800
 80064dc:	48000c00 	.word	0x48000c00
 80064e0:	48001000 	.word	0x48001000
 80064e4:	48001400 	.word	0x48001400
 80064e8:	40010400 	.word	0x40010400

080064ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	460b      	mov	r3, r1
 80064f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	691a      	ldr	r2, [r3, #16]
 80064fc:	887b      	ldrh	r3, [r7, #2]
 80064fe:	4013      	ands	r3, r2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d002      	beq.n	800650a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006504:	2301      	movs	r3, #1
 8006506:	73fb      	strb	r3, [r7, #15]
 8006508:	e001      	b.n	800650e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800650a:	2300      	movs	r3, #0
 800650c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800650e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3714      	adds	r7, #20
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	460b      	mov	r3, r1
 8006526:	807b      	strh	r3, [r7, #2]
 8006528:	4613      	mov	r3, r2
 800652a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800652c:	787b      	ldrb	r3, [r7, #1]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d003      	beq.n	800653a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006532:	887a      	ldrh	r2, [r7, #2]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006538:	e002      	b.n	8006540 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800653a:	887a      	ldrh	r2, [r7, #2]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	4603      	mov	r3, r0
 8006554:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006556:	4b08      	ldr	r3, [pc, #32]	@ (8006578 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006558:	695a      	ldr	r2, [r3, #20]
 800655a:	88fb      	ldrh	r3, [r7, #6]
 800655c:	4013      	ands	r3, r2
 800655e:	2b00      	cmp	r3, #0
 8006560:	d006      	beq.n	8006570 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006562:	4a05      	ldr	r2, [pc, #20]	@ (8006578 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006564:	88fb      	ldrh	r3, [r7, #6]
 8006566:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006568:	88fb      	ldrh	r3, [r7, #6]
 800656a:	4618      	mov	r0, r3
 800656c:	f000 f806 	bl	800657c <HAL_GPIO_EXTI_Callback>
  }
}
 8006570:	bf00      	nop
 8006572:	3708      	adds	r7, #8
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	40010400 	.word	0x40010400

0800657c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	4603      	mov	r3, r0
 8006584:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006586:	bf00      	nop
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
	...

08006594 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d141      	bne.n	8006626 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80065a2:	4b4b      	ldr	r3, [pc, #300]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80065aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065ae:	d131      	bne.n	8006614 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80065b0:	4b47      	ldr	r3, [pc, #284]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065b6:	4a46      	ldr	r2, [pc, #280]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80065c0:	4b43      	ldr	r3, [pc, #268]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80065c8:	4a41      	ldr	r2, [pc, #260]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80065ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80065d0:	4b40      	ldr	r3, [pc, #256]	@ (80066d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2232      	movs	r2, #50	@ 0x32
 80065d6:	fb02 f303 	mul.w	r3, r2, r3
 80065da:	4a3f      	ldr	r2, [pc, #252]	@ (80066d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80065dc:	fba2 2303 	umull	r2, r3, r2, r3
 80065e0:	0c9b      	lsrs	r3, r3, #18
 80065e2:	3301      	adds	r3, #1
 80065e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80065e6:	e002      	b.n	80065ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	3b01      	subs	r3, #1
 80065ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80065ee:	4b38      	ldr	r3, [pc, #224]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065fa:	d102      	bne.n	8006602 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1f2      	bne.n	80065e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006602:	4b33      	ldr	r3, [pc, #204]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006604:	695b      	ldr	r3, [r3, #20]
 8006606:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800660a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800660e:	d158      	bne.n	80066c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e057      	b.n	80066c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006614:	4b2e      	ldr	r3, [pc, #184]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006616:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800661a:	4a2d      	ldr	r2, [pc, #180]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800661c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006620:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006624:	e04d      	b.n	80066c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800662c:	d141      	bne.n	80066b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800662e:	4b28      	ldr	r3, [pc, #160]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006636:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800663a:	d131      	bne.n	80066a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800663c:	4b24      	ldr	r3, [pc, #144]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800663e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006642:	4a23      	ldr	r2, [pc, #140]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006644:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006648:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800664c:	4b20      	ldr	r3, [pc, #128]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006654:	4a1e      	ldr	r2, [pc, #120]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006656:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800665a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800665c:	4b1d      	ldr	r3, [pc, #116]	@ (80066d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2232      	movs	r2, #50	@ 0x32
 8006662:	fb02 f303 	mul.w	r3, r2, r3
 8006666:	4a1c      	ldr	r2, [pc, #112]	@ (80066d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006668:	fba2 2303 	umull	r2, r3, r2, r3
 800666c:	0c9b      	lsrs	r3, r3, #18
 800666e:	3301      	adds	r3, #1
 8006670:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006672:	e002      	b.n	800667a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	3b01      	subs	r3, #1
 8006678:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800667a:	4b15      	ldr	r3, [pc, #84]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006682:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006686:	d102      	bne.n	800668e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1f2      	bne.n	8006674 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800668e:	4b10      	ldr	r3, [pc, #64]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006690:	695b      	ldr	r3, [r3, #20]
 8006692:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006696:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800669a:	d112      	bne.n	80066c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e011      	b.n	80066c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80066a0:	4b0b      	ldr	r3, [pc, #44]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066a6:	4a0a      	ldr	r2, [pc, #40]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80066b0:	e007      	b.n	80066c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80066b2:	4b07      	ldr	r3, [pc, #28]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80066ba:	4a05      	ldr	r2, [pc, #20]	@ (80066d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80066c0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3714      	adds	r7, #20
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr
 80066d0:	40007000 	.word	0x40007000
 80066d4:	20000240 	.word	0x20000240
 80066d8:	431bde83 	.word	0x431bde83

080066dc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80066dc:	b480      	push	{r7}
 80066de:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80066e0:	4b05      	ldr	r3, [pc, #20]	@ (80066f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	4a04      	ldr	r2, [pc, #16]	@ (80066f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80066e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80066ea:	6093      	str	r3, [r2, #8]
}
 80066ec:	bf00      	nop
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	40007000 	.word	0x40007000

080066fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b088      	sub	sp, #32
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d101      	bne.n	800670e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e2fe      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0301 	and.w	r3, r3, #1
 8006716:	2b00      	cmp	r3, #0
 8006718:	d075      	beq.n	8006806 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800671a:	4b97      	ldr	r3, [pc, #604]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f003 030c 	and.w	r3, r3, #12
 8006722:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006724:	4b94      	ldr	r3, [pc, #592]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	f003 0303 	and.w	r3, r3, #3
 800672c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	2b0c      	cmp	r3, #12
 8006732:	d102      	bne.n	800673a <HAL_RCC_OscConfig+0x3e>
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	2b03      	cmp	r3, #3
 8006738:	d002      	beq.n	8006740 <HAL_RCC_OscConfig+0x44>
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	2b08      	cmp	r3, #8
 800673e:	d10b      	bne.n	8006758 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006740:	4b8d      	ldr	r3, [pc, #564]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006748:	2b00      	cmp	r3, #0
 800674a:	d05b      	beq.n	8006804 <HAL_RCC_OscConfig+0x108>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d157      	bne.n	8006804 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e2d9      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006760:	d106      	bne.n	8006770 <HAL_RCC_OscConfig+0x74>
 8006762:	4b85      	ldr	r3, [pc, #532]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a84      	ldr	r2, [pc, #528]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 8006768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800676c:	6013      	str	r3, [r2, #0]
 800676e:	e01d      	b.n	80067ac <HAL_RCC_OscConfig+0xb0>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006778:	d10c      	bne.n	8006794 <HAL_RCC_OscConfig+0x98>
 800677a:	4b7f      	ldr	r3, [pc, #508]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a7e      	ldr	r2, [pc, #504]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 8006780:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006784:	6013      	str	r3, [r2, #0]
 8006786:	4b7c      	ldr	r3, [pc, #496]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a7b      	ldr	r2, [pc, #492]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 800678c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006790:	6013      	str	r3, [r2, #0]
 8006792:	e00b      	b.n	80067ac <HAL_RCC_OscConfig+0xb0>
 8006794:	4b78      	ldr	r3, [pc, #480]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a77      	ldr	r2, [pc, #476]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 800679a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800679e:	6013      	str	r3, [r2, #0]
 80067a0:	4b75      	ldr	r3, [pc, #468]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a74      	ldr	r2, [pc, #464]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 80067a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80067aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d013      	beq.n	80067dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067b4:	f7fd ffca 	bl	800474c <HAL_GetTick>
 80067b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067ba:	e008      	b.n	80067ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067bc:	f7fd ffc6 	bl	800474c <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	2b64      	cmp	r3, #100	@ 0x64
 80067c8:	d901      	bls.n	80067ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e29e      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067ce:	4b6a      	ldr	r3, [pc, #424]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d0f0      	beq.n	80067bc <HAL_RCC_OscConfig+0xc0>
 80067da:	e014      	b.n	8006806 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067dc:	f7fd ffb6 	bl	800474c <HAL_GetTick>
 80067e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80067e2:	e008      	b.n	80067f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067e4:	f7fd ffb2 	bl	800474c <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	2b64      	cmp	r3, #100	@ 0x64
 80067f0:	d901      	bls.n	80067f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e28a      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80067f6:	4b60      	ldr	r3, [pc, #384]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1f0      	bne.n	80067e4 <HAL_RCC_OscConfig+0xe8>
 8006802:	e000      	b.n	8006806 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	2b00      	cmp	r3, #0
 8006810:	d075      	beq.n	80068fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006812:	4b59      	ldr	r3, [pc, #356]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f003 030c 	and.w	r3, r3, #12
 800681a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800681c:	4b56      	ldr	r3, [pc, #344]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	f003 0303 	and.w	r3, r3, #3
 8006824:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	2b0c      	cmp	r3, #12
 800682a:	d102      	bne.n	8006832 <HAL_RCC_OscConfig+0x136>
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	2b02      	cmp	r3, #2
 8006830:	d002      	beq.n	8006838 <HAL_RCC_OscConfig+0x13c>
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	2b04      	cmp	r3, #4
 8006836:	d11f      	bne.n	8006878 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006838:	4b4f      	ldr	r3, [pc, #316]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006840:	2b00      	cmp	r3, #0
 8006842:	d005      	beq.n	8006850 <HAL_RCC_OscConfig+0x154>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e25d      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006850:	4b49      	ldr	r3, [pc, #292]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	061b      	lsls	r3, r3, #24
 800685e:	4946      	ldr	r1, [pc, #280]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 8006860:	4313      	orrs	r3, r2
 8006862:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006864:	4b45      	ldr	r3, [pc, #276]	@ (800697c <HAL_RCC_OscConfig+0x280>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4618      	mov	r0, r3
 800686a:	f7fd ff23 	bl	80046b4 <HAL_InitTick>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d043      	beq.n	80068fc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006874:	2301      	movs	r3, #1
 8006876:	e249      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d023      	beq.n	80068c8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006880:	4b3d      	ldr	r3, [pc, #244]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a3c      	ldr	r2, [pc, #240]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 8006886:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800688a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800688c:	f7fd ff5e 	bl	800474c <HAL_GetTick>
 8006890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006892:	e008      	b.n	80068a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006894:	f7fd ff5a 	bl	800474c <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d901      	bls.n	80068a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e232      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068a6:	4b34      	ldr	r3, [pc, #208]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d0f0      	beq.n	8006894 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068b2:	4b31      	ldr	r3, [pc, #196]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	061b      	lsls	r3, r3, #24
 80068c0:	492d      	ldr	r1, [pc, #180]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 80068c2:	4313      	orrs	r3, r2
 80068c4:	604b      	str	r3, [r1, #4]
 80068c6:	e01a      	b.n	80068fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068c8:	4b2b      	ldr	r3, [pc, #172]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a2a      	ldr	r2, [pc, #168]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 80068ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d4:	f7fd ff3a 	bl	800474c <HAL_GetTick>
 80068d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80068da:	e008      	b.n	80068ee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068dc:	f7fd ff36 	bl	800474c <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d901      	bls.n	80068ee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e20e      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80068ee:	4b22      	ldr	r3, [pc, #136]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1f0      	bne.n	80068dc <HAL_RCC_OscConfig+0x1e0>
 80068fa:	e000      	b.n	80068fe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0308 	and.w	r3, r3, #8
 8006906:	2b00      	cmp	r3, #0
 8006908:	d041      	beq.n	800698e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	695b      	ldr	r3, [r3, #20]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d01c      	beq.n	800694c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006912:	4b19      	ldr	r3, [pc, #100]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 8006914:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006918:	4a17      	ldr	r2, [pc, #92]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 800691a:	f043 0301 	orr.w	r3, r3, #1
 800691e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006922:	f7fd ff13 	bl	800474c <HAL_GetTick>
 8006926:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006928:	e008      	b.n	800693c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800692a:	f7fd ff0f 	bl	800474c <HAL_GetTick>
 800692e:	4602      	mov	r2, r0
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	2b02      	cmp	r3, #2
 8006936:	d901      	bls.n	800693c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e1e7      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800693c:	4b0e      	ldr	r3, [pc, #56]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 800693e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006942:	f003 0302 	and.w	r3, r3, #2
 8006946:	2b00      	cmp	r3, #0
 8006948:	d0ef      	beq.n	800692a <HAL_RCC_OscConfig+0x22e>
 800694a:	e020      	b.n	800698e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800694c:	4b0a      	ldr	r3, [pc, #40]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 800694e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006952:	4a09      	ldr	r2, [pc, #36]	@ (8006978 <HAL_RCC_OscConfig+0x27c>)
 8006954:	f023 0301 	bic.w	r3, r3, #1
 8006958:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800695c:	f7fd fef6 	bl	800474c <HAL_GetTick>
 8006960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006962:	e00d      	b.n	8006980 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006964:	f7fd fef2 	bl	800474c <HAL_GetTick>
 8006968:	4602      	mov	r2, r0
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	2b02      	cmp	r3, #2
 8006970:	d906      	bls.n	8006980 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006972:	2303      	movs	r3, #3
 8006974:	e1ca      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
 8006976:	bf00      	nop
 8006978:	40021000 	.word	0x40021000
 800697c:	20000244 	.word	0x20000244
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006980:	4b8c      	ldr	r3, [pc, #560]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006982:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006986:	f003 0302 	and.w	r3, r3, #2
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1ea      	bne.n	8006964 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0304 	and.w	r3, r3, #4
 8006996:	2b00      	cmp	r3, #0
 8006998:	f000 80a6 	beq.w	8006ae8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800699c:	2300      	movs	r3, #0
 800699e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80069a0:	4b84      	ldr	r3, [pc, #528]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 80069a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d101      	bne.n	80069b0 <HAL_RCC_OscConfig+0x2b4>
 80069ac:	2301      	movs	r3, #1
 80069ae:	e000      	b.n	80069b2 <HAL_RCC_OscConfig+0x2b6>
 80069b0:	2300      	movs	r3, #0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00d      	beq.n	80069d2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069b6:	4b7f      	ldr	r3, [pc, #508]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 80069b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069ba:	4a7e      	ldr	r2, [pc, #504]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 80069bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80069c2:	4b7c      	ldr	r3, [pc, #496]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 80069c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069ca:	60fb      	str	r3, [r7, #12]
 80069cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80069ce:	2301      	movs	r3, #1
 80069d0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069d2:	4b79      	ldr	r3, [pc, #484]	@ (8006bb8 <HAL_RCC_OscConfig+0x4bc>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d118      	bne.n	8006a10 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069de:	4b76      	ldr	r3, [pc, #472]	@ (8006bb8 <HAL_RCC_OscConfig+0x4bc>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a75      	ldr	r2, [pc, #468]	@ (8006bb8 <HAL_RCC_OscConfig+0x4bc>)
 80069e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069ea:	f7fd feaf 	bl	800474c <HAL_GetTick>
 80069ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069f0:	e008      	b.n	8006a04 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069f2:	f7fd feab 	bl	800474c <HAL_GetTick>
 80069f6:	4602      	mov	r2, r0
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	1ad3      	subs	r3, r2, r3
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d901      	bls.n	8006a04 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006a00:	2303      	movs	r3, #3
 8006a02:	e183      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a04:	4b6c      	ldr	r3, [pc, #432]	@ (8006bb8 <HAL_RCC_OscConfig+0x4bc>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d0f0      	beq.n	80069f2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d108      	bne.n	8006a2a <HAL_RCC_OscConfig+0x32e>
 8006a18:	4b66      	ldr	r3, [pc, #408]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a1e:	4a65      	ldr	r2, [pc, #404]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006a20:	f043 0301 	orr.w	r3, r3, #1
 8006a24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006a28:	e024      	b.n	8006a74 <HAL_RCC_OscConfig+0x378>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	2b05      	cmp	r3, #5
 8006a30:	d110      	bne.n	8006a54 <HAL_RCC_OscConfig+0x358>
 8006a32:	4b60      	ldr	r3, [pc, #384]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a38:	4a5e      	ldr	r2, [pc, #376]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006a3a:	f043 0304 	orr.w	r3, r3, #4
 8006a3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006a42:	4b5c      	ldr	r3, [pc, #368]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a48:	4a5a      	ldr	r2, [pc, #360]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006a4a:	f043 0301 	orr.w	r3, r3, #1
 8006a4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006a52:	e00f      	b.n	8006a74 <HAL_RCC_OscConfig+0x378>
 8006a54:	4b57      	ldr	r3, [pc, #348]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a5a:	4a56      	ldr	r2, [pc, #344]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006a5c:	f023 0301 	bic.w	r3, r3, #1
 8006a60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006a64:	4b53      	ldr	r3, [pc, #332]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a6a:	4a52      	ldr	r2, [pc, #328]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006a6c:	f023 0304 	bic.w	r3, r3, #4
 8006a70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d016      	beq.n	8006aaa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a7c:	f7fd fe66 	bl	800474c <HAL_GetTick>
 8006a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a82:	e00a      	b.n	8006a9a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a84:	f7fd fe62 	bl	800474c <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d901      	bls.n	8006a9a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e138      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a9a:	4b46      	ldr	r3, [pc, #280]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aa0:	f003 0302 	and.w	r3, r3, #2
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d0ed      	beq.n	8006a84 <HAL_RCC_OscConfig+0x388>
 8006aa8:	e015      	b.n	8006ad6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aaa:	f7fd fe4f 	bl	800474c <HAL_GetTick>
 8006aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ab0:	e00a      	b.n	8006ac8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ab2:	f7fd fe4b 	bl	800474c <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d901      	bls.n	8006ac8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e121      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ac8:	4b3a      	ldr	r3, [pc, #232]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ace:	f003 0302 	and.w	r3, r3, #2
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1ed      	bne.n	8006ab2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006ad6:	7ffb      	ldrb	r3, [r7, #31]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d105      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006adc:	4b35      	ldr	r3, [pc, #212]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006ade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ae0:	4a34      	ldr	r2, [pc, #208]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006ae2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ae6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0320 	and.w	r3, r3, #32
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d03c      	beq.n	8006b6e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d01c      	beq.n	8006b36 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006afc:	4b2d      	ldr	r3, [pc, #180]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006afe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b02:	4a2c      	ldr	r2, [pc, #176]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006b04:	f043 0301 	orr.w	r3, r3, #1
 8006b08:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b0c:	f7fd fe1e 	bl	800474c <HAL_GetTick>
 8006b10:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006b12:	e008      	b.n	8006b26 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b14:	f7fd fe1a 	bl	800474c <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d901      	bls.n	8006b26 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e0f2      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006b26:	4b23      	ldr	r3, [pc, #140]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006b28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b2c:	f003 0302 	and.w	r3, r3, #2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d0ef      	beq.n	8006b14 <HAL_RCC_OscConfig+0x418>
 8006b34:	e01b      	b.n	8006b6e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006b36:	4b1f      	ldr	r3, [pc, #124]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006b38:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b3c:	4a1d      	ldr	r2, [pc, #116]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006b3e:	f023 0301 	bic.w	r3, r3, #1
 8006b42:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b46:	f7fd fe01 	bl	800474c <HAL_GetTick>
 8006b4a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b4c:	e008      	b.n	8006b60 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b4e:	f7fd fdfd 	bl	800474c <HAL_GetTick>
 8006b52:	4602      	mov	r2, r0
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d901      	bls.n	8006b60 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e0d5      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b60:	4b14      	ldr	r3, [pc, #80]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006b62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1ef      	bne.n	8006b4e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	69db      	ldr	r3, [r3, #28]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f000 80c9 	beq.w	8006d0a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b78:	4b0e      	ldr	r3, [pc, #56]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	f003 030c 	and.w	r3, r3, #12
 8006b80:	2b0c      	cmp	r3, #12
 8006b82:	f000 8083 	beq.w	8006c8c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	69db      	ldr	r3, [r3, #28]
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d15e      	bne.n	8006c4c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b8e:	4b09      	ldr	r3, [pc, #36]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a08      	ldr	r2, [pc, #32]	@ (8006bb4 <HAL_RCC_OscConfig+0x4b8>)
 8006b94:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b9a:	f7fd fdd7 	bl	800474c <HAL_GetTick>
 8006b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ba0:	e00c      	b.n	8006bbc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ba2:	f7fd fdd3 	bl	800474c <HAL_GetTick>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d905      	bls.n	8006bbc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e0ab      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
 8006bb4:	40021000 	.word	0x40021000
 8006bb8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bbc:	4b55      	ldr	r3, [pc, #340]	@ (8006d14 <HAL_RCC_OscConfig+0x618>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1ec      	bne.n	8006ba2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006bc8:	4b52      	ldr	r3, [pc, #328]	@ (8006d14 <HAL_RCC_OscConfig+0x618>)
 8006bca:	68da      	ldr	r2, [r3, #12]
 8006bcc:	4b52      	ldr	r3, [pc, #328]	@ (8006d18 <HAL_RCC_OscConfig+0x61c>)
 8006bce:	4013      	ands	r3, r2
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	6a11      	ldr	r1, [r2, #32]
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006bd8:	3a01      	subs	r2, #1
 8006bda:	0112      	lsls	r2, r2, #4
 8006bdc:	4311      	orrs	r1, r2
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006be2:	0212      	lsls	r2, r2, #8
 8006be4:	4311      	orrs	r1, r2
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006bea:	0852      	lsrs	r2, r2, #1
 8006bec:	3a01      	subs	r2, #1
 8006bee:	0552      	lsls	r2, r2, #21
 8006bf0:	4311      	orrs	r1, r2
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006bf6:	0852      	lsrs	r2, r2, #1
 8006bf8:	3a01      	subs	r2, #1
 8006bfa:	0652      	lsls	r2, r2, #25
 8006bfc:	4311      	orrs	r1, r2
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006c02:	06d2      	lsls	r2, r2, #27
 8006c04:	430a      	orrs	r2, r1
 8006c06:	4943      	ldr	r1, [pc, #268]	@ (8006d14 <HAL_RCC_OscConfig+0x618>)
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c0c:	4b41      	ldr	r3, [pc, #260]	@ (8006d14 <HAL_RCC_OscConfig+0x618>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a40      	ldr	r2, [pc, #256]	@ (8006d14 <HAL_RCC_OscConfig+0x618>)
 8006c12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c16:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006c18:	4b3e      	ldr	r3, [pc, #248]	@ (8006d14 <HAL_RCC_OscConfig+0x618>)
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	4a3d      	ldr	r2, [pc, #244]	@ (8006d14 <HAL_RCC_OscConfig+0x618>)
 8006c1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c22:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c24:	f7fd fd92 	bl	800474c <HAL_GetTick>
 8006c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c2a:	e008      	b.n	8006c3e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c2c:	f7fd fd8e 	bl	800474c <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d901      	bls.n	8006c3e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e066      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c3e:	4b35      	ldr	r3, [pc, #212]	@ (8006d14 <HAL_RCC_OscConfig+0x618>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d0f0      	beq.n	8006c2c <HAL_RCC_OscConfig+0x530>
 8006c4a:	e05e      	b.n	8006d0a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c4c:	4b31      	ldr	r3, [pc, #196]	@ (8006d14 <HAL_RCC_OscConfig+0x618>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a30      	ldr	r2, [pc, #192]	@ (8006d14 <HAL_RCC_OscConfig+0x618>)
 8006c52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c58:	f7fd fd78 	bl	800474c <HAL_GetTick>
 8006c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c5e:	e008      	b.n	8006c72 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c60:	f7fd fd74 	bl	800474c <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d901      	bls.n	8006c72 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e04c      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c72:	4b28      	ldr	r3, [pc, #160]	@ (8006d14 <HAL_RCC_OscConfig+0x618>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1f0      	bne.n	8006c60 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006c7e:	4b25      	ldr	r3, [pc, #148]	@ (8006d14 <HAL_RCC_OscConfig+0x618>)
 8006c80:	68da      	ldr	r2, [r3, #12]
 8006c82:	4924      	ldr	r1, [pc, #144]	@ (8006d14 <HAL_RCC_OscConfig+0x618>)
 8006c84:	4b25      	ldr	r3, [pc, #148]	@ (8006d1c <HAL_RCC_OscConfig+0x620>)
 8006c86:	4013      	ands	r3, r2
 8006c88:	60cb      	str	r3, [r1, #12]
 8006c8a:	e03e      	b.n	8006d0a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	69db      	ldr	r3, [r3, #28]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d101      	bne.n	8006c98 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e039      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006c98:	4b1e      	ldr	r3, [pc, #120]	@ (8006d14 <HAL_RCC_OscConfig+0x618>)
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	f003 0203 	and.w	r2, r3, #3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6a1b      	ldr	r3, [r3, #32]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d12c      	bne.n	8006d06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d123      	bne.n	8006d06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d11b      	bne.n	8006d06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d113      	bne.n	8006d06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ce8:	085b      	lsrs	r3, r3, #1
 8006cea:	3b01      	subs	r3, #1
 8006cec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d109      	bne.n	8006d06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cfc:	085b      	lsrs	r3, r3, #1
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d001      	beq.n	8006d0a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e000      	b.n	8006d0c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3720      	adds	r7, #32
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	40021000 	.word	0x40021000
 8006d18:	019f800c 	.word	0x019f800c
 8006d1c:	feeefffc 	.word	0xfeeefffc

08006d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d101      	bne.n	8006d38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e11e      	b.n	8006f76 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d38:	4b91      	ldr	r3, [pc, #580]	@ (8006f80 <HAL_RCC_ClockConfig+0x260>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 030f 	and.w	r3, r3, #15
 8006d40:	683a      	ldr	r2, [r7, #0]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d910      	bls.n	8006d68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d46:	4b8e      	ldr	r3, [pc, #568]	@ (8006f80 <HAL_RCC_ClockConfig+0x260>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f023 020f 	bic.w	r2, r3, #15
 8006d4e:	498c      	ldr	r1, [pc, #560]	@ (8006f80 <HAL_RCC_ClockConfig+0x260>)
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d56:	4b8a      	ldr	r3, [pc, #552]	@ (8006f80 <HAL_RCC_ClockConfig+0x260>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 030f 	and.w	r3, r3, #15
 8006d5e:	683a      	ldr	r2, [r7, #0]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d001      	beq.n	8006d68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e106      	b.n	8006f76 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 0301 	and.w	r3, r3, #1
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d073      	beq.n	8006e5c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	2b03      	cmp	r3, #3
 8006d7a:	d129      	bne.n	8006dd0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d7c:	4b81      	ldr	r3, [pc, #516]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e0f4      	b.n	8006f76 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006d8c:	f000 f99e 	bl	80070cc <RCC_GetSysClockFreqFromPLLSource>
 8006d90:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	4a7c      	ldr	r2, [pc, #496]	@ (8006f88 <HAL_RCC_ClockConfig+0x268>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d93f      	bls.n	8006e1a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006d9a:	4b7a      	ldr	r3, [pc, #488]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d009      	beq.n	8006dba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d033      	beq.n	8006e1a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d12f      	bne.n	8006e1a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006dba:	4b72      	ldr	r3, [pc, #456]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006dc2:	4a70      	ldr	r2, [pc, #448]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006dc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dc8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006dca:	2380      	movs	r3, #128	@ 0x80
 8006dcc:	617b      	str	r3, [r7, #20]
 8006dce:	e024      	b.n	8006e1a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d107      	bne.n	8006de8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006dd8:	4b6a      	ldr	r3, [pc, #424]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d109      	bne.n	8006df8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e0c6      	b.n	8006f76 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006de8:	4b66      	ldr	r3, [pc, #408]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d101      	bne.n	8006df8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e0be      	b.n	8006f76 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006df8:	f000 f8ce 	bl	8006f98 <HAL_RCC_GetSysClockFreq>
 8006dfc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	4a61      	ldr	r2, [pc, #388]	@ (8006f88 <HAL_RCC_ClockConfig+0x268>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d909      	bls.n	8006e1a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006e06:	4b5f      	ldr	r3, [pc, #380]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e0e:	4a5d      	ldr	r2, [pc, #372]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006e10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e14:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006e16:	2380      	movs	r3, #128	@ 0x80
 8006e18:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e1a:	4b5a      	ldr	r3, [pc, #360]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f023 0203 	bic.w	r2, r3, #3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	4957      	ldr	r1, [pc, #348]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e2c:	f7fd fc8e 	bl	800474c <HAL_GetTick>
 8006e30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e32:	e00a      	b.n	8006e4a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e34:	f7fd fc8a 	bl	800474c <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d901      	bls.n	8006e4a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e095      	b.n	8006f76 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e4a:	4b4e      	ldr	r3, [pc, #312]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	f003 020c 	and.w	r2, r3, #12
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	009b      	lsls	r3, r3, #2
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d1eb      	bne.n	8006e34 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0302 	and.w	r3, r3, #2
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d023      	beq.n	8006eb0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 0304 	and.w	r3, r3, #4
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d005      	beq.n	8006e80 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e74:	4b43      	ldr	r3, [pc, #268]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	4a42      	ldr	r2, [pc, #264]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006e7a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006e7e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 0308 	and.w	r3, r3, #8
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d007      	beq.n	8006e9c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006e8c:	4b3d      	ldr	r3, [pc, #244]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006e94:	4a3b      	ldr	r2, [pc, #236]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006e96:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006e9a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e9c:	4b39      	ldr	r3, [pc, #228]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	4936      	ldr	r1, [pc, #216]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	608b      	str	r3, [r1, #8]
 8006eae:	e008      	b.n	8006ec2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	2b80      	cmp	r3, #128	@ 0x80
 8006eb4:	d105      	bne.n	8006ec2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006eb6:	4b33      	ldr	r3, [pc, #204]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	4a32      	ldr	r2, [pc, #200]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006ebc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ec0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ec2:	4b2f      	ldr	r3, [pc, #188]	@ (8006f80 <HAL_RCC_ClockConfig+0x260>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 030f 	and.w	r3, r3, #15
 8006eca:	683a      	ldr	r2, [r7, #0]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d21d      	bcs.n	8006f0c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ed0:	4b2b      	ldr	r3, [pc, #172]	@ (8006f80 <HAL_RCC_ClockConfig+0x260>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f023 020f 	bic.w	r2, r3, #15
 8006ed8:	4929      	ldr	r1, [pc, #164]	@ (8006f80 <HAL_RCC_ClockConfig+0x260>)
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006ee0:	f7fd fc34 	bl	800474c <HAL_GetTick>
 8006ee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ee6:	e00a      	b.n	8006efe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ee8:	f7fd fc30 	bl	800474c <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d901      	bls.n	8006efe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e03b      	b.n	8006f76 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006efe:	4b20      	ldr	r3, [pc, #128]	@ (8006f80 <HAL_RCC_ClockConfig+0x260>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 030f 	and.w	r3, r3, #15
 8006f06:	683a      	ldr	r2, [r7, #0]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d1ed      	bne.n	8006ee8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0304 	and.w	r3, r3, #4
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d008      	beq.n	8006f2a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f18:	4b1a      	ldr	r3, [pc, #104]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	4917      	ldr	r1, [pc, #92]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006f26:	4313      	orrs	r3, r2
 8006f28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 0308 	and.w	r3, r3, #8
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d009      	beq.n	8006f4a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f36:	4b13      	ldr	r3, [pc, #76]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	00db      	lsls	r3, r3, #3
 8006f44:	490f      	ldr	r1, [pc, #60]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006f46:	4313      	orrs	r3, r2
 8006f48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006f4a:	f000 f825 	bl	8006f98 <HAL_RCC_GetSysClockFreq>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	4b0c      	ldr	r3, [pc, #48]	@ (8006f84 <HAL_RCC_ClockConfig+0x264>)
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	091b      	lsrs	r3, r3, #4
 8006f56:	f003 030f 	and.w	r3, r3, #15
 8006f5a:	490c      	ldr	r1, [pc, #48]	@ (8006f8c <HAL_RCC_ClockConfig+0x26c>)
 8006f5c:	5ccb      	ldrb	r3, [r1, r3]
 8006f5e:	f003 031f 	and.w	r3, r3, #31
 8006f62:	fa22 f303 	lsr.w	r3, r2, r3
 8006f66:	4a0a      	ldr	r2, [pc, #40]	@ (8006f90 <HAL_RCC_ClockConfig+0x270>)
 8006f68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8006f94 <HAL_RCC_ClockConfig+0x274>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f7fd fba0 	bl	80046b4 <HAL_InitTick>
 8006f74:	4603      	mov	r3, r0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3718      	adds	r7, #24
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	40022000 	.word	0x40022000
 8006f84:	40021000 	.word	0x40021000
 8006f88:	04c4b400 	.word	0x04c4b400
 8006f8c:	0800b980 	.word	0x0800b980
 8006f90:	20000240 	.word	0x20000240
 8006f94:	20000244 	.word	0x20000244

08006f98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b087      	sub	sp, #28
 8006f9c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006f9e:	4b2c      	ldr	r3, [pc, #176]	@ (8007050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f003 030c 	and.w	r3, r3, #12
 8006fa6:	2b04      	cmp	r3, #4
 8006fa8:	d102      	bne.n	8006fb0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006faa:	4b2a      	ldr	r3, [pc, #168]	@ (8007054 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006fac:	613b      	str	r3, [r7, #16]
 8006fae:	e047      	b.n	8007040 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006fb0:	4b27      	ldr	r3, [pc, #156]	@ (8007050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	f003 030c 	and.w	r3, r3, #12
 8006fb8:	2b08      	cmp	r3, #8
 8006fba:	d102      	bne.n	8006fc2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006fbc:	4b26      	ldr	r3, [pc, #152]	@ (8007058 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006fbe:	613b      	str	r3, [r7, #16]
 8006fc0:	e03e      	b.n	8007040 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006fc2:	4b23      	ldr	r3, [pc, #140]	@ (8007050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	f003 030c 	and.w	r3, r3, #12
 8006fca:	2b0c      	cmp	r3, #12
 8006fcc:	d136      	bne.n	800703c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006fce:	4b20      	ldr	r3, [pc, #128]	@ (8007050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	f003 0303 	and.w	r3, r3, #3
 8006fd6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8007050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	091b      	lsrs	r3, r3, #4
 8006fde:	f003 030f 	and.w	r3, r3, #15
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2b03      	cmp	r3, #3
 8006fea:	d10c      	bne.n	8007006 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006fec:	4a1a      	ldr	r2, [pc, #104]	@ (8007058 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ff4:	4a16      	ldr	r2, [pc, #88]	@ (8007050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ff6:	68d2      	ldr	r2, [r2, #12]
 8006ff8:	0a12      	lsrs	r2, r2, #8
 8006ffa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006ffe:	fb02 f303 	mul.w	r3, r2, r3
 8007002:	617b      	str	r3, [r7, #20]
      break;
 8007004:	e00c      	b.n	8007020 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007006:	4a13      	ldr	r2, [pc, #76]	@ (8007054 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	fbb2 f3f3 	udiv	r3, r2, r3
 800700e:	4a10      	ldr	r2, [pc, #64]	@ (8007050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007010:	68d2      	ldr	r2, [r2, #12]
 8007012:	0a12      	lsrs	r2, r2, #8
 8007014:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007018:	fb02 f303 	mul.w	r3, r2, r3
 800701c:	617b      	str	r3, [r7, #20]
      break;
 800701e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007020:	4b0b      	ldr	r3, [pc, #44]	@ (8007050 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	0e5b      	lsrs	r3, r3, #25
 8007026:	f003 0303 	and.w	r3, r3, #3
 800702a:	3301      	adds	r3, #1
 800702c:	005b      	lsls	r3, r3, #1
 800702e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007030:	697a      	ldr	r2, [r7, #20]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	fbb2 f3f3 	udiv	r3, r2, r3
 8007038:	613b      	str	r3, [r7, #16]
 800703a:	e001      	b.n	8007040 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800703c:	2300      	movs	r3, #0
 800703e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007040:	693b      	ldr	r3, [r7, #16]
}
 8007042:	4618      	mov	r0, r3
 8007044:	371c      	adds	r7, #28
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	40021000 	.word	0x40021000
 8007054:	00f42400 	.word	0x00f42400
 8007058:	016e3600 	.word	0x016e3600

0800705c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800705c:	b480      	push	{r7}
 800705e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007060:	4b03      	ldr	r3, [pc, #12]	@ (8007070 <HAL_RCC_GetHCLKFreq+0x14>)
 8007062:	681b      	ldr	r3, [r3, #0]
}
 8007064:	4618      	mov	r0, r3
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	20000240 	.word	0x20000240

08007074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007078:	f7ff fff0 	bl	800705c <HAL_RCC_GetHCLKFreq>
 800707c:	4602      	mov	r2, r0
 800707e:	4b06      	ldr	r3, [pc, #24]	@ (8007098 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	0a1b      	lsrs	r3, r3, #8
 8007084:	f003 0307 	and.w	r3, r3, #7
 8007088:	4904      	ldr	r1, [pc, #16]	@ (800709c <HAL_RCC_GetPCLK1Freq+0x28>)
 800708a:	5ccb      	ldrb	r3, [r1, r3]
 800708c:	f003 031f 	and.w	r3, r3, #31
 8007090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007094:	4618      	mov	r0, r3
 8007096:	bd80      	pop	{r7, pc}
 8007098:	40021000 	.word	0x40021000
 800709c:	0800b990 	.word	0x0800b990

080070a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80070a4:	f7ff ffda 	bl	800705c <HAL_RCC_GetHCLKFreq>
 80070a8:	4602      	mov	r2, r0
 80070aa:	4b06      	ldr	r3, [pc, #24]	@ (80070c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	0adb      	lsrs	r3, r3, #11
 80070b0:	f003 0307 	and.w	r3, r3, #7
 80070b4:	4904      	ldr	r1, [pc, #16]	@ (80070c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80070b6:	5ccb      	ldrb	r3, [r1, r3]
 80070b8:	f003 031f 	and.w	r3, r3, #31
 80070bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	40021000 	.word	0x40021000
 80070c8:	0800b990 	.word	0x0800b990

080070cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b087      	sub	sp, #28
 80070d0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80070d2:	4b1e      	ldr	r3, [pc, #120]	@ (800714c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	f003 0303 	and.w	r3, r3, #3
 80070da:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80070dc:	4b1b      	ldr	r3, [pc, #108]	@ (800714c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	091b      	lsrs	r3, r3, #4
 80070e2:	f003 030f 	and.w	r3, r3, #15
 80070e6:	3301      	adds	r3, #1
 80070e8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	2b03      	cmp	r3, #3
 80070ee:	d10c      	bne.n	800710a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80070f0:	4a17      	ldr	r2, [pc, #92]	@ (8007150 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070f8:	4a14      	ldr	r2, [pc, #80]	@ (800714c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80070fa:	68d2      	ldr	r2, [r2, #12]
 80070fc:	0a12      	lsrs	r2, r2, #8
 80070fe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007102:	fb02 f303 	mul.w	r3, r2, r3
 8007106:	617b      	str	r3, [r7, #20]
    break;
 8007108:	e00c      	b.n	8007124 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800710a:	4a12      	ldr	r2, [pc, #72]	@ (8007154 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007112:	4a0e      	ldr	r2, [pc, #56]	@ (800714c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007114:	68d2      	ldr	r2, [r2, #12]
 8007116:	0a12      	lsrs	r2, r2, #8
 8007118:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800711c:	fb02 f303 	mul.w	r3, r2, r3
 8007120:	617b      	str	r3, [r7, #20]
    break;
 8007122:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007124:	4b09      	ldr	r3, [pc, #36]	@ (800714c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	0e5b      	lsrs	r3, r3, #25
 800712a:	f003 0303 	and.w	r3, r3, #3
 800712e:	3301      	adds	r3, #1
 8007130:	005b      	lsls	r3, r3, #1
 8007132:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007134:	697a      	ldr	r2, [r7, #20]
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	fbb2 f3f3 	udiv	r3, r2, r3
 800713c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800713e:	687b      	ldr	r3, [r7, #4]
}
 8007140:	4618      	mov	r0, r3
 8007142:	371c      	adds	r7, #28
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr
 800714c:	40021000 	.word	0x40021000
 8007150:	016e3600 	.word	0x016e3600
 8007154:	00f42400 	.word	0x00f42400

08007158 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b086      	sub	sp, #24
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007160:	2300      	movs	r3, #0
 8007162:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007164:	2300      	movs	r3, #0
 8007166:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007170:	2b00      	cmp	r3, #0
 8007172:	f000 8098 	beq.w	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007176:	2300      	movs	r3, #0
 8007178:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800717a:	4b43      	ldr	r3, [pc, #268]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800717c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800717e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d10d      	bne.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007186:	4b40      	ldr	r3, [pc, #256]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800718a:	4a3f      	ldr	r2, [pc, #252]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800718c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007190:	6593      	str	r3, [r2, #88]	@ 0x58
 8007192:	4b3d      	ldr	r3, [pc, #244]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800719a:	60bb      	str	r3, [r7, #8]
 800719c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800719e:	2301      	movs	r3, #1
 80071a0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071a2:	4b3a      	ldr	r3, [pc, #232]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a39      	ldr	r2, [pc, #228]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80071a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80071ae:	f7fd facd 	bl	800474c <HAL_GetTick>
 80071b2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071b4:	e009      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071b6:	f7fd fac9 	bl	800474c <HAL_GetTick>
 80071ba:	4602      	mov	r2, r0
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d902      	bls.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80071c4:	2303      	movs	r3, #3
 80071c6:	74fb      	strb	r3, [r7, #19]
        break;
 80071c8:	e005      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071ca:	4b30      	ldr	r3, [pc, #192]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d0ef      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80071d6:	7cfb      	ldrb	r3, [r7, #19]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d159      	bne.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80071dc:	4b2a      	ldr	r3, [pc, #168]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071e6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d01e      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d019      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80071f8:	4b23      	ldr	r3, [pc, #140]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007202:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007204:	4b20      	ldr	r3, [pc, #128]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800720a:	4a1f      	ldr	r2, [pc, #124]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800720c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007210:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007214:	4b1c      	ldr	r3, [pc, #112]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800721a:	4a1b      	ldr	r2, [pc, #108]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800721c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007220:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007224:	4a18      	ldr	r2, [pc, #96]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	f003 0301 	and.w	r3, r3, #1
 8007232:	2b00      	cmp	r3, #0
 8007234:	d016      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007236:	f7fd fa89 	bl	800474c <HAL_GetTick>
 800723a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800723c:	e00b      	b.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800723e:	f7fd fa85 	bl	800474c <HAL_GetTick>
 8007242:	4602      	mov	r2, r0
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	f241 3288 	movw	r2, #5000	@ 0x1388
 800724c:	4293      	cmp	r3, r2
 800724e:	d902      	bls.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007250:	2303      	movs	r3, #3
 8007252:	74fb      	strb	r3, [r7, #19]
            break;
 8007254:	e006      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007256:	4b0c      	ldr	r3, [pc, #48]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800725c:	f003 0302 	and.w	r3, r3, #2
 8007260:	2b00      	cmp	r3, #0
 8007262:	d0ec      	beq.n	800723e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007264:	7cfb      	ldrb	r3, [r7, #19]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10b      	bne.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800726a:	4b07      	ldr	r3, [pc, #28]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800726c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007270:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007278:	4903      	ldr	r1, [pc, #12]	@ (8007288 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800727a:	4313      	orrs	r3, r2
 800727c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007280:	e008      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007282:	7cfb      	ldrb	r3, [r7, #19]
 8007284:	74bb      	strb	r3, [r7, #18]
 8007286:	e005      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007288:	40021000 	.word	0x40021000
 800728c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007290:	7cfb      	ldrb	r3, [r7, #19]
 8007292:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007294:	7c7b      	ldrb	r3, [r7, #17]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d105      	bne.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800729a:	4ba7      	ldr	r3, [pc, #668]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800729c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800729e:	4aa6      	ldr	r2, [pc, #664]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80072a4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 0301 	and.w	r3, r3, #1
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00a      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80072b2:	4ba1      	ldr	r3, [pc, #644]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072b8:	f023 0203 	bic.w	r2, r3, #3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	499d      	ldr	r1, [pc, #628]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072c2:	4313      	orrs	r3, r2
 80072c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0302 	and.w	r3, r3, #2
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00a      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80072d4:	4b98      	ldr	r3, [pc, #608]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072da:	f023 020c 	bic.w	r2, r3, #12
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	4995      	ldr	r1, [pc, #596]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072e4:	4313      	orrs	r3, r2
 80072e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0304 	and.w	r3, r3, #4
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00a      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80072f6:	4b90      	ldr	r3, [pc, #576]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072fc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	498c      	ldr	r1, [pc, #560]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007306:	4313      	orrs	r3, r2
 8007308:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f003 0308 	and.w	r3, r3, #8
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00a      	beq.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007318:	4b87      	ldr	r3, [pc, #540]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800731a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800731e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	4984      	ldr	r1, [pc, #528]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007328:	4313      	orrs	r3, r2
 800732a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 0310 	and.w	r3, r3, #16
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00a      	beq.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800733a:	4b7f      	ldr	r3, [pc, #508]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800733c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007340:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	695b      	ldr	r3, [r3, #20]
 8007348:	497b      	ldr	r1, [pc, #492]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800734a:	4313      	orrs	r3, r2
 800734c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 0320 	and.w	r3, r3, #32
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00a      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800735c:	4b76      	ldr	r3, [pc, #472]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800735e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007362:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	4973      	ldr	r1, [pc, #460]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800736c:	4313      	orrs	r3, r2
 800736e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00a      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800737e:	4b6e      	ldr	r3, [pc, #440]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007384:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	69db      	ldr	r3, [r3, #28]
 800738c:	496a      	ldr	r1, [pc, #424]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800738e:	4313      	orrs	r3, r2
 8007390:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00a      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80073a0:	4b65      	ldr	r3, [pc, #404]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073a6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	4962      	ldr	r1, [pc, #392]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073b0:	4313      	orrs	r3, r2
 80073b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00a      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80073c2:	4b5d      	ldr	r3, [pc, #372]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d0:	4959      	ldr	r1, [pc, #356]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073d2:	4313      	orrs	r3, r2
 80073d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00a      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80073e4:	4b54      	ldr	r3, [pc, #336]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80073ea:	f023 0203 	bic.w	r2, r3, #3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073f2:	4951      	ldr	r1, [pc, #324]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073f4:	4313      	orrs	r3, r2
 80073f6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00a      	beq.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007406:	4b4c      	ldr	r3, [pc, #304]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800740c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007414:	4948      	ldr	r1, [pc, #288]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007416:	4313      	orrs	r3, r2
 8007418:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007424:	2b00      	cmp	r3, #0
 8007426:	d015      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007428:	4b43      	ldr	r3, [pc, #268]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800742a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800742e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007436:	4940      	ldr	r1, [pc, #256]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007438:	4313      	orrs	r3, r2
 800743a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007442:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007446:	d105      	bne.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007448:	4b3b      	ldr	r3, [pc, #236]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	4a3a      	ldr	r2, [pc, #232]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800744e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007452:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800745c:	2b00      	cmp	r3, #0
 800745e:	d015      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007460:	4b35      	ldr	r3, [pc, #212]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007466:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800746e:	4932      	ldr	r1, [pc, #200]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007470:	4313      	orrs	r3, r2
 8007472:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800747a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800747e:	d105      	bne.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007480:	4b2d      	ldr	r3, [pc, #180]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	4a2c      	ldr	r2, [pc, #176]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007486:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800748a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007494:	2b00      	cmp	r3, #0
 8007496:	d015      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007498:	4b27      	ldr	r3, [pc, #156]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800749a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800749e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074a6:	4924      	ldr	r1, [pc, #144]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074a8:	4313      	orrs	r3, r2
 80074aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80074b6:	d105      	bne.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074b8:	4b1f      	ldr	r3, [pc, #124]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	4a1e      	ldr	r2, [pc, #120]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074c2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d015      	beq.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80074d0:	4b19      	ldr	r3, [pc, #100]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074de:	4916      	ldr	r1, [pc, #88]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074ee:	d105      	bne.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074f0:	4b11      	ldr	r3, [pc, #68]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	4a10      	ldr	r2, [pc, #64]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074fa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007504:	2b00      	cmp	r3, #0
 8007506:	d019      	beq.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007508:	4b0b      	ldr	r3, [pc, #44]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800750a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800750e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007516:	4908      	ldr	r1, [pc, #32]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007518:	4313      	orrs	r3, r2
 800751a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007522:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007526:	d109      	bne.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007528:	4b03      	ldr	r3, [pc, #12]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	4a02      	ldr	r2, [pc, #8]	@ (8007538 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800752e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007532:	60d3      	str	r3, [r2, #12]
 8007534:	e002      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007536:	bf00      	nop
 8007538:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d015      	beq.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007548:	4b29      	ldr	r3, [pc, #164]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800754a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800754e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007556:	4926      	ldr	r1, [pc, #152]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007558:	4313      	orrs	r3, r2
 800755a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007562:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007566:	d105      	bne.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007568:	4b21      	ldr	r3, [pc, #132]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	4a20      	ldr	r2, [pc, #128]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800756e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007572:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800757c:	2b00      	cmp	r3, #0
 800757e:	d015      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007580:	4b1b      	ldr	r3, [pc, #108]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007586:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800758e:	4918      	ldr	r1, [pc, #96]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007590:	4313      	orrs	r3, r2
 8007592:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800759a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800759e:	d105      	bne.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80075a0:	4b13      	ldr	r3, [pc, #76]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	4a12      	ldr	r2, [pc, #72]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075aa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d015      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80075b8:	4b0d      	ldr	r3, [pc, #52]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80075be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075c6:	490a      	ldr	r1, [pc, #40]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075c8:	4313      	orrs	r3, r2
 80075ca:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80075d6:	d105      	bne.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075d8:	4b05      	ldr	r3, [pc, #20]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	4a04      	ldr	r2, [pc, #16]	@ (80075f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075e2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80075e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3718      	adds	r7, #24
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	40021000 	.word	0x40021000

080075f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d101      	bne.n	8007606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e054      	b.n	80076b0 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b00      	cmp	r3, #0
 8007610:	d111      	bne.n	8007636 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f001 ff3a 	bl	8009494 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007624:	2b00      	cmp	r3, #0
 8007626:	d102      	bne.n	800762e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a23      	ldr	r2, [pc, #140]	@ (80076b8 <HAL_TIM_Base_Init+0xc4>)
 800762c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2202      	movs	r2, #2
 800763a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	3304      	adds	r3, #4
 8007646:	4619      	mov	r1, r3
 8007648:	4610      	mov	r0, r2
 800764a:	f001 fa83 	bl	8008b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2201      	movs	r2, #1
 8007662:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2201      	movs	r2, #1
 800767a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2201      	movs	r2, #1
 8007682:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2201      	movs	r2, #1
 800768a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2201      	movs	r2, #1
 8007692:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2201      	movs	r2, #1
 800769a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2201      	movs	r2, #1
 80076a2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2201      	movs	r2, #1
 80076aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3708      	adds	r7, #8
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	080041b1 	.word	0x080041b1

080076bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80076bc:	b480      	push	{r7}
 80076be:	b085      	sub	sp, #20
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d001      	beq.n	80076d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	e04c      	b.n	800776e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2202      	movs	r2, #2
 80076d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a26      	ldr	r2, [pc, #152]	@ (800777c <HAL_TIM_Base_Start+0xc0>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d022      	beq.n	800772c <HAL_TIM_Base_Start+0x70>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076ee:	d01d      	beq.n	800772c <HAL_TIM_Base_Start+0x70>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a22      	ldr	r2, [pc, #136]	@ (8007780 <HAL_TIM_Base_Start+0xc4>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d018      	beq.n	800772c <HAL_TIM_Base_Start+0x70>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a21      	ldr	r2, [pc, #132]	@ (8007784 <HAL_TIM_Base_Start+0xc8>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d013      	beq.n	800772c <HAL_TIM_Base_Start+0x70>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a1f      	ldr	r2, [pc, #124]	@ (8007788 <HAL_TIM_Base_Start+0xcc>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d00e      	beq.n	800772c <HAL_TIM_Base_Start+0x70>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a1e      	ldr	r2, [pc, #120]	@ (800778c <HAL_TIM_Base_Start+0xd0>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d009      	beq.n	800772c <HAL_TIM_Base_Start+0x70>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a1c      	ldr	r2, [pc, #112]	@ (8007790 <HAL_TIM_Base_Start+0xd4>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d004      	beq.n	800772c <HAL_TIM_Base_Start+0x70>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a1b      	ldr	r2, [pc, #108]	@ (8007794 <HAL_TIM_Base_Start+0xd8>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d115      	bne.n	8007758 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	689a      	ldr	r2, [r3, #8]
 8007732:	4b19      	ldr	r3, [pc, #100]	@ (8007798 <HAL_TIM_Base_Start+0xdc>)
 8007734:	4013      	ands	r3, r2
 8007736:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2b06      	cmp	r3, #6
 800773c:	d015      	beq.n	800776a <HAL_TIM_Base_Start+0xae>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007744:	d011      	beq.n	800776a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f042 0201 	orr.w	r2, r2, #1
 8007754:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007756:	e008      	b.n	800776a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f042 0201 	orr.w	r2, r2, #1
 8007766:	601a      	str	r2, [r3, #0]
 8007768:	e000      	b.n	800776c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800776a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3714      	adds	r7, #20
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	40012c00 	.word	0x40012c00
 8007780:	40000400 	.word	0x40000400
 8007784:	40000800 	.word	0x40000800
 8007788:	40000c00 	.word	0x40000c00
 800778c:	40013400 	.word	0x40013400
 8007790:	40014000 	.word	0x40014000
 8007794:	40015000 	.word	0x40015000
 8007798:	00010007 	.word	0x00010007

0800779c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800779c:	b480      	push	{r7}
 800779e:	b085      	sub	sp, #20
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d001      	beq.n	80077b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	e054      	b.n	800785e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2202      	movs	r2, #2
 80077b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68da      	ldr	r2, [r3, #12]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f042 0201 	orr.w	r2, r2, #1
 80077ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a26      	ldr	r2, [pc, #152]	@ (800786c <HAL_TIM_Base_Start_IT+0xd0>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d022      	beq.n	800781c <HAL_TIM_Base_Start_IT+0x80>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077de:	d01d      	beq.n	800781c <HAL_TIM_Base_Start_IT+0x80>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a22      	ldr	r2, [pc, #136]	@ (8007870 <HAL_TIM_Base_Start_IT+0xd4>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d018      	beq.n	800781c <HAL_TIM_Base_Start_IT+0x80>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a21      	ldr	r2, [pc, #132]	@ (8007874 <HAL_TIM_Base_Start_IT+0xd8>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d013      	beq.n	800781c <HAL_TIM_Base_Start_IT+0x80>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a1f      	ldr	r2, [pc, #124]	@ (8007878 <HAL_TIM_Base_Start_IT+0xdc>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d00e      	beq.n	800781c <HAL_TIM_Base_Start_IT+0x80>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a1e      	ldr	r2, [pc, #120]	@ (800787c <HAL_TIM_Base_Start_IT+0xe0>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d009      	beq.n	800781c <HAL_TIM_Base_Start_IT+0x80>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a1c      	ldr	r2, [pc, #112]	@ (8007880 <HAL_TIM_Base_Start_IT+0xe4>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d004      	beq.n	800781c <HAL_TIM_Base_Start_IT+0x80>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a1b      	ldr	r2, [pc, #108]	@ (8007884 <HAL_TIM_Base_Start_IT+0xe8>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d115      	bne.n	8007848 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	689a      	ldr	r2, [r3, #8]
 8007822:	4b19      	ldr	r3, [pc, #100]	@ (8007888 <HAL_TIM_Base_Start_IT+0xec>)
 8007824:	4013      	ands	r3, r2
 8007826:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2b06      	cmp	r3, #6
 800782c:	d015      	beq.n	800785a <HAL_TIM_Base_Start_IT+0xbe>
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007834:	d011      	beq.n	800785a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f042 0201 	orr.w	r2, r2, #1
 8007844:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007846:	e008      	b.n	800785a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f042 0201 	orr.w	r2, r2, #1
 8007856:	601a      	str	r2, [r3, #0]
 8007858:	e000      	b.n	800785c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800785a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3714      	adds	r7, #20
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	40012c00 	.word	0x40012c00
 8007870:	40000400 	.word	0x40000400
 8007874:	40000800 	.word	0x40000800
 8007878:	40000c00 	.word	0x40000c00
 800787c:	40013400 	.word	0x40013400
 8007880:	40014000 	.word	0x40014000
 8007884:	40015000 	.word	0x40015000
 8007888:	00010007 	.word	0x00010007

0800788c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d101      	bne.n	800789e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e054      	b.n	8007948 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d111      	bne.n	80078ce <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f001 fdee 	bl	8009494 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d102      	bne.n	80078c6 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a23      	ldr	r2, [pc, #140]	@ (8007950 <HAL_TIM_PWM_Init+0xc4>)
 80078c4:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2202      	movs	r2, #2
 80078d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	3304      	adds	r3, #4
 80078de:	4619      	mov	r1, r3
 80078e0:	4610      	mov	r0, r2
 80078e2:	f001 f937 	bl	8008b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2201      	movs	r2, #1
 80078ea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2201      	movs	r2, #1
 800790a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2201      	movs	r2, #1
 8007912:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2201      	movs	r2, #1
 800791a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2201      	movs	r2, #1
 8007922:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2201      	movs	r2, #1
 800792a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2201      	movs	r2, #1
 8007932:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2201      	movs	r2, #1
 800793a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2201      	movs	r2, #1
 8007942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007946:	2300      	movs	r3, #0
}
 8007948:	4618      	mov	r0, r3
 800794a:	3708      	adds	r7, #8
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	08007955 	.word	0x08007955

08007954 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800795c:	bf00      	nop
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007972:	2300      	movs	r3, #0
 8007974:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d109      	bne.n	8007990 <HAL_TIM_PWM_Start_IT+0x28>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007982:	b2db      	uxtb	r3, r3
 8007984:	2b01      	cmp	r3, #1
 8007986:	bf14      	ite	ne
 8007988:	2301      	movne	r3, #1
 800798a:	2300      	moveq	r3, #0
 800798c:	b2db      	uxtb	r3, r3
 800798e:	e03c      	b.n	8007a0a <HAL_TIM_PWM_Start_IT+0xa2>
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	2b04      	cmp	r3, #4
 8007994:	d109      	bne.n	80079aa <HAL_TIM_PWM_Start_IT+0x42>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800799c:	b2db      	uxtb	r3, r3
 800799e:	2b01      	cmp	r3, #1
 80079a0:	bf14      	ite	ne
 80079a2:	2301      	movne	r3, #1
 80079a4:	2300      	moveq	r3, #0
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	e02f      	b.n	8007a0a <HAL_TIM_PWM_Start_IT+0xa2>
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	2b08      	cmp	r3, #8
 80079ae:	d109      	bne.n	80079c4 <HAL_TIM_PWM_Start_IT+0x5c>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	bf14      	ite	ne
 80079bc:	2301      	movne	r3, #1
 80079be:	2300      	moveq	r3, #0
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	e022      	b.n	8007a0a <HAL_TIM_PWM_Start_IT+0xa2>
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	2b0c      	cmp	r3, #12
 80079c8:	d109      	bne.n	80079de <HAL_TIM_PWM_Start_IT+0x76>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	bf14      	ite	ne
 80079d6:	2301      	movne	r3, #1
 80079d8:	2300      	moveq	r3, #0
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	e015      	b.n	8007a0a <HAL_TIM_PWM_Start_IT+0xa2>
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	2b10      	cmp	r3, #16
 80079e2:	d109      	bne.n	80079f8 <HAL_TIM_PWM_Start_IT+0x90>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	bf14      	ite	ne
 80079f0:	2301      	movne	r3, #1
 80079f2:	2300      	moveq	r3, #0
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	e008      	b.n	8007a0a <HAL_TIM_PWM_Start_IT+0xa2>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	bf14      	ite	ne
 8007a04:	2301      	movne	r3, #1
 8007a06:	2300      	moveq	r3, #0
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d001      	beq.n	8007a12 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e0f1      	b.n	8007bf6 <HAL_TIM_PWM_Start_IT+0x28e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d104      	bne.n	8007a22 <HAL_TIM_PWM_Start_IT+0xba>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2202      	movs	r2, #2
 8007a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a20:	e023      	b.n	8007a6a <HAL_TIM_PWM_Start_IT+0x102>
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	2b04      	cmp	r3, #4
 8007a26:	d104      	bne.n	8007a32 <HAL_TIM_PWM_Start_IT+0xca>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2202      	movs	r2, #2
 8007a2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a30:	e01b      	b.n	8007a6a <HAL_TIM_PWM_Start_IT+0x102>
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	2b08      	cmp	r3, #8
 8007a36:	d104      	bne.n	8007a42 <HAL_TIM_PWM_Start_IT+0xda>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2202      	movs	r2, #2
 8007a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a40:	e013      	b.n	8007a6a <HAL_TIM_PWM_Start_IT+0x102>
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	2b0c      	cmp	r3, #12
 8007a46:	d104      	bne.n	8007a52 <HAL_TIM_PWM_Start_IT+0xea>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2202      	movs	r2, #2
 8007a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a50:	e00b      	b.n	8007a6a <HAL_TIM_PWM_Start_IT+0x102>
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	2b10      	cmp	r3, #16
 8007a56:	d104      	bne.n	8007a62 <HAL_TIM_PWM_Start_IT+0xfa>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2202      	movs	r2, #2
 8007a5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a60:	e003      	b.n	8007a6a <HAL_TIM_PWM_Start_IT+0x102>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2202      	movs	r2, #2
 8007a66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	2b0c      	cmp	r3, #12
 8007a6e:	d841      	bhi.n	8007af4 <HAL_TIM_PWM_Start_IT+0x18c>
 8007a70:	a201      	add	r2, pc, #4	@ (adr r2, 8007a78 <HAL_TIM_PWM_Start_IT+0x110>)
 8007a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a76:	bf00      	nop
 8007a78:	08007aad 	.word	0x08007aad
 8007a7c:	08007af5 	.word	0x08007af5
 8007a80:	08007af5 	.word	0x08007af5
 8007a84:	08007af5 	.word	0x08007af5
 8007a88:	08007abf 	.word	0x08007abf
 8007a8c:	08007af5 	.word	0x08007af5
 8007a90:	08007af5 	.word	0x08007af5
 8007a94:	08007af5 	.word	0x08007af5
 8007a98:	08007ad1 	.word	0x08007ad1
 8007a9c:	08007af5 	.word	0x08007af5
 8007aa0:	08007af5 	.word	0x08007af5
 8007aa4:	08007af5 	.word	0x08007af5
 8007aa8:	08007ae3 	.word	0x08007ae3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68da      	ldr	r2, [r3, #12]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f042 0202 	orr.w	r2, r2, #2
 8007aba:	60da      	str	r2, [r3, #12]
      break;
 8007abc:	e01d      	b.n	8007afa <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68da      	ldr	r2, [r3, #12]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f042 0204 	orr.w	r2, r2, #4
 8007acc:	60da      	str	r2, [r3, #12]
      break;
 8007ace:	e014      	b.n	8007afa <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68da      	ldr	r2, [r3, #12]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f042 0208 	orr.w	r2, r2, #8
 8007ade:	60da      	str	r2, [r3, #12]
      break;
 8007ae0:	e00b      	b.n	8007afa <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	68da      	ldr	r2, [r3, #12]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f042 0210 	orr.w	r2, r2, #16
 8007af0:	60da      	str	r2, [r3, #12]
      break;
 8007af2:	e002      	b.n	8007afa <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	73fb      	strb	r3, [r7, #15]
      break;
 8007af8:	bf00      	nop
  }

  if (status == HAL_OK)
 8007afa:	7bfb      	ldrb	r3, [r7, #15]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d179      	bne.n	8007bf4 <HAL_TIM_PWM_Start_IT+0x28c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2201      	movs	r2, #1
 8007b06:	6839      	ldr	r1, [r7, #0]
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f001 fc9d 	bl	8009448 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a3b      	ldr	r2, [pc, #236]	@ (8007c00 <HAL_TIM_PWM_Start_IT+0x298>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d018      	beq.n	8007b4a <HAL_TIM_PWM_Start_IT+0x1e2>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a39      	ldr	r2, [pc, #228]	@ (8007c04 <HAL_TIM_PWM_Start_IT+0x29c>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d013      	beq.n	8007b4a <HAL_TIM_PWM_Start_IT+0x1e2>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a38      	ldr	r2, [pc, #224]	@ (8007c08 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d00e      	beq.n	8007b4a <HAL_TIM_PWM_Start_IT+0x1e2>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a36      	ldr	r2, [pc, #216]	@ (8007c0c <HAL_TIM_PWM_Start_IT+0x2a4>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d009      	beq.n	8007b4a <HAL_TIM_PWM_Start_IT+0x1e2>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a35      	ldr	r2, [pc, #212]	@ (8007c10 <HAL_TIM_PWM_Start_IT+0x2a8>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d004      	beq.n	8007b4a <HAL_TIM_PWM_Start_IT+0x1e2>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a33      	ldr	r2, [pc, #204]	@ (8007c14 <HAL_TIM_PWM_Start_IT+0x2ac>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d101      	bne.n	8007b4e <HAL_TIM_PWM_Start_IT+0x1e6>
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e000      	b.n	8007b50 <HAL_TIM_PWM_Start_IT+0x1e8>
 8007b4e:	2300      	movs	r3, #0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d007      	beq.n	8007b64 <HAL_TIM_PWM_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007b62:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a25      	ldr	r2, [pc, #148]	@ (8007c00 <HAL_TIM_PWM_Start_IT+0x298>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d022      	beq.n	8007bb4 <HAL_TIM_PWM_Start_IT+0x24c>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b76:	d01d      	beq.n	8007bb4 <HAL_TIM_PWM_Start_IT+0x24c>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a26      	ldr	r2, [pc, #152]	@ (8007c18 <HAL_TIM_PWM_Start_IT+0x2b0>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d018      	beq.n	8007bb4 <HAL_TIM_PWM_Start_IT+0x24c>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a25      	ldr	r2, [pc, #148]	@ (8007c1c <HAL_TIM_PWM_Start_IT+0x2b4>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d013      	beq.n	8007bb4 <HAL_TIM_PWM_Start_IT+0x24c>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a23      	ldr	r2, [pc, #140]	@ (8007c20 <HAL_TIM_PWM_Start_IT+0x2b8>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d00e      	beq.n	8007bb4 <HAL_TIM_PWM_Start_IT+0x24c>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a1a      	ldr	r2, [pc, #104]	@ (8007c04 <HAL_TIM_PWM_Start_IT+0x29c>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d009      	beq.n	8007bb4 <HAL_TIM_PWM_Start_IT+0x24c>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a18      	ldr	r2, [pc, #96]	@ (8007c08 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d004      	beq.n	8007bb4 <HAL_TIM_PWM_Start_IT+0x24c>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a19      	ldr	r2, [pc, #100]	@ (8007c14 <HAL_TIM_PWM_Start_IT+0x2ac>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d115      	bne.n	8007be0 <HAL_TIM_PWM_Start_IT+0x278>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	689a      	ldr	r2, [r3, #8]
 8007bba:	4b1a      	ldr	r3, [pc, #104]	@ (8007c24 <HAL_TIM_PWM_Start_IT+0x2bc>)
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	2b06      	cmp	r3, #6
 8007bc4:	d015      	beq.n	8007bf2 <HAL_TIM_PWM_Start_IT+0x28a>
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bcc:	d011      	beq.n	8007bf2 <HAL_TIM_PWM_Start_IT+0x28a>
      {
        __HAL_TIM_ENABLE(htim);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f042 0201 	orr.w	r2, r2, #1
 8007bdc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bde:	e008      	b.n	8007bf2 <HAL_TIM_PWM_Start_IT+0x28a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f042 0201 	orr.w	r2, r2, #1
 8007bee:	601a      	str	r2, [r3, #0]
 8007bf0:	e000      	b.n	8007bf4 <HAL_TIM_PWM_Start_IT+0x28c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bf2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	40012c00 	.word	0x40012c00
 8007c04:	40013400 	.word	0x40013400
 8007c08:	40014000 	.word	0x40014000
 8007c0c:	40014400 	.word	0x40014400
 8007c10:	40014800 	.word	0x40014800
 8007c14:	40015000 	.word	0x40015000
 8007c18:	40000400 	.word	0x40000400
 8007c1c:	40000800 	.word	0x40000800
 8007c20:	40000c00 	.word	0x40000c00
 8007c24:	00010007 	.word	0x00010007

08007c28 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b082      	sub	sp, #8
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d101      	bne.n	8007c3c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e04c      	b.n	8007cd6 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d111      	bne.n	8007c6c <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f001 fc1f 	bl	8009494 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d102      	bne.n	8007c64 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a1f      	ldr	r2, [pc, #124]	@ (8007ce0 <HAL_TIM_OnePulse_Init+0xb8>)
 8007c62:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2202      	movs	r2, #2
 8007c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	3304      	adds	r3, #4
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	4610      	mov	r0, r2
 8007c80:	f000 ff68 	bl	8008b54 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f022 0208 	bic.w	r2, r2, #8
 8007c92:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	6819      	ldr	r1, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	430a      	orrs	r2, r1
 8007ca2:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3708      	adds	r7, #8
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	08007ce5 	.word	0x08007ce5

08007ce4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007cec:	bf00      	nop
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d08:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007d10:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d18:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d20:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d22:	7bfb      	ldrb	r3, [r7, #15]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d108      	bne.n	8007d3a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d28:	7bbb      	ldrb	r3, [r7, #14]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d105      	bne.n	8007d3a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d2e:	7b7b      	ldrb	r3, [r7, #13]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d102      	bne.n	8007d3a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d34:	7b3b      	ldrb	r3, [r7, #12]
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d001      	beq.n	8007d3e <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e059      	b.n	8007df2 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2202      	movs	r2, #2
 8007d42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2202      	movs	r2, #2
 8007d4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2202      	movs	r2, #2
 8007d52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2202      	movs	r2, #2
 8007d5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68da      	ldr	r2, [r3, #12]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f042 0202 	orr.w	r2, r2, #2
 8007d6c:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	68da      	ldr	r2, [r3, #12]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f042 0204 	orr.w	r2, r2, #4
 8007d7c:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2201      	movs	r2, #1
 8007d84:	2100      	movs	r1, #0
 8007d86:	4618      	mov	r0, r3
 8007d88:	f001 fb5e 	bl	8009448 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2201      	movs	r2, #1
 8007d92:	2104      	movs	r1, #4
 8007d94:	4618      	mov	r0, r3
 8007d96:	f001 fb57 	bl	8009448 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a17      	ldr	r2, [pc, #92]	@ (8007dfc <HAL_TIM_OnePulse_Start_IT+0x104>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d018      	beq.n	8007dd6 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a15      	ldr	r2, [pc, #84]	@ (8007e00 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d013      	beq.n	8007dd6 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a14      	ldr	r2, [pc, #80]	@ (8007e04 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d00e      	beq.n	8007dd6 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a12      	ldr	r2, [pc, #72]	@ (8007e08 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d009      	beq.n	8007dd6 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a11      	ldr	r2, [pc, #68]	@ (8007e0c <HAL_TIM_OnePulse_Start_IT+0x114>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d004      	beq.n	8007dd6 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a0f      	ldr	r2, [pc, #60]	@ (8007e10 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d101      	bne.n	8007dda <HAL_TIM_OnePulse_Start_IT+0xe2>
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	e000      	b.n	8007ddc <HAL_TIM_OnePulse_Start_IT+0xe4>
 8007dda:	2300      	movs	r3, #0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d007      	beq.n	8007df0 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007dee:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	40012c00 	.word	0x40012c00
 8007e00:	40013400 	.word	0x40013400
 8007e04:	40014000 	.word	0x40014000
 8007e08:	40014400 	.word	0x40014400
 8007e0c:	40014800 	.word	0x40014800
 8007e10:	40015000 	.word	0x40015000

08007e14 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b086      	sub	sp, #24
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d101      	bne.n	8007e28 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	e0a2      	b.n	8007f6e <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d111      	bne.n	8007e58 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f001 fb29 	bl	8009494 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d102      	bne.n	8007e50 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a4a      	ldr	r2, [pc, #296]	@ (8007f78 <HAL_TIM_Encoder_Init+0x164>)
 8007e4e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	6812      	ldr	r2, [r2, #0]
 8007e6a:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007e6e:	f023 0307 	bic.w	r3, r3, #7
 8007e72:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	3304      	adds	r3, #4
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	4610      	mov	r0, r2
 8007e80:	f000 fe68 	bl	8008b54 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	699b      	ldr	r3, [r3, #24]
 8007e92:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	6a1b      	ldr	r3, [r3, #32]
 8007e9a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	697a      	ldr	r2, [r7, #20]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007eac:	f023 0303 	bic.w	r3, r3, #3
 8007eb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	689a      	ldr	r2, [r3, #8]
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	699b      	ldr	r3, [r3, #24]
 8007eba:	021b      	lsls	r3, r3, #8
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	693a      	ldr	r2, [r7, #16]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007eca:	f023 030c 	bic.w	r3, r3, #12
 8007ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007ed6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007eda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	68da      	ldr	r2, [r3, #12]
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	69db      	ldr	r3, [r3, #28]
 8007ee4:	021b      	lsls	r3, r3, #8
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	011a      	lsls	r2, r3, #4
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	6a1b      	ldr	r3, [r3, #32]
 8007ef8:	031b      	lsls	r3, r3, #12
 8007efa:	4313      	orrs	r3, r2
 8007efc:	693a      	ldr	r2, [r7, #16]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007f08:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007f10:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	685a      	ldr	r2, [r3, #4]
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	695b      	ldr	r3, [r3, #20]
 8007f1a:	011b      	lsls	r3, r3, #4
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	68fa      	ldr	r2, [r7, #12]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	697a      	ldr	r2, [r7, #20]
 8007f2a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	693a      	ldr	r2, [r7, #16]
 8007f32:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3718      	adds	r7, #24
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	08004131 	.word	0x08004131

08007f7c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f8c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007f94:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f9c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007fa4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d110      	bne.n	8007fce <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007fac:	7bfb      	ldrb	r3, [r7, #15]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d102      	bne.n	8007fb8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007fb2:	7b7b      	ldrb	r3, [r7, #13]
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d001      	beq.n	8007fbc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e069      	b.n	8008090 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2202      	movs	r2, #2
 8007fc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007fcc:	e031      	b.n	8008032 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	2b04      	cmp	r3, #4
 8007fd2:	d110      	bne.n	8007ff6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007fd4:	7bbb      	ldrb	r3, [r7, #14]
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d102      	bne.n	8007fe0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007fda:	7b3b      	ldrb	r3, [r7, #12]
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d001      	beq.n	8007fe4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e055      	b.n	8008090 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2202      	movs	r2, #2
 8007fe8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2202      	movs	r2, #2
 8007ff0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ff4:	e01d      	b.n	8008032 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ff6:	7bfb      	ldrb	r3, [r7, #15]
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d108      	bne.n	800800e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ffc:	7bbb      	ldrb	r3, [r7, #14]
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d105      	bne.n	800800e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008002:	7b7b      	ldrb	r3, [r7, #13]
 8008004:	2b01      	cmp	r3, #1
 8008006:	d102      	bne.n	800800e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008008:	7b3b      	ldrb	r3, [r7, #12]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d001      	beq.n	8008012 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e03e      	b.n	8008090 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2202      	movs	r2, #2
 8008016:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2202      	movs	r2, #2
 800801e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2202      	movs	r2, #2
 8008026:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2202      	movs	r2, #2
 800802e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d003      	beq.n	8008040 <HAL_TIM_Encoder_Start+0xc4>
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	2b04      	cmp	r3, #4
 800803c:	d008      	beq.n	8008050 <HAL_TIM_Encoder_Start+0xd4>
 800803e:	e00f      	b.n	8008060 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2201      	movs	r2, #1
 8008046:	2100      	movs	r1, #0
 8008048:	4618      	mov	r0, r3
 800804a:	f001 f9fd 	bl	8009448 <TIM_CCxChannelCmd>
      break;
 800804e:	e016      	b.n	800807e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2201      	movs	r2, #1
 8008056:	2104      	movs	r1, #4
 8008058:	4618      	mov	r0, r3
 800805a:	f001 f9f5 	bl	8009448 <TIM_CCxChannelCmd>
      break;
 800805e:	e00e      	b.n	800807e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2201      	movs	r2, #1
 8008066:	2100      	movs	r1, #0
 8008068:	4618      	mov	r0, r3
 800806a:	f001 f9ed 	bl	8009448 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2201      	movs	r2, #1
 8008074:	2104      	movs	r1, #4
 8008076:	4618      	mov	r0, r3
 8008078:	f001 f9e6 	bl	8009448 <TIM_CCxChannelCmd>
      break;
 800807c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f042 0201 	orr.w	r2, r2, #1
 800808c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800808e:	2300      	movs	r3, #0
}
 8008090:	4618      	mov	r0, r3
 8008092:	3710      	adds	r7, #16
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	f003 0302 	and.w	r3, r3, #2
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d026      	beq.n	8008108 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f003 0302 	and.w	r3, r3, #2
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d021      	beq.n	8008108 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f06f 0202 	mvn.w	r2, #2
 80080cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2201      	movs	r2, #1
 80080d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	699b      	ldr	r3, [r3, #24]
 80080da:	f003 0303 	and.w	r3, r3, #3
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d005      	beq.n	80080ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	4798      	blx	r3
 80080ec:	e009      	b.n	8008102 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	f003 0304 	and.w	r3, r3, #4
 800810e:	2b00      	cmp	r3, #0
 8008110:	d026      	beq.n	8008160 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f003 0304 	and.w	r3, r3, #4
 8008118:	2b00      	cmp	r3, #0
 800811a:	d021      	beq.n	8008160 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f06f 0204 	mvn.w	r2, #4
 8008124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2202      	movs	r2, #2
 800812a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	699b      	ldr	r3, [r3, #24]
 8008132:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008136:	2b00      	cmp	r3, #0
 8008138:	d005      	beq.n	8008146 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	4798      	blx	r3
 8008144:	e009      	b.n	800815a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	f003 0308 	and.w	r3, r3, #8
 8008166:	2b00      	cmp	r3, #0
 8008168:	d026      	beq.n	80081b8 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f003 0308 	and.w	r3, r3, #8
 8008170:	2b00      	cmp	r3, #0
 8008172:	d021      	beq.n	80081b8 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f06f 0208 	mvn.w	r2, #8
 800817c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2204      	movs	r2, #4
 8008182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	69db      	ldr	r3, [r3, #28]
 800818a:	f003 0303 	and.w	r3, r3, #3
 800818e:	2b00      	cmp	r3, #0
 8008190:	d005      	beq.n	800819e <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	4798      	blx	r3
 800819c:	e009      	b.n	80081b2 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	f003 0310 	and.w	r3, r3, #16
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d026      	beq.n	8008210 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f003 0310 	and.w	r3, r3, #16
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d021      	beq.n	8008210 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f06f 0210 	mvn.w	r2, #16
 80081d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2208      	movs	r2, #8
 80081da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	69db      	ldr	r3, [r3, #28]
 80081e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d005      	beq.n	80081f6 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	4798      	blx	r3
 80081f4:	e009      	b.n	800820a <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	f003 0301 	and.w	r3, r3, #1
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00e      	beq.n	8008238 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f003 0301 	and.w	r3, r3, #1
 8008220:	2b00      	cmp	r3, #0
 8008222:	d009      	beq.n	8008238 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f06f 0201 	mvn.w	r2, #1
 800822c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800823e:	2b00      	cmp	r3, #0
 8008240:	d104      	bne.n	800824c <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008248:	2b00      	cmp	r3, #0
 800824a:	d00e      	beq.n	800826a <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008252:	2b00      	cmp	r3, #0
 8008254:	d009      	beq.n	800826a <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800825e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00e      	beq.n	8008292 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800827a:	2b00      	cmp	r3, #0
 800827c:	d009      	beq.n	8008292 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008298:	2b00      	cmp	r3, #0
 800829a:	d00e      	beq.n	80082ba <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d009      	beq.n	80082ba <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80082ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	f003 0320 	and.w	r3, r3, #32
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00e      	beq.n	80082e2 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f003 0320 	and.w	r3, r3, #32
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d009      	beq.n	80082e2 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f06f 0220 	mvn.w	r2, #32
 80082d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00e      	beq.n	800830a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d009      	beq.n	800830a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80082fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008310:	2b00      	cmp	r3, #0
 8008312:	d00e      	beq.n	8008332 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800831a:	2b00      	cmp	r3, #0
 800831c:	d009      	beq.n	8008332 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008326:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00e      	beq.n	800835a <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008342:	2b00      	cmp	r3, #0
 8008344:	d009      	beq.n	800835a <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800834e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00e      	beq.n	8008382 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800836a:	2b00      	cmp	r3, #0
 800836c:	d009      	beq.n	8008382 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008382:	bf00      	nop
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
	...

0800838c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b086      	sub	sp, #24
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008398:	2300      	movs	r3, #0
 800839a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d101      	bne.n	80083aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80083a6:	2302      	movs	r3, #2
 80083a8:	e0ff      	b.n	80085aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2201      	movs	r2, #1
 80083ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2b14      	cmp	r3, #20
 80083b6:	f200 80f0 	bhi.w	800859a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80083ba:	a201      	add	r2, pc, #4	@ (adr r2, 80083c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80083bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c0:	08008415 	.word	0x08008415
 80083c4:	0800859b 	.word	0x0800859b
 80083c8:	0800859b 	.word	0x0800859b
 80083cc:	0800859b 	.word	0x0800859b
 80083d0:	08008455 	.word	0x08008455
 80083d4:	0800859b 	.word	0x0800859b
 80083d8:	0800859b 	.word	0x0800859b
 80083dc:	0800859b 	.word	0x0800859b
 80083e0:	08008497 	.word	0x08008497
 80083e4:	0800859b 	.word	0x0800859b
 80083e8:	0800859b 	.word	0x0800859b
 80083ec:	0800859b 	.word	0x0800859b
 80083f0:	080084d7 	.word	0x080084d7
 80083f4:	0800859b 	.word	0x0800859b
 80083f8:	0800859b 	.word	0x0800859b
 80083fc:	0800859b 	.word	0x0800859b
 8008400:	08008519 	.word	0x08008519
 8008404:	0800859b 	.word	0x0800859b
 8008408:	0800859b 	.word	0x0800859b
 800840c:	0800859b 	.word	0x0800859b
 8008410:	08008559 	.word	0x08008559
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	68b9      	ldr	r1, [r7, #8]
 800841a:	4618      	mov	r0, r3
 800841c:	f000 fc4e 	bl	8008cbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	699a      	ldr	r2, [r3, #24]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f042 0208 	orr.w	r2, r2, #8
 800842e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	699a      	ldr	r2, [r3, #24]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f022 0204 	bic.w	r2, r2, #4
 800843e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	6999      	ldr	r1, [r3, #24]
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	691a      	ldr	r2, [r3, #16]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	430a      	orrs	r2, r1
 8008450:	619a      	str	r2, [r3, #24]
      break;
 8008452:	e0a5      	b.n	80085a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68b9      	ldr	r1, [r7, #8]
 800845a:	4618      	mov	r0, r3
 800845c:	f000 fcc8 	bl	8008df0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	699a      	ldr	r2, [r3, #24]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800846e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	699a      	ldr	r2, [r3, #24]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800847e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	6999      	ldr	r1, [r3, #24]
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	021a      	lsls	r2, r3, #8
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	430a      	orrs	r2, r1
 8008492:	619a      	str	r2, [r3, #24]
      break;
 8008494:	e084      	b.n	80085a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	68b9      	ldr	r1, [r7, #8]
 800849c:	4618      	mov	r0, r3
 800849e:	f000 fd3b 	bl	8008f18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	69da      	ldr	r2, [r3, #28]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f042 0208 	orr.w	r2, r2, #8
 80084b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	69da      	ldr	r2, [r3, #28]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f022 0204 	bic.w	r2, r2, #4
 80084c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	69d9      	ldr	r1, [r3, #28]
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	691a      	ldr	r2, [r3, #16]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	430a      	orrs	r2, r1
 80084d2:	61da      	str	r2, [r3, #28]
      break;
 80084d4:	e064      	b.n	80085a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	68b9      	ldr	r1, [r7, #8]
 80084dc:	4618      	mov	r0, r3
 80084de:	f000 fdad 	bl	800903c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	69da      	ldr	r2, [r3, #28]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80084f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	69da      	ldr	r2, [r3, #28]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	69d9      	ldr	r1, [r3, #28]
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	691b      	ldr	r3, [r3, #16]
 800850c:	021a      	lsls	r2, r3, #8
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	430a      	orrs	r2, r1
 8008514:	61da      	str	r2, [r3, #28]
      break;
 8008516:	e043      	b.n	80085a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68b9      	ldr	r1, [r7, #8]
 800851e:	4618      	mov	r0, r3
 8008520:	f000 fe20 	bl	8009164 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f042 0208 	orr.w	r2, r2, #8
 8008532:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f022 0204 	bic.w	r2, r2, #4
 8008542:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	691a      	ldr	r2, [r3, #16]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	430a      	orrs	r2, r1
 8008554:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008556:	e023      	b.n	80085a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	68b9      	ldr	r1, [r7, #8]
 800855e:	4618      	mov	r0, r3
 8008560:	f000 fe6a 	bl	8009238 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008572:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008582:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	691b      	ldr	r3, [r3, #16]
 800858e:	021a      	lsls	r2, r3, #8
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	430a      	orrs	r2, r1
 8008596:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008598:	e002      	b.n	80085a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	75fb      	strb	r3, [r7, #23]
      break;
 800859e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80085a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3718      	adds	r7, #24
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop

080085b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085be:	2300      	movs	r3, #0
 80085c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d101      	bne.n	80085d0 <HAL_TIM_ConfigClockSource+0x1c>
 80085cc:	2302      	movs	r3, #2
 80085ce:	e0f6      	b.n	80087be <HAL_TIM_ConfigClockSource+0x20a>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2202      	movs	r2, #2
 80085dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80085ee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80085f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80085fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	68ba      	ldr	r2, [r7, #8]
 8008602:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a6f      	ldr	r2, [pc, #444]	@ (80087c8 <HAL_TIM_ConfigClockSource+0x214>)
 800860a:	4293      	cmp	r3, r2
 800860c:	f000 80c1 	beq.w	8008792 <HAL_TIM_ConfigClockSource+0x1de>
 8008610:	4a6d      	ldr	r2, [pc, #436]	@ (80087c8 <HAL_TIM_ConfigClockSource+0x214>)
 8008612:	4293      	cmp	r3, r2
 8008614:	f200 80c6 	bhi.w	80087a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008618:	4a6c      	ldr	r2, [pc, #432]	@ (80087cc <HAL_TIM_ConfigClockSource+0x218>)
 800861a:	4293      	cmp	r3, r2
 800861c:	f000 80b9 	beq.w	8008792 <HAL_TIM_ConfigClockSource+0x1de>
 8008620:	4a6a      	ldr	r2, [pc, #424]	@ (80087cc <HAL_TIM_ConfigClockSource+0x218>)
 8008622:	4293      	cmp	r3, r2
 8008624:	f200 80be 	bhi.w	80087a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008628:	4a69      	ldr	r2, [pc, #420]	@ (80087d0 <HAL_TIM_ConfigClockSource+0x21c>)
 800862a:	4293      	cmp	r3, r2
 800862c:	f000 80b1 	beq.w	8008792 <HAL_TIM_ConfigClockSource+0x1de>
 8008630:	4a67      	ldr	r2, [pc, #412]	@ (80087d0 <HAL_TIM_ConfigClockSource+0x21c>)
 8008632:	4293      	cmp	r3, r2
 8008634:	f200 80b6 	bhi.w	80087a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008638:	4a66      	ldr	r2, [pc, #408]	@ (80087d4 <HAL_TIM_ConfigClockSource+0x220>)
 800863a:	4293      	cmp	r3, r2
 800863c:	f000 80a9 	beq.w	8008792 <HAL_TIM_ConfigClockSource+0x1de>
 8008640:	4a64      	ldr	r2, [pc, #400]	@ (80087d4 <HAL_TIM_ConfigClockSource+0x220>)
 8008642:	4293      	cmp	r3, r2
 8008644:	f200 80ae 	bhi.w	80087a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008648:	4a63      	ldr	r2, [pc, #396]	@ (80087d8 <HAL_TIM_ConfigClockSource+0x224>)
 800864a:	4293      	cmp	r3, r2
 800864c:	f000 80a1 	beq.w	8008792 <HAL_TIM_ConfigClockSource+0x1de>
 8008650:	4a61      	ldr	r2, [pc, #388]	@ (80087d8 <HAL_TIM_ConfigClockSource+0x224>)
 8008652:	4293      	cmp	r3, r2
 8008654:	f200 80a6 	bhi.w	80087a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008658:	4a60      	ldr	r2, [pc, #384]	@ (80087dc <HAL_TIM_ConfigClockSource+0x228>)
 800865a:	4293      	cmp	r3, r2
 800865c:	f000 8099 	beq.w	8008792 <HAL_TIM_ConfigClockSource+0x1de>
 8008660:	4a5e      	ldr	r2, [pc, #376]	@ (80087dc <HAL_TIM_ConfigClockSource+0x228>)
 8008662:	4293      	cmp	r3, r2
 8008664:	f200 809e 	bhi.w	80087a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008668:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800866c:	f000 8091 	beq.w	8008792 <HAL_TIM_ConfigClockSource+0x1de>
 8008670:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008674:	f200 8096 	bhi.w	80087a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008678:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800867c:	f000 8089 	beq.w	8008792 <HAL_TIM_ConfigClockSource+0x1de>
 8008680:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008684:	f200 808e 	bhi.w	80087a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008688:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800868c:	d03e      	beq.n	800870c <HAL_TIM_ConfigClockSource+0x158>
 800868e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008692:	f200 8087 	bhi.w	80087a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008696:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800869a:	f000 8086 	beq.w	80087aa <HAL_TIM_ConfigClockSource+0x1f6>
 800869e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086a2:	d87f      	bhi.n	80087a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80086a4:	2b70      	cmp	r3, #112	@ 0x70
 80086a6:	d01a      	beq.n	80086de <HAL_TIM_ConfigClockSource+0x12a>
 80086a8:	2b70      	cmp	r3, #112	@ 0x70
 80086aa:	d87b      	bhi.n	80087a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80086ac:	2b60      	cmp	r3, #96	@ 0x60
 80086ae:	d050      	beq.n	8008752 <HAL_TIM_ConfigClockSource+0x19e>
 80086b0:	2b60      	cmp	r3, #96	@ 0x60
 80086b2:	d877      	bhi.n	80087a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80086b4:	2b50      	cmp	r3, #80	@ 0x50
 80086b6:	d03c      	beq.n	8008732 <HAL_TIM_ConfigClockSource+0x17e>
 80086b8:	2b50      	cmp	r3, #80	@ 0x50
 80086ba:	d873      	bhi.n	80087a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80086bc:	2b40      	cmp	r3, #64	@ 0x40
 80086be:	d058      	beq.n	8008772 <HAL_TIM_ConfigClockSource+0x1be>
 80086c0:	2b40      	cmp	r3, #64	@ 0x40
 80086c2:	d86f      	bhi.n	80087a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80086c4:	2b30      	cmp	r3, #48	@ 0x30
 80086c6:	d064      	beq.n	8008792 <HAL_TIM_ConfigClockSource+0x1de>
 80086c8:	2b30      	cmp	r3, #48	@ 0x30
 80086ca:	d86b      	bhi.n	80087a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80086cc:	2b20      	cmp	r3, #32
 80086ce:	d060      	beq.n	8008792 <HAL_TIM_ConfigClockSource+0x1de>
 80086d0:	2b20      	cmp	r3, #32
 80086d2:	d867      	bhi.n	80087a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d05c      	beq.n	8008792 <HAL_TIM_ConfigClockSource+0x1de>
 80086d8:	2b10      	cmp	r3, #16
 80086da:	d05a      	beq.n	8008792 <HAL_TIM_ConfigClockSource+0x1de>
 80086dc:	e062      	b.n	80087a4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80086ee:	f000 fe8b 	bl	8009408 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008700:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	68ba      	ldr	r2, [r7, #8]
 8008708:	609a      	str	r2, [r3, #8]
      break;
 800870a:	e04f      	b.n	80087ac <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800871c:	f000 fe74 	bl	8009408 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	689a      	ldr	r2, [r3, #8]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800872e:	609a      	str	r2, [r3, #8]
      break;
 8008730:	e03c      	b.n	80087ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800873e:	461a      	mov	r2, r3
 8008740:	f000 fde6 	bl	8009310 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	2150      	movs	r1, #80	@ 0x50
 800874a:	4618      	mov	r0, r3
 800874c:	f000 fe3f 	bl	80093ce <TIM_ITRx_SetConfig>
      break;
 8008750:	e02c      	b.n	80087ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800875e:	461a      	mov	r2, r3
 8008760:	f000 fe05 	bl	800936e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2160      	movs	r1, #96	@ 0x60
 800876a:	4618      	mov	r0, r3
 800876c:	f000 fe2f 	bl	80093ce <TIM_ITRx_SetConfig>
      break;
 8008770:	e01c      	b.n	80087ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800877e:	461a      	mov	r2, r3
 8008780:	f000 fdc6 	bl	8009310 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2140      	movs	r1, #64	@ 0x40
 800878a:	4618      	mov	r0, r3
 800878c:	f000 fe1f 	bl	80093ce <TIM_ITRx_SetConfig>
      break;
 8008790:	e00c      	b.n	80087ac <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4619      	mov	r1, r3
 800879c:	4610      	mov	r0, r2
 800879e:	f000 fe16 	bl	80093ce <TIM_ITRx_SetConfig>
      break;
 80087a2:	e003      	b.n	80087ac <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80087a4:	2301      	movs	r3, #1
 80087a6:	73fb      	strb	r3, [r7, #15]
      break;
 80087a8:	e000      	b.n	80087ac <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80087aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80087bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	00100070 	.word	0x00100070
 80087cc:	00100060 	.word	0x00100060
 80087d0:	00100050 	.word	0x00100050
 80087d4:	00100040 	.word	0x00100040
 80087d8:	00100030 	.word	0x00100030
 80087dc:	00100020 	.word	0x00100020

080087e0 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80087e8:	bf00      	nop
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087fc:	bf00      	nop
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008810:	bf00      	nop
 8008812:	370c      	adds	r7, #12
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008824:	bf00      	nop
 8008826:	370c      	adds	r7, #12
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr

08008830 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008838:	bf00      	nop
 800883a:	370c      	adds	r7, #12
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800884c:	bf00      	nop
 800884e:	370c      	adds	r7, #12
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008860:	bf00      	nop
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008874:	bf00      	nop
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008888:	bf00      	nop
 800888a:	370c      	adds	r7, #12
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8008894:	b480      	push	{r7}
 8008896:	b087      	sub	sp, #28
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	460b      	mov	r3, r1
 800889e:	607a      	str	r2, [r7, #4]
 80088a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80088a2:	2300      	movs	r3, #0
 80088a4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d101      	bne.n	80088b0 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	e14a      	b.n	8008b46 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	f040 80dd 	bne.w	8008a78 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 80088be:	7afb      	ldrb	r3, [r7, #11]
 80088c0:	2b1f      	cmp	r3, #31
 80088c2:	f200 80d6 	bhi.w	8008a72 <HAL_TIM_RegisterCallback+0x1de>
 80088c6:	a201      	add	r2, pc, #4	@ (adr r2, 80088cc <HAL_TIM_RegisterCallback+0x38>)
 80088c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088cc:	0800894d 	.word	0x0800894d
 80088d0:	08008955 	.word	0x08008955
 80088d4:	0800895d 	.word	0x0800895d
 80088d8:	08008965 	.word	0x08008965
 80088dc:	0800896d 	.word	0x0800896d
 80088e0:	08008975 	.word	0x08008975
 80088e4:	0800897d 	.word	0x0800897d
 80088e8:	08008985 	.word	0x08008985
 80088ec:	0800898d 	.word	0x0800898d
 80088f0:	08008995 	.word	0x08008995
 80088f4:	0800899d 	.word	0x0800899d
 80088f8:	080089a5 	.word	0x080089a5
 80088fc:	080089ad 	.word	0x080089ad
 8008900:	080089b5 	.word	0x080089b5
 8008904:	080089bf 	.word	0x080089bf
 8008908:	080089c9 	.word	0x080089c9
 800890c:	080089d3 	.word	0x080089d3
 8008910:	080089dd 	.word	0x080089dd
 8008914:	080089e7 	.word	0x080089e7
 8008918:	080089f1 	.word	0x080089f1
 800891c:	080089fb 	.word	0x080089fb
 8008920:	08008a05 	.word	0x08008a05
 8008924:	08008a0f 	.word	0x08008a0f
 8008928:	08008a19 	.word	0x08008a19
 800892c:	08008a23 	.word	0x08008a23
 8008930:	08008a2d 	.word	0x08008a2d
 8008934:	08008a37 	.word	0x08008a37
 8008938:	08008a41 	.word	0x08008a41
 800893c:	08008a4b 	.word	0x08008a4b
 8008940:	08008a55 	.word	0x08008a55
 8008944:	08008a5f 	.word	0x08008a5f
 8008948:	08008a69 	.word	0x08008a69
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008952:	e0f7      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800895a:	e0f3      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008962:	e0ef      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800896a:	e0eb      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008972:	e0e7      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800897a:	e0e3      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008982:	e0df      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800898a:	e0db      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008992:	e0d7      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800899a:	e0d3      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80089a2:	e0cf      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80089aa:	e0cb      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80089b2:	e0c7      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80089bc:	e0c2      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 80089c6:	e0bd      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 80089d0:	e0b8      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 80089da:	e0b3      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 80089e4:	e0ae      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80089ee:	e0a9      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80089f8:	e0a4      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008a02:	e09f      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008a0c:	e09a      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008a16:	e095      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008a20:	e090      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008a2a:	e08b      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008a34:	e086      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008a3e:	e081      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008a48:	e07c      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008a52:	e077      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8008a5c:	e072      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008a66:	e06d      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008a70:	e068      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	75fb      	strb	r3, [r7, #23]
        break;
 8008a76:	e065      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d15d      	bne.n	8008b40 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8008a84:	7afb      	ldrb	r3, [r7, #11]
 8008a86:	2b0d      	cmp	r3, #13
 8008a88:	d857      	bhi.n	8008b3a <HAL_TIM_RegisterCallback+0x2a6>
 8008a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a90 <HAL_TIM_RegisterCallback+0x1fc>)
 8008a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a90:	08008ac9 	.word	0x08008ac9
 8008a94:	08008ad1 	.word	0x08008ad1
 8008a98:	08008ad9 	.word	0x08008ad9
 8008a9c:	08008ae1 	.word	0x08008ae1
 8008aa0:	08008ae9 	.word	0x08008ae9
 8008aa4:	08008af1 	.word	0x08008af1
 8008aa8:	08008af9 	.word	0x08008af9
 8008aac:	08008b01 	.word	0x08008b01
 8008ab0:	08008b09 	.word	0x08008b09
 8008ab4:	08008b11 	.word	0x08008b11
 8008ab8:	08008b19 	.word	0x08008b19
 8008abc:	08008b21 	.word	0x08008b21
 8008ac0:	08008b29 	.word	0x08008b29
 8008ac4:	08008b31 	.word	0x08008b31
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008ace:	e039      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008ad6:	e035      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008ade:	e031      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008ae6:	e02d      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008aee:	e029      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008af6:	e025      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008afe:	e021      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008b06:	e01d      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008b0e:	e019      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008b16:	e015      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008b1e:	e011      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008b26:	e00d      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008b2e:	e009      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008b38:	e004      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	75fb      	strb	r3, [r7, #23]
        break;
 8008b3e:	e001      	b.n	8008b44 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8008b40:	2301      	movs	r3, #1
 8008b42:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008b44:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	371c      	adds	r7, #28
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr
 8008b52:	bf00      	nop

08008b54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b085      	sub	sp, #20
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4a4c      	ldr	r2, [pc, #304]	@ (8008c98 <TIM_Base_SetConfig+0x144>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d017      	beq.n	8008b9c <TIM_Base_SetConfig+0x48>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b72:	d013      	beq.n	8008b9c <TIM_Base_SetConfig+0x48>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	4a49      	ldr	r2, [pc, #292]	@ (8008c9c <TIM_Base_SetConfig+0x148>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d00f      	beq.n	8008b9c <TIM_Base_SetConfig+0x48>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4a48      	ldr	r2, [pc, #288]	@ (8008ca0 <TIM_Base_SetConfig+0x14c>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d00b      	beq.n	8008b9c <TIM_Base_SetConfig+0x48>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4a47      	ldr	r2, [pc, #284]	@ (8008ca4 <TIM_Base_SetConfig+0x150>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d007      	beq.n	8008b9c <TIM_Base_SetConfig+0x48>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	4a46      	ldr	r2, [pc, #280]	@ (8008ca8 <TIM_Base_SetConfig+0x154>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d003      	beq.n	8008b9c <TIM_Base_SetConfig+0x48>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4a45      	ldr	r2, [pc, #276]	@ (8008cac <TIM_Base_SetConfig+0x158>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d108      	bne.n	8008bae <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ba2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	4313      	orrs	r3, r2
 8008bac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4a39      	ldr	r2, [pc, #228]	@ (8008c98 <TIM_Base_SetConfig+0x144>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d023      	beq.n	8008bfe <TIM_Base_SetConfig+0xaa>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bbc:	d01f      	beq.n	8008bfe <TIM_Base_SetConfig+0xaa>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4a36      	ldr	r2, [pc, #216]	@ (8008c9c <TIM_Base_SetConfig+0x148>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d01b      	beq.n	8008bfe <TIM_Base_SetConfig+0xaa>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	4a35      	ldr	r2, [pc, #212]	@ (8008ca0 <TIM_Base_SetConfig+0x14c>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d017      	beq.n	8008bfe <TIM_Base_SetConfig+0xaa>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	4a34      	ldr	r2, [pc, #208]	@ (8008ca4 <TIM_Base_SetConfig+0x150>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d013      	beq.n	8008bfe <TIM_Base_SetConfig+0xaa>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	4a33      	ldr	r2, [pc, #204]	@ (8008ca8 <TIM_Base_SetConfig+0x154>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d00f      	beq.n	8008bfe <TIM_Base_SetConfig+0xaa>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4a33      	ldr	r2, [pc, #204]	@ (8008cb0 <TIM_Base_SetConfig+0x15c>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d00b      	beq.n	8008bfe <TIM_Base_SetConfig+0xaa>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	4a32      	ldr	r2, [pc, #200]	@ (8008cb4 <TIM_Base_SetConfig+0x160>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d007      	beq.n	8008bfe <TIM_Base_SetConfig+0xaa>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4a31      	ldr	r2, [pc, #196]	@ (8008cb8 <TIM_Base_SetConfig+0x164>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d003      	beq.n	8008bfe <TIM_Base_SetConfig+0xaa>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	4a2c      	ldr	r2, [pc, #176]	@ (8008cac <TIM_Base_SetConfig+0x158>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d108      	bne.n	8008c10 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	68fa      	ldr	r2, [r7, #12]
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	695b      	ldr	r3, [r3, #20]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	68fa      	ldr	r2, [r7, #12]
 8008c22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	689a      	ldr	r2, [r3, #8]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4a18      	ldr	r2, [pc, #96]	@ (8008c98 <TIM_Base_SetConfig+0x144>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d013      	beq.n	8008c64 <TIM_Base_SetConfig+0x110>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4a1a      	ldr	r2, [pc, #104]	@ (8008ca8 <TIM_Base_SetConfig+0x154>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d00f      	beq.n	8008c64 <TIM_Base_SetConfig+0x110>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4a1a      	ldr	r2, [pc, #104]	@ (8008cb0 <TIM_Base_SetConfig+0x15c>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d00b      	beq.n	8008c64 <TIM_Base_SetConfig+0x110>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	4a19      	ldr	r2, [pc, #100]	@ (8008cb4 <TIM_Base_SetConfig+0x160>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d007      	beq.n	8008c64 <TIM_Base_SetConfig+0x110>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4a18      	ldr	r2, [pc, #96]	@ (8008cb8 <TIM_Base_SetConfig+0x164>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d003      	beq.n	8008c64 <TIM_Base_SetConfig+0x110>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a13      	ldr	r2, [pc, #76]	@ (8008cac <TIM_Base_SetConfig+0x158>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d103      	bne.n	8008c6c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	691a      	ldr	r2, [r3, #16]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	691b      	ldr	r3, [r3, #16]
 8008c76:	f003 0301 	and.w	r3, r3, #1
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d105      	bne.n	8008c8a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	f023 0201 	bic.w	r2, r3, #1
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	611a      	str	r2, [r3, #16]
  }
}
 8008c8a:	bf00      	nop
 8008c8c:	3714      	adds	r7, #20
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr
 8008c96:	bf00      	nop
 8008c98:	40012c00 	.word	0x40012c00
 8008c9c:	40000400 	.word	0x40000400
 8008ca0:	40000800 	.word	0x40000800
 8008ca4:	40000c00 	.word	0x40000c00
 8008ca8:	40013400 	.word	0x40013400
 8008cac:	40015000 	.word	0x40015000
 8008cb0:	40014000 	.word	0x40014000
 8008cb4:	40014400 	.word	0x40014400
 8008cb8:	40014800 	.word	0x40014800

08008cbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b087      	sub	sp, #28
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a1b      	ldr	r3, [r3, #32]
 8008cca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a1b      	ldr	r3, [r3, #32]
 8008cd0:	f023 0201 	bic.w	r2, r3, #1
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	699b      	ldr	r3, [r3, #24]
 8008ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f023 0303 	bic.w	r3, r3, #3
 8008cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	f023 0302 	bic.w	r3, r3, #2
 8008d08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a30      	ldr	r2, [pc, #192]	@ (8008dd8 <TIM_OC1_SetConfig+0x11c>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d013      	beq.n	8008d44 <TIM_OC1_SetConfig+0x88>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a2f      	ldr	r2, [pc, #188]	@ (8008ddc <TIM_OC1_SetConfig+0x120>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d00f      	beq.n	8008d44 <TIM_OC1_SetConfig+0x88>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4a2e      	ldr	r2, [pc, #184]	@ (8008de0 <TIM_OC1_SetConfig+0x124>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d00b      	beq.n	8008d44 <TIM_OC1_SetConfig+0x88>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a2d      	ldr	r2, [pc, #180]	@ (8008de4 <TIM_OC1_SetConfig+0x128>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d007      	beq.n	8008d44 <TIM_OC1_SetConfig+0x88>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4a2c      	ldr	r2, [pc, #176]	@ (8008de8 <TIM_OC1_SetConfig+0x12c>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d003      	beq.n	8008d44 <TIM_OC1_SetConfig+0x88>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	4a2b      	ldr	r2, [pc, #172]	@ (8008dec <TIM_OC1_SetConfig+0x130>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d10c      	bne.n	8008d5e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	f023 0308 	bic.w	r3, r3, #8
 8008d4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	697a      	ldr	r2, [r7, #20]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	f023 0304 	bic.w	r3, r3, #4
 8008d5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4a1d      	ldr	r2, [pc, #116]	@ (8008dd8 <TIM_OC1_SetConfig+0x11c>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d013      	beq.n	8008d8e <TIM_OC1_SetConfig+0xd2>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4a1c      	ldr	r2, [pc, #112]	@ (8008ddc <TIM_OC1_SetConfig+0x120>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d00f      	beq.n	8008d8e <TIM_OC1_SetConfig+0xd2>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4a1b      	ldr	r2, [pc, #108]	@ (8008de0 <TIM_OC1_SetConfig+0x124>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d00b      	beq.n	8008d8e <TIM_OC1_SetConfig+0xd2>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a1a      	ldr	r2, [pc, #104]	@ (8008de4 <TIM_OC1_SetConfig+0x128>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d007      	beq.n	8008d8e <TIM_OC1_SetConfig+0xd2>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4a19      	ldr	r2, [pc, #100]	@ (8008de8 <TIM_OC1_SetConfig+0x12c>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d003      	beq.n	8008d8e <TIM_OC1_SetConfig+0xd2>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4a18      	ldr	r2, [pc, #96]	@ (8008dec <TIM_OC1_SetConfig+0x130>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d111      	bne.n	8008db2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	695b      	ldr	r3, [r3, #20]
 8008da2:	693a      	ldr	r2, [r7, #16]
 8008da4:	4313      	orrs	r3, r2
 8008da6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	699b      	ldr	r3, [r3, #24]
 8008dac:	693a      	ldr	r2, [r7, #16]
 8008dae:	4313      	orrs	r3, r2
 8008db0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	693a      	ldr	r2, [r7, #16]
 8008db6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	68fa      	ldr	r2, [r7, #12]
 8008dbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	685a      	ldr	r2, [r3, #4]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	697a      	ldr	r2, [r7, #20]
 8008dca:	621a      	str	r2, [r3, #32]
}
 8008dcc:	bf00      	nop
 8008dce:	371c      	adds	r7, #28
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr
 8008dd8:	40012c00 	.word	0x40012c00
 8008ddc:	40013400 	.word	0x40013400
 8008de0:	40014000 	.word	0x40014000
 8008de4:	40014400 	.word	0x40014400
 8008de8:	40014800 	.word	0x40014800
 8008dec:	40015000 	.word	0x40015000

08008df0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b087      	sub	sp, #28
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6a1b      	ldr	r3, [r3, #32]
 8008dfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6a1b      	ldr	r3, [r3, #32]
 8008e04:	f023 0210 	bic.w	r2, r3, #16
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	699b      	ldr	r3, [r3, #24]
 8008e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008e1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	021b      	lsls	r3, r3, #8
 8008e32:	68fa      	ldr	r2, [r7, #12]
 8008e34:	4313      	orrs	r3, r2
 8008e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	f023 0320 	bic.w	r3, r3, #32
 8008e3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	011b      	lsls	r3, r3, #4
 8008e46:	697a      	ldr	r2, [r7, #20]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4a2c      	ldr	r2, [pc, #176]	@ (8008f00 <TIM_OC2_SetConfig+0x110>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d007      	beq.n	8008e64 <TIM_OC2_SetConfig+0x74>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	4a2b      	ldr	r2, [pc, #172]	@ (8008f04 <TIM_OC2_SetConfig+0x114>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d003      	beq.n	8008e64 <TIM_OC2_SetConfig+0x74>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4a2a      	ldr	r2, [pc, #168]	@ (8008f08 <TIM_OC2_SetConfig+0x118>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d10d      	bne.n	8008e80 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	011b      	lsls	r3, r3, #4
 8008e72:	697a      	ldr	r2, [r7, #20]
 8008e74:	4313      	orrs	r3, r2
 8008e76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4a1f      	ldr	r2, [pc, #124]	@ (8008f00 <TIM_OC2_SetConfig+0x110>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d013      	beq.n	8008eb0 <TIM_OC2_SetConfig+0xc0>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	4a1e      	ldr	r2, [pc, #120]	@ (8008f04 <TIM_OC2_SetConfig+0x114>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d00f      	beq.n	8008eb0 <TIM_OC2_SetConfig+0xc0>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4a1e      	ldr	r2, [pc, #120]	@ (8008f0c <TIM_OC2_SetConfig+0x11c>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d00b      	beq.n	8008eb0 <TIM_OC2_SetConfig+0xc0>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4a1d      	ldr	r2, [pc, #116]	@ (8008f10 <TIM_OC2_SetConfig+0x120>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d007      	beq.n	8008eb0 <TIM_OC2_SetConfig+0xc0>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4a1c      	ldr	r2, [pc, #112]	@ (8008f14 <TIM_OC2_SetConfig+0x124>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d003      	beq.n	8008eb0 <TIM_OC2_SetConfig+0xc0>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4a17      	ldr	r2, [pc, #92]	@ (8008f08 <TIM_OC2_SetConfig+0x118>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d113      	bne.n	8008ed8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008eb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	695b      	ldr	r3, [r3, #20]
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	693a      	ldr	r2, [r7, #16]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	699b      	ldr	r3, [r3, #24]
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	693a      	ldr	r2, [r7, #16]
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	693a      	ldr	r2, [r7, #16]
 8008edc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	68fa      	ldr	r2, [r7, #12]
 8008ee2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	685a      	ldr	r2, [r3, #4]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	697a      	ldr	r2, [r7, #20]
 8008ef0:	621a      	str	r2, [r3, #32]
}
 8008ef2:	bf00      	nop
 8008ef4:	371c      	adds	r7, #28
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr
 8008efe:	bf00      	nop
 8008f00:	40012c00 	.word	0x40012c00
 8008f04:	40013400 	.word	0x40013400
 8008f08:	40015000 	.word	0x40015000
 8008f0c:	40014000 	.word	0x40014000
 8008f10:	40014400 	.word	0x40014400
 8008f14:	40014800 	.word	0x40014800

08008f18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b087      	sub	sp, #28
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a1b      	ldr	r3, [r3, #32]
 8008f26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6a1b      	ldr	r3, [r3, #32]
 8008f2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	69db      	ldr	r3, [r3, #28]
 8008f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f023 0303 	bic.w	r3, r3, #3
 8008f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	68fa      	ldr	r2, [r7, #12]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	021b      	lsls	r3, r3, #8
 8008f6c:	697a      	ldr	r2, [r7, #20]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4a2b      	ldr	r2, [pc, #172]	@ (8009024 <TIM_OC3_SetConfig+0x10c>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d007      	beq.n	8008f8a <TIM_OC3_SetConfig+0x72>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4a2a      	ldr	r2, [pc, #168]	@ (8009028 <TIM_OC3_SetConfig+0x110>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d003      	beq.n	8008f8a <TIM_OC3_SetConfig+0x72>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	4a29      	ldr	r2, [pc, #164]	@ (800902c <TIM_OC3_SetConfig+0x114>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d10d      	bne.n	8008fa6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008f90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	68db      	ldr	r3, [r3, #12]
 8008f96:	021b      	lsls	r3, r3, #8
 8008f98:	697a      	ldr	r2, [r7, #20]
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008fa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4a1e      	ldr	r2, [pc, #120]	@ (8009024 <TIM_OC3_SetConfig+0x10c>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d013      	beq.n	8008fd6 <TIM_OC3_SetConfig+0xbe>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4a1d      	ldr	r2, [pc, #116]	@ (8009028 <TIM_OC3_SetConfig+0x110>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d00f      	beq.n	8008fd6 <TIM_OC3_SetConfig+0xbe>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4a1d      	ldr	r2, [pc, #116]	@ (8009030 <TIM_OC3_SetConfig+0x118>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d00b      	beq.n	8008fd6 <TIM_OC3_SetConfig+0xbe>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	4a1c      	ldr	r2, [pc, #112]	@ (8009034 <TIM_OC3_SetConfig+0x11c>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d007      	beq.n	8008fd6 <TIM_OC3_SetConfig+0xbe>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	4a1b      	ldr	r2, [pc, #108]	@ (8009038 <TIM_OC3_SetConfig+0x120>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d003      	beq.n	8008fd6 <TIM_OC3_SetConfig+0xbe>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	4a16      	ldr	r2, [pc, #88]	@ (800902c <TIM_OC3_SetConfig+0x114>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d113      	bne.n	8008ffe <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008fdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	695b      	ldr	r3, [r3, #20]
 8008fea:	011b      	lsls	r3, r3, #4
 8008fec:	693a      	ldr	r2, [r7, #16]
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	699b      	ldr	r3, [r3, #24]
 8008ff6:	011b      	lsls	r3, r3, #4
 8008ff8:	693a      	ldr	r2, [r7, #16]
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	693a      	ldr	r2, [r7, #16]
 8009002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	68fa      	ldr	r2, [r7, #12]
 8009008:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	685a      	ldr	r2, [r3, #4]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	697a      	ldr	r2, [r7, #20]
 8009016:	621a      	str	r2, [r3, #32]
}
 8009018:	bf00      	nop
 800901a:	371c      	adds	r7, #28
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr
 8009024:	40012c00 	.word	0x40012c00
 8009028:	40013400 	.word	0x40013400
 800902c:	40015000 	.word	0x40015000
 8009030:	40014000 	.word	0x40014000
 8009034:	40014400 	.word	0x40014400
 8009038:	40014800 	.word	0x40014800

0800903c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800903c:	b480      	push	{r7}
 800903e:	b087      	sub	sp, #28
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a1b      	ldr	r3, [r3, #32]
 800904a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6a1b      	ldr	r3, [r3, #32]
 8009050:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	69db      	ldr	r3, [r3, #28]
 8009062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800906a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800906e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	021b      	lsls	r3, r3, #8
 800907e:	68fa      	ldr	r2, [r7, #12]
 8009080:	4313      	orrs	r3, r2
 8009082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800908a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	031b      	lsls	r3, r3, #12
 8009092:	697a      	ldr	r2, [r7, #20]
 8009094:	4313      	orrs	r3, r2
 8009096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	4a2c      	ldr	r2, [pc, #176]	@ (800914c <TIM_OC4_SetConfig+0x110>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d007      	beq.n	80090b0 <TIM_OC4_SetConfig+0x74>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4a2b      	ldr	r2, [pc, #172]	@ (8009150 <TIM_OC4_SetConfig+0x114>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d003      	beq.n	80090b0 <TIM_OC4_SetConfig+0x74>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4a2a      	ldr	r2, [pc, #168]	@ (8009154 <TIM_OC4_SetConfig+0x118>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d10d      	bne.n	80090cc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80090b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	031b      	lsls	r3, r3, #12
 80090be:	697a      	ldr	r2, [r7, #20]
 80090c0:	4313      	orrs	r3, r2
 80090c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80090ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	4a1f      	ldr	r2, [pc, #124]	@ (800914c <TIM_OC4_SetConfig+0x110>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d013      	beq.n	80090fc <TIM_OC4_SetConfig+0xc0>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	4a1e      	ldr	r2, [pc, #120]	@ (8009150 <TIM_OC4_SetConfig+0x114>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d00f      	beq.n	80090fc <TIM_OC4_SetConfig+0xc0>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	4a1e      	ldr	r2, [pc, #120]	@ (8009158 <TIM_OC4_SetConfig+0x11c>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d00b      	beq.n	80090fc <TIM_OC4_SetConfig+0xc0>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	4a1d      	ldr	r2, [pc, #116]	@ (800915c <TIM_OC4_SetConfig+0x120>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d007      	beq.n	80090fc <TIM_OC4_SetConfig+0xc0>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	4a1c      	ldr	r2, [pc, #112]	@ (8009160 <TIM_OC4_SetConfig+0x124>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d003      	beq.n	80090fc <TIM_OC4_SetConfig+0xc0>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4a17      	ldr	r2, [pc, #92]	@ (8009154 <TIM_OC4_SetConfig+0x118>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d113      	bne.n	8009124 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009102:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800910a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	695b      	ldr	r3, [r3, #20]
 8009110:	019b      	lsls	r3, r3, #6
 8009112:	693a      	ldr	r2, [r7, #16]
 8009114:	4313      	orrs	r3, r2
 8009116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	699b      	ldr	r3, [r3, #24]
 800911c:	019b      	lsls	r3, r3, #6
 800911e:	693a      	ldr	r2, [r7, #16]
 8009120:	4313      	orrs	r3, r2
 8009122:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	693a      	ldr	r2, [r7, #16]
 8009128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	68fa      	ldr	r2, [r7, #12]
 800912e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	685a      	ldr	r2, [r3, #4]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	697a      	ldr	r2, [r7, #20]
 800913c:	621a      	str	r2, [r3, #32]
}
 800913e:	bf00      	nop
 8009140:	371c      	adds	r7, #28
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr
 800914a:	bf00      	nop
 800914c:	40012c00 	.word	0x40012c00
 8009150:	40013400 	.word	0x40013400
 8009154:	40015000 	.word	0x40015000
 8009158:	40014000 	.word	0x40014000
 800915c:	40014400 	.word	0x40014400
 8009160:	40014800 	.word	0x40014800

08009164 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009164:	b480      	push	{r7}
 8009166:	b087      	sub	sp, #28
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a1b      	ldr	r3, [r3, #32]
 8009172:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6a1b      	ldr	r3, [r3, #32]
 8009178:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800918a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	4313      	orrs	r3, r2
 80091a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80091a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	041b      	lsls	r3, r3, #16
 80091b0:	693a      	ldr	r2, [r7, #16]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4a19      	ldr	r2, [pc, #100]	@ (8009220 <TIM_OC5_SetConfig+0xbc>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d013      	beq.n	80091e6 <TIM_OC5_SetConfig+0x82>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	4a18      	ldr	r2, [pc, #96]	@ (8009224 <TIM_OC5_SetConfig+0xc0>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d00f      	beq.n	80091e6 <TIM_OC5_SetConfig+0x82>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	4a17      	ldr	r2, [pc, #92]	@ (8009228 <TIM_OC5_SetConfig+0xc4>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d00b      	beq.n	80091e6 <TIM_OC5_SetConfig+0x82>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	4a16      	ldr	r2, [pc, #88]	@ (800922c <TIM_OC5_SetConfig+0xc8>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d007      	beq.n	80091e6 <TIM_OC5_SetConfig+0x82>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	4a15      	ldr	r2, [pc, #84]	@ (8009230 <TIM_OC5_SetConfig+0xcc>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d003      	beq.n	80091e6 <TIM_OC5_SetConfig+0x82>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	4a14      	ldr	r2, [pc, #80]	@ (8009234 <TIM_OC5_SetConfig+0xd0>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d109      	bne.n	80091fa <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80091ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	695b      	ldr	r3, [r3, #20]
 80091f2:	021b      	lsls	r3, r3, #8
 80091f4:	697a      	ldr	r2, [r7, #20]
 80091f6:	4313      	orrs	r3, r2
 80091f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	697a      	ldr	r2, [r7, #20]
 80091fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	685a      	ldr	r2, [r3, #4]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	693a      	ldr	r2, [r7, #16]
 8009212:	621a      	str	r2, [r3, #32]
}
 8009214:	bf00      	nop
 8009216:	371c      	adds	r7, #28
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr
 8009220:	40012c00 	.word	0x40012c00
 8009224:	40013400 	.word	0x40013400
 8009228:	40014000 	.word	0x40014000
 800922c:	40014400 	.word	0x40014400
 8009230:	40014800 	.word	0x40014800
 8009234:	40015000 	.word	0x40015000

08009238 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009238:	b480      	push	{r7}
 800923a:	b087      	sub	sp, #28
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6a1b      	ldr	r3, [r3, #32]
 8009246:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6a1b      	ldr	r3, [r3, #32]
 800924c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800925e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009266:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800926a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	021b      	lsls	r3, r3, #8
 8009272:	68fa      	ldr	r2, [r7, #12]
 8009274:	4313      	orrs	r3, r2
 8009276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800927e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	051b      	lsls	r3, r3, #20
 8009286:	693a      	ldr	r2, [r7, #16]
 8009288:	4313      	orrs	r3, r2
 800928a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4a1a      	ldr	r2, [pc, #104]	@ (80092f8 <TIM_OC6_SetConfig+0xc0>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d013      	beq.n	80092bc <TIM_OC6_SetConfig+0x84>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	4a19      	ldr	r2, [pc, #100]	@ (80092fc <TIM_OC6_SetConfig+0xc4>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d00f      	beq.n	80092bc <TIM_OC6_SetConfig+0x84>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4a18      	ldr	r2, [pc, #96]	@ (8009300 <TIM_OC6_SetConfig+0xc8>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d00b      	beq.n	80092bc <TIM_OC6_SetConfig+0x84>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	4a17      	ldr	r2, [pc, #92]	@ (8009304 <TIM_OC6_SetConfig+0xcc>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d007      	beq.n	80092bc <TIM_OC6_SetConfig+0x84>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	4a16      	ldr	r2, [pc, #88]	@ (8009308 <TIM_OC6_SetConfig+0xd0>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d003      	beq.n	80092bc <TIM_OC6_SetConfig+0x84>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	4a15      	ldr	r2, [pc, #84]	@ (800930c <TIM_OC6_SetConfig+0xd4>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d109      	bne.n	80092d0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80092c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	695b      	ldr	r3, [r3, #20]
 80092c8:	029b      	lsls	r3, r3, #10
 80092ca:	697a      	ldr	r2, [r7, #20]
 80092cc:	4313      	orrs	r3, r2
 80092ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	697a      	ldr	r2, [r7, #20]
 80092d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	68fa      	ldr	r2, [r7, #12]
 80092da:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	685a      	ldr	r2, [r3, #4]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	693a      	ldr	r2, [r7, #16]
 80092e8:	621a      	str	r2, [r3, #32]
}
 80092ea:	bf00      	nop
 80092ec:	371c      	adds	r7, #28
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr
 80092f6:	bf00      	nop
 80092f8:	40012c00 	.word	0x40012c00
 80092fc:	40013400 	.word	0x40013400
 8009300:	40014000 	.word	0x40014000
 8009304:	40014400 	.word	0x40014400
 8009308:	40014800 	.word	0x40014800
 800930c:	40015000 	.word	0x40015000

08009310 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009310:	b480      	push	{r7}
 8009312:	b087      	sub	sp, #28
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	6a1b      	ldr	r3, [r3, #32]
 8009320:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6a1b      	ldr	r3, [r3, #32]
 8009326:	f023 0201 	bic.w	r2, r3, #1
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	699b      	ldr	r3, [r3, #24]
 8009332:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800933a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	011b      	lsls	r3, r3, #4
 8009340:	693a      	ldr	r2, [r7, #16]
 8009342:	4313      	orrs	r3, r2
 8009344:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	f023 030a 	bic.w	r3, r3, #10
 800934c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800934e:	697a      	ldr	r2, [r7, #20]
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	4313      	orrs	r3, r2
 8009354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	693a      	ldr	r2, [r7, #16]
 800935a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	697a      	ldr	r2, [r7, #20]
 8009360:	621a      	str	r2, [r3, #32]
}
 8009362:	bf00      	nop
 8009364:	371c      	adds	r7, #28
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr

0800936e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800936e:	b480      	push	{r7}
 8009370:	b087      	sub	sp, #28
 8009372:	af00      	add	r7, sp, #0
 8009374:	60f8      	str	r0, [r7, #12]
 8009376:	60b9      	str	r1, [r7, #8]
 8009378:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6a1b      	ldr	r3, [r3, #32]
 800937e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6a1b      	ldr	r3, [r3, #32]
 8009384:	f023 0210 	bic.w	r2, r3, #16
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	699b      	ldr	r3, [r3, #24]
 8009390:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009398:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	031b      	lsls	r3, r3, #12
 800939e:	693a      	ldr	r2, [r7, #16]
 80093a0:	4313      	orrs	r3, r2
 80093a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80093aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	011b      	lsls	r3, r3, #4
 80093b0:	697a      	ldr	r2, [r7, #20]
 80093b2:	4313      	orrs	r3, r2
 80093b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	693a      	ldr	r2, [r7, #16]
 80093ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	697a      	ldr	r2, [r7, #20]
 80093c0:	621a      	str	r2, [r3, #32]
}
 80093c2:	bf00      	nop
 80093c4:	371c      	adds	r7, #28
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr

080093ce <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80093ce:	b480      	push	{r7}
 80093d0:	b085      	sub	sp, #20
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
 80093d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80093e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80093ea:	683a      	ldr	r2, [r7, #0]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	4313      	orrs	r3, r2
 80093f0:	f043 0307 	orr.w	r3, r3, #7
 80093f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	68fa      	ldr	r2, [r7, #12]
 80093fa:	609a      	str	r2, [r3, #8]
}
 80093fc:	bf00      	nop
 80093fe:	3714      	adds	r7, #20
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009408:	b480      	push	{r7}
 800940a:	b087      	sub	sp, #28
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	607a      	str	r2, [r7, #4]
 8009414:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009422:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	021a      	lsls	r2, r3, #8
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	431a      	orrs	r2, r3
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	4313      	orrs	r3, r2
 8009430:	697a      	ldr	r2, [r7, #20]
 8009432:	4313      	orrs	r3, r2
 8009434:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	697a      	ldr	r2, [r7, #20]
 800943a:	609a      	str	r2, [r3, #8]
}
 800943c:	bf00      	nop
 800943e:	371c      	adds	r7, #28
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009448:	b480      	push	{r7}
 800944a:	b087      	sub	sp, #28
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	f003 031f 	and.w	r3, r3, #31
 800945a:	2201      	movs	r2, #1
 800945c:	fa02 f303 	lsl.w	r3, r2, r3
 8009460:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	6a1a      	ldr	r2, [r3, #32]
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	43db      	mvns	r3, r3
 800946a:	401a      	ands	r2, r3
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6a1a      	ldr	r2, [r3, #32]
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	f003 031f 	and.w	r3, r3, #31
 800947a:	6879      	ldr	r1, [r7, #4]
 800947c:	fa01 f303 	lsl.w	r3, r1, r3
 8009480:	431a      	orrs	r2, r3
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	621a      	str	r2, [r3, #32]
}
 8009486:	bf00      	nop
 8009488:	371c      	adds	r7, #28
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr
	...

08009494 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8009494:	b480      	push	{r7}
 8009496:	b083      	sub	sp, #12
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a26      	ldr	r2, [pc, #152]	@ (8009538 <TIM_ResetCallback+0xa4>)
 80094a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4a25      	ldr	r2, [pc, #148]	@ (800953c <TIM_ResetCallback+0xa8>)
 80094a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4a24      	ldr	r2, [pc, #144]	@ (8009540 <TIM_ResetCallback+0xac>)
 80094b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4a23      	ldr	r2, [pc, #140]	@ (8009544 <TIM_ResetCallback+0xb0>)
 80094b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4a22      	ldr	r2, [pc, #136]	@ (8009548 <TIM_ResetCallback+0xb4>)
 80094c0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	4a21      	ldr	r2, [pc, #132]	@ (800954c <TIM_ResetCallback+0xb8>)
 80094c8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4a20      	ldr	r2, [pc, #128]	@ (8009550 <TIM_ResetCallback+0xbc>)
 80094d0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	4a1f      	ldr	r2, [pc, #124]	@ (8009554 <TIM_ResetCallback+0xc0>)
 80094d8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4a1e      	ldr	r2, [pc, #120]	@ (8009558 <TIM_ResetCallback+0xc4>)
 80094e0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	4a1d      	ldr	r2, [pc, #116]	@ (800955c <TIM_ResetCallback+0xc8>)
 80094e8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4a1c      	ldr	r2, [pc, #112]	@ (8009560 <TIM_ResetCallback+0xcc>)
 80094f0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4a1b      	ldr	r2, [pc, #108]	@ (8009564 <TIM_ResetCallback+0xd0>)
 80094f8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	4a1a      	ldr	r2, [pc, #104]	@ (8009568 <TIM_ResetCallback+0xd4>)
 8009500:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4a19      	ldr	r2, [pc, #100]	@ (800956c <TIM_ResetCallback+0xd8>)
 8009508:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4a18      	ldr	r2, [pc, #96]	@ (8009570 <TIM_ResetCallback+0xdc>)
 8009510:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	4a17      	ldr	r2, [pc, #92]	@ (8009574 <TIM_ResetCallback+0xe0>)
 8009518:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4a16      	ldr	r2, [pc, #88]	@ (8009578 <TIM_ResetCallback+0xe4>)
 8009520:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4a15      	ldr	r2, [pc, #84]	@ (800957c <TIM_ResetCallback+0xe8>)
 8009528:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800952c:	bf00      	nop
 800952e:	370c      	adds	r7, #12
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr
 8009538:	08003db1 	.word	0x08003db1
 800953c:	080087e1 	.word	0x080087e1
 8009540:	08008859 	.word	0x08008859
 8009544:	0800886d 	.word	0x0800886d
 8009548:	08008809 	.word	0x08008809
 800954c:	0800881d 	.word	0x0800881d
 8009550:	080087f5 	.word	0x080087f5
 8009554:	08008831 	.word	0x08008831
 8009558:	08008845 	.word	0x08008845
 800955c:	08008881 	.word	0x08008881
 8009560:	080096ad 	.word	0x080096ad
 8009564:	080096c1 	.word	0x080096c1
 8009568:	080096d5 	.word	0x080096d5
 800956c:	080096e9 	.word	0x080096e9
 8009570:	080096fd 	.word	0x080096fd
 8009574:	08009711 	.word	0x08009711
 8009578:	08009725 	.word	0x08009725
 800957c:	08009739 	.word	0x08009739

08009580 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009580:	b480      	push	{r7}
 8009582:	b085      	sub	sp, #20
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009590:	2b01      	cmp	r3, #1
 8009592:	d101      	bne.n	8009598 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009594:	2302      	movs	r3, #2
 8009596:	e074      	b.n	8009682 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2201      	movs	r2, #1
 800959c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2202      	movs	r2, #2
 80095a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a34      	ldr	r2, [pc, #208]	@ (8009690 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d009      	beq.n	80095d6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a33      	ldr	r2, [pc, #204]	@ (8009694 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d004      	beq.n	80095d6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a31      	ldr	r2, [pc, #196]	@ (8009698 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d108      	bne.n	80095e8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80095dc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	68fa      	ldr	r2, [r7, #12]
 80095e4:	4313      	orrs	r3, r2
 80095e6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80095ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	68fa      	ldr	r2, [r7, #12]
 80095fa:	4313      	orrs	r3, r2
 80095fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	68fa      	ldr	r2, [r7, #12]
 8009604:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a21      	ldr	r2, [pc, #132]	@ (8009690 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d022      	beq.n	8009656 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009618:	d01d      	beq.n	8009656 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a1f      	ldr	r2, [pc, #124]	@ (800969c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d018      	beq.n	8009656 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a1d      	ldr	r2, [pc, #116]	@ (80096a0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d013      	beq.n	8009656 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a1c      	ldr	r2, [pc, #112]	@ (80096a4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d00e      	beq.n	8009656 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a15      	ldr	r2, [pc, #84]	@ (8009694 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d009      	beq.n	8009656 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a18      	ldr	r2, [pc, #96]	@ (80096a8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d004      	beq.n	8009656 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a11      	ldr	r2, [pc, #68]	@ (8009698 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d10c      	bne.n	8009670 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800965c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	68ba      	ldr	r2, [r7, #8]
 8009664:	4313      	orrs	r3, r2
 8009666:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	68ba      	ldr	r2, [r7, #8]
 800966e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009680:	2300      	movs	r3, #0
}
 8009682:	4618      	mov	r0, r3
 8009684:	3714      	adds	r7, #20
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr
 800968e:	bf00      	nop
 8009690:	40012c00 	.word	0x40012c00
 8009694:	40013400 	.word	0x40013400
 8009698:	40015000 	.word	0x40015000
 800969c:	40000400 	.word	0x40000400
 80096a0:	40000800 	.word	0x40000800
 80096a4:	40000c00 	.word	0x40000c00
 80096a8:	40014000 	.word	0x40014000

080096ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096b4:	bf00      	nop
 80096b6:	370c      	adds	r7, #12
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80096c8:	bf00      	nop
 80096ca:	370c      	adds	r7, #12
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr

080096d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096dc:	bf00      	nop
 80096de:	370c      	adds	r7, #12
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr

080096e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80096f0:	bf00      	nop
 80096f2:	370c      	adds	r7, #12
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009704:	bf00      	nop
 8009706:	370c      	adds	r7, #12
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009718:	bf00      	nop
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009724:	b480      	push	{r7}
 8009726:	b083      	sub	sp, #12
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800972c:	bf00      	nop
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009738:	b480      	push	{r7}
 800973a:	b083      	sub	sp, #12
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009740:	bf00      	nop
 8009742:	370c      	adds	r7, #12
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d101      	bne.n	800975e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	e050      	b.n	8009800 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009764:	2b00      	cmp	r3, #0
 8009766:	d114      	bne.n	8009792 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 fe8d 	bl	800a490 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800977c:	2b00      	cmp	r3, #0
 800977e:	d103      	bne.n	8009788 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	4a21      	ldr	r2, [pc, #132]	@ (8009808 <HAL_UART_Init+0xbc>)
 8009784:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2224      	movs	r2, #36	@ 0x24
 8009796:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f022 0201 	bic.w	r2, r2, #1
 80097a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d002      	beq.n	80097b8 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f001 f9ba 	bl	800ab2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 febb 	bl	800a534 <UART_SetConfig>
 80097be:	4603      	mov	r3, r0
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d101      	bne.n	80097c8 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 80097c4:	2301      	movs	r3, #1
 80097c6:	e01b      	b.n	8009800 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	685a      	ldr	r2, [r3, #4]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80097d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	689a      	ldr	r2, [r3, #8]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80097e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f042 0201 	orr.w	r2, r2, #1
 80097f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f001 fa39 	bl	800ac70 <UART_CheckIdleState>
 80097fe:	4603      	mov	r3, r0
}
 8009800:	4618      	mov	r0, r3
 8009802:	3708      	adds	r7, #8
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}
 8009808:	0800432d 	.word	0x0800432d

0800980c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800980c:	b480      	push	{r7}
 800980e:	b087      	sub	sp, #28
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	460b      	mov	r3, r1
 8009816:	607a      	str	r2, [r7, #4]
 8009818:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800981a:	2300      	movs	r3, #0
 800981c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d109      	bne.n	8009838 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800982a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	e09c      	b.n	8009972 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800983e:	2b20      	cmp	r3, #32
 8009840:	d16c      	bne.n	800991c <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8009842:	7afb      	ldrb	r3, [r7, #11]
 8009844:	2b0c      	cmp	r3, #12
 8009846:	d85e      	bhi.n	8009906 <HAL_UART_RegisterCallback+0xfa>
 8009848:	a201      	add	r2, pc, #4	@ (adr r2, 8009850 <HAL_UART_RegisterCallback+0x44>)
 800984a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800984e:	bf00      	nop
 8009850:	08009885 	.word	0x08009885
 8009854:	0800988f 	.word	0x0800988f
 8009858:	08009899 	.word	0x08009899
 800985c:	080098a3 	.word	0x080098a3
 8009860:	080098ad 	.word	0x080098ad
 8009864:	080098b7 	.word	0x080098b7
 8009868:	080098c1 	.word	0x080098c1
 800986c:	080098cb 	.word	0x080098cb
 8009870:	080098d5 	.word	0x080098d5
 8009874:	080098df 	.word	0x080098df
 8009878:	080098e9 	.word	0x080098e9
 800987c:	080098f3 	.word	0x080098f3
 8009880:	080098fd 	.word	0x080098fd
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800988c:	e070      	b.n	8009970 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8009896:	e06b      	b.n	8009970 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	687a      	ldr	r2, [r7, #4]
 800989c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80098a0:	e066      	b.n	8009970 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80098aa:	e061      	b.n	8009970 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80098b4:	e05c      	b.n	8009970 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	687a      	ldr	r2, [r7, #4]
 80098ba:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80098be:	e057      	b.n	8009970 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80098c8:	e052      	b.n	8009970 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80098d2:	e04d      	b.n	8009970 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80098dc:	e048      	b.n	8009970 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80098e6:	e043      	b.n	8009970 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80098f0:	e03e      	b.n	8009970 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80098fa:	e039      	b.n	8009970 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009904:	e034      	b.n	8009970 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800990c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009916:	2301      	movs	r3, #1
 8009918:	75fb      	strb	r3, [r7, #23]
        break;
 800991a:	e029      	b.n	8009970 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009922:	2b00      	cmp	r3, #0
 8009924:	d11a      	bne.n	800995c <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8009926:	7afb      	ldrb	r3, [r7, #11]
 8009928:	2b0b      	cmp	r3, #11
 800992a:	d002      	beq.n	8009932 <HAL_UART_RegisterCallback+0x126>
 800992c:	2b0c      	cmp	r3, #12
 800992e:	d005      	beq.n	800993c <HAL_UART_RegisterCallback+0x130>
 8009930:	e009      	b.n	8009946 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800993a:	e019      	b.n	8009970 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009944:	e014      	b.n	8009970 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800994c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	75fb      	strb	r3, [r7, #23]
        break;
 800995a:	e009      	b.n	8009970 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009962:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800996c:	2301      	movs	r3, #1
 800996e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009970:	7dfb      	ldrb	r3, [r7, #23]
}
 8009972:	4618      	mov	r0, r3
 8009974:	371c      	adds	r7, #28
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr
 800997e:	bf00      	nop

08009980 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b08a      	sub	sp, #40	@ 0x28
 8009984:	af02      	add	r7, sp, #8
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	603b      	str	r3, [r7, #0]
 800998c:	4613      	mov	r3, r2
 800998e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009996:	2b20      	cmp	r3, #32
 8009998:	f040 80b5 	bne.w	8009b06 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d002      	beq.n	80099a8 <HAL_UART_Receive+0x28>
 80099a2:	88fb      	ldrh	r3, [r7, #6]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d101      	bne.n	80099ac <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80099a8:	2301      	movs	r3, #1
 80099aa:	e0ad      	b.n	8009b08 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2200      	movs	r2, #0
 80099b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2222      	movs	r2, #34	@ 0x22
 80099b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2200      	movs	r2, #0
 80099c0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80099c2:	f7fa fec3 	bl	800474c <HAL_GetTick>
 80099c6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	88fa      	ldrh	r2, [r7, #6]
 80099cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	88fa      	ldrh	r2, [r7, #6]
 80099d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	689b      	ldr	r3, [r3, #8]
 80099dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099e0:	d10e      	bne.n	8009a00 <HAL_UART_Receive+0x80>
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d105      	bne.n	80099f6 <HAL_UART_Receive+0x76>
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80099f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80099f4:	e02d      	b.n	8009a52 <HAL_UART_Receive+0xd2>
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	22ff      	movs	r2, #255	@ 0xff
 80099fa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80099fe:	e028      	b.n	8009a52 <HAL_UART_Receive+0xd2>
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d10d      	bne.n	8009a24 <HAL_UART_Receive+0xa4>
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	691b      	ldr	r3, [r3, #16]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d104      	bne.n	8009a1a <HAL_UART_Receive+0x9a>
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	22ff      	movs	r2, #255	@ 0xff
 8009a14:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009a18:	e01b      	b.n	8009a52 <HAL_UART_Receive+0xd2>
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	227f      	movs	r2, #127	@ 0x7f
 8009a1e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009a22:	e016      	b.n	8009a52 <HAL_UART_Receive+0xd2>
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a2c:	d10d      	bne.n	8009a4a <HAL_UART_Receive+0xca>
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	691b      	ldr	r3, [r3, #16]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d104      	bne.n	8009a40 <HAL_UART_Receive+0xc0>
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	227f      	movs	r2, #127	@ 0x7f
 8009a3a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009a3e:	e008      	b.n	8009a52 <HAL_UART_Receive+0xd2>
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	223f      	movs	r2, #63	@ 0x3f
 8009a44:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009a48:	e003      	b.n	8009a52 <HAL_UART_Receive+0xd2>
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009a58:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a62:	d108      	bne.n	8009a76 <HAL_UART_Receive+0xf6>
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	691b      	ldr	r3, [r3, #16]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d104      	bne.n	8009a76 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	61bb      	str	r3, [r7, #24]
 8009a74:	e003      	b.n	8009a7e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009a7e:	e036      	b.n	8009aee <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	9300      	str	r3, [sp, #0]
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	2200      	movs	r2, #0
 8009a88:	2120      	movs	r1, #32
 8009a8a:	68f8      	ldr	r0, [r7, #12]
 8009a8c:	f001 f99a 	bl	800adc4 <UART_WaitOnFlagUntilTimeout>
 8009a90:	4603      	mov	r3, r0
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d005      	beq.n	8009aa2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2220      	movs	r2, #32
 8009a9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8009a9e:	2303      	movs	r3, #3
 8009aa0:	e032      	b.n	8009b08 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8009aa2:	69fb      	ldr	r3, [r7, #28]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d10c      	bne.n	8009ac2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009aae:	b29a      	uxth	r2, r3
 8009ab0:	8a7b      	ldrh	r3, [r7, #18]
 8009ab2:	4013      	ands	r3, r2
 8009ab4:	b29a      	uxth	r2, r3
 8009ab6:	69bb      	ldr	r3, [r7, #24]
 8009ab8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009aba:	69bb      	ldr	r3, [r7, #24]
 8009abc:	3302      	adds	r3, #2
 8009abe:	61bb      	str	r3, [r7, #24]
 8009ac0:	e00c      	b.n	8009adc <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ac8:	b2da      	uxtb	r2, r3
 8009aca:	8a7b      	ldrh	r3, [r7, #18]
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	4013      	ands	r3, r2
 8009ad0:	b2da      	uxtb	r2, r3
 8009ad2:	69fb      	ldr	r3, [r7, #28]
 8009ad4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009ad6:	69fb      	ldr	r3, [r7, #28]
 8009ad8:	3301      	adds	r3, #1
 8009ada:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	3b01      	subs	r3, #1
 8009ae6:	b29a      	uxth	r2, r3
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d1c2      	bne.n	8009a80 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2220      	movs	r2, #32
 8009afe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8009b02:	2300      	movs	r3, #0
 8009b04:	e000      	b.n	8009b08 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8009b06:	2302      	movs	r3, #2
  }
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3720      	adds	r7, #32
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b08a      	sub	sp, #40	@ 0x28
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	60f8      	str	r0, [r7, #12]
 8009b18:	60b9      	str	r1, [r7, #8]
 8009b1a:	4613      	mov	r3, r2
 8009b1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b24:	2b20      	cmp	r3, #32
 8009b26:	d167      	bne.n	8009bf8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d002      	beq.n	8009b34 <HAL_UART_Transmit_DMA+0x24>
 8009b2e:	88fb      	ldrh	r3, [r7, #6]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d101      	bne.n	8009b38 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009b34:	2301      	movs	r3, #1
 8009b36:	e060      	b.n	8009bfa <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	68ba      	ldr	r2, [r7, #8]
 8009b3c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	88fa      	ldrh	r2, [r7, #6]
 8009b42:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	88fa      	ldrh	r2, [r7, #6]
 8009b4a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2200      	movs	r2, #0
 8009b52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2221      	movs	r2, #33	@ 0x21
 8009b5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d028      	beq.n	8009bb8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b6a:	4a26      	ldr	r2, [pc, #152]	@ (8009c04 <HAL_UART_Transmit_DMA+0xf4>)
 8009b6c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b72:	4a25      	ldr	r2, [pc, #148]	@ (8009c08 <HAL_UART_Transmit_DMA+0xf8>)
 8009b74:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b7a:	4a24      	ldr	r2, [pc, #144]	@ (8009c0c <HAL_UART_Transmit_DMA+0xfc>)
 8009b7c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b82:	2200      	movs	r2, #0
 8009b84:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b8e:	4619      	mov	r1, r3
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	3328      	adds	r3, #40	@ 0x28
 8009b96:	461a      	mov	r2, r3
 8009b98:	88fb      	ldrh	r3, [r7, #6]
 8009b9a:	f7fc f89b 	bl	8005cd4 <HAL_DMA_Start_IT>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d009      	beq.n	8009bb8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2210      	movs	r2, #16
 8009ba8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2220      	movs	r2, #32
 8009bb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	e020      	b.n	8009bfa <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	2240      	movs	r2, #64	@ 0x40
 8009bbe:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	3308      	adds	r3, #8
 8009bc6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	e853 3f00 	ldrex	r3, [r3]
 8009bce:	613b      	str	r3, [r7, #16]
   return(result);
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	3308      	adds	r3, #8
 8009bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009be0:	623a      	str	r2, [r7, #32]
 8009be2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009be4:	69f9      	ldr	r1, [r7, #28]
 8009be6:	6a3a      	ldr	r2, [r7, #32]
 8009be8:	e841 2300 	strex	r3, r2, [r1]
 8009bec:	61bb      	str	r3, [r7, #24]
   return(result);
 8009bee:	69bb      	ldr	r3, [r7, #24]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d1e5      	bne.n	8009bc0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	e000      	b.n	8009bfa <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009bf8:	2302      	movs	r3, #2
  }
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3728      	adds	r7, #40	@ 0x28
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
 8009c02:	bf00      	nop
 8009c04:	0800b13b 	.word	0x0800b13b
 8009c08:	0800b1d9 	.word	0x0800b1d9
 8009c0c:	0800b373 	.word	0x0800b373

08009c10 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b08a      	sub	sp, #40	@ 0x28
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	60b9      	str	r1, [r7, #8]
 8009c1a:	4613      	mov	r3, r2
 8009c1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c24:	2b20      	cmp	r3, #32
 8009c26:	d137      	bne.n	8009c98 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d002      	beq.n	8009c34 <HAL_UART_Receive_DMA+0x24>
 8009c2e:	88fb      	ldrh	r3, [r7, #6]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d101      	bne.n	8009c38 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009c34:	2301      	movs	r3, #1
 8009c36:	e030      	b.n	8009c9a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4a18      	ldr	r2, [pc, #96]	@ (8009ca4 <HAL_UART_Receive_DMA+0x94>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d01f      	beq.n	8009c88 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d018      	beq.n	8009c88 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	e853 3f00 	ldrex	r3, [r3]
 8009c62:	613b      	str	r3, [r7, #16]
   return(result);
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009c6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	461a      	mov	r2, r3
 8009c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c74:	623b      	str	r3, [r7, #32]
 8009c76:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c78:	69f9      	ldr	r1, [r7, #28]
 8009c7a:	6a3a      	ldr	r2, [r7, #32]
 8009c7c:	e841 2300 	strex	r3, r2, [r1]
 8009c80:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c82:	69bb      	ldr	r3, [r7, #24]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d1e6      	bne.n	8009c56 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009c88:	88fb      	ldrh	r3, [r7, #6]
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	68b9      	ldr	r1, [r7, #8]
 8009c8e:	68f8      	ldr	r0, [r7, #12]
 8009c90:	f001 f906 	bl	800aea0 <UART_Start_Receive_DMA>
 8009c94:	4603      	mov	r3, r0
 8009c96:	e000      	b.n	8009c9a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009c98:	2302      	movs	r3, #2
  }
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3728      	adds	r7, #40	@ 0x28
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	40008000 	.word	0x40008000

08009ca8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b0ba      	sub	sp, #232	@ 0xe8
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	69db      	ldr	r3, [r3, #28]
 8009cb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	689b      	ldr	r3, [r3, #8]
 8009cca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009cce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009cd2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009cd6:	4013      	ands	r3, r2
 8009cd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009cdc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d11b      	bne.n	8009d1c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ce8:	f003 0320 	and.w	r3, r3, #32
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d015      	beq.n	8009d1c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cf4:	f003 0320 	and.w	r3, r3, #32
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d105      	bne.n	8009d08 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009cfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d009      	beq.n	8009d1c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	f000 82f3 	beq.w	800a2f8 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	4798      	blx	r3
      }
      return;
 8009d1a:	e2ed      	b.n	800a2f8 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009d1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	f000 8129 	beq.w	8009f78 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009d26:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009d2a:	4b90      	ldr	r3, [pc, #576]	@ (8009f6c <HAL_UART_IRQHandler+0x2c4>)
 8009d2c:	4013      	ands	r3, r2
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d106      	bne.n	8009d40 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009d32:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009d36:	4b8e      	ldr	r3, [pc, #568]	@ (8009f70 <HAL_UART_IRQHandler+0x2c8>)
 8009d38:	4013      	ands	r3, r2
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	f000 811c 	beq.w	8009f78 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d44:	f003 0301 	and.w	r3, r3, #1
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d011      	beq.n	8009d70 <HAL_UART_IRQHandler+0xc8>
 8009d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d00b      	beq.n	8009d70 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d66:	f043 0201 	orr.w	r2, r3, #1
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d74:	f003 0302 	and.w	r3, r3, #2
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d011      	beq.n	8009da0 <HAL_UART_IRQHandler+0xf8>
 8009d7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d80:	f003 0301 	and.w	r3, r3, #1
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d00b      	beq.n	8009da0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	2202      	movs	r2, #2
 8009d8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d96:	f043 0204 	orr.w	r2, r3, #4
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009da4:	f003 0304 	and.w	r3, r3, #4
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d011      	beq.n	8009dd0 <HAL_UART_IRQHandler+0x128>
 8009dac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009db0:	f003 0301 	and.w	r3, r3, #1
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d00b      	beq.n	8009dd0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	2204      	movs	r2, #4
 8009dbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009dc6:	f043 0202 	orr.w	r2, r3, #2
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dd4:	f003 0308 	and.w	r3, r3, #8
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d017      	beq.n	8009e0c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009de0:	f003 0320 	and.w	r3, r3, #32
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d105      	bne.n	8009df4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009de8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009dec:	4b5f      	ldr	r3, [pc, #380]	@ (8009f6c <HAL_UART_IRQHandler+0x2c4>)
 8009dee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d00b      	beq.n	8009e0c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2208      	movs	r2, #8
 8009dfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e02:	f043 0208 	orr.w	r2, r3, #8
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d012      	beq.n	8009e3e <HAL_UART_IRQHandler+0x196>
 8009e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e1c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d00c      	beq.n	8009e3e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009e2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e34:	f043 0220 	orr.w	r2, r3, #32
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	f000 8259 	beq.w	800a2fc <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e4e:	f003 0320 	and.w	r3, r3, #32
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d013      	beq.n	8009e7e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009e56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e5a:	f003 0320 	and.w	r3, r3, #32
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d105      	bne.n	8009e6e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009e62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d007      	beq.n	8009e7e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d003      	beq.n	8009e7e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e84:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	689b      	ldr	r3, [r3, #8]
 8009e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e92:	2b40      	cmp	r3, #64	@ 0x40
 8009e94:	d005      	beq.n	8009ea2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009e96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009e9a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d058      	beq.n	8009f54 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f001 f8e3 	bl	800b06e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	689b      	ldr	r3, [r3, #8]
 8009eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009eb2:	2b40      	cmp	r3, #64	@ 0x40
 8009eb4:	d148      	bne.n	8009f48 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	3308      	adds	r3, #8
 8009ebc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009ec4:	e853 3f00 	ldrex	r3, [r3]
 8009ec8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009ecc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009ed0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ed4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	3308      	adds	r3, #8
 8009ede:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009ee2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009ee6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009eee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009ef2:	e841 2300 	strex	r3, r2, [r1]
 8009ef6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009efa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d1d9      	bne.n	8009eb6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d017      	beq.n	8009f3c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f12:	4a18      	ldr	r2, [pc, #96]	@ (8009f74 <HAL_UART_IRQHandler+0x2cc>)
 8009f14:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7fb ffad 	bl	8005e7c <HAL_DMA_Abort_IT>
 8009f22:	4603      	mov	r3, r0
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d01f      	beq.n	8009f68 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009f36:	4610      	mov	r0, r2
 8009f38:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f3a:	e015      	b.n	8009f68 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f46:	e00f      	b.n	8009f68 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f52:	e009      	b.n	8009f68 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2200      	movs	r2, #0
 8009f62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009f66:	e1c9      	b.n	800a2fc <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f68:	bf00      	nop
    return;
 8009f6a:	e1c7      	b.n	800a2fc <HAL_UART_IRQHandler+0x654>
 8009f6c:	10000001 	.word	0x10000001
 8009f70:	04000120 	.word	0x04000120
 8009f74:	0800b3f7 	.word	0x0800b3f7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	f040 8157 	bne.w	800a230 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f86:	f003 0310 	and.w	r3, r3, #16
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	f000 8150 	beq.w	800a230 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f94:	f003 0310 	and.w	r3, r3, #16
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	f000 8149 	beq.w	800a230 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	2210      	movs	r2, #16
 8009fa4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fb0:	2b40      	cmp	r3, #64	@ 0x40
 8009fb2:	f040 80bd 	bne.w	800a130 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009fc4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	f000 8199 	beq.w	800a300 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009fd4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	f080 8191 	bcs.w	800a300 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009fe4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f003 0320 	and.w	r3, r3, #32
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	f040 8087 	bne.w	800a10a <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a004:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a008:	e853 3f00 	ldrex	r3, [r3]
 800a00c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a010:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a014:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a018:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	461a      	mov	r2, r3
 800a022:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a026:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a02a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a032:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a036:	e841 2300 	strex	r3, r2, [r1]
 800a03a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a03e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a042:	2b00      	cmp	r3, #0
 800a044:	d1da      	bne.n	8009ffc <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	3308      	adds	r3, #8
 800a04c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a04e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a050:	e853 3f00 	ldrex	r3, [r3]
 800a054:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a056:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a058:	f023 0301 	bic.w	r3, r3, #1
 800a05c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	3308      	adds	r3, #8
 800a066:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a06a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a06e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a070:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a072:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a076:	e841 2300 	strex	r3, r2, [r1]
 800a07a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a07c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d1e1      	bne.n	800a046 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	3308      	adds	r3, #8
 800a088:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a08a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a08c:	e853 3f00 	ldrex	r3, [r3]
 800a090:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a092:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a094:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a098:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	3308      	adds	r3, #8
 800a0a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a0a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a0a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a0ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a0ae:	e841 2300 	strex	r3, r2, [r1]
 800a0b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a0b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d1e3      	bne.n	800a082 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2220      	movs	r2, #32
 800a0be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0d0:	e853 3f00 	ldrex	r3, [r3]
 800a0d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a0d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0d8:	f023 0310 	bic.w	r3, r3, #16
 800a0dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a0ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a0ec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a0f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a0f2:	e841 2300 	strex	r3, r2, [r1]
 800a0f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a0f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d1e4      	bne.n	800a0c8 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a104:	4618      	mov	r0, r3
 800a106:	f7fb fe60 	bl	8005dca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2202      	movs	r2, #2
 800a10e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a116:	687a      	ldr	r2, [r7, #4]
 800a118:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800a11c:	687a      	ldr	r2, [r7, #4]
 800a11e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800a122:	b292      	uxth	r2, r2
 800a124:	1a8a      	subs	r2, r1, r2
 800a126:	b292      	uxth	r2, r2
 800a128:	4611      	mov	r1, r2
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a12e:	e0e7      	b.n	800a300 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	1ad3      	subs	r3, r2, r3
 800a140:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	f000 80d9 	beq.w	800a304 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 800a152:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a156:	2b00      	cmp	r3, #0
 800a158:	f000 80d4 	beq.w	800a304 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a164:	e853 3f00 	ldrex	r3, [r3]
 800a168:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a16a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a16c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a170:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	461a      	mov	r2, r3
 800a17a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a17e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a180:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a182:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a184:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a186:	e841 2300 	strex	r3, r2, [r1]
 800a18a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a18c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d1e4      	bne.n	800a15c <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	3308      	adds	r3, #8
 800a198:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a19a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a19c:	e853 3f00 	ldrex	r3, [r3]
 800a1a0:	623b      	str	r3, [r7, #32]
   return(result);
 800a1a2:	6a3b      	ldr	r3, [r7, #32]
 800a1a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a1a8:	f023 0301 	bic.w	r3, r3, #1
 800a1ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	3308      	adds	r3, #8
 800a1b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a1ba:	633a      	str	r2, [r7, #48]	@ 0x30
 800a1bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a1c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1c2:	e841 2300 	strex	r3, r2, [r1]
 800a1c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a1c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d1e1      	bne.n	800a192 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2220      	movs	r2, #32
 800a1d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	e853 3f00 	ldrex	r3, [r3]
 800a1ee:	60fb      	str	r3, [r7, #12]
   return(result);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f023 0310 	bic.w	r3, r3, #16
 800a1f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	461a      	mov	r2, r3
 800a200:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a204:	61fb      	str	r3, [r7, #28]
 800a206:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a208:	69b9      	ldr	r1, [r7, #24]
 800a20a:	69fa      	ldr	r2, [r7, #28]
 800a20c:	e841 2300 	strex	r3, r2, [r1]
 800a210:	617b      	str	r3, [r7, #20]
   return(result);
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d1e4      	bne.n	800a1e2 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2202      	movs	r2, #2
 800a21c:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a224:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800a228:	4611      	mov	r1, r2
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a22e:	e069      	b.n	800a304 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a234:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d010      	beq.n	800a25e <HAL_UART_IRQHandler+0x5b6>
 800a23c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a240:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a244:	2b00      	cmp	r3, #0
 800a246:	d00a      	beq.n	800a25e <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a250:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a25c:	e055      	b.n	800a30a <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a25e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a266:	2b00      	cmp	r3, #0
 800a268:	d014      	beq.n	800a294 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a26a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a26e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a272:	2b00      	cmp	r3, #0
 800a274:	d105      	bne.n	800a282 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a276:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a27a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d008      	beq.n	800a294 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a286:	2b00      	cmp	r3, #0
 800a288:	d03e      	beq.n	800a308 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	4798      	blx	r3
    }
    return;
 800a292:	e039      	b.n	800a308 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d009      	beq.n	800a2b4 <HAL_UART_IRQHandler+0x60c>
 800a2a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d003      	beq.n	800a2b4 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f001 f8ba 	bl	800b426 <UART_EndTransmit_IT>
    return;
 800a2b2:	e02a      	b.n	800a30a <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a2b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d00b      	beq.n	800a2d8 <HAL_UART_IRQHandler+0x630>
 800a2c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2c4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d005      	beq.n	800a2d8 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a2d6:	e018      	b.n	800a30a <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a2d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d012      	beq.n	800a30a <HAL_UART_IRQHandler+0x662>
 800a2e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	da0e      	bge.n	800a30a <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a2f6:	e008      	b.n	800a30a <HAL_UART_IRQHandler+0x662>
      return;
 800a2f8:	bf00      	nop
 800a2fa:	e006      	b.n	800a30a <HAL_UART_IRQHandler+0x662>
    return;
 800a2fc:	bf00      	nop
 800a2fe:	e004      	b.n	800a30a <HAL_UART_IRQHandler+0x662>
      return;
 800a300:	bf00      	nop
 800a302:	e002      	b.n	800a30a <HAL_UART_IRQHandler+0x662>
      return;
 800a304:	bf00      	nop
 800a306:	e000      	b.n	800a30a <HAL_UART_IRQHandler+0x662>
    return;
 800a308:	bf00      	nop
  }
}
 800a30a:	37e8      	adds	r7, #232	@ 0xe8
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a310:	b480      	push	{r7}
 800a312:	b083      	sub	sp, #12
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a318:	bf00      	nop
 800a31a:	370c      	adds	r7, #12
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr

0800a324 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a324:	b480      	push	{r7}
 800a326:	b083      	sub	sp, #12
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a32c:	bf00      	nop
 800a32e:	370c      	adds	r7, #12
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a340:	bf00      	nop
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr

0800a34c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b083      	sub	sp, #12
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a354:	bf00      	nop
 800a356:	370c      	adds	r7, #12
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a368:	bf00      	nop
 800a36a:	370c      	adds	r7, #12
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr

0800a374 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a374:	b480      	push	{r7}
 800a376:	b083      	sub	sp, #12
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800a37c:	bf00      	nop
 800a37e:	370c      	adds	r7, #12
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr

0800a388 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800a388:	b480      	push	{r7}
 800a38a:	b083      	sub	sp, #12
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800a390:	bf00      	nop
 800a392:	370c      	adds	r7, #12
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800a3a4:	bf00      	nop
 800a3a6:	370c      	adds	r7, #12
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b083      	sub	sp, #12
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a3bc:	bf00      	nop
 800a3be:	370c      	adds	r7, #12
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4a09      	ldr	r2, [pc, #36]	@ (800a3fc <HAL_UART_ReceiverTimeout_Config+0x34>)
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d009      	beq.n	800a3f0 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	695b      	ldr	r3, [r3, #20]
 800a3e2:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	683a      	ldr	r2, [r7, #0]
 800a3ec:	430a      	orrs	r2, r1
 800a3ee:	615a      	str	r2, [r3, #20]
  }
}
 800a3f0:	bf00      	nop
 800a3f2:	370c      	adds	r7, #12
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr
 800a3fc:	40008000 	.word	0x40008000

0800a400 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800a400:	b480      	push	{r7}
 800a402:	b083      	sub	sp, #12
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a18      	ldr	r2, [pc, #96]	@ (800a470 <HAL_UART_EnableReceiverTimeout+0x70>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d027      	beq.n	800a462 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a418:	2b20      	cmp	r3, #32
 800a41a:	d120      	bne.n	800a45e <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a422:	2b01      	cmp	r3, #1
 800a424:	d101      	bne.n	800a42a <HAL_UART_EnableReceiverTimeout+0x2a>
 800a426:	2302      	movs	r3, #2
 800a428:	e01c      	b.n	800a464 <HAL_UART_EnableReceiverTimeout+0x64>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2201      	movs	r2, #1
 800a42e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2224      	movs	r2, #36	@ 0x24
 800a436:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	685a      	ldr	r2, [r3, #4]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800a448:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2220      	movs	r2, #32
 800a44e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2200      	movs	r2, #0
 800a456:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800a45a:	2300      	movs	r3, #0
 800a45c:	e002      	b.n	800a464 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800a45e:	2302      	movs	r3, #2
 800a460:	e000      	b.n	800a464 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800a462:	2301      	movs	r3, #1
  }
}
 800a464:	4618      	mov	r0, r3
 800a466:	370c      	adds	r7, #12
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr
 800a470:	40008000 	.word	0x40008000

0800a474 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800a482:	4618      	mov	r0, r3
 800a484:	370c      	adds	r7, #12
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr
	...

0800a490 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800a490:	b480      	push	{r7}
 800a492:	b083      	sub	sp, #12
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	4a1a      	ldr	r2, [pc, #104]	@ (800a504 <UART_InitCallbacksToDefault+0x74>)
 800a49c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	4a19      	ldr	r2, [pc, #100]	@ (800a508 <UART_InitCallbacksToDefault+0x78>)
 800a4a4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	4a18      	ldr	r2, [pc, #96]	@ (800a50c <UART_InitCallbacksToDefault+0x7c>)
 800a4ac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	4a17      	ldr	r2, [pc, #92]	@ (800a510 <UART_InitCallbacksToDefault+0x80>)
 800a4b4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	4a16      	ldr	r2, [pc, #88]	@ (800a514 <UART_InitCallbacksToDefault+0x84>)
 800a4bc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	4a15      	ldr	r2, [pc, #84]	@ (800a518 <UART_InitCallbacksToDefault+0x88>)
 800a4c4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	4a14      	ldr	r2, [pc, #80]	@ (800a51c <UART_InitCallbacksToDefault+0x8c>)
 800a4cc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	4a13      	ldr	r2, [pc, #76]	@ (800a520 <UART_InitCallbacksToDefault+0x90>)
 800a4d4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	4a12      	ldr	r2, [pc, #72]	@ (800a524 <UART_InitCallbacksToDefault+0x94>)
 800a4dc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	4a11      	ldr	r2, [pc, #68]	@ (800a528 <UART_InitCallbacksToDefault+0x98>)
 800a4e4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	4a10      	ldr	r2, [pc, #64]	@ (800a52c <UART_InitCallbacksToDefault+0x9c>)
 800a4ec:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	4a0f      	ldr	r2, [pc, #60]	@ (800a530 <UART_InitCallbacksToDefault+0xa0>)
 800a4f4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800a4f8:	bf00      	nop
 800a4fa:	370c      	adds	r7, #12
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr
 800a504:	0800a325 	.word	0x0800a325
 800a508:	0800a311 	.word	0x0800a311
 800a50c:	0800a34d 	.word	0x0800a34d
 800a510:	0800a339 	.word	0x0800a339
 800a514:	0800a361 	.word	0x0800a361
 800a518:	0800a375 	.word	0x0800a375
 800a51c:	0800a389 	.word	0x0800a389
 800a520:	0800a39d 	.word	0x0800a39d
 800a524:	0800b481 	.word	0x0800b481
 800a528:	0800b495 	.word	0x0800b495
 800a52c:	0800b4a9 	.word	0x0800b4a9
 800a530:	0800a3b1 	.word	0x0800a3b1

0800a534 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a538:	b08c      	sub	sp, #48	@ 0x30
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a53e:	2300      	movs	r3, #0
 800a540:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	689a      	ldr	r2, [r3, #8]
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	691b      	ldr	r3, [r3, #16]
 800a54c:	431a      	orrs	r2, r3
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	695b      	ldr	r3, [r3, #20]
 800a552:	431a      	orrs	r2, r3
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	69db      	ldr	r3, [r3, #28]
 800a558:	4313      	orrs	r3, r2
 800a55a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	681a      	ldr	r2, [r3, #0]
 800a562:	4baa      	ldr	r3, [pc, #680]	@ (800a80c <UART_SetConfig+0x2d8>)
 800a564:	4013      	ands	r3, r2
 800a566:	697a      	ldr	r2, [r7, #20]
 800a568:	6812      	ldr	r2, [r2, #0]
 800a56a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a56c:	430b      	orrs	r3, r1
 800a56e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	68da      	ldr	r2, [r3, #12]
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	430a      	orrs	r2, r1
 800a584:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	699b      	ldr	r3, [r3, #24]
 800a58a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4a9f      	ldr	r2, [pc, #636]	@ (800a810 <UART_SetConfig+0x2dc>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d004      	beq.n	800a5a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	6a1b      	ldr	r3, [r3, #32]
 800a59a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a59c:	4313      	orrs	r3, r2
 800a59e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	689b      	ldr	r3, [r3, #8]
 800a5a6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a5aa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a5ae:	697a      	ldr	r2, [r7, #20]
 800a5b0:	6812      	ldr	r2, [r2, #0]
 800a5b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a5b4:	430b      	orrs	r3, r1
 800a5b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5be:	f023 010f 	bic.w	r1, r3, #15
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	430a      	orrs	r2, r1
 800a5cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4a90      	ldr	r2, [pc, #576]	@ (800a814 <UART_SetConfig+0x2e0>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d125      	bne.n	800a624 <UART_SetConfig+0xf0>
 800a5d8:	4b8f      	ldr	r3, [pc, #572]	@ (800a818 <UART_SetConfig+0x2e4>)
 800a5da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5de:	f003 0303 	and.w	r3, r3, #3
 800a5e2:	2b03      	cmp	r3, #3
 800a5e4:	d81a      	bhi.n	800a61c <UART_SetConfig+0xe8>
 800a5e6:	a201      	add	r2, pc, #4	@ (adr r2, 800a5ec <UART_SetConfig+0xb8>)
 800a5e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ec:	0800a5fd 	.word	0x0800a5fd
 800a5f0:	0800a60d 	.word	0x0800a60d
 800a5f4:	0800a605 	.word	0x0800a605
 800a5f8:	0800a615 	.word	0x0800a615
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a602:	e116      	b.n	800a832 <UART_SetConfig+0x2fe>
 800a604:	2302      	movs	r3, #2
 800a606:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a60a:	e112      	b.n	800a832 <UART_SetConfig+0x2fe>
 800a60c:	2304      	movs	r3, #4
 800a60e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a612:	e10e      	b.n	800a832 <UART_SetConfig+0x2fe>
 800a614:	2308      	movs	r3, #8
 800a616:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a61a:	e10a      	b.n	800a832 <UART_SetConfig+0x2fe>
 800a61c:	2310      	movs	r3, #16
 800a61e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a622:	e106      	b.n	800a832 <UART_SetConfig+0x2fe>
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4a7c      	ldr	r2, [pc, #496]	@ (800a81c <UART_SetConfig+0x2e8>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d138      	bne.n	800a6a0 <UART_SetConfig+0x16c>
 800a62e:	4b7a      	ldr	r3, [pc, #488]	@ (800a818 <UART_SetConfig+0x2e4>)
 800a630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a634:	f003 030c 	and.w	r3, r3, #12
 800a638:	2b0c      	cmp	r3, #12
 800a63a:	d82d      	bhi.n	800a698 <UART_SetConfig+0x164>
 800a63c:	a201      	add	r2, pc, #4	@ (adr r2, 800a644 <UART_SetConfig+0x110>)
 800a63e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a642:	bf00      	nop
 800a644:	0800a679 	.word	0x0800a679
 800a648:	0800a699 	.word	0x0800a699
 800a64c:	0800a699 	.word	0x0800a699
 800a650:	0800a699 	.word	0x0800a699
 800a654:	0800a689 	.word	0x0800a689
 800a658:	0800a699 	.word	0x0800a699
 800a65c:	0800a699 	.word	0x0800a699
 800a660:	0800a699 	.word	0x0800a699
 800a664:	0800a681 	.word	0x0800a681
 800a668:	0800a699 	.word	0x0800a699
 800a66c:	0800a699 	.word	0x0800a699
 800a670:	0800a699 	.word	0x0800a699
 800a674:	0800a691 	.word	0x0800a691
 800a678:	2300      	movs	r3, #0
 800a67a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a67e:	e0d8      	b.n	800a832 <UART_SetConfig+0x2fe>
 800a680:	2302      	movs	r3, #2
 800a682:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a686:	e0d4      	b.n	800a832 <UART_SetConfig+0x2fe>
 800a688:	2304      	movs	r3, #4
 800a68a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a68e:	e0d0      	b.n	800a832 <UART_SetConfig+0x2fe>
 800a690:	2308      	movs	r3, #8
 800a692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a696:	e0cc      	b.n	800a832 <UART_SetConfig+0x2fe>
 800a698:	2310      	movs	r3, #16
 800a69a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a69e:	e0c8      	b.n	800a832 <UART_SetConfig+0x2fe>
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4a5e      	ldr	r2, [pc, #376]	@ (800a820 <UART_SetConfig+0x2ec>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d125      	bne.n	800a6f6 <UART_SetConfig+0x1c2>
 800a6aa:	4b5b      	ldr	r3, [pc, #364]	@ (800a818 <UART_SetConfig+0x2e4>)
 800a6ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6b0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a6b4:	2b30      	cmp	r3, #48	@ 0x30
 800a6b6:	d016      	beq.n	800a6e6 <UART_SetConfig+0x1b2>
 800a6b8:	2b30      	cmp	r3, #48	@ 0x30
 800a6ba:	d818      	bhi.n	800a6ee <UART_SetConfig+0x1ba>
 800a6bc:	2b20      	cmp	r3, #32
 800a6be:	d00a      	beq.n	800a6d6 <UART_SetConfig+0x1a2>
 800a6c0:	2b20      	cmp	r3, #32
 800a6c2:	d814      	bhi.n	800a6ee <UART_SetConfig+0x1ba>
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d002      	beq.n	800a6ce <UART_SetConfig+0x19a>
 800a6c8:	2b10      	cmp	r3, #16
 800a6ca:	d008      	beq.n	800a6de <UART_SetConfig+0x1aa>
 800a6cc:	e00f      	b.n	800a6ee <UART_SetConfig+0x1ba>
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6d4:	e0ad      	b.n	800a832 <UART_SetConfig+0x2fe>
 800a6d6:	2302      	movs	r3, #2
 800a6d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6dc:	e0a9      	b.n	800a832 <UART_SetConfig+0x2fe>
 800a6de:	2304      	movs	r3, #4
 800a6e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6e4:	e0a5      	b.n	800a832 <UART_SetConfig+0x2fe>
 800a6e6:	2308      	movs	r3, #8
 800a6e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6ec:	e0a1      	b.n	800a832 <UART_SetConfig+0x2fe>
 800a6ee:	2310      	movs	r3, #16
 800a6f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6f4:	e09d      	b.n	800a832 <UART_SetConfig+0x2fe>
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4a4a      	ldr	r2, [pc, #296]	@ (800a824 <UART_SetConfig+0x2f0>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d125      	bne.n	800a74c <UART_SetConfig+0x218>
 800a700:	4b45      	ldr	r3, [pc, #276]	@ (800a818 <UART_SetConfig+0x2e4>)
 800a702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a706:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a70a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a70c:	d016      	beq.n	800a73c <UART_SetConfig+0x208>
 800a70e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a710:	d818      	bhi.n	800a744 <UART_SetConfig+0x210>
 800a712:	2b80      	cmp	r3, #128	@ 0x80
 800a714:	d00a      	beq.n	800a72c <UART_SetConfig+0x1f8>
 800a716:	2b80      	cmp	r3, #128	@ 0x80
 800a718:	d814      	bhi.n	800a744 <UART_SetConfig+0x210>
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d002      	beq.n	800a724 <UART_SetConfig+0x1f0>
 800a71e:	2b40      	cmp	r3, #64	@ 0x40
 800a720:	d008      	beq.n	800a734 <UART_SetConfig+0x200>
 800a722:	e00f      	b.n	800a744 <UART_SetConfig+0x210>
 800a724:	2300      	movs	r3, #0
 800a726:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a72a:	e082      	b.n	800a832 <UART_SetConfig+0x2fe>
 800a72c:	2302      	movs	r3, #2
 800a72e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a732:	e07e      	b.n	800a832 <UART_SetConfig+0x2fe>
 800a734:	2304      	movs	r3, #4
 800a736:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a73a:	e07a      	b.n	800a832 <UART_SetConfig+0x2fe>
 800a73c:	2308      	movs	r3, #8
 800a73e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a742:	e076      	b.n	800a832 <UART_SetConfig+0x2fe>
 800a744:	2310      	movs	r3, #16
 800a746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a74a:	e072      	b.n	800a832 <UART_SetConfig+0x2fe>
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a35      	ldr	r2, [pc, #212]	@ (800a828 <UART_SetConfig+0x2f4>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d12a      	bne.n	800a7ac <UART_SetConfig+0x278>
 800a756:	4b30      	ldr	r3, [pc, #192]	@ (800a818 <UART_SetConfig+0x2e4>)
 800a758:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a75c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a760:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a764:	d01a      	beq.n	800a79c <UART_SetConfig+0x268>
 800a766:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a76a:	d81b      	bhi.n	800a7a4 <UART_SetConfig+0x270>
 800a76c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a770:	d00c      	beq.n	800a78c <UART_SetConfig+0x258>
 800a772:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a776:	d815      	bhi.n	800a7a4 <UART_SetConfig+0x270>
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d003      	beq.n	800a784 <UART_SetConfig+0x250>
 800a77c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a780:	d008      	beq.n	800a794 <UART_SetConfig+0x260>
 800a782:	e00f      	b.n	800a7a4 <UART_SetConfig+0x270>
 800a784:	2300      	movs	r3, #0
 800a786:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a78a:	e052      	b.n	800a832 <UART_SetConfig+0x2fe>
 800a78c:	2302      	movs	r3, #2
 800a78e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a792:	e04e      	b.n	800a832 <UART_SetConfig+0x2fe>
 800a794:	2304      	movs	r3, #4
 800a796:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a79a:	e04a      	b.n	800a832 <UART_SetConfig+0x2fe>
 800a79c:	2308      	movs	r3, #8
 800a79e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7a2:	e046      	b.n	800a832 <UART_SetConfig+0x2fe>
 800a7a4:	2310      	movs	r3, #16
 800a7a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7aa:	e042      	b.n	800a832 <UART_SetConfig+0x2fe>
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a17      	ldr	r2, [pc, #92]	@ (800a810 <UART_SetConfig+0x2dc>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d13a      	bne.n	800a82c <UART_SetConfig+0x2f8>
 800a7b6:	4b18      	ldr	r3, [pc, #96]	@ (800a818 <UART_SetConfig+0x2e4>)
 800a7b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a7c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a7c4:	d01a      	beq.n	800a7fc <UART_SetConfig+0x2c8>
 800a7c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a7ca:	d81b      	bhi.n	800a804 <UART_SetConfig+0x2d0>
 800a7cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a7d0:	d00c      	beq.n	800a7ec <UART_SetConfig+0x2b8>
 800a7d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a7d6:	d815      	bhi.n	800a804 <UART_SetConfig+0x2d0>
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d003      	beq.n	800a7e4 <UART_SetConfig+0x2b0>
 800a7dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a7e0:	d008      	beq.n	800a7f4 <UART_SetConfig+0x2c0>
 800a7e2:	e00f      	b.n	800a804 <UART_SetConfig+0x2d0>
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7ea:	e022      	b.n	800a832 <UART_SetConfig+0x2fe>
 800a7ec:	2302      	movs	r3, #2
 800a7ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7f2:	e01e      	b.n	800a832 <UART_SetConfig+0x2fe>
 800a7f4:	2304      	movs	r3, #4
 800a7f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7fa:	e01a      	b.n	800a832 <UART_SetConfig+0x2fe>
 800a7fc:	2308      	movs	r3, #8
 800a7fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a802:	e016      	b.n	800a832 <UART_SetConfig+0x2fe>
 800a804:	2310      	movs	r3, #16
 800a806:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a80a:	e012      	b.n	800a832 <UART_SetConfig+0x2fe>
 800a80c:	cfff69f3 	.word	0xcfff69f3
 800a810:	40008000 	.word	0x40008000
 800a814:	40013800 	.word	0x40013800
 800a818:	40021000 	.word	0x40021000
 800a81c:	40004400 	.word	0x40004400
 800a820:	40004800 	.word	0x40004800
 800a824:	40004c00 	.word	0x40004c00
 800a828:	40005000 	.word	0x40005000
 800a82c:	2310      	movs	r3, #16
 800a82e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4aae      	ldr	r2, [pc, #696]	@ (800aaf0 <UART_SetConfig+0x5bc>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	f040 8097 	bne.w	800a96c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a83e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a842:	2b08      	cmp	r3, #8
 800a844:	d823      	bhi.n	800a88e <UART_SetConfig+0x35a>
 800a846:	a201      	add	r2, pc, #4	@ (adr r2, 800a84c <UART_SetConfig+0x318>)
 800a848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a84c:	0800a871 	.word	0x0800a871
 800a850:	0800a88f 	.word	0x0800a88f
 800a854:	0800a879 	.word	0x0800a879
 800a858:	0800a88f 	.word	0x0800a88f
 800a85c:	0800a87f 	.word	0x0800a87f
 800a860:	0800a88f 	.word	0x0800a88f
 800a864:	0800a88f 	.word	0x0800a88f
 800a868:	0800a88f 	.word	0x0800a88f
 800a86c:	0800a887 	.word	0x0800a887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a870:	f7fc fc00 	bl	8007074 <HAL_RCC_GetPCLK1Freq>
 800a874:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a876:	e010      	b.n	800a89a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a878:	4b9e      	ldr	r3, [pc, #632]	@ (800aaf4 <UART_SetConfig+0x5c0>)
 800a87a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a87c:	e00d      	b.n	800a89a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a87e:	f7fc fb8b 	bl	8006f98 <HAL_RCC_GetSysClockFreq>
 800a882:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a884:	e009      	b.n	800a89a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a886:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a88a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a88c:	e005      	b.n	800a89a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a88e:	2300      	movs	r3, #0
 800a890:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a892:	2301      	movs	r3, #1
 800a894:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a898:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	f000 8130 	beq.w	800ab02 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8a6:	4a94      	ldr	r2, [pc, #592]	@ (800aaf8 <UART_SetConfig+0x5c4>)
 800a8a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8b4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	685a      	ldr	r2, [r3, #4]
 800a8ba:	4613      	mov	r3, r2
 800a8bc:	005b      	lsls	r3, r3, #1
 800a8be:	4413      	add	r3, r2
 800a8c0:	69ba      	ldr	r2, [r7, #24]
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d305      	bcc.n	800a8d2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a8cc:	69ba      	ldr	r2, [r7, #24]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d903      	bls.n	800a8da <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a8d8:	e113      	b.n	800ab02 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8dc:	2200      	movs	r2, #0
 800a8de:	60bb      	str	r3, [r7, #8]
 800a8e0:	60fa      	str	r2, [r7, #12]
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8e6:	4a84      	ldr	r2, [pc, #528]	@ (800aaf8 <UART_SetConfig+0x5c4>)
 800a8e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	603b      	str	r3, [r7, #0]
 800a8f2:	607a      	str	r2, [r7, #4]
 800a8f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a8fc:	f7f6 fa76 	bl	8000dec <__aeabi_uldivmod>
 800a900:	4602      	mov	r2, r0
 800a902:	460b      	mov	r3, r1
 800a904:	4610      	mov	r0, r2
 800a906:	4619      	mov	r1, r3
 800a908:	f04f 0200 	mov.w	r2, #0
 800a90c:	f04f 0300 	mov.w	r3, #0
 800a910:	020b      	lsls	r3, r1, #8
 800a912:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a916:	0202      	lsls	r2, r0, #8
 800a918:	6979      	ldr	r1, [r7, #20]
 800a91a:	6849      	ldr	r1, [r1, #4]
 800a91c:	0849      	lsrs	r1, r1, #1
 800a91e:	2000      	movs	r0, #0
 800a920:	460c      	mov	r4, r1
 800a922:	4605      	mov	r5, r0
 800a924:	eb12 0804 	adds.w	r8, r2, r4
 800a928:	eb43 0905 	adc.w	r9, r3, r5
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	685b      	ldr	r3, [r3, #4]
 800a930:	2200      	movs	r2, #0
 800a932:	469a      	mov	sl, r3
 800a934:	4693      	mov	fp, r2
 800a936:	4652      	mov	r2, sl
 800a938:	465b      	mov	r3, fp
 800a93a:	4640      	mov	r0, r8
 800a93c:	4649      	mov	r1, r9
 800a93e:	f7f6 fa55 	bl	8000dec <__aeabi_uldivmod>
 800a942:	4602      	mov	r2, r0
 800a944:	460b      	mov	r3, r1
 800a946:	4613      	mov	r3, r2
 800a948:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a94a:	6a3b      	ldr	r3, [r7, #32]
 800a94c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a950:	d308      	bcc.n	800a964 <UART_SetConfig+0x430>
 800a952:	6a3b      	ldr	r3, [r7, #32]
 800a954:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a958:	d204      	bcs.n	800a964 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	6a3a      	ldr	r2, [r7, #32]
 800a960:	60da      	str	r2, [r3, #12]
 800a962:	e0ce      	b.n	800ab02 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a964:	2301      	movs	r3, #1
 800a966:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a96a:	e0ca      	b.n	800ab02 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	69db      	ldr	r3, [r3, #28]
 800a970:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a974:	d166      	bne.n	800aa44 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a976:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a97a:	2b08      	cmp	r3, #8
 800a97c:	d827      	bhi.n	800a9ce <UART_SetConfig+0x49a>
 800a97e:	a201      	add	r2, pc, #4	@ (adr r2, 800a984 <UART_SetConfig+0x450>)
 800a980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a984:	0800a9a9 	.word	0x0800a9a9
 800a988:	0800a9b1 	.word	0x0800a9b1
 800a98c:	0800a9b9 	.word	0x0800a9b9
 800a990:	0800a9cf 	.word	0x0800a9cf
 800a994:	0800a9bf 	.word	0x0800a9bf
 800a998:	0800a9cf 	.word	0x0800a9cf
 800a99c:	0800a9cf 	.word	0x0800a9cf
 800a9a0:	0800a9cf 	.word	0x0800a9cf
 800a9a4:	0800a9c7 	.word	0x0800a9c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9a8:	f7fc fb64 	bl	8007074 <HAL_RCC_GetPCLK1Freq>
 800a9ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a9ae:	e014      	b.n	800a9da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a9b0:	f7fc fb76 	bl	80070a0 <HAL_RCC_GetPCLK2Freq>
 800a9b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a9b6:	e010      	b.n	800a9da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a9b8:	4b4e      	ldr	r3, [pc, #312]	@ (800aaf4 <UART_SetConfig+0x5c0>)
 800a9ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a9bc:	e00d      	b.n	800a9da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a9be:	f7fc faeb 	bl	8006f98 <HAL_RCC_GetSysClockFreq>
 800a9c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a9c4:	e009      	b.n	800a9da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a9c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a9ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a9cc:	e005      	b.n	800a9da <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a9d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a9da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	f000 8090 	beq.w	800ab02 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9e6:	4a44      	ldr	r2, [pc, #272]	@ (800aaf8 <UART_SetConfig+0x5c4>)
 800a9e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9f4:	005a      	lsls	r2, r3, #1
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	085b      	lsrs	r3, r3, #1
 800a9fc:	441a      	add	r2, r3
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa06:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa08:	6a3b      	ldr	r3, [r7, #32]
 800aa0a:	2b0f      	cmp	r3, #15
 800aa0c:	d916      	bls.n	800aa3c <UART_SetConfig+0x508>
 800aa0e:	6a3b      	ldr	r3, [r7, #32]
 800aa10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa14:	d212      	bcs.n	800aa3c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aa16:	6a3b      	ldr	r3, [r7, #32]
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	f023 030f 	bic.w	r3, r3, #15
 800aa1e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aa20:	6a3b      	ldr	r3, [r7, #32]
 800aa22:	085b      	lsrs	r3, r3, #1
 800aa24:	b29b      	uxth	r3, r3
 800aa26:	f003 0307 	and.w	r3, r3, #7
 800aa2a:	b29a      	uxth	r2, r3
 800aa2c:	8bfb      	ldrh	r3, [r7, #30]
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	8bfa      	ldrh	r2, [r7, #30]
 800aa38:	60da      	str	r2, [r3, #12]
 800aa3a:	e062      	b.n	800ab02 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800aa42:	e05e      	b.n	800ab02 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aa44:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aa48:	2b08      	cmp	r3, #8
 800aa4a:	d828      	bhi.n	800aa9e <UART_SetConfig+0x56a>
 800aa4c:	a201      	add	r2, pc, #4	@ (adr r2, 800aa54 <UART_SetConfig+0x520>)
 800aa4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa52:	bf00      	nop
 800aa54:	0800aa79 	.word	0x0800aa79
 800aa58:	0800aa81 	.word	0x0800aa81
 800aa5c:	0800aa89 	.word	0x0800aa89
 800aa60:	0800aa9f 	.word	0x0800aa9f
 800aa64:	0800aa8f 	.word	0x0800aa8f
 800aa68:	0800aa9f 	.word	0x0800aa9f
 800aa6c:	0800aa9f 	.word	0x0800aa9f
 800aa70:	0800aa9f 	.word	0x0800aa9f
 800aa74:	0800aa97 	.word	0x0800aa97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa78:	f7fc fafc 	bl	8007074 <HAL_RCC_GetPCLK1Freq>
 800aa7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aa7e:	e014      	b.n	800aaaa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa80:	f7fc fb0e 	bl	80070a0 <HAL_RCC_GetPCLK2Freq>
 800aa84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aa86:	e010      	b.n	800aaaa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aa88:	4b1a      	ldr	r3, [pc, #104]	@ (800aaf4 <UART_SetConfig+0x5c0>)
 800aa8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aa8c:	e00d      	b.n	800aaaa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aa8e:	f7fc fa83 	bl	8006f98 <HAL_RCC_GetSysClockFreq>
 800aa92:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aa94:	e009      	b.n	800aaaa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aa9c:	e005      	b.n	800aaaa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800aaa8:	bf00      	nop
    }

    if (pclk != 0U)
 800aaaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d028      	beq.n	800ab02 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aab4:	4a10      	ldr	r2, [pc, #64]	@ (800aaf8 <UART_SetConfig+0x5c4>)
 800aab6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aaba:	461a      	mov	r2, r3
 800aabc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aabe:	fbb3 f2f2 	udiv	r2, r3, r2
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	085b      	lsrs	r3, r3, #1
 800aac8:	441a      	add	r2, r3
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	fbb2 f3f3 	udiv	r3, r2, r3
 800aad2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aad4:	6a3b      	ldr	r3, [r7, #32]
 800aad6:	2b0f      	cmp	r3, #15
 800aad8:	d910      	bls.n	800aafc <UART_SetConfig+0x5c8>
 800aada:	6a3b      	ldr	r3, [r7, #32]
 800aadc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aae0:	d20c      	bcs.n	800aafc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aae2:	6a3b      	ldr	r3, [r7, #32]
 800aae4:	b29a      	uxth	r2, r3
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	60da      	str	r2, [r3, #12]
 800aaec:	e009      	b.n	800ab02 <UART_SetConfig+0x5ce>
 800aaee:	bf00      	nop
 800aaf0:	40008000 	.word	0x40008000
 800aaf4:	00f42400 	.word	0x00f42400
 800aaf8:	0800b998 	.word	0x0800b998
      }
      else
      {
        ret = HAL_ERROR;
 800aafc:	2301      	movs	r3, #1
 800aafe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	2201      	movs	r2, #1
 800ab06:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	2200      	movs	r2, #0
 800ab16:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ab1e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3730      	adds	r7, #48	@ 0x30
 800ab26:	46bd      	mov	sp, r7
 800ab28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ab2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b083      	sub	sp, #12
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab38:	f003 0308 	and.w	r3, r3, #8
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d00a      	beq.n	800ab56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	430a      	orrs	r2, r1
 800ab54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab5a:	f003 0301 	and.w	r3, r3, #1
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d00a      	beq.n	800ab78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	430a      	orrs	r2, r1
 800ab76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab7c:	f003 0302 	and.w	r3, r3, #2
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d00a      	beq.n	800ab9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	430a      	orrs	r2, r1
 800ab98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab9e:	f003 0304 	and.w	r3, r3, #4
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d00a      	beq.n	800abbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	430a      	orrs	r2, r1
 800abba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abc0:	f003 0310 	and.w	r3, r3, #16
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d00a      	beq.n	800abde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	689b      	ldr	r3, [r3, #8]
 800abce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	430a      	orrs	r2, r1
 800abdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abe2:	f003 0320 	and.w	r3, r3, #32
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d00a      	beq.n	800ac00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	689b      	ldr	r3, [r3, #8]
 800abf0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	430a      	orrs	r2, r1
 800abfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d01a      	beq.n	800ac42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	430a      	orrs	r2, r1
 800ac20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac2a:	d10a      	bne.n	800ac42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	430a      	orrs	r2, r1
 800ac40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d00a      	beq.n	800ac64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	430a      	orrs	r2, r1
 800ac62:	605a      	str	r2, [r3, #4]
  }
}
 800ac64:	bf00      	nop
 800ac66:	370c      	adds	r7, #12
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6e:	4770      	bx	lr

0800ac70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b098      	sub	sp, #96	@ 0x60
 800ac74:	af02      	add	r7, sp, #8
 800ac76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ac80:	f7f9 fd64 	bl	800474c <HAL_GetTick>
 800ac84:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f003 0308 	and.w	r3, r3, #8
 800ac90:	2b08      	cmp	r3, #8
 800ac92:	d12f      	bne.n	800acf4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ac98:	9300      	str	r3, [sp, #0]
 800ac9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f000 f88e 	bl	800adc4 <UART_WaitOnFlagUntilTimeout>
 800aca8:	4603      	mov	r3, r0
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d022      	beq.n	800acf4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acb6:	e853 3f00 	ldrex	r3, [r3]
 800acba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800acbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800acc2:	653b      	str	r3, [r7, #80]	@ 0x50
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	461a      	mov	r2, r3
 800acca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800accc:	647b      	str	r3, [r7, #68]	@ 0x44
 800acce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acd0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800acd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800acd4:	e841 2300 	strex	r3, r2, [r1]
 800acd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800acda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d1e6      	bne.n	800acae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2220      	movs	r2, #32
 800ace4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2200      	movs	r2, #0
 800acec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acf0:	2303      	movs	r3, #3
 800acf2:	e063      	b.n	800adbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f003 0304 	and.w	r3, r3, #4
 800acfe:	2b04      	cmp	r3, #4
 800ad00:	d149      	bne.n	800ad96 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad02:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ad06:	9300      	str	r3, [sp, #0]
 800ad08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f000 f857 	bl	800adc4 <UART_WaitOnFlagUntilTimeout>
 800ad16:	4603      	mov	r3, r0
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d03c      	beq.n	800ad96 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad24:	e853 3f00 	ldrex	r3, [r3]
 800ad28:	623b      	str	r3, [r7, #32]
   return(result);
 800ad2a:	6a3b      	ldr	r3, [r7, #32]
 800ad2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ad30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	461a      	mov	r2, r3
 800ad38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad3a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad42:	e841 2300 	strex	r3, r2, [r1]
 800ad46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ad48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d1e6      	bne.n	800ad1c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	3308      	adds	r3, #8
 800ad54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad56:	693b      	ldr	r3, [r7, #16]
 800ad58:	e853 3f00 	ldrex	r3, [r3]
 800ad5c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f023 0301 	bic.w	r3, r3, #1
 800ad64:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	3308      	adds	r3, #8
 800ad6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad6e:	61fa      	str	r2, [r7, #28]
 800ad70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad72:	69b9      	ldr	r1, [r7, #24]
 800ad74:	69fa      	ldr	r2, [r7, #28]
 800ad76:	e841 2300 	strex	r3, r2, [r1]
 800ad7a:	617b      	str	r3, [r7, #20]
   return(result);
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d1e5      	bne.n	800ad4e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2220      	movs	r2, #32
 800ad86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad92:	2303      	movs	r3, #3
 800ad94:	e012      	b.n	800adbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2220      	movs	r2, #32
 800ad9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2220      	movs	r2, #32
 800ada2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2200      	movs	r2, #0
 800adaa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2200      	movs	r2, #0
 800adb0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2200      	movs	r2, #0
 800adb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800adba:	2300      	movs	r3, #0
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3758      	adds	r7, #88	@ 0x58
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}

0800adc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b084      	sub	sp, #16
 800adc8:	af00      	add	r7, sp, #0
 800adca:	60f8      	str	r0, [r7, #12]
 800adcc:	60b9      	str	r1, [r7, #8]
 800adce:	603b      	str	r3, [r7, #0]
 800add0:	4613      	mov	r3, r2
 800add2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800add4:	e04f      	b.n	800ae76 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800addc:	d04b      	beq.n	800ae76 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800adde:	f7f9 fcb5 	bl	800474c <HAL_GetTick>
 800ade2:	4602      	mov	r2, r0
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	1ad3      	subs	r3, r2, r3
 800ade8:	69ba      	ldr	r2, [r7, #24]
 800adea:	429a      	cmp	r2, r3
 800adec:	d302      	bcc.n	800adf4 <UART_WaitOnFlagUntilTimeout+0x30>
 800adee:	69bb      	ldr	r3, [r7, #24]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d101      	bne.n	800adf8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800adf4:	2303      	movs	r3, #3
 800adf6:	e04e      	b.n	800ae96 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f003 0304 	and.w	r3, r3, #4
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d037      	beq.n	800ae76 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	2b80      	cmp	r3, #128	@ 0x80
 800ae0a:	d034      	beq.n	800ae76 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	2b40      	cmp	r3, #64	@ 0x40
 800ae10:	d031      	beq.n	800ae76 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	69db      	ldr	r3, [r3, #28]
 800ae18:	f003 0308 	and.w	r3, r3, #8
 800ae1c:	2b08      	cmp	r3, #8
 800ae1e:	d110      	bne.n	800ae42 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	2208      	movs	r2, #8
 800ae26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ae28:	68f8      	ldr	r0, [r7, #12]
 800ae2a:	f000 f920 	bl	800b06e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2208      	movs	r2, #8
 800ae32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	e029      	b.n	800ae96 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	69db      	ldr	r3, [r3, #28]
 800ae48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ae4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae50:	d111      	bne.n	800ae76 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ae5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ae5c:	68f8      	ldr	r0, [r7, #12]
 800ae5e:	f000 f906 	bl	800b06e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2220      	movs	r2, #32
 800ae66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ae72:	2303      	movs	r3, #3
 800ae74:	e00f      	b.n	800ae96 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	69da      	ldr	r2, [r3, #28]
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	4013      	ands	r3, r2
 800ae80:	68ba      	ldr	r2, [r7, #8]
 800ae82:	429a      	cmp	r2, r3
 800ae84:	bf0c      	ite	eq
 800ae86:	2301      	moveq	r3, #1
 800ae88:	2300      	movne	r3, #0
 800ae8a:	b2db      	uxtb	r3, r3
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	79fb      	ldrb	r3, [r7, #7]
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d0a0      	beq.n	800add6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ae94:	2300      	movs	r3, #0
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3710      	adds	r7, #16
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
	...

0800aea0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b096      	sub	sp, #88	@ 0x58
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	60f8      	str	r0, [r7, #12]
 800aea8:	60b9      	str	r1, [r7, #8]
 800aeaa:	4613      	mov	r3, r2
 800aeac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	68ba      	ldr	r2, [r7, #8]
 800aeb2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	88fa      	ldrh	r2, [r7, #6]
 800aeb8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2200      	movs	r2, #0
 800aec0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2222      	movs	r2, #34	@ 0x22
 800aec8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d02d      	beq.n	800af32 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aedc:	4a40      	ldr	r2, [pc, #256]	@ (800afe0 <UART_Start_Receive_DMA+0x140>)
 800aede:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aee6:	4a3f      	ldr	r2, [pc, #252]	@ (800afe4 <UART_Start_Receive_DMA+0x144>)
 800aee8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aef0:	4a3d      	ldr	r2, [pc, #244]	@ (800afe8 <UART_Start_Receive_DMA+0x148>)
 800aef2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aefa:	2200      	movs	r2, #0
 800aefc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	3324      	adds	r3, #36	@ 0x24
 800af0a:	4619      	mov	r1, r3
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af10:	461a      	mov	r2, r3
 800af12:	88fb      	ldrh	r3, [r7, #6]
 800af14:	f7fa fede 	bl	8005cd4 <HAL_DMA_Start_IT>
 800af18:	4603      	mov	r3, r0
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d009      	beq.n	800af32 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2210      	movs	r2, #16
 800af22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	2220      	movs	r2, #32
 800af2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800af2e:	2301      	movs	r3, #1
 800af30:	e051      	b.n	800afd6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	691b      	ldr	r3, [r3, #16]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d018      	beq.n	800af6c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af42:	e853 3f00 	ldrex	r3, [r3]
 800af46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800af48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800af4e:	657b      	str	r3, [r7, #84]	@ 0x54
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	461a      	mov	r2, r3
 800af56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af58:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af5a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af5c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800af5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af60:	e841 2300 	strex	r3, r2, [r1]
 800af64:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800af66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d1e6      	bne.n	800af3a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	3308      	adds	r3, #8
 800af72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af76:	e853 3f00 	ldrex	r3, [r3]
 800af7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800af7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af7e:	f043 0301 	orr.w	r3, r3, #1
 800af82:	653b      	str	r3, [r7, #80]	@ 0x50
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	3308      	adds	r3, #8
 800af8a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800af8c:	637a      	str	r2, [r7, #52]	@ 0x34
 800af8e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af90:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800af92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800af94:	e841 2300 	strex	r3, r2, [r1]
 800af98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800af9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d1e5      	bne.n	800af6c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	3308      	adds	r3, #8
 800afa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	e853 3f00 	ldrex	r3, [r3]
 800afae:	613b      	str	r3, [r7, #16]
   return(result);
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	3308      	adds	r3, #8
 800afbe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800afc0:	623a      	str	r2, [r7, #32]
 800afc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afc4:	69f9      	ldr	r1, [r7, #28]
 800afc6:	6a3a      	ldr	r2, [r7, #32]
 800afc8:	e841 2300 	strex	r3, r2, [r1]
 800afcc:	61bb      	str	r3, [r7, #24]
   return(result);
 800afce:	69bb      	ldr	r3, [r7, #24]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d1e5      	bne.n	800afa0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800afd4:	2300      	movs	r3, #0
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3758      	adds	r7, #88	@ 0x58
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	0800b1f9 	.word	0x0800b1f9
 800afe4:	0800b32d 	.word	0x0800b32d
 800afe8:	0800b373 	.word	0x0800b373

0800afec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800afec:	b480      	push	{r7}
 800afee:	b08f      	sub	sp, #60	@ 0x3c
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800affa:	6a3b      	ldr	r3, [r7, #32]
 800affc:	e853 3f00 	ldrex	r3, [r3]
 800b000:	61fb      	str	r3, [r7, #28]
   return(result);
 800b002:	69fb      	ldr	r3, [r7, #28]
 800b004:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b008:	637b      	str	r3, [r7, #52]	@ 0x34
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	461a      	mov	r2, r3
 800b010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b012:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b014:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b016:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b018:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b01a:	e841 2300 	strex	r3, r2, [r1]
 800b01e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b022:	2b00      	cmp	r3, #0
 800b024:	d1e6      	bne.n	800aff4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	3308      	adds	r3, #8
 800b02c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	e853 3f00 	ldrex	r3, [r3]
 800b034:	60bb      	str	r3, [r7, #8]
   return(result);
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b03c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	3308      	adds	r3, #8
 800b044:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b046:	61ba      	str	r2, [r7, #24]
 800b048:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b04a:	6979      	ldr	r1, [r7, #20]
 800b04c:	69ba      	ldr	r2, [r7, #24]
 800b04e:	e841 2300 	strex	r3, r2, [r1]
 800b052:	613b      	str	r3, [r7, #16]
   return(result);
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d1e5      	bne.n	800b026 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2220      	movs	r2, #32
 800b05e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b062:	bf00      	nop
 800b064:	373c      	adds	r7, #60	@ 0x3c
 800b066:	46bd      	mov	sp, r7
 800b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06c:	4770      	bx	lr

0800b06e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b06e:	b480      	push	{r7}
 800b070:	b095      	sub	sp, #84	@ 0x54
 800b072:	af00      	add	r7, sp, #0
 800b074:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b07c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b07e:	e853 3f00 	ldrex	r3, [r3]
 800b082:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b086:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b08a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	461a      	mov	r2, r3
 800b092:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b094:	643b      	str	r3, [r7, #64]	@ 0x40
 800b096:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b098:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b09a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b09c:	e841 2300 	strex	r3, r2, [r1]
 800b0a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b0a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d1e6      	bne.n	800b076 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	3308      	adds	r3, #8
 800b0ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0b0:	6a3b      	ldr	r3, [r7, #32]
 800b0b2:	e853 3f00 	ldrex	r3, [r3]
 800b0b6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0b8:	69fb      	ldr	r3, [r7, #28]
 800b0ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b0be:	f023 0301 	bic.w	r3, r3, #1
 800b0c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	3308      	adds	r3, #8
 800b0ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b0cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b0ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b0d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b0d4:	e841 2300 	strex	r3, r2, [r1]
 800b0d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d1e3      	bne.n	800b0a8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0e4:	2b01      	cmp	r3, #1
 800b0e6:	d118      	bne.n	800b11a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	e853 3f00 	ldrex	r3, [r3]
 800b0f4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	f023 0310 	bic.w	r3, r3, #16
 800b0fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	461a      	mov	r2, r3
 800b104:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b106:	61bb      	str	r3, [r7, #24]
 800b108:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b10a:	6979      	ldr	r1, [r7, #20]
 800b10c:	69ba      	ldr	r2, [r7, #24]
 800b10e:	e841 2300 	strex	r3, r2, [r1]
 800b112:	613b      	str	r3, [r7, #16]
   return(result);
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d1e6      	bne.n	800b0e8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2220      	movs	r2, #32
 800b11e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2200      	movs	r2, #0
 800b126:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2200      	movs	r2, #0
 800b12c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b12e:	bf00      	nop
 800b130:	3754      	adds	r7, #84	@ 0x54
 800b132:	46bd      	mov	sp, r7
 800b134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b138:	4770      	bx	lr

0800b13a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b13a:	b580      	push	{r7, lr}
 800b13c:	b090      	sub	sp, #64	@ 0x40
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b146:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f003 0320 	and.w	r3, r3, #32
 800b152:	2b00      	cmp	r3, #0
 800b154:	d137      	bne.n	800b1c6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b158:	2200      	movs	r2, #0
 800b15a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b15e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	3308      	adds	r3, #8
 800b164:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b168:	e853 3f00 	ldrex	r3, [r3]
 800b16c:	623b      	str	r3, [r7, #32]
   return(result);
 800b16e:	6a3b      	ldr	r3, [r7, #32]
 800b170:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b174:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b176:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	3308      	adds	r3, #8
 800b17c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b17e:	633a      	str	r2, [r7, #48]	@ 0x30
 800b180:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b182:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b184:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b186:	e841 2300 	strex	r3, r2, [r1]
 800b18a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b18c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d1e5      	bne.n	800b15e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	e853 3f00 	ldrex	r3, [r3]
 800b19e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1b0:	61fb      	str	r3, [r7, #28]
 800b1b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1b4:	69b9      	ldr	r1, [r7, #24]
 800b1b6:	69fa      	ldr	r2, [r7, #28]
 800b1b8:	e841 2300 	strex	r3, r2, [r1]
 800b1bc:	617b      	str	r3, [r7, #20]
   return(result);
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d1e6      	bne.n	800b192 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b1c4:	e004      	b.n	800b1d0 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800b1c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b1cc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b1ce:	4798      	blx	r3
}
 800b1d0:	bf00      	nop
 800b1d2:	3740      	adds	r7, #64	@ 0x40
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b084      	sub	sp, #16
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1e4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b1ec:	68f8      	ldr	r0, [r7, #12]
 800b1ee:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1f0:	bf00      	nop
 800b1f2:	3710      	adds	r7, #16
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b09c      	sub	sp, #112	@ 0x70
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b204:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f003 0320 	and.w	r3, r3, #32
 800b210:	2b00      	cmp	r3, #0
 800b212:	d171      	bne.n	800b2f8 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b214:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b216:	2200      	movs	r2, #0
 800b218:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b21c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b222:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b224:	e853 3f00 	ldrex	r3, [r3]
 800b228:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b22a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b22c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b230:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b232:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	461a      	mov	r2, r3
 800b238:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b23a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b23c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b23e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b240:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b242:	e841 2300 	strex	r3, r2, [r1]
 800b246:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b248:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d1e6      	bne.n	800b21c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b24e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	3308      	adds	r3, #8
 800b254:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b258:	e853 3f00 	ldrex	r3, [r3]
 800b25c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b25e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b260:	f023 0301 	bic.w	r3, r3, #1
 800b264:	667b      	str	r3, [r7, #100]	@ 0x64
 800b266:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	3308      	adds	r3, #8
 800b26c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b26e:	647a      	str	r2, [r7, #68]	@ 0x44
 800b270:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b272:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b274:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b276:	e841 2300 	strex	r3, r2, [r1]
 800b27a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b27c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d1e5      	bne.n	800b24e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b282:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	3308      	adds	r3, #8
 800b288:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b28c:	e853 3f00 	ldrex	r3, [r3]
 800b290:	623b      	str	r3, [r7, #32]
   return(result);
 800b292:	6a3b      	ldr	r3, [r7, #32]
 800b294:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b298:	663b      	str	r3, [r7, #96]	@ 0x60
 800b29a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	3308      	adds	r3, #8
 800b2a0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b2a2:	633a      	str	r2, [r7, #48]	@ 0x30
 800b2a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b2a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2aa:	e841 2300 	strex	r3, r2, [r1]
 800b2ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b2b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d1e5      	bne.n	800b282 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b2b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2b8:	2220      	movs	r2, #32
 800b2ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2c2:	2b01      	cmp	r3, #1
 800b2c4:	d118      	bne.n	800b2f8 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	e853 3f00 	ldrex	r3, [r3]
 800b2d2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f023 0310 	bic.w	r3, r3, #16
 800b2da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b2dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	461a      	mov	r2, r3
 800b2e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b2e4:	61fb      	str	r3, [r7, #28]
 800b2e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2e8:	69b9      	ldr	r1, [r7, #24]
 800b2ea:	69fa      	ldr	r2, [r7, #28]
 800b2ec:	e841 2300 	strex	r3, r2, [r1]
 800b2f0:	617b      	str	r3, [r7, #20]
   return(result);
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d1e6      	bne.n	800b2c6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b2f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b300:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b302:	2b01      	cmp	r3, #1
 800b304:	d109      	bne.n	800b31a <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800b306:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b308:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b30c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b30e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b312:	4611      	mov	r1, r2
 800b314:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b316:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b318:	e004      	b.n	800b324 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800b31a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b31c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b320:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b322:	4798      	blx	r3
}
 800b324:	bf00      	nop
 800b326:	3770      	adds	r7, #112	@ 0x70
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b338:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	2201      	movs	r2, #1
 800b33e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b344:	2b01      	cmp	r3, #1
 800b346:	d10b      	bne.n	800b360 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b34e:	68fa      	ldr	r2, [r7, #12]
 800b350:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b354:	0852      	lsrs	r2, r2, #1
 800b356:	b292      	uxth	r2, r2
 800b358:	4611      	mov	r1, r2
 800b35a:	68f8      	ldr	r0, [r7, #12]
 800b35c:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b35e:	e004      	b.n	800b36a <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b366:	68f8      	ldr	r0, [r7, #12]
 800b368:	4798      	blx	r3
}
 800b36a:	bf00      	nop
 800b36c:	3710      	adds	r7, #16
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}

0800b372 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b372:	b580      	push	{r7, lr}
 800b374:	b086      	sub	sp, #24
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b37e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b386:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b38e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	689b      	ldr	r3, [r3, #8]
 800b396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b39a:	2b80      	cmp	r3, #128	@ 0x80
 800b39c:	d109      	bne.n	800b3b2 <UART_DMAError+0x40>
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	2b21      	cmp	r3, #33	@ 0x21
 800b3a2:	d106      	bne.n	800b3b2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b3ac:	6978      	ldr	r0, [r7, #20]
 800b3ae:	f7ff fe1d 	bl	800afec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	689b      	ldr	r3, [r3, #8]
 800b3b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3bc:	2b40      	cmp	r3, #64	@ 0x40
 800b3be:	d109      	bne.n	800b3d4 <UART_DMAError+0x62>
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2b22      	cmp	r3, #34	@ 0x22
 800b3c4:	d106      	bne.n	800b3d4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b3ce:	6978      	ldr	r0, [r7, #20]
 800b3d0:	f7ff fe4d 	bl	800b06e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b3da:	f043 0210 	orr.w	r2, r3, #16
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b3ea:	6978      	ldr	r0, [r7, #20]
 800b3ec:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3ee:	bf00      	nop
 800b3f0:	3718      	adds	r7, #24
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}

0800b3f6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b3f6:	b580      	push	{r7, lr}
 800b3f8:	b084      	sub	sp, #16
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b402:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2200      	movs	r2, #0
 800b408:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	2200      	movs	r2, #0
 800b410:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b41a:	68f8      	ldr	r0, [r7, #12]
 800b41c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b41e:	bf00      	nop
 800b420:	3710      	adds	r7, #16
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}

0800b426 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b426:	b580      	push	{r7, lr}
 800b428:	b088      	sub	sp, #32
 800b42a:	af00      	add	r7, sp, #0
 800b42c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	e853 3f00 	ldrex	r3, [r3]
 800b43a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b442:	61fb      	str	r3, [r7, #28]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	461a      	mov	r2, r3
 800b44a:	69fb      	ldr	r3, [r7, #28]
 800b44c:	61bb      	str	r3, [r7, #24]
 800b44e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b450:	6979      	ldr	r1, [r7, #20]
 800b452:	69ba      	ldr	r2, [r7, #24]
 800b454:	e841 2300 	strex	r3, r2, [r1]
 800b458:	613b      	str	r3, [r7, #16]
   return(result);
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d1e6      	bne.n	800b42e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2220      	movs	r2, #32
 800b464:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2200      	movs	r2, #0
 800b46c:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b478:	bf00      	nop
 800b47a:	3720      	adds	r7, #32
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b480:	b480      	push	{r7}
 800b482:	b083      	sub	sp, #12
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b488:	bf00      	nop
 800b48a:	370c      	adds	r7, #12
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr

0800b494 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b494:	b480      	push	{r7}
 800b496:	b083      	sub	sp, #12
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b49c:	bf00      	nop
 800b49e:	370c      	adds	r7, #12
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a6:	4770      	bx	lr

0800b4a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b083      	sub	sp, #12
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b4b0:	bf00      	nop
 800b4b2:	370c      	adds	r7, #12
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr

0800b4bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b085      	sub	sp, #20
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b4ca:	2b01      	cmp	r3, #1
 800b4cc:	d101      	bne.n	800b4d2 <HAL_UARTEx_DisableFifoMode+0x16>
 800b4ce:	2302      	movs	r3, #2
 800b4d0:	e027      	b.n	800b522 <HAL_UARTEx_DisableFifoMode+0x66>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2201      	movs	r2, #1
 800b4d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2224      	movs	r2, #36	@ 0x24
 800b4de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	681a      	ldr	r2, [r3, #0]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f022 0201 	bic.w	r2, r2, #1
 800b4f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b500:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2200      	movs	r2, #0
 800b506:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	68fa      	ldr	r2, [r7, #12]
 800b50e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2220      	movs	r2, #32
 800b514:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2200      	movs	r2, #0
 800b51c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b520:	2300      	movs	r3, #0
}
 800b522:	4618      	mov	r0, r3
 800b524:	3714      	adds	r7, #20
 800b526:	46bd      	mov	sp, r7
 800b528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52c:	4770      	bx	lr

0800b52e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b52e:	b580      	push	{r7, lr}
 800b530:	b084      	sub	sp, #16
 800b532:	af00      	add	r7, sp, #0
 800b534:	6078      	str	r0, [r7, #4]
 800b536:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b53e:	2b01      	cmp	r3, #1
 800b540:	d101      	bne.n	800b546 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b542:	2302      	movs	r3, #2
 800b544:	e02d      	b.n	800b5a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2201      	movs	r2, #1
 800b54a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2224      	movs	r2, #36	@ 0x24
 800b552:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	681a      	ldr	r2, [r3, #0]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f022 0201 	bic.w	r2, r2, #1
 800b56c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	689b      	ldr	r3, [r3, #8]
 800b574:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	683a      	ldr	r2, [r7, #0]
 800b57e:	430a      	orrs	r2, r1
 800b580:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f000 f850 	bl	800b628 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	68fa      	ldr	r2, [r7, #12]
 800b58e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2220      	movs	r2, #32
 800b594:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2200      	movs	r2, #0
 800b59c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b5a0:	2300      	movs	r3, #0
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3710      	adds	r7, #16
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}

0800b5aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b5aa:	b580      	push	{r7, lr}
 800b5ac:	b084      	sub	sp, #16
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
 800b5b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d101      	bne.n	800b5c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b5be:	2302      	movs	r3, #2
 800b5c0:	e02d      	b.n	800b61e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2224      	movs	r2, #36	@ 0x24
 800b5ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	681a      	ldr	r2, [r3, #0]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f022 0201 	bic.w	r2, r2, #1
 800b5e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	689b      	ldr	r3, [r3, #8]
 800b5f0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	683a      	ldr	r2, [r7, #0]
 800b5fa:	430a      	orrs	r2, r1
 800b5fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f000 f812 	bl	800b628 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	68fa      	ldr	r2, [r7, #12]
 800b60a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2220      	movs	r2, #32
 800b610:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2200      	movs	r2, #0
 800b618:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b61c:	2300      	movs	r3, #0
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3710      	adds	r7, #16
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
	...

0800b628 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b628:	b480      	push	{r7}
 800b62a:	b085      	sub	sp, #20
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b634:	2b00      	cmp	r3, #0
 800b636:	d108      	bne.n	800b64a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2201      	movs	r2, #1
 800b63c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2201      	movs	r2, #1
 800b644:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b648:	e031      	b.n	800b6ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b64a:	2308      	movs	r3, #8
 800b64c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b64e:	2308      	movs	r3, #8
 800b650:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	689b      	ldr	r3, [r3, #8]
 800b658:	0e5b      	lsrs	r3, r3, #25
 800b65a:	b2db      	uxtb	r3, r3
 800b65c:	f003 0307 	and.w	r3, r3, #7
 800b660:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	689b      	ldr	r3, [r3, #8]
 800b668:	0f5b      	lsrs	r3, r3, #29
 800b66a:	b2db      	uxtb	r3, r3
 800b66c:	f003 0307 	and.w	r3, r3, #7
 800b670:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b672:	7bbb      	ldrb	r3, [r7, #14]
 800b674:	7b3a      	ldrb	r2, [r7, #12]
 800b676:	4911      	ldr	r1, [pc, #68]	@ (800b6bc <UARTEx_SetNbDataToProcess+0x94>)
 800b678:	5c8a      	ldrb	r2, [r1, r2]
 800b67a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b67e:	7b3a      	ldrb	r2, [r7, #12]
 800b680:	490f      	ldr	r1, [pc, #60]	@ (800b6c0 <UARTEx_SetNbDataToProcess+0x98>)
 800b682:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b684:	fb93 f3f2 	sdiv	r3, r3, r2
 800b688:	b29a      	uxth	r2, r3
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b690:	7bfb      	ldrb	r3, [r7, #15]
 800b692:	7b7a      	ldrb	r2, [r7, #13]
 800b694:	4909      	ldr	r1, [pc, #36]	@ (800b6bc <UARTEx_SetNbDataToProcess+0x94>)
 800b696:	5c8a      	ldrb	r2, [r1, r2]
 800b698:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b69c:	7b7a      	ldrb	r2, [r7, #13]
 800b69e:	4908      	ldr	r1, [pc, #32]	@ (800b6c0 <UARTEx_SetNbDataToProcess+0x98>)
 800b6a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b6a2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b6a6:	b29a      	uxth	r2, r3
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b6ae:	bf00      	nop
 800b6b0:	3714      	adds	r7, #20
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b8:	4770      	bx	lr
 800b6ba:	bf00      	nop
 800b6bc:	0800b9b0 	.word	0x0800b9b0
 800b6c0:	0800b9b8 	.word	0x0800b9b8

0800b6c4 <memset>:
 800b6c4:	4402      	add	r2, r0
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d100      	bne.n	800b6ce <memset+0xa>
 800b6cc:	4770      	bx	lr
 800b6ce:	f803 1b01 	strb.w	r1, [r3], #1
 800b6d2:	e7f9      	b.n	800b6c8 <memset+0x4>

0800b6d4 <__errno>:
 800b6d4:	4b01      	ldr	r3, [pc, #4]	@ (800b6dc <__errno+0x8>)
 800b6d6:	6818      	ldr	r0, [r3, #0]
 800b6d8:	4770      	bx	lr
 800b6da:	bf00      	nop
 800b6dc:	2000024c 	.word	0x2000024c

0800b6e0 <__libc_init_array>:
 800b6e0:	b570      	push	{r4, r5, r6, lr}
 800b6e2:	4d0d      	ldr	r5, [pc, #52]	@ (800b718 <__libc_init_array+0x38>)
 800b6e4:	4c0d      	ldr	r4, [pc, #52]	@ (800b71c <__libc_init_array+0x3c>)
 800b6e6:	1b64      	subs	r4, r4, r5
 800b6e8:	10a4      	asrs	r4, r4, #2
 800b6ea:	2600      	movs	r6, #0
 800b6ec:	42a6      	cmp	r6, r4
 800b6ee:	d109      	bne.n	800b704 <__libc_init_array+0x24>
 800b6f0:	4d0b      	ldr	r5, [pc, #44]	@ (800b720 <__libc_init_array+0x40>)
 800b6f2:	4c0c      	ldr	r4, [pc, #48]	@ (800b724 <__libc_init_array+0x44>)
 800b6f4:	f000 f92c 	bl	800b950 <_init>
 800b6f8:	1b64      	subs	r4, r4, r5
 800b6fa:	10a4      	asrs	r4, r4, #2
 800b6fc:	2600      	movs	r6, #0
 800b6fe:	42a6      	cmp	r6, r4
 800b700:	d105      	bne.n	800b70e <__libc_init_array+0x2e>
 800b702:	bd70      	pop	{r4, r5, r6, pc}
 800b704:	f855 3b04 	ldr.w	r3, [r5], #4
 800b708:	4798      	blx	r3
 800b70a:	3601      	adds	r6, #1
 800b70c:	e7ee      	b.n	800b6ec <__libc_init_array+0xc>
 800b70e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b712:	4798      	blx	r3
 800b714:	3601      	adds	r6, #1
 800b716:	e7f2      	b.n	800b6fe <__libc_init_array+0x1e>
 800b718:	0800b9c8 	.word	0x0800b9c8
 800b71c:	0800b9c8 	.word	0x0800b9c8
 800b720:	0800b9c8 	.word	0x0800b9c8
 800b724:	0800b9cc 	.word	0x0800b9cc

0800b728 <memcpy>:
 800b728:	440a      	add	r2, r1
 800b72a:	4291      	cmp	r1, r2
 800b72c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b730:	d100      	bne.n	800b734 <memcpy+0xc>
 800b732:	4770      	bx	lr
 800b734:	b510      	push	{r4, lr}
 800b736:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b73a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b73e:	4291      	cmp	r1, r2
 800b740:	d1f9      	bne.n	800b736 <memcpy+0xe>
 800b742:	bd10      	pop	{r4, pc}

0800b744 <sqrt>:
 800b744:	b538      	push	{r3, r4, r5, lr}
 800b746:	ed2d 8b02 	vpush	{d8}
 800b74a:	ec55 4b10 	vmov	r4, r5, d0
 800b74e:	f000 f825 	bl	800b79c <__ieee754_sqrt>
 800b752:	4622      	mov	r2, r4
 800b754:	462b      	mov	r3, r5
 800b756:	4620      	mov	r0, r4
 800b758:	4629      	mov	r1, r5
 800b75a:	eeb0 8a40 	vmov.f32	s16, s0
 800b75e:	eef0 8a60 	vmov.f32	s17, s1
 800b762:	f7f5 f9af 	bl	8000ac4 <__aeabi_dcmpun>
 800b766:	b990      	cbnz	r0, 800b78e <sqrt+0x4a>
 800b768:	2200      	movs	r2, #0
 800b76a:	2300      	movs	r3, #0
 800b76c:	4620      	mov	r0, r4
 800b76e:	4629      	mov	r1, r5
 800b770:	f7f5 f980 	bl	8000a74 <__aeabi_dcmplt>
 800b774:	b158      	cbz	r0, 800b78e <sqrt+0x4a>
 800b776:	f7ff ffad 	bl	800b6d4 <__errno>
 800b77a:	2321      	movs	r3, #33	@ 0x21
 800b77c:	6003      	str	r3, [r0, #0]
 800b77e:	2200      	movs	r2, #0
 800b780:	2300      	movs	r3, #0
 800b782:	4610      	mov	r0, r2
 800b784:	4619      	mov	r1, r3
 800b786:	f7f5 f82d 	bl	80007e4 <__aeabi_ddiv>
 800b78a:	ec41 0b18 	vmov	d8, r0, r1
 800b78e:	eeb0 0a48 	vmov.f32	s0, s16
 800b792:	eef0 0a68 	vmov.f32	s1, s17
 800b796:	ecbd 8b02 	vpop	{d8}
 800b79a:	bd38      	pop	{r3, r4, r5, pc}

0800b79c <__ieee754_sqrt>:
 800b79c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7a0:	4a68      	ldr	r2, [pc, #416]	@ (800b944 <__ieee754_sqrt+0x1a8>)
 800b7a2:	ec55 4b10 	vmov	r4, r5, d0
 800b7a6:	43aa      	bics	r2, r5
 800b7a8:	462b      	mov	r3, r5
 800b7aa:	4621      	mov	r1, r4
 800b7ac:	d110      	bne.n	800b7d0 <__ieee754_sqrt+0x34>
 800b7ae:	4622      	mov	r2, r4
 800b7b0:	4620      	mov	r0, r4
 800b7b2:	4629      	mov	r1, r5
 800b7b4:	f7f4 feec 	bl	8000590 <__aeabi_dmul>
 800b7b8:	4602      	mov	r2, r0
 800b7ba:	460b      	mov	r3, r1
 800b7bc:	4620      	mov	r0, r4
 800b7be:	4629      	mov	r1, r5
 800b7c0:	f7f4 fd30 	bl	8000224 <__adddf3>
 800b7c4:	4604      	mov	r4, r0
 800b7c6:	460d      	mov	r5, r1
 800b7c8:	ec45 4b10 	vmov	d0, r4, r5
 800b7cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7d0:	2d00      	cmp	r5, #0
 800b7d2:	dc0e      	bgt.n	800b7f2 <__ieee754_sqrt+0x56>
 800b7d4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800b7d8:	4322      	orrs	r2, r4
 800b7da:	d0f5      	beq.n	800b7c8 <__ieee754_sqrt+0x2c>
 800b7dc:	b19d      	cbz	r5, 800b806 <__ieee754_sqrt+0x6a>
 800b7de:	4622      	mov	r2, r4
 800b7e0:	4620      	mov	r0, r4
 800b7e2:	4629      	mov	r1, r5
 800b7e4:	f7f4 fd1c 	bl	8000220 <__aeabi_dsub>
 800b7e8:	4602      	mov	r2, r0
 800b7ea:	460b      	mov	r3, r1
 800b7ec:	f7f4 fffa 	bl	80007e4 <__aeabi_ddiv>
 800b7f0:	e7e8      	b.n	800b7c4 <__ieee754_sqrt+0x28>
 800b7f2:	152a      	asrs	r2, r5, #20
 800b7f4:	d115      	bne.n	800b822 <__ieee754_sqrt+0x86>
 800b7f6:	2000      	movs	r0, #0
 800b7f8:	e009      	b.n	800b80e <__ieee754_sqrt+0x72>
 800b7fa:	0acb      	lsrs	r3, r1, #11
 800b7fc:	3a15      	subs	r2, #21
 800b7fe:	0549      	lsls	r1, r1, #21
 800b800:	2b00      	cmp	r3, #0
 800b802:	d0fa      	beq.n	800b7fa <__ieee754_sqrt+0x5e>
 800b804:	e7f7      	b.n	800b7f6 <__ieee754_sqrt+0x5a>
 800b806:	462a      	mov	r2, r5
 800b808:	e7fa      	b.n	800b800 <__ieee754_sqrt+0x64>
 800b80a:	005b      	lsls	r3, r3, #1
 800b80c:	3001      	adds	r0, #1
 800b80e:	02dc      	lsls	r4, r3, #11
 800b810:	d5fb      	bpl.n	800b80a <__ieee754_sqrt+0x6e>
 800b812:	1e44      	subs	r4, r0, #1
 800b814:	1b12      	subs	r2, r2, r4
 800b816:	f1c0 0420 	rsb	r4, r0, #32
 800b81a:	fa21 f404 	lsr.w	r4, r1, r4
 800b81e:	4323      	orrs	r3, r4
 800b820:	4081      	lsls	r1, r0
 800b822:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b826:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800b82a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b82e:	07d2      	lsls	r2, r2, #31
 800b830:	bf5c      	itt	pl
 800b832:	005b      	lslpl	r3, r3, #1
 800b834:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800b838:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b83c:	bf58      	it	pl
 800b83e:	0049      	lslpl	r1, r1, #1
 800b840:	2600      	movs	r6, #0
 800b842:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800b846:	106d      	asrs	r5, r5, #1
 800b848:	0049      	lsls	r1, r1, #1
 800b84a:	2016      	movs	r0, #22
 800b84c:	4632      	mov	r2, r6
 800b84e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800b852:	1917      	adds	r7, r2, r4
 800b854:	429f      	cmp	r7, r3
 800b856:	bfde      	ittt	le
 800b858:	193a      	addle	r2, r7, r4
 800b85a:	1bdb      	suble	r3, r3, r7
 800b85c:	1936      	addle	r6, r6, r4
 800b85e:	0fcf      	lsrs	r7, r1, #31
 800b860:	3801      	subs	r0, #1
 800b862:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800b866:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b86a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b86e:	d1f0      	bne.n	800b852 <__ieee754_sqrt+0xb6>
 800b870:	4604      	mov	r4, r0
 800b872:	2720      	movs	r7, #32
 800b874:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800b878:	429a      	cmp	r2, r3
 800b87a:	eb00 0e0c 	add.w	lr, r0, ip
 800b87e:	db02      	blt.n	800b886 <__ieee754_sqrt+0xea>
 800b880:	d113      	bne.n	800b8aa <__ieee754_sqrt+0x10e>
 800b882:	458e      	cmp	lr, r1
 800b884:	d811      	bhi.n	800b8aa <__ieee754_sqrt+0x10e>
 800b886:	f1be 0f00 	cmp.w	lr, #0
 800b88a:	eb0e 000c 	add.w	r0, lr, ip
 800b88e:	da42      	bge.n	800b916 <__ieee754_sqrt+0x17a>
 800b890:	2800      	cmp	r0, #0
 800b892:	db40      	blt.n	800b916 <__ieee754_sqrt+0x17a>
 800b894:	f102 0801 	add.w	r8, r2, #1
 800b898:	1a9b      	subs	r3, r3, r2
 800b89a:	458e      	cmp	lr, r1
 800b89c:	bf88      	it	hi
 800b89e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b8a2:	eba1 010e 	sub.w	r1, r1, lr
 800b8a6:	4464      	add	r4, ip
 800b8a8:	4642      	mov	r2, r8
 800b8aa:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800b8ae:	3f01      	subs	r7, #1
 800b8b0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800b8b4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b8b8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b8bc:	d1dc      	bne.n	800b878 <__ieee754_sqrt+0xdc>
 800b8be:	4319      	orrs	r1, r3
 800b8c0:	d01b      	beq.n	800b8fa <__ieee754_sqrt+0x15e>
 800b8c2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800b948 <__ieee754_sqrt+0x1ac>
 800b8c6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800b94c <__ieee754_sqrt+0x1b0>
 800b8ca:	e9da 0100 	ldrd	r0, r1, [sl]
 800b8ce:	e9db 2300 	ldrd	r2, r3, [fp]
 800b8d2:	f7f4 fca5 	bl	8000220 <__aeabi_dsub>
 800b8d6:	e9da 8900 	ldrd	r8, r9, [sl]
 800b8da:	4602      	mov	r2, r0
 800b8dc:	460b      	mov	r3, r1
 800b8de:	4640      	mov	r0, r8
 800b8e0:	4649      	mov	r1, r9
 800b8e2:	f7f5 f8d1 	bl	8000a88 <__aeabi_dcmple>
 800b8e6:	b140      	cbz	r0, 800b8fa <__ieee754_sqrt+0x15e>
 800b8e8:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b8ec:	e9da 0100 	ldrd	r0, r1, [sl]
 800b8f0:	e9db 2300 	ldrd	r2, r3, [fp]
 800b8f4:	d111      	bne.n	800b91a <__ieee754_sqrt+0x17e>
 800b8f6:	3601      	adds	r6, #1
 800b8f8:	463c      	mov	r4, r7
 800b8fa:	1072      	asrs	r2, r6, #1
 800b8fc:	0863      	lsrs	r3, r4, #1
 800b8fe:	07f1      	lsls	r1, r6, #31
 800b900:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800b904:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800b908:	bf48      	it	mi
 800b90a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800b90e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800b912:	4618      	mov	r0, r3
 800b914:	e756      	b.n	800b7c4 <__ieee754_sqrt+0x28>
 800b916:	4690      	mov	r8, r2
 800b918:	e7be      	b.n	800b898 <__ieee754_sqrt+0xfc>
 800b91a:	f7f4 fc83 	bl	8000224 <__adddf3>
 800b91e:	e9da 8900 	ldrd	r8, r9, [sl]
 800b922:	4602      	mov	r2, r0
 800b924:	460b      	mov	r3, r1
 800b926:	4640      	mov	r0, r8
 800b928:	4649      	mov	r1, r9
 800b92a:	f7f5 f8a3 	bl	8000a74 <__aeabi_dcmplt>
 800b92e:	b120      	cbz	r0, 800b93a <__ieee754_sqrt+0x19e>
 800b930:	1ca0      	adds	r0, r4, #2
 800b932:	bf08      	it	eq
 800b934:	3601      	addeq	r6, #1
 800b936:	3402      	adds	r4, #2
 800b938:	e7df      	b.n	800b8fa <__ieee754_sqrt+0x15e>
 800b93a:	1c63      	adds	r3, r4, #1
 800b93c:	f023 0401 	bic.w	r4, r3, #1
 800b940:	e7db      	b.n	800b8fa <__ieee754_sqrt+0x15e>
 800b942:	bf00      	nop
 800b944:	7ff00000 	.word	0x7ff00000
 800b948:	200002a8 	.word	0x200002a8
 800b94c:	200002a0 	.word	0x200002a0

0800b950 <_init>:
 800b950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b952:	bf00      	nop
 800b954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b956:	bc08      	pop	{r3}
 800b958:	469e      	mov	lr, r3
 800b95a:	4770      	bx	lr

0800b95c <_fini>:
 800b95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b95e:	bf00      	nop
 800b960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b962:	bc08      	pop	{r3}
 800b964:	469e      	mov	lr, r3
 800b966:	4770      	bx	lr
