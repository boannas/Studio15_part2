
Studio_G15.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7b0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800b988  0800b988  0000c988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9e0  0800b9e0  0000d2b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b9e0  0800b9e0  0000c9e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9e8  0800b9e8  0000d2b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9e8  0800b9e8  0000c9e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b9ec  0800b9ec  0000c9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002b0  20000000  0800b9f0  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001134  200002b0  0800bca0  0000d2b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200013e4  0800bca0  0000d3e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d2b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f371  00000000  00000000  0000d2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b65  00000000  00000000  0002c651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016e8  00000000  00000000  000301b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011dd  00000000  00000000  000318a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a215  00000000  00000000  00032a7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d73c  00000000  00000000  0005cc92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001154f8  00000000  00000000  0007a3ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018f8c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065d8  00000000  00000000  0018f90c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00195ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200002b0 	.word	0x200002b0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b970 	.word	0x0800b970

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200002b4 	.word	0x200002b4
 8000214:	0800b970 	.word	0x0800b970

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_frsub>:
 8000bd0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bd4:	e002      	b.n	8000bdc <__addsf3>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fsub>:
 8000bd8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bdc <__addsf3>:
 8000bdc:	0042      	lsls	r2, r0, #1
 8000bde:	bf1f      	itttt	ne
 8000be0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be4:	ea92 0f03 	teqne	r2, r3
 8000be8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf0:	d06a      	beq.n	8000cc8 <__addsf3+0xec>
 8000bf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bfa:	bfc1      	itttt	gt
 8000bfc:	18d2      	addgt	r2, r2, r3
 8000bfe:	4041      	eorgt	r1, r0
 8000c00:	4048      	eorgt	r0, r1
 8000c02:	4041      	eorgt	r1, r0
 8000c04:	bfb8      	it	lt
 8000c06:	425b      	neglt	r3, r3
 8000c08:	2b19      	cmp	r3, #25
 8000c0a:	bf88      	it	hi
 8000c0c:	4770      	bxhi	lr
 8000c0e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c16:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c1a:	bf18      	it	ne
 8000c1c:	4240      	negne	r0, r0
 8000c1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c22:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c26:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4249      	negne	r1, r1
 8000c2e:	ea92 0f03 	teq	r2, r3
 8000c32:	d03f      	beq.n	8000cb4 <__addsf3+0xd8>
 8000c34:	f1a2 0201 	sub.w	r2, r2, #1
 8000c38:	fa41 fc03 	asr.w	ip, r1, r3
 8000c3c:	eb10 000c 	adds.w	r0, r0, ip
 8000c40:	f1c3 0320 	rsb	r3, r3, #32
 8000c44:	fa01 f103 	lsl.w	r1, r1, r3
 8000c48:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c4c:	d502      	bpl.n	8000c54 <__addsf3+0x78>
 8000c4e:	4249      	negs	r1, r1
 8000c50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c58:	d313      	bcc.n	8000c82 <__addsf3+0xa6>
 8000c5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c5e:	d306      	bcc.n	8000c6e <__addsf3+0x92>
 8000c60:	0840      	lsrs	r0, r0, #1
 8000c62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c66:	f102 0201 	add.w	r2, r2, #1
 8000c6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c6c:	d251      	bcs.n	8000d12 <__addsf3+0x136>
 8000c6e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c76:	bf08      	it	eq
 8000c78:	f020 0001 	biceq.w	r0, r0, #1
 8000c7c:	ea40 0003 	orr.w	r0, r0, r3
 8000c80:	4770      	bx	lr
 8000c82:	0049      	lsls	r1, r1, #1
 8000c84:	eb40 0000 	adc.w	r0, r0, r0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c90:	d2ed      	bcs.n	8000c6e <__addsf3+0x92>
 8000c92:	fab0 fc80 	clz	ip, r0
 8000c96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ca2:	bfaa      	itet	ge
 8000ca4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca8:	4252      	neglt	r2, r2
 8000caa:	4318      	orrge	r0, r3
 8000cac:	bfbc      	itt	lt
 8000cae:	40d0      	lsrlt	r0, r2
 8000cb0:	4318      	orrlt	r0, r3
 8000cb2:	4770      	bx	lr
 8000cb4:	f092 0f00 	teq	r2, #0
 8000cb8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cbc:	bf06      	itte	eq
 8000cbe:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cc2:	3201      	addeq	r2, #1
 8000cc4:	3b01      	subne	r3, #1
 8000cc6:	e7b5      	b.n	8000c34 <__addsf3+0x58>
 8000cc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ccc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd0:	bf18      	it	ne
 8000cd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd6:	d021      	beq.n	8000d1c <__addsf3+0x140>
 8000cd8:	ea92 0f03 	teq	r2, r3
 8000cdc:	d004      	beq.n	8000ce8 <__addsf3+0x10c>
 8000cde:	f092 0f00 	teq	r2, #0
 8000ce2:	bf08      	it	eq
 8000ce4:	4608      	moveq	r0, r1
 8000ce6:	4770      	bx	lr
 8000ce8:	ea90 0f01 	teq	r0, r1
 8000cec:	bf1c      	itt	ne
 8000cee:	2000      	movne	r0, #0
 8000cf0:	4770      	bxne	lr
 8000cf2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cf6:	d104      	bne.n	8000d02 <__addsf3+0x126>
 8000cf8:	0040      	lsls	r0, r0, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d00:	4770      	bx	lr
 8000d02:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d06:	bf3c      	itt	cc
 8000d08:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d0c:	4770      	bxcc	lr
 8000d0e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d12:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d1a:	4770      	bx	lr
 8000d1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d20:	bf16      	itet	ne
 8000d22:	4608      	movne	r0, r1
 8000d24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d28:	4601      	movne	r1, r0
 8000d2a:	0242      	lsls	r2, r0, #9
 8000d2c:	bf06      	itte	eq
 8000d2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d32:	ea90 0f01 	teqeq	r0, r1
 8000d36:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_ui2f>:
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e004      	b.n	8000d4c <__aeabi_i2f+0x8>
 8000d42:	bf00      	nop

08000d44 <__aeabi_i2f>:
 8000d44:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d48:	bf48      	it	mi
 8000d4a:	4240      	negmi	r0, r0
 8000d4c:	ea5f 0c00 	movs.w	ip, r0
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d58:	4601      	mov	r1, r0
 8000d5a:	f04f 0000 	mov.w	r0, #0
 8000d5e:	e01c      	b.n	8000d9a <__aeabi_l2f+0x2a>

08000d60 <__aeabi_ul2f>:
 8000d60:	ea50 0201 	orrs.w	r2, r0, r1
 8000d64:	bf08      	it	eq
 8000d66:	4770      	bxeq	lr
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e00a      	b.n	8000d84 <__aeabi_l2f+0x14>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_l2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d7c:	d502      	bpl.n	8000d84 <__aeabi_l2f+0x14>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	ea5f 0c01 	movs.w	ip, r1
 8000d88:	bf02      	ittt	eq
 8000d8a:	4684      	moveq	ip, r0
 8000d8c:	4601      	moveq	r1, r0
 8000d8e:	2000      	moveq	r0, #0
 8000d90:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d94:	bf08      	it	eq
 8000d96:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d9a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d9e:	fabc f28c 	clz	r2, ip
 8000da2:	3a08      	subs	r2, #8
 8000da4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da8:	db10      	blt.n	8000dcc <__aeabi_l2f+0x5c>
 8000daa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dae:	4463      	add	r3, ip
 8000db0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db4:	f1c2 0220 	rsb	r2, r2, #32
 8000db8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000dbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc0:	eb43 0002 	adc.w	r0, r3, r2
 8000dc4:	bf08      	it	eq
 8000dc6:	f020 0001 	biceq.w	r0, r0, #1
 8000dca:	4770      	bx	lr
 8000dcc:	f102 0220 	add.w	r2, r2, #32
 8000dd0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ddc:	fa21 f202 	lsr.w	r2, r1, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dea:	4770      	bx	lr

08000dec <__aeabi_uldivmod>:
 8000dec:	b953      	cbnz	r3, 8000e04 <__aeabi_uldivmod+0x18>
 8000dee:	b94a      	cbnz	r2, 8000e04 <__aeabi_uldivmod+0x18>
 8000df0:	2900      	cmp	r1, #0
 8000df2:	bf08      	it	eq
 8000df4:	2800      	cmpeq	r0, #0
 8000df6:	bf1c      	itt	ne
 8000df8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000e00:	f000 b96a 	b.w	80010d8 <__aeabi_idiv0>
 8000e04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e0c:	f000 f806 	bl	8000e1c <__udivmoddi4>
 8000e10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e18:	b004      	add	sp, #16
 8000e1a:	4770      	bx	lr

08000e1c <__udivmoddi4>:
 8000e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e20:	9d08      	ldr	r5, [sp, #32]
 8000e22:	460c      	mov	r4, r1
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d14e      	bne.n	8000ec6 <__udivmoddi4+0xaa>
 8000e28:	4694      	mov	ip, r2
 8000e2a:	458c      	cmp	ip, r1
 8000e2c:	4686      	mov	lr, r0
 8000e2e:	fab2 f282 	clz	r2, r2
 8000e32:	d962      	bls.n	8000efa <__udivmoddi4+0xde>
 8000e34:	b14a      	cbz	r2, 8000e4a <__udivmoddi4+0x2e>
 8000e36:	f1c2 0320 	rsb	r3, r2, #32
 8000e3a:	4091      	lsls	r1, r2
 8000e3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000e40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e44:	4319      	orrs	r1, r3
 8000e46:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4e:	fa1f f68c 	uxth.w	r6, ip
 8000e52:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000e5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e62:	fb04 f106 	mul.w	r1, r4, r6
 8000e66:	4299      	cmp	r1, r3
 8000e68:	d90a      	bls.n	8000e80 <__udivmoddi4+0x64>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e72:	f080 8112 	bcs.w	800109a <__udivmoddi4+0x27e>
 8000e76:	4299      	cmp	r1, r3
 8000e78:	f240 810f 	bls.w	800109a <__udivmoddi4+0x27e>
 8000e7c:	3c02      	subs	r4, #2
 8000e7e:	4463      	add	r3, ip
 8000e80:	1a59      	subs	r1, r3, r1
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e8a:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e92:	fb00 f606 	mul.w	r6, r0, r6
 8000e96:	429e      	cmp	r6, r3
 8000e98:	d90a      	bls.n	8000eb0 <__udivmoddi4+0x94>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea2:	f080 80fc 	bcs.w	800109e <__udivmoddi4+0x282>
 8000ea6:	429e      	cmp	r6, r3
 8000ea8:	f240 80f9 	bls.w	800109e <__udivmoddi4+0x282>
 8000eac:	4463      	add	r3, ip
 8000eae:	3802      	subs	r0, #2
 8000eb0:	1b9b      	subs	r3, r3, r6
 8000eb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	b11d      	cbz	r5, 8000ec2 <__udivmoddi4+0xa6>
 8000eba:	40d3      	lsrs	r3, r2
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	e9c5 3200 	strd	r3, r2, [r5]
 8000ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d905      	bls.n	8000ed6 <__udivmoddi4+0xba>
 8000eca:	b10d      	cbz	r5, 8000ed0 <__udivmoddi4+0xb4>
 8000ecc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	e7f5      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8000ed6:	fab3 f183 	clz	r1, r3
 8000eda:	2900      	cmp	r1, #0
 8000edc:	d146      	bne.n	8000f6c <__udivmoddi4+0x150>
 8000ede:	42a3      	cmp	r3, r4
 8000ee0:	d302      	bcc.n	8000ee8 <__udivmoddi4+0xcc>
 8000ee2:	4290      	cmp	r0, r2
 8000ee4:	f0c0 80f0 	bcc.w	80010c8 <__udivmoddi4+0x2ac>
 8000ee8:	1a86      	subs	r6, r0, r2
 8000eea:	eb64 0303 	sbc.w	r3, r4, r3
 8000eee:	2001      	movs	r0, #1
 8000ef0:	2d00      	cmp	r5, #0
 8000ef2:	d0e6      	beq.n	8000ec2 <__udivmoddi4+0xa6>
 8000ef4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ef8:	e7e3      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8000efa:	2a00      	cmp	r2, #0
 8000efc:	f040 8090 	bne.w	8001020 <__udivmoddi4+0x204>
 8000f00:	eba1 040c 	sub.w	r4, r1, ip
 8000f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f08:	fa1f f78c 	uxth.w	r7, ip
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f16:	fb08 4416 	mls	r4, r8, r6, r4
 8000f1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f1e:	fb07 f006 	mul.w	r0, r7, r6
 8000f22:	4298      	cmp	r0, r3
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x11c>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x11a>
 8000f30:	4298      	cmp	r0, r3
 8000f32:	f200 80cd 	bhi.w	80010d0 <__udivmoddi4+0x2b4>
 8000f36:	4626      	mov	r6, r4
 8000f38:	1a1c      	subs	r4, r3, r0
 8000f3a:	fa1f f38e 	uxth.w	r3, lr
 8000f3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f42:	fb08 4410 	mls	r4, r8, r0, r4
 8000f46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f4a:	fb00 f707 	mul.w	r7, r0, r7
 8000f4e:	429f      	cmp	r7, r3
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x148>
 8000f52:	eb1c 0303 	adds.w	r3, ip, r3
 8000f56:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f5a:	d202      	bcs.n	8000f62 <__udivmoddi4+0x146>
 8000f5c:	429f      	cmp	r7, r3
 8000f5e:	f200 80b0 	bhi.w	80010c2 <__udivmoddi4+0x2a6>
 8000f62:	4620      	mov	r0, r4
 8000f64:	1bdb      	subs	r3, r3, r7
 8000f66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f6a:	e7a5      	b.n	8000eb8 <__udivmoddi4+0x9c>
 8000f6c:	f1c1 0620 	rsb	r6, r1, #32
 8000f70:	408b      	lsls	r3, r1
 8000f72:	fa22 f706 	lsr.w	r7, r2, r6
 8000f76:	431f      	orrs	r7, r3
 8000f78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000f80:	ea43 030c 	orr.w	r3, r3, ip
 8000f84:	40f4      	lsrs	r4, r6
 8000f86:	fa00 f801 	lsl.w	r8, r0, r1
 8000f8a:	0c38      	lsrs	r0, r7, #16
 8000f8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f90:	fbb4 fef0 	udiv	lr, r4, r0
 8000f94:	fa1f fc87 	uxth.w	ip, r7
 8000f98:	fb00 441e 	mls	r4, r0, lr, r4
 8000f9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fa0:	fb0e f90c 	mul.w	r9, lr, ip
 8000fa4:	45a1      	cmp	r9, r4
 8000fa6:	fa02 f201 	lsl.w	r2, r2, r1
 8000faa:	d90a      	bls.n	8000fc2 <__udivmoddi4+0x1a6>
 8000fac:	193c      	adds	r4, r7, r4
 8000fae:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000fb2:	f080 8084 	bcs.w	80010be <__udivmoddi4+0x2a2>
 8000fb6:	45a1      	cmp	r9, r4
 8000fb8:	f240 8081 	bls.w	80010be <__udivmoddi4+0x2a2>
 8000fbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fc0:	443c      	add	r4, r7
 8000fc2:	eba4 0409 	sub.w	r4, r4, r9
 8000fc6:	fa1f f983 	uxth.w	r9, r3
 8000fca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fce:	fb00 4413 	mls	r4, r0, r3, r4
 8000fd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fda:	45a4      	cmp	ip, r4
 8000fdc:	d907      	bls.n	8000fee <__udivmoddi4+0x1d2>
 8000fde:	193c      	adds	r4, r7, r4
 8000fe0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fe4:	d267      	bcs.n	80010b6 <__udivmoddi4+0x29a>
 8000fe6:	45a4      	cmp	ip, r4
 8000fe8:	d965      	bls.n	80010b6 <__udivmoddi4+0x29a>
 8000fea:	3b02      	subs	r3, #2
 8000fec:	443c      	add	r4, r7
 8000fee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ff2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ff6:	eba4 040c 	sub.w	r4, r4, ip
 8000ffa:	429c      	cmp	r4, r3
 8000ffc:	46ce      	mov	lr, r9
 8000ffe:	469c      	mov	ip, r3
 8001000:	d351      	bcc.n	80010a6 <__udivmoddi4+0x28a>
 8001002:	d04e      	beq.n	80010a2 <__udivmoddi4+0x286>
 8001004:	b155      	cbz	r5, 800101c <__udivmoddi4+0x200>
 8001006:	ebb8 030e 	subs.w	r3, r8, lr
 800100a:	eb64 040c 	sbc.w	r4, r4, ip
 800100e:	fa04 f606 	lsl.w	r6, r4, r6
 8001012:	40cb      	lsrs	r3, r1
 8001014:	431e      	orrs	r6, r3
 8001016:	40cc      	lsrs	r4, r1
 8001018:	e9c5 6400 	strd	r6, r4, [r5]
 800101c:	2100      	movs	r1, #0
 800101e:	e750      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8001020:	f1c2 0320 	rsb	r3, r2, #32
 8001024:	fa20 f103 	lsr.w	r1, r0, r3
 8001028:	fa0c fc02 	lsl.w	ip, ip, r2
 800102c:	fa24 f303 	lsr.w	r3, r4, r3
 8001030:	4094      	lsls	r4, r2
 8001032:	430c      	orrs	r4, r1
 8001034:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001038:	fa00 fe02 	lsl.w	lr, r0, r2
 800103c:	fa1f f78c 	uxth.w	r7, ip
 8001040:	fbb3 f0f8 	udiv	r0, r3, r8
 8001044:	fb08 3110 	mls	r1, r8, r0, r3
 8001048:	0c23      	lsrs	r3, r4, #16
 800104a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800104e:	fb00 f107 	mul.w	r1, r0, r7
 8001052:	4299      	cmp	r1, r3
 8001054:	d908      	bls.n	8001068 <__udivmoddi4+0x24c>
 8001056:	eb1c 0303 	adds.w	r3, ip, r3
 800105a:	f100 36ff 	add.w	r6, r0, #4294967295
 800105e:	d22c      	bcs.n	80010ba <__udivmoddi4+0x29e>
 8001060:	4299      	cmp	r1, r3
 8001062:	d92a      	bls.n	80010ba <__udivmoddi4+0x29e>
 8001064:	3802      	subs	r0, #2
 8001066:	4463      	add	r3, ip
 8001068:	1a5b      	subs	r3, r3, r1
 800106a:	b2a4      	uxth	r4, r4
 800106c:	fbb3 f1f8 	udiv	r1, r3, r8
 8001070:	fb08 3311 	mls	r3, r8, r1, r3
 8001074:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001078:	fb01 f307 	mul.w	r3, r1, r7
 800107c:	42a3      	cmp	r3, r4
 800107e:	d908      	bls.n	8001092 <__udivmoddi4+0x276>
 8001080:	eb1c 0404 	adds.w	r4, ip, r4
 8001084:	f101 36ff 	add.w	r6, r1, #4294967295
 8001088:	d213      	bcs.n	80010b2 <__udivmoddi4+0x296>
 800108a:	42a3      	cmp	r3, r4
 800108c:	d911      	bls.n	80010b2 <__udivmoddi4+0x296>
 800108e:	3902      	subs	r1, #2
 8001090:	4464      	add	r4, ip
 8001092:	1ae4      	subs	r4, r4, r3
 8001094:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001098:	e739      	b.n	8000f0e <__udivmoddi4+0xf2>
 800109a:	4604      	mov	r4, r0
 800109c:	e6f0      	b.n	8000e80 <__udivmoddi4+0x64>
 800109e:	4608      	mov	r0, r1
 80010a0:	e706      	b.n	8000eb0 <__udivmoddi4+0x94>
 80010a2:	45c8      	cmp	r8, r9
 80010a4:	d2ae      	bcs.n	8001004 <__udivmoddi4+0x1e8>
 80010a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80010aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80010ae:	3801      	subs	r0, #1
 80010b0:	e7a8      	b.n	8001004 <__udivmoddi4+0x1e8>
 80010b2:	4631      	mov	r1, r6
 80010b4:	e7ed      	b.n	8001092 <__udivmoddi4+0x276>
 80010b6:	4603      	mov	r3, r0
 80010b8:	e799      	b.n	8000fee <__udivmoddi4+0x1d2>
 80010ba:	4630      	mov	r0, r6
 80010bc:	e7d4      	b.n	8001068 <__udivmoddi4+0x24c>
 80010be:	46d6      	mov	lr, sl
 80010c0:	e77f      	b.n	8000fc2 <__udivmoddi4+0x1a6>
 80010c2:	4463      	add	r3, ip
 80010c4:	3802      	subs	r0, #2
 80010c6:	e74d      	b.n	8000f64 <__udivmoddi4+0x148>
 80010c8:	4606      	mov	r6, r0
 80010ca:	4623      	mov	r3, r4
 80010cc:	4608      	mov	r0, r1
 80010ce:	e70f      	b.n	8000ef0 <__udivmoddi4+0xd4>
 80010d0:	3e02      	subs	r6, #2
 80010d2:	4463      	add	r3, ip
 80010d4:	e730      	b.n	8000f38 <__udivmoddi4+0x11c>
 80010d6:	bf00      	nop

080010d8 <__aeabi_idiv0>:
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop

080010dc <easyCase>:
//void Reset(){  	Didn't use for now
//	registerFrame[0x01].U16 = 0;
//	registerFrame[0x10].U16 = 0;
//}

void easyCase(){
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
	base.Base_case = registerFrame[0x01].U16;
 80010e0:	4b09      	ldr	r3, [pc, #36]	@ (8001108 <easyCase+0x2c>)
 80010e2:	885a      	ldrh	r2, [r3, #2]
 80010e4:	4b09      	ldr	r3, [pc, #36]	@ (800110c <easyCase+0x30>)
 80010e6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	base.Vacuum_case = registerFrame[0x02].U16;
 80010ea:	4b07      	ldr	r3, [pc, #28]	@ (8001108 <easyCase+0x2c>)
 80010ec:	889a      	ldrh	r2, [r3, #4]
 80010ee:	4b07      	ldr	r3, [pc, #28]	@ (800110c <easyCase+0x30>)
 80010f0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
	base.Gripper_case = registerFrame[0x03].U16;
 80010f4:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <easyCase+0x2c>)
 80010f6:	88da      	ldrh	r2, [r3, #6]
 80010f8:	4b04      	ldr	r3, [pc, #16]	@ (800110c <easyCase+0x30>)
 80010fa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
}
 80010fe:	bf00      	nop
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	2000110c 	.word	0x2000110c
 800110c:	20000304 	.word	0x20000304

08001110 <Heartbeat>:

void Heartbeat(){
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
	registerFrame[0x00].U16 = 22881;
 8001114:	4b04      	ldr	r3, [pc, #16]	@ (8001128 <Heartbeat+0x18>)
 8001116:	f645 1261 	movw	r2, #22881	@ 0x5961
 800111a:	801a      	strh	r2, [r3, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	2000110c 	.word	0x2000110c

0800112c <Routine>:

void Routine(){
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	if(registerFrame[0x00].U16 == 18537)
 8001130:	4b29      	ldr	r3, [pc, #164]	@ (80011d8 <Routine+0xac>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	f644 0269 	movw	r2, #18537	@ 0x4869
 8001138:	4293      	cmp	r3, r2
 800113a:	d14a      	bne.n	80011d2 <Routine+0xa6>
	{
		//Gripper 0x04 not sure!?!?
		registerFrame[0x04].U16 = base.ReedStatus;   					//Gripper status 0b0010 = 0000 0000 0000 0010
 800113c:	4b27      	ldr	r3, [pc, #156]	@ (80011dc <Routine+0xb0>)
 800113e:	f8b3 204e 	ldrh.w	r2, [r3, #78]	@ 0x4e
 8001142:	4b25      	ldr	r3, [pc, #148]	@ (80011d8 <Routine+0xac>)
 8001144:	811a      	strh	r2, [r3, #8]
		registerFrame[0x10].U16 = base.BaseStatus;							//Z-axis status 0010 = 1
 8001146:	4b25      	ldr	r3, [pc, #148]	@ (80011dc <Routine+0xb0>)
 8001148:	881a      	ldrh	r2, [r3, #0]
 800114a:	4b23      	ldr	r3, [pc, #140]	@ (80011d8 <Routine+0xac>)
 800114c:	841a      	strh	r2, [r3, #32]
		registerFrame[0x11].U16 = AMT.Linear_Position			*10;	//Z-axis position
 800114e:	4b24      	ldr	r3, [pc, #144]	@ (80011e0 <Routine+0xb4>)
 8001150:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001154:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001158:	ee67 7a87 	vmul.f32	s15, s15, s14
 800115c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001160:	ee17 3a90 	vmov	r3, s15
 8001164:	b29a      	uxth	r2, r3
 8001166:	4b1c      	ldr	r3, [pc, #112]	@ (80011d8 <Routine+0xac>)
 8001168:	845a      	strh	r2, [r3, #34]	@ 0x22
		registerFrame[0x12].U16 = fabs(AMT.Linear_Velocity)		*10;	//Z-axis speed
 800116a:	4b1d      	ldr	r3, [pc, #116]	@ (80011e0 <Routine+0xb4>)
 800116c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001170:	eef0 7ae7 	vabs.f32	s15, s15
 8001174:	ee17 0a90 	vmov	r0, s15
 8001178:	f7ff f9b2 	bl	80004e0 <__aeabi_f2d>
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	4b18      	ldr	r3, [pc, #96]	@ (80011e4 <Routine+0xb8>)
 8001182:	f7ff fa05 	bl	8000590 <__aeabi_dmul>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f7ff fcaf 	bl	8000af0 <__aeabi_d2uiz>
 8001192:	4603      	mov	r3, r0
 8001194:	b29a      	uxth	r2, r3
 8001196:	4b10      	ldr	r3, [pc, #64]	@ (80011d8 <Routine+0xac>)
 8001198:	849a      	strh	r2, [r3, #36]	@ 0x24
		registerFrame[0x13].U16 = fabs(AMT.Linear_Acceleration)	*10;	//Z-axis acceleration
 800119a:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <Routine+0xb4>)
 800119c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80011a0:	eef0 7ae7 	vabs.f32	s15, s15
 80011a4:	ee17 0a90 	vmov	r0, s15
 80011a8:	f7ff f99a 	bl	80004e0 <__aeabi_f2d>
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <Routine+0xb8>)
 80011b2:	f7ff f9ed 	bl	8000590 <__aeabi_dmul>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4610      	mov	r0, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	f7ff fc97 	bl	8000af0 <__aeabi_d2uiz>
 80011c2:	4603      	mov	r3, r0
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	4b04      	ldr	r3, [pc, #16]	@ (80011d8 <Routine+0xac>)
 80011c8:	84da      	strh	r2, [r3, #38]	@ 0x26
		registerFrame[0x40].U16 = 4								*10;	//X-axis position
 80011ca:	4b03      	ldr	r3, [pc, #12]	@ (80011d8 <Routine+0xac>)
 80011cc:	2228      	movs	r2, #40	@ 0x28
 80011ce:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
	}
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	2000110c 	.word	0x2000110c
 80011dc:	20000304 	.word	0x20000304
 80011e0:	20000b48 	.word	0x20000b48
 80011e4:	40240000 	.word	0x40240000

080011e8 <Vacuum>:

void Vacuum(){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	if(registerFrame[0x02].U16 == 0b0000){
 80011ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001224 <Vacuum+0x3c>)
 80011ee:	889b      	ldrh	r3, [r3, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d108      	bne.n	8001206 <Vacuum+0x1e>
		base.Vacuum = 0;			//Vacuum status: Off
 80011f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001228 <Vacuum+0x40>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	829a      	strh	r2, [r3, #20]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, RESET);			// Vacuum off
 80011fa:	2200      	movs	r2, #0
 80011fc:	2120      	movs	r1, #32
 80011fe:	480b      	ldr	r0, [pc, #44]	@ (800122c <Vacuum+0x44>)
 8001200:	f005 f99c 	bl	800653c <HAL_GPIO_WritePin>
	else if(registerFrame[0x02].U16 == 0b0001){
		base.Vacuum = 1;			//Vacuum status: On
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, SET);			// Vacuum on

	}
}
 8001204:	e00b      	b.n	800121e <Vacuum+0x36>
	else if(registerFrame[0x02].U16 == 0b0001){
 8001206:	4b07      	ldr	r3, [pc, #28]	@ (8001224 <Vacuum+0x3c>)
 8001208:	889b      	ldrh	r3, [r3, #4]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d107      	bne.n	800121e <Vacuum+0x36>
		base.Vacuum = 1;			//Vacuum status: On
 800120e:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <Vacuum+0x40>)
 8001210:	2201      	movs	r2, #1
 8001212:	829a      	strh	r2, [r3, #20]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, SET);			// Vacuum on
 8001214:	2201      	movs	r2, #1
 8001216:	2120      	movs	r1, #32
 8001218:	4804      	ldr	r0, [pc, #16]	@ (800122c <Vacuum+0x44>)
 800121a:	f005 f98f 	bl	800653c <HAL_GPIO_WritePin>
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	2000110c 	.word	0x2000110c
 8001228:	20000304 	.word	0x20000304
 800122c:	48000800 	.word	0x48000800

08001230 <GripperMovement>:

void GripperMovement(){
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	if(registerFrame[0x03].U16 == 0b0000){
 8001234:	4b14      	ldr	r3, [pc, #80]	@ (8001288 <GripperMovement+0x58>)
 8001236:	88db      	ldrh	r3, [r3, #6]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d10f      	bne.n	800125c <GripperMovement+0x2c>
		base.Gripper = 0;			//Gripper Movement: Backward
 800123c:	4b13      	ldr	r3, [pc, #76]	@ (800128c <GripperMovement+0x5c>)
 800123e:	2200      	movs	r2, #0
 8001240:	82da      	strh	r2, [r3, #22]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, SET);			// Backward
 8001242:	2201      	movs	r2, #1
 8001244:	2110      	movs	r1, #16
 8001246:	4812      	ldr	r0, [pc, #72]	@ (8001290 <GripperMovement+0x60>)
 8001248:	f005 f978 	bl	800653c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 800124c:	2200      	movs	r2, #0
 800124e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001252:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001256:	f005 f971 	bl	800653c <HAL_GPIO_WritePin>
	else if(registerFrame[0x03].U16 == 0b0001){
		base.Gripper = 1;			//Gripper Movement: Forward
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);			//Forward
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
	}
}
 800125a:	e012      	b.n	8001282 <GripperMovement+0x52>
	else if(registerFrame[0x03].U16 == 0b0001){
 800125c:	4b0a      	ldr	r3, [pc, #40]	@ (8001288 <GripperMovement+0x58>)
 800125e:	88db      	ldrh	r3, [r3, #6]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d10e      	bne.n	8001282 <GripperMovement+0x52>
		base.Gripper = 1;			//Gripper Movement: Forward
 8001264:	4b09      	ldr	r3, [pc, #36]	@ (800128c <GripperMovement+0x5c>)
 8001266:	2201      	movs	r2, #1
 8001268:	82da      	strh	r2, [r3, #22]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);			//Forward
 800126a:	2200      	movs	r2, #0
 800126c:	2110      	movs	r1, #16
 800126e:	4808      	ldr	r0, [pc, #32]	@ (8001290 <GripperMovement+0x60>)
 8001270:	f005 f964 	bl	800653c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 8001274:	2201      	movs	r2, #1
 8001276:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800127a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800127e:	f005 f95d 	bl	800653c <HAL_GPIO_WritePin>
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	2000110c 	.word	0x2000110c
 800128c:	20000304 	.word	0x20000304
 8001290:	48000800 	.word	0x48000800

08001294 <SetShelves>:



void SetShelves(){
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	base.ShelveMode = 1;
 8001298:	4b40      	ldr	r3, [pc, #256]	@ (800139c <SetShelves+0x108>)
 800129a:	2201      	movs	r2, #1
 800129c:	831a      	strh	r2, [r3, #24]
	PS2X_Reader();
 800129e:	f001 fc99 	bl	8002bd4 <PS2X_Reader>
	if(ps2.ps2RX[0] == 74){
 80012a2:	4b3f      	ldr	r3, [pc, #252]	@ (80013a0 <SetShelves+0x10c>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b4a      	cmp	r3, #74	@ 0x4a
 80012a8:	d102      	bne.n	80012b0 <SetShelves+0x1c>
		ps2.stop = 1;
 80012aa:	4b3d      	ldr	r3, [pc, #244]	@ (80013a0 <SetShelves+0x10c>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	671a      	str	r2, [r3, #112]	@ 0x70
	}
	if (ps2.stop == 1 && ps2.ps2RX[0] == 75){
 80012b0:	4b3b      	ldr	r3, [pc, #236]	@ (80013a0 <SetShelves+0x10c>)
 80012b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d10b      	bne.n	80012d0 <SetShelves+0x3c>
 80012b8:	4b39      	ldr	r3, [pc, #228]	@ (80013a0 <SetShelves+0x10c>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b4b      	cmp	r3, #75	@ 0x4b
 80012be:	d107      	bne.n	80012d0 <SetShelves+0x3c>
		ps2.stop = 0;
 80012c0:	4b37      	ldr	r3, [pc, #220]	@ (80013a0 <SetShelves+0x10c>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	671a      	str	r2, [r3, #112]	@ 0x70
		base.MotorHome = 150;
 80012c6:	4b35      	ldr	r3, [pc, #212]	@ (800139c <SetShelves+0x108>)
 80012c8:	2296      	movs	r2, #150	@ 0x96
 80012ca:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
 80012ce:	e005      	b.n	80012dc <SetShelves+0x48>
	}
		  else if(ps2.stop == 0){
 80012d0:	4b33      	ldr	r3, [pc, #204]	@ (80013a0 <SetShelves+0x10c>)
 80012d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d101      	bne.n	80012dc <SetShelves+0x48>
			  PS2X_Reader();
 80012d8:	f001 fc7c 	bl	8002bd4 <PS2X_Reader>
	  	  }
	if (base.ShelveMode == 0)
 80012dc:	4b2f      	ldr	r3, [pc, #188]	@ (800139c <SetShelves+0x108>)
 80012de:	8b1b      	ldrh	r3, [r3, #24]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d158      	bne.n	8001396 <SetShelves+0x102>
	{
		registerFrame[0x23].U16 = base.Shelve[0] *10; 	//Position Shelve 1
 80012e4:	4b2d      	ldr	r3, [pc, #180]	@ (800139c <SetShelves+0x108>)
 80012e6:	edd3 7a07 	vldr	s15, [r3, #28]
 80012ea:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80012ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012f6:	ee17 3a90 	vmov	r3, s15
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	4b29      	ldr	r3, [pc, #164]	@ (80013a4 <SetShelves+0x110>)
 80012fe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
		registerFrame[0x24].U16 = base.Shelve[1] *10;
 8001302:	4b26      	ldr	r3, [pc, #152]	@ (800139c <SetShelves+0x108>)
 8001304:	edd3 7a08 	vldr	s15, [r3, #32]
 8001308:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800130c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001310:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001314:	ee17 3a90 	vmov	r3, s15
 8001318:	b29a      	uxth	r2, r3
 800131a:	4b22      	ldr	r3, [pc, #136]	@ (80013a4 <SetShelves+0x110>)
 800131c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
		registerFrame[0x25].U16 = base.Shelve[2] *10;
 8001320:	4b1e      	ldr	r3, [pc, #120]	@ (800139c <SetShelves+0x108>)
 8001322:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001326:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800132a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800132e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001332:	ee17 3a90 	vmov	r3, s15
 8001336:	b29a      	uxth	r2, r3
 8001338:	4b1a      	ldr	r3, [pc, #104]	@ (80013a4 <SetShelves+0x110>)
 800133a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
		registerFrame[0x26].U16 = base.Shelve[3] *10;
 800133e:	4b17      	ldr	r3, [pc, #92]	@ (800139c <SetShelves+0x108>)
 8001340:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001344:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001348:	ee67 7a87 	vmul.f32	s15, s15, s14
 800134c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001350:	ee17 3a90 	vmov	r3, s15
 8001354:	b29a      	uxth	r2, r3
 8001356:	4b13      	ldr	r3, [pc, #76]	@ (80013a4 <SetShelves+0x110>)
 8001358:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
		registerFrame[0x27].U16 = base.Shelve[4] *10;
 800135c:	4b0f      	ldr	r3, [pc, #60]	@ (800139c <SetShelves+0x108>)
 800135e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001362:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001366:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800136e:	ee17 3a90 	vmov	r3, s15
 8001372:	b29a      	uxth	r2, r3
 8001374:	4b0b      	ldr	r3, [pc, #44]	@ (80013a4 <SetShelves+0x110>)
 8001376:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

		//finish
		base.BaseStatus = 0;
 800137a:	4b08      	ldr	r3, [pc, #32]	@ (800139c <SetShelves+0x108>)
 800137c:	2200      	movs	r2, #0
 800137e:	801a      	strh	r2, [r3, #0]
		registerFrame[0x01].U16 = 0;
 8001380:	4b08      	ldr	r3, [pc, #32]	@ (80013a4 <SetShelves+0x110>)
 8001382:	2200      	movs	r2, #0
 8001384:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = base.BaseStatus;
 8001386:	4b05      	ldr	r3, [pc, #20]	@ (800139c <SetShelves+0x108>)
 8001388:	881a      	ldrh	r2, [r3, #0]
 800138a:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <SetShelves+0x110>)
 800138c:	841a      	strh	r2, [r3, #32]
		base.Base_case = 0;
 800138e:	4b03      	ldr	r3, [pc, #12]	@ (800139c <SetShelves+0x108>)
 8001390:	2200      	movs	r2, #0
 8001392:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	}
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000304 	.word	0x20000304
 80013a0:	20000b88 	.word	0x20000b88
 80013a4:	2000110c 	.word	0x2000110c

080013a8 <RunPoint>:

void RunPoint(){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
	base.GoalPoint = (registerFrame[0x30].U16)/10; //Get Goal point from BaseSytem(Point Mode) that we pick/write After pressing Run Button
 80013ac:	4b3e      	ldr	r3, [pc, #248]	@ (80014a8 <RunPoint+0x100>)
 80013ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80013b2:	4a3e      	ldr	r2, [pc, #248]	@ (80014ac <RunPoint+0x104>)
 80013b4:	fba2 2303 	umull	r2, r3, r2, r3
 80013b8:	08db      	lsrs	r3, r3, #3
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	ee07 3a90 	vmov	s15, r3
 80013c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013c4:	4b3a      	ldr	r3, [pc, #232]	@ (80014b0 <RunPoint+0x108>)
 80013c6:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	elapsedTime += 0.0002;
 80013ca:	4b3a      	ldr	r3, [pc, #232]	@ (80014b4 <RunPoint+0x10c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f886 	bl	80004e0 <__aeabi_f2d>
 80013d4:	a330      	add	r3, pc, #192	@ (adr r3, 8001498 <RunPoint+0xf0>)
 80013d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013da:	f7fe ff23 	bl	8000224 <__adddf3>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4610      	mov	r0, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	f7ff fba3 	bl	8000b30 <__aeabi_d2f>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4a31      	ldr	r2, [pc, #196]	@ (80014b4 <RunPoint+0x10c>)
 80013ee:	6013      	str	r3, [r2, #0]
	Traject(&Traj, temp_pos, base.GoalPoint);
 80013f0:	4b31      	ldr	r3, [pc, #196]	@ (80014b8 <RunPoint+0x110>)
 80013f2:	edd3 7a00 	vldr	s15, [r3]
 80013f6:	4b2e      	ldr	r3, [pc, #184]	@ (80014b0 <RunPoint+0x108>)
 80013f8:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80013fc:	eef0 0a47 	vmov.f32	s1, s14
 8001400:	eeb0 0a67 	vmov.f32	s0, s15
 8001404:	482d      	ldr	r0, [pc, #180]	@ (80014bc <RunPoint+0x114>)
 8001406:	f001 fdd7 	bl	8002fb8 <Traject>
	PID_controller_cascade(&PID_pos, &PID_velo, &AMT, Traj.currentPosition);
 800140a:	4b2c      	ldr	r3, [pc, #176]	@ (80014bc <RunPoint+0x114>)
 800140c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001410:	eeb0 0a67 	vmov.f32	s0, s15
 8001414:	4a2a      	ldr	r2, [pc, #168]	@ (80014c0 <RunPoint+0x118>)
 8001416:	492b      	ldr	r1, [pc, #172]	@ (80014c4 <RunPoint+0x11c>)
 8001418:	482b      	ldr	r0, [pc, #172]	@ (80014c8 <RunPoint+0x120>)
 800141a:	f001 fbbf 	bl	8002b9c <PID_controller_cascade>
	base.MotorHome = PID_velo.out;
 800141e:	4b29      	ldr	r3, [pc, #164]	@ (80014c4 <RunPoint+0x11c>)
 8001420:	edd3 7a06 	vldr	s15, [r3, #24]
 8001424:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001428:	ee17 3a90 	vmov	r3, s15
 800142c:	b21a      	sxth	r2, r3
 800142e:	4b20      	ldr	r3, [pc, #128]	@ (80014b0 <RunPoint+0x108>)
 8001430:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

	// Error must less than 0.1 mm
	if(fabs(AMT.Linear_Position - base.GoalPoint) <= 0.1){
 8001434:	4b22      	ldr	r3, [pc, #136]	@ (80014c0 <RunPoint+0x118>)
 8001436:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800143a:	4b1d      	ldr	r3, [pc, #116]	@ (80014b0 <RunPoint+0x108>)
 800143c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001440:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001444:	eef0 7ae7 	vabs.f32	s15, s15
 8001448:	ee17 0a90 	vmov	r0, s15
 800144c:	f7ff f848 	bl	80004e0 <__aeabi_f2d>
 8001450:	a313      	add	r3, pc, #76	@ (adr r3, 80014a0 <RunPoint+0xf8>)
 8001452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001456:	f7ff fb17 	bl	8000a88 <__aeabi_dcmple>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d100      	bne.n	8001462 <RunPoint+0xba>
		temp_pos = base.GoalPoint;
		base.BaseStatus = 0;
		registerFrame[0x01].U16 = 0;
		registerFrame[0x10].U16 = base.BaseStatus;
	}
}
 8001460:	e015      	b.n	800148e <RunPoint+0xe6>
		elapsedTime = 0;
 8001462:	4b14      	ldr	r3, [pc, #80]	@ (80014b4 <RunPoint+0x10c>)
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
		Traj.currentPosition = base.GoalPoint;
 800146a:	4b11      	ldr	r3, [pc, #68]	@ (80014b0 <RunPoint+0x108>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	4a13      	ldr	r2, [pc, #76]	@ (80014bc <RunPoint+0x114>)
 8001470:	6093      	str	r3, [r2, #8]
		temp_pos = base.GoalPoint;
 8001472:	4b0f      	ldr	r3, [pc, #60]	@ (80014b0 <RunPoint+0x108>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	4a10      	ldr	r2, [pc, #64]	@ (80014b8 <RunPoint+0x110>)
 8001478:	6013      	str	r3, [r2, #0]
		base.BaseStatus = 0;
 800147a:	4b0d      	ldr	r3, [pc, #52]	@ (80014b0 <RunPoint+0x108>)
 800147c:	2200      	movs	r2, #0
 800147e:	801a      	strh	r2, [r3, #0]
		registerFrame[0x01].U16 = 0;
 8001480:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <RunPoint+0x100>)
 8001482:	2200      	movs	r2, #0
 8001484:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = base.BaseStatus;
 8001486:	4b0a      	ldr	r3, [pc, #40]	@ (80014b0 <RunPoint+0x108>)
 8001488:	881a      	ldrh	r2, [r3, #0]
 800148a:	4b07      	ldr	r3, [pc, #28]	@ (80014a8 <RunPoint+0x100>)
 800148c:	841a      	strh	r2, [r3, #32]
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	f3af 8000 	nop.w
 8001498:	eb1c432d 	.word	0xeb1c432d
 800149c:	3f2a36e2 	.word	0x3f2a36e2
 80014a0:	9999999a 	.word	0x9999999a
 80014a4:	3fb99999 	.word	0x3fb99999
 80014a8:	2000110c 	.word	0x2000110c
 80014ac:	cccccccd 	.word	0xcccccccd
 80014b0:	20000304 	.word	0x20000304
 80014b4:	20001108 	.word	0x20001108
 80014b8:	200002d0 	.word	0x200002d0
 80014bc:	20000b34 	.word	0x20000b34
 80014c0:	20000b48 	.word	0x20000b48
 80014c4:	20000c08 	.word	0x20000c08
 80014c8:	200002e8 	.word	0x200002e8

080014cc <SetHome>:

void SetHome(){
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
	//	registerFrame[0x01].U16 = 2;
	base.MotorHome = 310;		// Set duty cycle to go upward at slowest speed
 80014d0:	4b10      	ldr	r3, [pc, #64]	@ (8001514 <SetHome+0x48>)
 80014d2:	f44f 729b 	mov.w	r2, #310	@ 0x136
 80014d6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
	temp_pos = 600;
 80014da:	4b0f      	ldr	r3, [pc, #60]	@ (8001518 <SetHome+0x4c>)
 80014dc:	4a0f      	ldr	r2, [pc, #60]	@ (800151c <SetHome+0x50>)
 80014de:	601a      	str	r2, [r3, #0]
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET)		// Top photo limit was triggered
 80014e0:	2140      	movs	r1, #64	@ 0x40
 80014e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014e6:	f005 f811 	bl	800650c <HAL_GPIO_ReadPin>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d10f      	bne.n	8001510 <SetHome+0x44>
	{
//		base.MotorHome = 150;		// Set duty cycle to hold position gripper
		AMT_encoder_reset(&AMT);	// Set linear position to ...
 80014f0:	480b      	ldr	r0, [pc, #44]	@ (8001520 <SetHome+0x54>)
 80014f2:	f000 fbcd 	bl	8001c90 <AMT_encoder_reset>
		Traj.currentPosition = 300;
 80014f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001524 <SetHome+0x58>)
 80014f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001528 <SetHome+0x5c>)
 80014fa:	609a      	str	r2, [r3, #8]
//		PID_velo.out = 300;
		base.BaseStatus = 0;
 80014fc:	4b05      	ldr	r3, [pc, #20]	@ (8001514 <SetHome+0x48>)
 80014fe:	2200      	movs	r2, #0
 8001500:	801a      	strh	r2, [r3, #0]
		registerFrame[0x01].U16 = 0;
 8001502:	4b0a      	ldr	r3, [pc, #40]	@ (800152c <SetHome+0x60>)
 8001504:	2200      	movs	r2, #0
 8001506:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = base.BaseStatus;
 8001508:	4b02      	ldr	r3, [pc, #8]	@ (8001514 <SetHome+0x48>)
 800150a:	881a      	ldrh	r2, [r3, #0]
 800150c:	4b07      	ldr	r3, [pc, #28]	@ (800152c <SetHome+0x60>)
 800150e:	841a      	strh	r2, [r3, #32]
	}
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000304 	.word	0x20000304
 8001518:	200002d0 	.word	0x200002d0
 800151c:	44160000 	.word	0x44160000
 8001520:	20000b48 	.word	0x20000b48
 8001524:	20000b34 	.word	0x20000b34
 8001528:	43960000 	.word	0x43960000
 800152c:	2000110c 	.word	0x2000110c

08001530 <RunJog>:

void RunJog(){
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0

	registerFrame[0x10].U16 = 4;
 8001534:	4ba7      	ldr	r3, [pc, #668]	@ (80017d4 <RunJog+0x2a4>)
 8001536:	2204      	movs	r2, #4
 8001538:	841a      	strh	r2, [r3, #32]

	// Define Pick shelf
	base.Pick[4] = registerFrame[0x21].U16 % 10;
 800153a:	4ba6      	ldr	r3, [pc, #664]	@ (80017d4 <RunJog+0x2a4>)
 800153c:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8001540:	4ba5      	ldr	r3, [pc, #660]	@ (80017d8 <RunJog+0x2a8>)
 8001542:	fba3 1302 	umull	r1, r3, r3, r2
 8001546:	08d9      	lsrs	r1, r3, #3
 8001548:	460b      	mov	r3, r1
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	440b      	add	r3, r1
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	b29a      	uxth	r2, r3
 8001554:	4ba1      	ldr	r3, [pc, #644]	@ (80017dc <RunJog+0x2ac>)
 8001556:	879a      	strh	r2, [r3, #60]	@ 0x3c
	base.Pick[3] = ((registerFrame[0x21].U16 - base.Pick[4]) % 100)/10;
 8001558:	4b9e      	ldr	r3, [pc, #632]	@ (80017d4 <RunJog+0x2a4>)
 800155a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 800155e:	461a      	mov	r2, r3
 8001560:	4b9e      	ldr	r3, [pc, #632]	@ (80017dc <RunJog+0x2ac>)
 8001562:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8001564:	1ad2      	subs	r2, r2, r3
 8001566:	4b9e      	ldr	r3, [pc, #632]	@ (80017e0 <RunJog+0x2b0>)
 8001568:	fb83 1302 	smull	r1, r3, r3, r2
 800156c:	1159      	asrs	r1, r3, #5
 800156e:	17d3      	asrs	r3, r2, #31
 8001570:	1acb      	subs	r3, r1, r3
 8001572:	2164      	movs	r1, #100	@ 0x64
 8001574:	fb01 f303 	mul.w	r3, r1, r3
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	4a9a      	ldr	r2, [pc, #616]	@ (80017e4 <RunJog+0x2b4>)
 800157c:	fb82 1203 	smull	r1, r2, r2, r3
 8001580:	1092      	asrs	r2, r2, #2
 8001582:	17db      	asrs	r3, r3, #31
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	b29a      	uxth	r2, r3
 8001588:	4b94      	ldr	r3, [pc, #592]	@ (80017dc <RunJog+0x2ac>)
 800158a:	875a      	strh	r2, [r3, #58]	@ 0x3a
	base.Pick[2] = ((registerFrame[0x21].U16 %1000) - ((base.Pick[3]*10)+base.Pick[4]))/100;
 800158c:	4b91      	ldr	r3, [pc, #580]	@ (80017d4 <RunJog+0x2a4>)
 800158e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001592:	4a95      	ldr	r2, [pc, #596]	@ (80017e8 <RunJog+0x2b8>)
 8001594:	fba2 1203 	umull	r1, r2, r2, r3
 8001598:	0992      	lsrs	r2, r2, #6
 800159a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800159e:	fb01 f202 	mul.w	r2, r1, r2
 80015a2:	1a9b      	subs	r3, r3, r2
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	4619      	mov	r1, r3
 80015a8:	4b8c      	ldr	r3, [pc, #560]	@ (80017dc <RunJog+0x2ac>)
 80015aa:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80015ac:	461a      	mov	r2, r3
 80015ae:	4613      	mov	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	461a      	mov	r2, r3
 80015b8:	4b88      	ldr	r3, [pc, #544]	@ (80017dc <RunJog+0x2ac>)
 80015ba:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80015bc:	4413      	add	r3, r2
 80015be:	1acb      	subs	r3, r1, r3
 80015c0:	4a87      	ldr	r2, [pc, #540]	@ (80017e0 <RunJog+0x2b0>)
 80015c2:	fb82 1203 	smull	r1, r2, r2, r3
 80015c6:	1152      	asrs	r2, r2, #5
 80015c8:	17db      	asrs	r3, r3, #31
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	4b83      	ldr	r3, [pc, #524]	@ (80017dc <RunJog+0x2ac>)
 80015d0:	871a      	strh	r2, [r3, #56]	@ 0x38
	base.Pick[1] = ((registerFrame[0x21].U16 %10000)-(((base.Pick[2]*100)+(base.Pick[3]*10)+base.Pick[4])))/1000;
 80015d2:	4b80      	ldr	r3, [pc, #512]	@ (80017d4 <RunJog+0x2a4>)
 80015d4:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80015d8:	4a84      	ldr	r2, [pc, #528]	@ (80017ec <RunJog+0x2bc>)
 80015da:	fba2 1203 	umull	r1, r2, r2, r3
 80015de:	0b52      	lsrs	r2, r2, #13
 80015e0:	f242 7110 	movw	r1, #10000	@ 0x2710
 80015e4:	fb01 f202 	mul.w	r2, r1, r2
 80015e8:	1a9b      	subs	r3, r3, r2
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	4618      	mov	r0, r3
 80015ee:	4b7b      	ldr	r3, [pc, #492]	@ (80017dc <RunJog+0x2ac>)
 80015f0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80015f2:	461a      	mov	r2, r3
 80015f4:	2364      	movs	r3, #100	@ 0x64
 80015f6:	fb03 f202 	mul.w	r2, r3, r2
 80015fa:	4b78      	ldr	r3, [pc, #480]	@ (80017dc <RunJog+0x2ac>)
 80015fc:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80015fe:	4619      	mov	r1, r3
 8001600:	460b      	mov	r3, r1
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4413      	add	r3, r2
 800160a:	4a74      	ldr	r2, [pc, #464]	@ (80017dc <RunJog+0x2ac>)
 800160c:	8f92      	ldrh	r2, [r2, #60]	@ 0x3c
 800160e:	4413      	add	r3, r2
 8001610:	1ac3      	subs	r3, r0, r3
 8001612:	4a75      	ldr	r2, [pc, #468]	@ (80017e8 <RunJog+0x2b8>)
 8001614:	fb82 1203 	smull	r1, r2, r2, r3
 8001618:	1192      	asrs	r2, r2, #6
 800161a:	17db      	asrs	r3, r3, #31
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	b29a      	uxth	r2, r3
 8001620:	4b6e      	ldr	r3, [pc, #440]	@ (80017dc <RunJog+0x2ac>)
 8001622:	86da      	strh	r2, [r3, #54]	@ 0x36
	base.Pick[0] = (registerFrame[0x21].U16-((base.Pick[1]*1000+base.Pick[2]*100+base.Pick[3]*10+base.Pick[4])))/10000;
 8001624:	4b6b      	ldr	r3, [pc, #428]	@ (80017d4 <RunJog+0x2a4>)
 8001626:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 800162a:	4618      	mov	r0, r3
 800162c:	4b6b      	ldr	r3, [pc, #428]	@ (80017dc <RunJog+0x2ac>)
 800162e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001630:	461a      	mov	r2, r3
 8001632:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001636:	fb03 f202 	mul.w	r2, r3, r2
 800163a:	4b68      	ldr	r3, [pc, #416]	@ (80017dc <RunJog+0x2ac>)
 800163c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800163e:	4619      	mov	r1, r3
 8001640:	2364      	movs	r3, #100	@ 0x64
 8001642:	fb01 f303 	mul.w	r3, r1, r3
 8001646:	441a      	add	r2, r3
 8001648:	4b64      	ldr	r3, [pc, #400]	@ (80017dc <RunJog+0x2ac>)
 800164a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800164c:	4619      	mov	r1, r3
 800164e:	460b      	mov	r3, r1
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	440b      	add	r3, r1
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	4413      	add	r3, r2
 8001658:	4a60      	ldr	r2, [pc, #384]	@ (80017dc <RunJog+0x2ac>)
 800165a:	8f92      	ldrh	r2, [r2, #60]	@ 0x3c
 800165c:	4413      	add	r3, r2
 800165e:	1ac3      	subs	r3, r0, r3
 8001660:	4a63      	ldr	r2, [pc, #396]	@ (80017f0 <RunJog+0x2c0>)
 8001662:	fb82 1203 	smull	r1, r2, r2, r3
 8001666:	1312      	asrs	r2, r2, #12
 8001668:	17db      	asrs	r3, r3, #31
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	b29a      	uxth	r2, r3
 800166e:	4b5b      	ldr	r3, [pc, #364]	@ (80017dc <RunJog+0x2ac>)
 8001670:	869a      	strh	r2, [r3, #52]	@ 0x34
	// Define Place shelf
	base.Place[4] = registerFrame[0x22].U16 % 10;
 8001672:	4b58      	ldr	r3, [pc, #352]	@ (80017d4 <RunJog+0x2a4>)
 8001674:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8001678:	4b57      	ldr	r3, [pc, #348]	@ (80017d8 <RunJog+0x2a8>)
 800167a:	fba3 1302 	umull	r1, r3, r3, r2
 800167e:	08d9      	lsrs	r1, r3, #3
 8001680:	460b      	mov	r3, r1
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	440b      	add	r3, r1
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	b29a      	uxth	r2, r3
 800168c:	4b53      	ldr	r3, [pc, #332]	@ (80017dc <RunJog+0x2ac>)
 800168e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
	base.Place[3] = ((registerFrame[0x22].U16 - base.Place[4]) % 100)/10;
 8001692:	4b50      	ldr	r3, [pc, #320]	@ (80017d4 <RunJog+0x2a4>)
 8001694:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001698:	461a      	mov	r2, r3
 800169a:	4b50      	ldr	r3, [pc, #320]	@ (80017dc <RunJog+0x2ac>)
 800169c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80016a0:	1ad2      	subs	r2, r2, r3
 80016a2:	4b4f      	ldr	r3, [pc, #316]	@ (80017e0 <RunJog+0x2b0>)
 80016a4:	fb83 1302 	smull	r1, r3, r3, r2
 80016a8:	1159      	asrs	r1, r3, #5
 80016aa:	17d3      	asrs	r3, r2, #31
 80016ac:	1acb      	subs	r3, r1, r3
 80016ae:	2164      	movs	r1, #100	@ 0x64
 80016b0:	fb01 f303 	mul.w	r3, r1, r3
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	4a4b      	ldr	r2, [pc, #300]	@ (80017e4 <RunJog+0x2b4>)
 80016b8:	fb82 1203 	smull	r1, r2, r2, r3
 80016bc:	1092      	asrs	r2, r2, #2
 80016be:	17db      	asrs	r3, r3, #31
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	4b45      	ldr	r3, [pc, #276]	@ (80017dc <RunJog+0x2ac>)
 80016c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	base.Place[2] = ((registerFrame[0x22].U16 %1000) - ((base.Place[3]*10)+base.Place[4]))/100;
 80016ca:	4b42      	ldr	r3, [pc, #264]	@ (80017d4 <RunJog+0x2a4>)
 80016cc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80016d0:	4a45      	ldr	r2, [pc, #276]	@ (80017e8 <RunJog+0x2b8>)
 80016d2:	fba2 1203 	umull	r1, r2, r2, r3
 80016d6:	0992      	lsrs	r2, r2, #6
 80016d8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80016dc:	fb01 f202 	mul.w	r2, r1, r2
 80016e0:	1a9b      	subs	r3, r3, r2
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	4619      	mov	r1, r3
 80016e6:	4b3d      	ldr	r3, [pc, #244]	@ (80017dc <RunJog+0x2ac>)
 80016e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80016ec:	461a      	mov	r2, r3
 80016ee:	4613      	mov	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	461a      	mov	r2, r3
 80016f8:	4b38      	ldr	r3, [pc, #224]	@ (80017dc <RunJog+0x2ac>)
 80016fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80016fe:	4413      	add	r3, r2
 8001700:	1acb      	subs	r3, r1, r3
 8001702:	4a37      	ldr	r2, [pc, #220]	@ (80017e0 <RunJog+0x2b0>)
 8001704:	fb82 1203 	smull	r1, r2, r2, r3
 8001708:	1152      	asrs	r2, r2, #5
 800170a:	17db      	asrs	r3, r3, #31
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	b29a      	uxth	r2, r3
 8001710:	4b32      	ldr	r3, [pc, #200]	@ (80017dc <RunJog+0x2ac>)
 8001712:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
	base.Place[1] = ((registerFrame[0x22].U16 %10000)-(((base.Place[2]*100)+(base.Place[3]*10)+base.Place[4])))/1000;
 8001716:	4b2f      	ldr	r3, [pc, #188]	@ (80017d4 <RunJog+0x2a4>)
 8001718:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800171c:	4a33      	ldr	r2, [pc, #204]	@ (80017ec <RunJog+0x2bc>)
 800171e:	fba2 1203 	umull	r1, r2, r2, r3
 8001722:	0b52      	lsrs	r2, r2, #13
 8001724:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001728:	fb01 f202 	mul.w	r2, r1, r2
 800172c:	1a9b      	subs	r3, r3, r2
 800172e:	b29b      	uxth	r3, r3
 8001730:	4618      	mov	r0, r3
 8001732:	4b2a      	ldr	r3, [pc, #168]	@ (80017dc <RunJog+0x2ac>)
 8001734:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001738:	461a      	mov	r2, r3
 800173a:	2364      	movs	r3, #100	@ 0x64
 800173c:	fb03 f202 	mul.w	r2, r3, r2
 8001740:	4b26      	ldr	r3, [pc, #152]	@ (80017dc <RunJog+0x2ac>)
 8001742:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001746:	4619      	mov	r1, r3
 8001748:	460b      	mov	r3, r1
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	440b      	add	r3, r1
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	4413      	add	r3, r2
 8001752:	4a22      	ldr	r2, [pc, #136]	@ (80017dc <RunJog+0x2ac>)
 8001754:	f8b2 2046 	ldrh.w	r2, [r2, #70]	@ 0x46
 8001758:	4413      	add	r3, r2
 800175a:	1ac3      	subs	r3, r0, r3
 800175c:	4a22      	ldr	r2, [pc, #136]	@ (80017e8 <RunJog+0x2b8>)
 800175e:	fb82 1203 	smull	r1, r2, r2, r3
 8001762:	1192      	asrs	r2, r2, #6
 8001764:	17db      	asrs	r3, r3, #31
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	b29a      	uxth	r2, r3
 800176a:	4b1c      	ldr	r3, [pc, #112]	@ (80017dc <RunJog+0x2ac>)
 800176c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	base.Place[0] = (registerFrame[0x22].U16-((base.Place[1]*1000+base.Place[2]*100+base.Place[3]*10+base.Place[4])))/10000;
 8001770:	4b18      	ldr	r3, [pc, #96]	@ (80017d4 <RunJog+0x2a4>)
 8001772:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001776:	4618      	mov	r0, r3
 8001778:	4b18      	ldr	r3, [pc, #96]	@ (80017dc <RunJog+0x2ac>)
 800177a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800177e:	461a      	mov	r2, r3
 8001780:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001784:	fb03 f202 	mul.w	r2, r3, r2
 8001788:	4b14      	ldr	r3, [pc, #80]	@ (80017dc <RunJog+0x2ac>)
 800178a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 800178e:	4619      	mov	r1, r3
 8001790:	2364      	movs	r3, #100	@ 0x64
 8001792:	fb01 f303 	mul.w	r3, r1, r3
 8001796:	441a      	add	r2, r3
 8001798:	4b10      	ldr	r3, [pc, #64]	@ (80017dc <RunJog+0x2ac>)
 800179a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800179e:	4619      	mov	r1, r3
 80017a0:	460b      	mov	r3, r1
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	440b      	add	r3, r1
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	4413      	add	r3, r2
 80017aa:	4a0c      	ldr	r2, [pc, #48]	@ (80017dc <RunJog+0x2ac>)
 80017ac:	f8b2 2046 	ldrh.w	r2, [r2, #70]	@ 0x46
 80017b0:	4413      	add	r3, r2
 80017b2:	1ac3      	subs	r3, r0, r3
 80017b4:	4a0e      	ldr	r2, [pc, #56]	@ (80017f0 <RunJog+0x2c0>)
 80017b6:	fb82 1203 	smull	r1, r2, r2, r3
 80017ba:	1312      	asrs	r2, r2, #12
 80017bc:	17db      	asrs	r3, r3, #31
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <RunJog+0x2ac>)
 80017c4:	87da      	strh	r2, [r3, #62]	@ 0x3e


	// Condition for Pick and Place
	switch(registerFrame[0x10].U16){
 80017c6:	4b03      	ldr	r3, [pc, #12]	@ (80017d4 <RunJog+0x2a4>)
 80017c8:	8c1b      	ldrh	r3, [r3, #32]
 80017ca:	2b04      	cmp	r3, #4
 80017cc:	d012      	beq.n	80017f4 <RunJog+0x2c4>
 80017ce:	2b08      	cmp	r3, #8
 80017d0:	d067      	beq.n	80018a2 <RunJog+0x372>
 80017d2:	e0c4      	b.n	800195e <RunJog+0x42e>
 80017d4:	2000110c 	.word	0x2000110c
 80017d8:	cccccccd 	.word	0xcccccccd
 80017dc:	20000304 	.word	0x20000304
 80017e0:	51eb851f 	.word	0x51eb851f
 80017e4:	66666667 	.word	0x66666667
 80017e8:	10624dd3 	.word	0x10624dd3
 80017ec:	d1b71759 	.word	0xd1b71759
 80017f0:	68db8bad 	.word	0x68db8bad
		// Pick Case
		case(4):
			elapsedTime += 0.0002;
 80017f4:	4b68      	ldr	r3, [pc, #416]	@ (8001998 <RunJog+0x468>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fe71 	bl	80004e0 <__aeabi_f2d>
 80017fe:	a362      	add	r3, pc, #392	@ (adr r3, 8001988 <RunJog+0x458>)
 8001800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001804:	f7fe fd0e 	bl	8000224 <__adddf3>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	f7ff f98e 	bl	8000b30 <__aeabi_d2f>
 8001814:	4603      	mov	r3, r0
 8001816:	4a60      	ldr	r2, [pc, #384]	@ (8001998 <RunJog+0x468>)
 8001818:	6013      	str	r3, [r2, #0]
			Traject(&Traj, AMT.Linear_Position, base.Pick[fuCount]);
 800181a:	4b60      	ldr	r3, [pc, #384]	@ (800199c <RunJog+0x46c>)
 800181c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001820:	4b5f      	ldr	r3, [pc, #380]	@ (80019a0 <RunJog+0x470>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a5f      	ldr	r2, [pc, #380]	@ (80019a4 <RunJog+0x474>)
 8001826:	3318      	adds	r3, #24
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4413      	add	r3, r2
 800182c:	889b      	ldrh	r3, [r3, #4]
 800182e:	ee07 3a10 	vmov	s14, r3
 8001832:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001836:	eef0 0a47 	vmov.f32	s1, s14
 800183a:	eeb0 0a67 	vmov.f32	s0, s15
 800183e:	485a      	ldr	r0, [pc, #360]	@ (80019a8 <RunJog+0x478>)
 8001840:	f001 fbba 	bl	8002fb8 <Traject>
			PID_controller_cascade(&PID_pos, &PID_velo, &AMT, Traj.currentPosition);
 8001844:	4b58      	ldr	r3, [pc, #352]	@ (80019a8 <RunJog+0x478>)
 8001846:	edd3 7a02 	vldr	s15, [r3, #8]
 800184a:	eeb0 0a67 	vmov.f32	s0, s15
 800184e:	4a53      	ldr	r2, [pc, #332]	@ (800199c <RunJog+0x46c>)
 8001850:	4956      	ldr	r1, [pc, #344]	@ (80019ac <RunJog+0x47c>)
 8001852:	4857      	ldr	r0, [pc, #348]	@ (80019b0 <RunJog+0x480>)
 8001854:	f001 f9a2 	bl	8002b9c <PID_controller_cascade>
			if (fabs(AMT.Linear_Position - base.Pick[fuCount]) < 0.2)
 8001858:	4b50      	ldr	r3, [pc, #320]	@ (800199c <RunJog+0x46c>)
 800185a:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800185e:	4b50      	ldr	r3, [pc, #320]	@ (80019a0 <RunJog+0x470>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a50      	ldr	r2, [pc, #320]	@ (80019a4 <RunJog+0x474>)
 8001864:	3318      	adds	r3, #24
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	4413      	add	r3, r2
 800186a:	889b      	ldrh	r3, [r3, #4]
 800186c:	ee07 3a90 	vmov	s15, r3
 8001870:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001874:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001878:	eef0 7ae7 	vabs.f32	s15, s15
 800187c:	ee17 0a90 	vmov	r0, s15
 8001880:	f7fe fe2e 	bl	80004e0 <__aeabi_f2d>
 8001884:	a342      	add	r3, pc, #264	@ (adr r3, 8001990 <RunJog+0x460>)
 8001886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188a:	f7ff f8f3 	bl	8000a74 <__aeabi_dcmplt>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d006      	beq.n	80018a2 <RunJog+0x372>
			{
				registerFrame[0x10].U16 = 8;
 8001894:	4b47      	ldr	r3, [pc, #284]	@ (80019b4 <RunJog+0x484>)
 8001896:	2208      	movs	r2, #8
 8001898:	841a      	strh	r2, [r3, #32]
				elapsedTime = 0;
 800189a:	4b3f      	ldr	r3, [pc, #252]	@ (8001998 <RunJog+0x468>)
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
			}

		// Place Case
		case(8):

			elapsedTime += 0.0002;
 80018a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001998 <RunJog+0x468>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe fe1a 	bl	80004e0 <__aeabi_f2d>
 80018ac:	a336      	add	r3, pc, #216	@ (adr r3, 8001988 <RunJog+0x458>)
 80018ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b2:	f7fe fcb7 	bl	8000224 <__adddf3>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4610      	mov	r0, r2
 80018bc:	4619      	mov	r1, r3
 80018be:	f7ff f937 	bl	8000b30 <__aeabi_d2f>
 80018c2:	4603      	mov	r3, r0
 80018c4:	4a34      	ldr	r2, [pc, #208]	@ (8001998 <RunJog+0x468>)
 80018c6:	6013      	str	r3, [r2, #0]
			Traject(&Traj, AMT.Linear_Position, base.Place[fuCount]);
 80018c8:	4b34      	ldr	r3, [pc, #208]	@ (800199c <RunJog+0x46c>)
 80018ca:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80018ce:	4b34      	ldr	r3, [pc, #208]	@ (80019a0 <RunJog+0x470>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a34      	ldr	r2, [pc, #208]	@ (80019a4 <RunJog+0x474>)
 80018d4:	331c      	adds	r3, #28
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	4413      	add	r3, r2
 80018da:	88db      	ldrh	r3, [r3, #6]
 80018dc:	ee07 3a10 	vmov	s14, r3
 80018e0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80018e4:	eef0 0a47 	vmov.f32	s1, s14
 80018e8:	eeb0 0a67 	vmov.f32	s0, s15
 80018ec:	482e      	ldr	r0, [pc, #184]	@ (80019a8 <RunJog+0x478>)
 80018ee:	f001 fb63 	bl	8002fb8 <Traject>
			PID_controller_cascade(&PID_pos, &PID_velo, &AMT, Traj.currentPosition);
 80018f2:	4b2d      	ldr	r3, [pc, #180]	@ (80019a8 <RunJog+0x478>)
 80018f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80018f8:	eeb0 0a67 	vmov.f32	s0, s15
 80018fc:	4a27      	ldr	r2, [pc, #156]	@ (800199c <RunJog+0x46c>)
 80018fe:	492b      	ldr	r1, [pc, #172]	@ (80019ac <RunJog+0x47c>)
 8001900:	482b      	ldr	r0, [pc, #172]	@ (80019b0 <RunJog+0x480>)
 8001902:	f001 f94b 	bl	8002b9c <PID_controller_cascade>
			if (fabs(AMT.Linear_Position - base.Place[fuCount]) < 0.2)
 8001906:	4b25      	ldr	r3, [pc, #148]	@ (800199c <RunJog+0x46c>)
 8001908:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800190c:	4b24      	ldr	r3, [pc, #144]	@ (80019a0 <RunJog+0x470>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a24      	ldr	r2, [pc, #144]	@ (80019a4 <RunJog+0x474>)
 8001912:	331c      	adds	r3, #28
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	4413      	add	r3, r2
 8001918:	88db      	ldrh	r3, [r3, #6]
 800191a:	ee07 3a90 	vmov	s15, r3
 800191e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001922:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001926:	eef0 7ae7 	vabs.f32	s15, s15
 800192a:	ee17 0a90 	vmov	r0, s15
 800192e:	f7fe fdd7 	bl	80004e0 <__aeabi_f2d>
 8001932:	a317      	add	r3, pc, #92	@ (adr r3, 8001990 <RunJog+0x460>)
 8001934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001938:	f7ff f89c 	bl	8000a74 <__aeabi_dcmplt>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00d      	beq.n	800195e <RunJog+0x42e>
			{
				base.BaseStatus = 0;
 8001942:	4b18      	ldr	r3, [pc, #96]	@ (80019a4 <RunJog+0x474>)
 8001944:	2200      	movs	r2, #0
 8001946:	801a      	strh	r2, [r3, #0]
				registerFrame[0x01].U16 = base.BaseStatus;
 8001948:	4b16      	ldr	r3, [pc, #88]	@ (80019a4 <RunJog+0x474>)
 800194a:	881a      	ldrh	r2, [r3, #0]
 800194c:	4b19      	ldr	r3, [pc, #100]	@ (80019b4 <RunJog+0x484>)
 800194e:	805a      	strh	r2, [r3, #2]
				registerFrame[0x10].U16 = 0;
 8001950:	4b18      	ldr	r3, [pc, #96]	@ (80019b4 <RunJog+0x484>)
 8001952:	2200      	movs	r2, #0
 8001954:	841a      	strh	r2, [r3, #32]
				elapsedTime = 0;
 8001956:	4b10      	ldr	r3, [pc, #64]	@ (8001998 <RunJog+0x468>)
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
	}



	//pick place 5 time
	if(base.sp == 1){
 800195e:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <RunJog+0x474>)
 8001960:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8001964:	2b01      	cmp	r3, #1
 8001966:	d10d      	bne.n	8001984 <RunJog+0x454>
		base.BaseStatus = 0;
 8001968:	4b0e      	ldr	r3, [pc, #56]	@ (80019a4 <RunJog+0x474>)
 800196a:	2200      	movs	r2, #0
 800196c:	801a      	strh	r2, [r3, #0]
		registerFrame[0x01].U16 = base.BaseStatus;
 800196e:	4b0d      	ldr	r3, [pc, #52]	@ (80019a4 <RunJog+0x474>)
 8001970:	881a      	ldrh	r2, [r3, #0]
 8001972:	4b10      	ldr	r3, [pc, #64]	@ (80019b4 <RunJog+0x484>)
 8001974:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 0;
 8001976:	4b0f      	ldr	r3, [pc, #60]	@ (80019b4 <RunJog+0x484>)
 8001978:	2200      	movs	r2, #0
 800197a:	841a      	strh	r2, [r3, #32]
		base.sp = 0;
 800197c:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <RunJog+0x474>)
 800197e:	2200      	movs	r2, #0
 8001980:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
	}
}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}
 8001988:	eb1c432d 	.word	0xeb1c432d
 800198c:	3f2a36e2 	.word	0x3f2a36e2
 8001990:	9999999a 	.word	0x9999999a
 8001994:	3fc99999 	.word	0x3fc99999
 8001998:	20001108 	.word	0x20001108
 800199c:	20000b48 	.word	0x20000b48
 80019a0:	200002cc 	.word	0x200002cc
 80019a4:	20000304 	.word	0x20000304
 80019a8:	20000b34 	.word	0x20000b34
 80019ac:	20000c08 	.word	0x20000c08
 80019b0:	200002e8 	.word	0x200002e8
 80019b4:	2000110c 	.word	0x2000110c

080019b8 <Holding_position>:

void Holding_position()
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
	PID_controller_cascade(&PID_pos, &PID_velo, &AMT, Traj.currentPosition);
 80019bc:	4b0d      	ldr	r3, [pc, #52]	@ (80019f4 <Holding_position+0x3c>)
 80019be:	edd3 7a02 	vldr	s15, [r3, #8]
 80019c2:	eeb0 0a67 	vmov.f32	s0, s15
 80019c6:	4a0c      	ldr	r2, [pc, #48]	@ (80019f8 <Holding_position+0x40>)
 80019c8:	490c      	ldr	r1, [pc, #48]	@ (80019fc <Holding_position+0x44>)
 80019ca:	480d      	ldr	r0, [pc, #52]	@ (8001a00 <Holding_position+0x48>)
 80019cc:	f001 f8e6 	bl	8002b9c <PID_controller_cascade>
	base.MotorHome = PID_velo.out;
 80019d0:	4b0a      	ldr	r3, [pc, #40]	@ (80019fc <Holding_position+0x44>)
 80019d2:	edd3 7a06 	vldr	s15, [r3, #24]
 80019d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019da:	ee17 3a90 	vmov	r3, s15
 80019de:	b21a      	sxth	r2, r3
 80019e0:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <Holding_position+0x4c>)
 80019e2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
	temp_pos = AMT.Linear_Position;
 80019e6:	4b04      	ldr	r3, [pc, #16]	@ (80019f8 <Holding_position+0x40>)
 80019e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ea:	4a07      	ldr	r2, [pc, #28]	@ (8001a08 <Holding_position+0x50>)
 80019ec:	6013      	str	r3, [r2, #0]

}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000b34 	.word	0x20000b34
 80019f8:	20000b48 	.word	0x20000b48
 80019fc:	20000c08 	.word	0x20000c08
 8001a00:	200002e8 	.word	0x200002e8
 8001a04:	20000304 	.word	0x20000304
 8001a08:	200002d0 	.word	0x200002d0

08001a0c <kalman_filter>:
const float one_million_inv = 1e-6f;

//-------------------------------------------Function Code-------------------------------------------------------//

long kalman_filter(long ADC_Value)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
    static float Kg = 0;
    static float P_k_k1 = 1;

    float kalman_adc;
    static float kalman_adc_old=0;
    Z_k = ADC_Value;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	ee07 3a90 	vmov	s15, r3
 8001a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a1e:	edc7 7a05 	vstr	s15, [r7, #20]
    x_k1_k1 = kalman_adc_old;
 8001a22:	4b2e      	ldr	r3, [pc, #184]	@ (8001adc <kalman_filter+0xd0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	613b      	str	r3, [r7, #16]

    x_k_k1 = x_k1_k1;
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	60fb      	str	r3, [r7, #12]
    P_k_k1 = P_k1_k1 + Q;
 8001a2c:	4b2c      	ldr	r3, [pc, #176]	@ (8001ae0 <kalman_filter+0xd4>)
 8001a2e:	ed93 7a00 	vldr	s14, [r3]
 8001a32:	4b2c      	ldr	r3, [pc, #176]	@ (8001ae4 <kalman_filter+0xd8>)
 8001a34:	edd3 7a00 	vldr	s15, [r3]
 8001a38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a3c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ae8 <kalman_filter+0xdc>)
 8001a3e:	edc3 7a00 	vstr	s15, [r3]

    Kg = P_k_k1/(P_k_k1 + R);
 8001a42:	4b29      	ldr	r3, [pc, #164]	@ (8001ae8 <kalman_filter+0xdc>)
 8001a44:	edd3 6a00 	vldr	s13, [r3]
 8001a48:	4b27      	ldr	r3, [pc, #156]	@ (8001ae8 <kalman_filter+0xdc>)
 8001a4a:	ed93 7a00 	vldr	s14, [r3]
 8001a4e:	4b27      	ldr	r3, [pc, #156]	@ (8001aec <kalman_filter+0xe0>)
 8001a50:	edd3 7a00 	vldr	s15, [r3]
 8001a54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a5c:	4b24      	ldr	r3, [pc, #144]	@ (8001af0 <kalman_filter+0xe4>)
 8001a5e:	edc3 7a00 	vstr	s15, [r3]

    kalman_adc = x_k_k1 + Kg * (Z_k - kalman_adc_old);
 8001a62:	4b1e      	ldr	r3, [pc, #120]	@ (8001adc <kalman_filter+0xd0>)
 8001a64:	edd3 7a00 	vldr	s15, [r3]
 8001a68:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a70:	4b1f      	ldr	r3, [pc, #124]	@ (8001af0 <kalman_filter+0xe4>)
 8001a72:	edd3 7a00 	vldr	s15, [r3]
 8001a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a7a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a82:	edc7 7a02 	vstr	s15, [r7, #8]
    P_k1_k1 = (1 - Kg)*P_k_k1;
 8001a86:	4b1a      	ldr	r3, [pc, #104]	@ (8001af0 <kalman_filter+0xe4>)
 8001a88:	edd3 7a00 	vldr	s15, [r3]
 8001a8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001a90:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a94:	4b14      	ldr	r3, [pc, #80]	@ (8001ae8 <kalman_filter+0xdc>)
 8001a96:	edd3 7a00 	vldr	s15, [r3]
 8001a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ae0 <kalman_filter+0xd4>)
 8001aa0:	edc3 7a00 	vstr	s15, [r3]
    P_k_k1 = P_k1_k1;
 8001aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae0 <kalman_filter+0xd4>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a0f      	ldr	r2, [pc, #60]	@ (8001ae8 <kalman_filter+0xdc>)
 8001aaa:	6013      	str	r3, [r2, #0]

    ADC_OLD_Value = ADC_Value;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	ee07 3a90 	vmov	s15, r3
 8001ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8001af4 <kalman_filter+0xe8>)
 8001ab8:	edc3 7a00 	vstr	s15, [r3]
    kalman_adc_old = kalman_adc;
 8001abc:	4a07      	ldr	r2, [pc, #28]	@ (8001adc <kalman_filter+0xd0>)
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	6013      	str	r3, [r2, #0]

    return kalman_adc;
 8001ac2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ac6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aca:	ee17 3a90 	vmov	r3, s15
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	371c      	adds	r7, #28
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	200002d4 	.word	0x200002d4
 8001ae0:	200002d8 	.word	0x200002d8
 8001ae4:	20000008 	.word	0x20000008
 8001ae8:	2000000c 	.word	0x2000000c
 8001aec:	20000010 	.word	0x20000010
 8001af0:	200002dc 	.word	0x200002dc
 8001af4:	200002e0 	.word	0x200002e0

08001af8 <AMT_encoder_init>:


void AMT_encoder_init(AMT_Encoder *AMT_data,TIM_HandleTypeDef *Encoder_timer)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
	AMT_data->EncoderTIM = Encoder_timer;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_TIM_Encoder_Start(AMT_data->EncoderTIM, TIM_CHANNEL_ALL);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b0c:	213c      	movs	r1, #60	@ 0x3c
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f006 fa44 	bl	8007f9c <HAL_TIM_Encoder_Start>
	AMT_data->Position[QEI_NOW] = 0.0;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
	AMT_data->Position[QEI_PREV] = 0.0;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	605a      	str	r2, [r3, #4]
}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <AMT_encoder_update>:
//	AMT_data->TimeStamp[QEI_PREV] = AMT_data->TimeStamp[QEI_NOW];
//	AMT_data->Linear_Velo[QEI_PREV] = AMT_data->Linear_Velo[QEI_NOW];
//}

void AMT_encoder_update(AMT_Encoder *AMT_data, TIM_HandleTypeDef *Encoder_timer, uint64_t current_time)
{
 8001b28:	b5b0      	push	{r4, r5, r7, lr}
 8001b2a:	b08a      	sub	sp, #40	@ 0x28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	e9c7 2300 	strd	r2, r3, [r7]


    // Collect data
    AMT_data->TimeStamp[QEI_NOW] = current_time;
 8001b36:	68f9      	ldr	r1, [r7, #12]
 8001b38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b3c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    AMT_data->Position[QEI_NOW] = __HAL_TIM_GET_COUNTER(Encoder_timer);
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	601a      	str	r2, [r3, #0]

    // Position 1 turn calculation
    AMT_data->QEIPostion_1turn = AMT_data->Position[QEI_NOW] % cnt_per_rev;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a4b      	ldr	r2, [pc, #300]	@ (8001c7c <AMT_encoder_update+0x154>)
 8001b50:	6812      	ldr	r2, [r2, #0]
 8001b52:	fbb3 f1f2 	udiv	r1, r3, r2
 8001b56:	fb01 f202 	mul.w	r2, r1, r2
 8001b5a:	1a9b      	subs	r3, r3, r2
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	621a      	str	r2, [r3, #32]

    // Calculate dx
    int32_t diffPosition = AMT_data->Position[QEI_NOW] - AMT_data->Position[QEI_PREV];
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	627b      	str	r3, [r7, #36]	@ 0x24

    // Handle wrap-around
    if (diffPosition > 32767)
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b74:	db04      	blt.n	8001b80 <AMT_encoder_update+0x58>
        diffPosition -= 65535;
 8001b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b78:	f5a3 437f 	sub.w	r3, r3, #65280	@ 0xff00
 8001b7c:	3bff      	subs	r3, #255	@ 0xff
 8001b7e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (diffPosition < -32767)
 8001b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b82:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8001b86:	dc04      	bgt.n	8001b92 <AMT_encoder_update+0x6a>
        diffPosition += 65535;
 8001b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001b8e:	33ff      	adds	r3, #255	@ 0xff
 8001b90:	627b      	str	r3, [r7, #36]	@ 0x24

    // Calculate dt
    uint64_t diffTime = AMT_data->TimeStamp[QEI_NOW] - AMT_data->TimeStamp[QEI_PREV];
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001b9e:	1a84      	subs	r4, r0, r2
 8001ba0:	eb61 0503 	sbc.w	r5, r1, r3
 8001ba4:	e9c7 4506 	strd	r4, r5, [r7, #24]

    // Calculate angular velocity
    float time_seconds = diffTime * one_million_inv;
 8001ba8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bac:	f7ff f8d8 	bl	8000d60 <__aeabi_ul2f>
 8001bb0:	ee07 0a10 	vmov	s14, r0
 8001bb4:	eddf 7a32 	vldr	s15, [pc, #200]	@ 8001c80 <AMT_encoder_update+0x158>
 8001bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bbc:	edc7 7a05 	vstr	s15, [r7, #20]
    AMT_data->Angular_Velocity = ((diffPosition * 60.0f) * cnt_per_rev_inv / time_seconds); // RPM
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc2:	ee07 3a90 	vmov	s15, r3
 8001bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bca:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001c84 <AMT_encoder_update+0x15c>
 8001bce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bd2:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8001c88 <AMT_encoder_update+0x160>
 8001bd6:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001bda:	ed97 7a05 	vldr	s14, [r7, #20]
 8001bde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    // Calculate linear position and velocity
    float position_change_mm = (diffPosition * pulley_cir) * cnt_per_rev_inv;
 8001be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bea:	ee07 3a90 	vmov	s15, r3
 8001bee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bf2:	4b26      	ldr	r3, [pc, #152]	@ (8001c8c <AMT_encoder_update+0x164>)
 8001bf4:	edd3 7a00 	vldr	s15, [r3]
 8001bf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bfc:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001c88 <AMT_encoder_update+0x160>
 8001c00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c04:	edc7 7a04 	vstr	s15, [r7, #16]
//    float Vin = base.MotorHome * 24.0 / 1000;
    AMT_data->Linear_Position += position_change_mm; // mm
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001c0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    AMT_data->Linear_Velocity = kalman_filter((AMT_data->Angular_Velocity / 60.0f * pulley_cir)); // mm/s
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001c22:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8001c84 <AMT_encoder_update+0x15c>
 8001c26:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c2a:	4b18      	ldr	r3, [pc, #96]	@ (8001c8c <AMT_encoder_update+0x164>)
 8001c2c:	edd3 7a00 	vldr	s15, [r3]
 8001c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c38:	ee17 0a90 	vmov	r0, s15
 8001c3c:	f7ff fee6 	bl	8001a0c <kalman_filter>
 8001c40:	ee07 0a90 	vmov	s15, r0
 8001c44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    AMT_data->Linear_Velo[QEI_NOW] = AMT_data->Linear_Velocity; // Update Velo
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	619a      	str	r2, [r3, #24]
//    AMT_data->Linear_Acceleration = (AMT_data->Linear_Velo[QEI_NOW]-AMT_data->Linear_Velo[QEI_PREV])/(time_seconds);

    // Store value for next loop
    AMT_data->Position[QEI_PREV] = AMT_data->Position[QEI_NOW];
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	605a      	str	r2, [r3, #4]
    AMT_data->TimeStamp[QEI_PREV] = AMT_data->TimeStamp[QEI_NOW];
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001c64:	68f9      	ldr	r1, [r7, #12]
 8001c66:	e9c1 2304 	strd	r2, r3, [r1, #16]
    AMT_data->Linear_Velo[QEI_PREV] = AMT_data->Linear_Velo[QEI_NOW];
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	699a      	ldr	r2, [r3, #24]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	61da      	str	r2, [r3, #28]
}
 8001c72:	bf00      	nop
 8001c74:	3728      	adds	r7, #40	@ 0x28
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bdb0      	pop	{r4, r5, r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	358637bd 	.word	0x358637bd
 8001c84:	42700000 	.word	0x42700000
 8001c88:	39000000 	.word	0x39000000
 8001c8c:	20000004 	.word	0x20000004

08001c90 <AMT_encoder_reset>:


void AMT_encoder_reset(AMT_Encoder *AMT_data)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
	AMT_data->Linear_Position = 600;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a04      	ldr	r2, [pc, #16]	@ (8001cac <AMT_encoder_reset+0x1c>)
 8001c9c:	635a      	str	r2, [r3, #52]	@ 0x34
//	AMT_data->Position[QEI_NOW] = 0;

}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	44160000 	.word	0x44160000

08001cb0 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8001cec <modbus_1t5_Timeout+0x3c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001cec <modbus_1t5_Timeout+0x3c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001cc8:	4b08      	ldr	r3, [pc, #32]	@ (8001cec <modbus_1t5_Timeout+0x3c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <modbus_1t5_Timeout+0x3c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 0201 	orr.w	r2, r2, #1
 8001cde:	601a      	str	r2, [r3, #0]
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	200002e4 	.word	0x200002e4

08001cf0 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001cf8:	4b04      	ldr	r3, [pc, #16]	@ (8001d0c <modbus_3t5_Timeout+0x1c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	755a      	strb	r2, [r3, #21]

}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	200002e4 	.word	0x200002e4

08001d10 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f008 fbbb 	bl	800a494 <HAL_UART_GetError>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b20      	cmp	r3, #32
 8001d22:	d101      	bne.n	8001d28 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001d24:	f7ff ffc4 	bl	8001cb0 <modbus_1t5_Timeout>

	}
}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8001d3a:	4a25      	ldr	r2, [pc, #148]	@ (8001dd0 <Modbus_init+0xa0>)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8001d40:	4b23      	ldr	r3, [pc, #140]	@ (8001dd0 <Modbus_init+0xa0>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	4a21      	ldr	r2, [pc, #132]	@ (8001dd4 <Modbus_init+0xa4>)
 8001d4e:	210e      	movs	r1, #14
 8001d50:	4618      	mov	r0, r3
 8001d52:	f006 fdaf 	bl	80088b4 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	2110      	movs	r1, #16
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f008 fb43 	bl	800a3e8 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f008 fb5a 	bl	800a420 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	4a19      	ldr	r2, [pc, #100]	@ (8001dd8 <Modbus_init+0xa8>)
 8001d72:	2104      	movs	r1, #4
 8001d74:	4618      	mov	r0, r3
 8001d76:	f007 fd59 	bl	800982c <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001d7a:	4b15      	ldr	r3, [pc, #84]	@ (8001dd0 <Modbus_init+0xa0>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001d80:	4b13      	ldr	r3, [pc, #76]	@ (8001dd0 <Modbus_init+0xa0>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	4b12      	ldr	r3, [pc, #72]	@ (8001dd0 <Modbus_init+0xa0>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001d8c:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001d90:	4413      	add	r3, r2
 8001d92:	3302      	adds	r3, #2
 8001d94:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d98:	4619      	mov	r1, r3
 8001d9a:	f007 ff49 	bl	8009c30 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd0 <Modbus_init+0xa0>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d10c      	bne.n	8001dc8 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001dae:	4b08      	ldr	r3, [pc, #32]	@ (8001dd0 <Modbus_init+0xa0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f005 fd01 	bl	80077bc <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001dba:	4b05      	ldr	r3, [pc, #20]	@ (8001dd0 <Modbus_init+0xa0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f005 ffa8 	bl	8007d18 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	200002e4 	.word	0x200002e4
 8001dd4:	08001cf1 	.word	0x08001cf1
 8001dd8:	08001d11 	.word	0x08001d11

08001ddc <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001de8:	23ff      	movs	r3, #255	@ 0xff
 8001dea:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001dec:	23ff      	movs	r3, #255	@ 0xff
 8001dee:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001df0:	e013      	b.n	8001e1a <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	1c5a      	adds	r2, r3, #1
 8001df6:	607a      	str	r2, [r7, #4]
 8001df8:	781a      	ldrb	r2, [r3, #0]
 8001dfa:	7bbb      	ldrb	r3, [r7, #14]
 8001dfc:	4053      	eors	r3, r2
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001e02:	4a0f      	ldr	r2, [pc, #60]	@ (8001e40 <CRC16+0x64>)
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	4413      	add	r3, r2
 8001e08:	781a      	ldrb	r2, [r3, #0]
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
 8001e0c:	4053      	eors	r3, r2
 8001e0e:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001e10:	4a0c      	ldr	r2, [pc, #48]	@ (8001e44 <CRC16+0x68>)
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	4413      	add	r3, r2
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001e1a:	883b      	ldrh	r3, [r7, #0]
 8001e1c:	1e5a      	subs	r2, r3, #1
 8001e1e:	803a      	strh	r2, [r7, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1e6      	bne.n	8001df2 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
 8001e26:	021b      	lsls	r3, r3, #8
 8001e28:	b21a      	sxth	r2, r3
 8001e2a:	7bbb      	ldrb	r3, [r7, #14]
 8001e2c:	b21b      	sxth	r3, r3
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	b21b      	sxth	r3, r3
 8001e32:	b29b      	uxth	r3, r3
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	20000114 	.word	0x20000114
 8001e44:	20000014 	.word	0x20000014

08001e48 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8001e4e:	4b7e      	ldr	r3, [pc, #504]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	7ddb      	ldrb	r3, [r3, #23]
 8001e54:	3b01      	subs	r3, #1
 8001e56:	2b03      	cmp	r3, #3
 8001e58:	d80a      	bhi.n	8001e70 <Modbus_Protocal_Worker+0x28>
 8001e5a:	a201      	add	r2, pc, #4	@ (adr r2, 8001e60 <Modbus_Protocal_Worker+0x18>)
 8001e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e60:	08001e7b 	.word	0x08001e7b
 8001e64:	0800200f 	.word	0x0800200f
 8001e68:	08001f07 	.word	0x08001f07
 8001e6c:	08001f4b 	.word	0x08001f4b
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001e70:	4b75      	ldr	r3, [pc, #468]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2201      	movs	r2, #1
 8001e76:	75da      	strb	r2, [r3, #23]
		break;
 8001e78:	e0e1      	b.n	800203e <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8001e7a:	4b73      	ldr	r3, [pc, #460]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d006      	beq.n	8001e94 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 8001e86:	4b70      	ldr	r3, [pc, #448]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 8001e8e:	f000 f9cd 	bl	800222c <Modbus_Emission>
 8001e92:	e018      	b.n	8001ec6 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 8001e94:	4b6c      	ldr	r3, [pc, #432]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8001e9e:	4b6a      	ldr	r3, [pc, #424]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d00b      	beq.n	8001ec6 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001eae:	4b66      	ldr	r3, [pc, #408]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001eb6:	4b64      	ldr	r3, [pc, #400]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8001ebe:	4b62      	ldr	r3, [pc, #392]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001ec6:	4b60      	ldr	r3, [pc, #384]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ed0:	2b20      	cmp	r3, #32
 8001ed2:	f040 80ad 	bne.w	8002030 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001ed6:	4b5c      	ldr	r3, [pc, #368]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001ee0:	4b59      	ldr	r3, [pc, #356]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001ee6:	4b58      	ldr	r3, [pc, #352]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	4b57      	ldr	r3, [pc, #348]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001ef2:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3302      	adds	r3, #2
 8001efa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001efe:	4619      	mov	r1, r3
 8001f00:	f007 fe96 	bl	8009c30 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8001f04:	e094      	b.n	8002030 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001f06:	4b50      	ldr	r3, [pc, #320]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	7d1b      	ldrb	r3, [r3, #20]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f000 8091 	beq.w	8002034 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001f12:	4b4d      	ldr	r3, [pc, #308]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	22fe      	movs	r2, #254	@ 0xfe
 8001f18:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001f1a:	4b4b      	ldr	r3, [pc, #300]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8001f24:	4b48      	ldr	r3, [pc, #288]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8001f34:	4b44      	ldr	r3, [pc, #272]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8001f36:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001f38:	1a8a      	subs	r2, r1, r2
 8001f3a:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8001f3c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001f40:	4b41      	ldr	r3, [pc, #260]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2204      	movs	r2, #4
 8001f46:	75da      	strb	r2, [r3, #23]
		}
		break;
 8001f48:	e074      	b.n	8002034 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8001f4a:	4b3f      	ldr	r3, [pc, #252]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001f52:	f113 0f02 	cmn.w	r3, #2
 8001f56:	d150      	bne.n	8001ffa <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001f58:	4b3b      	ldr	r3, [pc, #236]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001f60:	4b39      	ldr	r3, [pc, #228]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8001f68:	4b37      	ldr	r3, [pc, #220]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001f70:	3b02      	subs	r3, #2
 8001f72:	4619      	mov	r1, r3
 8001f74:	4610      	mov	r0, r2
 8001f76:	f7ff ff31 	bl	8001ddc <CRC16>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001f7e:	793a      	ldrb	r2, [r7, #4]
 8001f80:	4b31      	ldr	r3, [pc, #196]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8001f82:	6819      	ldr	r1, [r3, #0]
 8001f84:	4b30      	ldr	r3, [pc, #192]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001f8c:	3b02      	subs	r3, #2
 8001f8e:	440b      	add	r3, r1
 8001f90:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d10c      	bne.n	8001fb2 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001f98:	797a      	ldrb	r2, [r7, #5]
 8001f9a:	4b2b      	ldr	r3, [pc, #172]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8001f9c:	6819      	ldr	r1, [r3, #0]
 8001f9e:	4b2a      	ldr	r3, [pc, #168]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	440b      	add	r3, r1
 8001faa:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d004      	beq.n	8001fbc <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001fb2:	4b25      	ldr	r3, [pc, #148]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	22ff      	movs	r2, #255	@ 0xff
 8001fb8:	759a      	strb	r2, [r3, #22]
				break;
 8001fba:	e040      	b.n	800203e <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001fbc:	4b22      	ldr	r3, [pc, #136]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8001fc4:	4b20      	ldr	r3, [pc, #128]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d113      	bne.n	8001ff6 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001fce:	4b1e      	ldr	r3, [pc, #120]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8001fde:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001fe0:	4b19      	ldr	r3, [pc, #100]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001fe8:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001fea:	461a      	mov	r2, r3
 8001fec:	f009 fbac 	bl	800b748 <memcpy>

			//execute command
			Modbus_frame_response();
 8001ff0:	f000 f904 	bl	80021fc <Modbus_frame_response>
 8001ff4:	e001      	b.n	8001ffa <Modbus_Protocal_Worker+0x1b2>
				break;
 8001ff6:	bf00      	nop
					}
		break;


	}
}
 8001ff8:	e021      	b.n	800203e <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 8001ffa:	4b13      	ldr	r3, [pc, #76]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	7d5b      	ldrb	r3, [r3, #21]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d019      	beq.n	8002038 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8002004:	4b10      	ldr	r3, [pc, #64]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2201      	movs	r2, #1
 800200a:	75da      	strb	r2, [r3, #23]
		break;
 800200c:	e014      	b.n	8002038 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800200e:	4b0e      	ldr	r3, [pc, #56]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002018:	2b20      	cmp	r3, #32
 800201a:	d10f      	bne.n	800203c <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 800201c:	4b0a      	ldr	r3, [pc, #40]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8002026:	4b08      	ldr	r3, [pc, #32]	@ (8002048 <Modbus_Protocal_Worker+0x200>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2201      	movs	r2, #1
 800202c:	75da      	strb	r2, [r3, #23]
		break;
 800202e:	e005      	b.n	800203c <Modbus_Protocal_Worker+0x1f4>
		break;
 8002030:	bf00      	nop
 8002032:	e004      	b.n	800203e <Modbus_Protocal_Worker+0x1f6>
		break;
 8002034:	bf00      	nop
 8002036:	e002      	b.n	800203e <Modbus_Protocal_Worker+0x1f6>
		break;
 8002038:	bf00      	nop
 800203a:	e000      	b.n	800203e <Modbus_Protocal_Worker+0x1f6>
		break;
 800203c:	bf00      	nop
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	200002e4 	.word	0x200002e4

0800204c <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8002052:	4b1d      	ldr	r3, [pc, #116]	@ (80020c8 <modbusWrite1Register+0x7c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	7e5b      	ldrb	r3, [r3, #25]
 8002058:	021b      	lsls	r3, r3, #8
 800205a:	b29b      	uxth	r3, r3
 800205c:	4a1a      	ldr	r2, [pc, #104]	@ (80020c8 <modbusWrite1Register+0x7c>)
 800205e:	6812      	ldr	r2, [r2, #0]
 8002060:	7e92      	ldrb	r2, [r2, #26]
 8002062:	4413      	add	r3, r2
 8002064:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8002066:	88fa      	ldrh	r2, [r7, #6]
 8002068:	4b17      	ldr	r3, [pc, #92]	@ (80020c8 <modbusWrite1Register+0x7c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	429a      	cmp	r2, r3
 8002070:	d903      	bls.n	800207a <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8002072:	2002      	movs	r0, #2
 8002074:	f000 f8a0 	bl	80021b8 <ModbusErrorReply>
			 return;
 8002078:	e023      	b.n	80020c2 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800207a:	4b13      	ldr	r3, [pc, #76]	@ (80020c8 <modbusWrite1Register+0x7c>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	4b12      	ldr	r3, [pc, #72]	@ (80020c8 <modbusWrite1Register+0x7c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6859      	ldr	r1, [r3, #4]
 8002084:	88fb      	ldrh	r3, [r7, #6]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	440b      	add	r3, r1
 800208a:	7ed2      	ldrb	r2, [r2, #27]
 800208c:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800208e:	4b0e      	ldr	r3, [pc, #56]	@ (80020c8 <modbusWrite1Register+0x7c>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	4b0d      	ldr	r3, [pc, #52]	@ (80020c8 <modbusWrite1Register+0x7c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6859      	ldr	r1, [r3, #4]
 8002098:	88fb      	ldrh	r3, [r7, #6]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	440b      	add	r3, r1
 800209e:	7f12      	ldrb	r2, [r2, #28]
 80020a0:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80020a2:	4b09      	ldr	r3, [pc, #36]	@ (80020c8 <modbusWrite1Register+0x7c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 80020aa:	4b07      	ldr	r3, [pc, #28]	@ (80020c8 <modbusWrite1Register+0x7c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 80020b0:	2208      	movs	r2, #8
 80020b2:	4619      	mov	r1, r3
 80020b4:	f009 fb48 	bl	800b748 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80020b8:	4b03      	ldr	r3, [pc, #12]	@ (80020c8 <modbusWrite1Register+0x7c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2205      	movs	r2, #5
 80020be:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	200002e4 	.word	0x200002e4

080020cc <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80020cc:	b590      	push	{r4, r7, lr}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80020d2:	4b38      	ldr	r3, [pc, #224]	@ (80021b4 <modbusRead1Register+0xe8>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	7edb      	ldrb	r3, [r3, #27]
 80020d8:	021b      	lsls	r3, r3, #8
 80020da:	b29b      	uxth	r3, r3
 80020dc:	4a35      	ldr	r2, [pc, #212]	@ (80021b4 <modbusRead1Register+0xe8>)
 80020de:	6812      	ldr	r2, [r2, #0]
 80020e0:	7f12      	ldrb	r2, [r2, #28]
 80020e2:	4413      	add	r3, r2
 80020e4:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 80020e6:	4b33      	ldr	r3, [pc, #204]	@ (80021b4 <modbusRead1Register+0xe8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	7e5b      	ldrb	r3, [r3, #25]
 80020ec:	021b      	lsls	r3, r3, #8
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	4a30      	ldr	r2, [pc, #192]	@ (80021b4 <modbusRead1Register+0xe8>)
 80020f2:	6812      	ldr	r2, [r2, #0]
 80020f4:	7e92      	ldrb	r2, [r2, #26]
 80020f6:	4413      	add	r3, r2
 80020f8:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 80020fa:	88fb      	ldrh	r3, [r7, #6]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d002      	beq.n	8002106 <modbusRead1Register+0x3a>
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	2b7d      	cmp	r3, #125	@ 0x7d
 8002104:	d903      	bls.n	800210e <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8002106:	2003      	movs	r0, #3
 8002108:	f000 f856 	bl	80021b8 <ModbusErrorReply>
		 return;
 800210c:	e04e      	b.n	80021ac <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800210e:	88ba      	ldrh	r2, [r7, #4]
 8002110:	4b28      	ldr	r3, [pc, #160]	@ (80021b4 <modbusRead1Register+0xe8>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	429a      	cmp	r2, r3
 8002118:	d808      	bhi.n	800212c <modbusRead1Register+0x60>
 800211a:	88ba      	ldrh	r2, [r7, #4]
 800211c:	88fb      	ldrh	r3, [r7, #6]
 800211e:	4413      	add	r3, r2
 8002120:	461a      	mov	r2, r3
 8002122:	4b24      	ldr	r3, [pc, #144]	@ (80021b4 <modbusRead1Register+0xe8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	429a      	cmp	r2, r3
 800212a:	d903      	bls.n	8002134 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800212c:	2002      	movs	r0, #2
 800212e:	f000 f843 	bl	80021b8 <ModbusErrorReply>
		 return;
 8002132:	e03b      	b.n	80021ac <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8002134:	4b1f      	ldr	r3, [pc, #124]	@ (80021b4 <modbusRead1Register+0xe8>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2203      	movs	r2, #3
 800213a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 800213e:	88fb      	ldrh	r3, [r7, #6]
 8002140:	b2da      	uxtb	r2, r3
 8002142:	4b1c      	ldr	r3, [pc, #112]	@ (80021b4 <modbusRead1Register+0xe8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	0052      	lsls	r2, r2, #1
 8002148:	b2d2      	uxtb	r2, r2
 800214a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 800214e:	2400      	movs	r4, #0
 8002150:	e020      	b.n	8002194 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8002152:	4b18      	ldr	r3, [pc, #96]	@ (80021b4 <modbusRead1Register+0xe8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	88bb      	ldrh	r3, [r7, #4]
 800215a:	4423      	add	r3, r4
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	18d1      	adds	r1, r2, r3
 8002160:	4b14      	ldr	r3, [pc, #80]	@ (80021b4 <modbusRead1Register+0xe8>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	1c63      	adds	r3, r4, #1
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	7849      	ldrb	r1, [r1, #1]
 800216a:	4413      	add	r3, r2
 800216c:	460a      	mov	r2, r1
 800216e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8002172:	4b10      	ldr	r3, [pc, #64]	@ (80021b4 <modbusRead1Register+0xe8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	88bb      	ldrh	r3, [r7, #4]
 800217a:	4423      	add	r3, r4
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	18d1      	adds	r1, r2, r3
 8002180:	4b0c      	ldr	r3, [pc, #48]	@ (80021b4 <modbusRead1Register+0xe8>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	0063      	lsls	r3, r4, #1
 8002186:	3303      	adds	r3, #3
 8002188:	7809      	ldrb	r1, [r1, #0]
 800218a:	4413      	add	r3, r2
 800218c:	460a      	mov	r2, r1
 800218e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 8002192:	3401      	adds	r4, #1
 8002194:	88fb      	ldrh	r3, [r7, #6]
 8002196:	429c      	cmp	r4, r3
 8002198:	dbdb      	blt.n	8002152 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800219a:	88fb      	ldrh	r3, [r7, #6]
 800219c:	3301      	adds	r3, #1
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	4b04      	ldr	r3, [pc, #16]	@ (80021b4 <modbusRead1Register+0xe8>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	0052      	lsls	r2, r2, #1
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd90      	pop	{r4, r7, pc}
 80021b2:	bf00      	nop
 80021b4:	200002e4 	.word	0x200002e4

080021b8 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80021c2:	4b0d      	ldr	r3, [pc, #52]	@ (80021f8 <ModbusErrorReply+0x40>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	7e1a      	ldrb	r2, [r3, #24]
 80021c8:	4b0b      	ldr	r3, [pc, #44]	@ (80021f8 <ModbusErrorReply+0x40>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 80021d6:	4b08      	ldr	r3, [pc, #32]	@ (80021f8 <ModbusErrorReply+0x40>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	79fa      	ldrb	r2, [r7, #7]
 80021dc:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 80021e0:	4b05      	ldr	r3, [pc, #20]	@ (80021f8 <ModbusErrorReply+0x40>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2202      	movs	r2, #2
 80021e6:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	200002e4 	.word	0x200002e4

080021fc <Modbus_frame_response>:

void Modbus_frame_response()
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8002200:	4b09      	ldr	r3, [pc, #36]	@ (8002228 <Modbus_frame_response+0x2c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	7e1b      	ldrb	r3, [r3, #24]
 8002206:	2b03      	cmp	r3, #3
 8002208:	d004      	beq.n	8002214 <Modbus_frame_response+0x18>
 800220a:	2b06      	cmp	r3, #6
 800220c:	d105      	bne.n	800221a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800220e:	f7ff ff1d 	bl	800204c <modbusWrite1Register>
		break;
 8002212:	e006      	b.n	8002222 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8002214:	f7ff ff5a 	bl	80020cc <modbusRead1Register>
		break;
 8002218:	e003      	b.n	8002222 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800221a:	2001      	movs	r0, #1
 800221c:	f7ff ffcc 	bl	80021b8 <ModbusErrorReply>
		break;
 8002220:	bf00      	nop

	}
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	200002e4 	.word	0x200002e4

0800222c <Modbus_Emission>:

void Modbus_Emission()
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002232:	4b38      	ldr	r3, [pc, #224]	@ (8002314 <Modbus_Emission+0xe8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800223c:	2b20      	cmp	r3, #32
 800223e:	d15d      	bne.n	80022fc <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8002240:	4b34      	ldr	r3, [pc, #208]	@ (8002314 <Modbus_Emission+0xe8>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	4b33      	ldr	r3, [pc, #204]	@ (8002314 <Modbus_Emission+0xe8>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	7812      	ldrb	r2, [r2, #0]
 800224a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 800224e:	4b31      	ldr	r3, [pc, #196]	@ (8002314 <Modbus_Emission+0xe8>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8002256:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8002258:	4b2e      	ldr	r3, [pc, #184]	@ (8002314 <Modbus_Emission+0xe8>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8002260:	4b2c      	ldr	r3, [pc, #176]	@ (8002314 <Modbus_Emission+0xe8>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 8002268:	461a      	mov	r2, r3
 800226a:	f009 fa6d 	bl	800b748 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 800226e:	4b29      	ldr	r3, [pc, #164]	@ (8002314 <Modbus_Emission+0xe8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8002276:	461a      	mov	r2, r3
 8002278:	4b26      	ldr	r3, [pc, #152]	@ (8002314 <Modbus_Emission+0xe8>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	3203      	adds	r2, #3
 800227e:	b292      	uxth	r2, r2
 8002280:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8002284:	4b23      	ldr	r3, [pc, #140]	@ (8002314 <Modbus_Emission+0xe8>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 800228c:	4b21      	ldr	r3, [pc, #132]	@ (8002314 <Modbus_Emission+0xe8>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8002294:	3b02      	subs	r3, #2
 8002296:	4619      	mov	r1, r3
 8002298:	4610      	mov	r0, r2
 800229a:	f7ff fd9f 	bl	8001ddc <CRC16>
 800229e:	4603      	mov	r3, r0
 80022a0:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80022a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002314 <Modbus_Emission+0xe8>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002314 <Modbus_Emission+0xe8>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80022ae:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80022b0:	7939      	ldrb	r1, [r7, #4]
 80022b2:	4413      	add	r3, r2
 80022b4:	460a      	mov	r2, r1
 80022b6:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80022ba:	4b16      	ldr	r3, [pc, #88]	@ (8002314 <Modbus_Emission+0xe8>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	4b15      	ldr	r3, [pc, #84]	@ (8002314 <Modbus_Emission+0xe8>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80022c6:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80022c8:	7979      	ldrb	r1, [r7, #5]
 80022ca:	4413      	add	r3, r2
 80022cc:	460a      	mov	r2, r1
 80022ce:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80022d2:	4b10      	ldr	r3, [pc, #64]	@ (8002314 <Modbus_Emission+0xe8>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022dc:	2b20      	cmp	r3, #32
 80022de:	d10d      	bne.n	80022fc <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 80022e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002314 <Modbus_Emission+0xe8>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 80022e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002314 <Modbus_Emission+0xe8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 80022ee:	4b09      	ldr	r3, [pc, #36]	@ (8002314 <Modbus_Emission+0xe8>)
 80022f0:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 80022f2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80022f6:	461a      	mov	r2, r3
 80022f8:	f007 fc1a 	bl	8009b30 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 80022fc:	4b05      	ldr	r3, [pc, #20]	@ (8002314 <Modbus_Emission+0xe8>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2200      	movs	r2, #0
 8002302:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8002304:	4b03      	ldr	r3, [pc, #12]	@ (8002314 <Modbus_Emission+0xe8>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2200      	movs	r2, #0
 800230a:	755a      	strb	r2, [r3, #21]

}
 800230c:	bf00      	nop
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	200002e4 	.word	0x200002e4

08002318 <MOTOR_init>:
#include "math.h"

//-------------------------------------------Function Code-------------------------------------------------------//

void MOTOR_init(MOTOR* MT,TIM_HandleTypeDef* htimx,uint16_t timd_chx,uint16_t timp_chx)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	4611      	mov	r1, r2
 8002324:	461a      	mov	r2, r3
 8002326:	460b      	mov	r3, r1
 8002328:	80fb      	strh	r3, [r7, #6]
 800232a:	4613      	mov	r3, r2
 800232c:	80bb      	strh	r3, [r7, #4]
	MT->htimx = htimx;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	601a      	str	r2, [r3, #0]
	MT->timd_chx = timd_chx;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	88fa      	ldrh	r2, [r7, #6]
 8002338:	809a      	strh	r2, [r3, #4]
	MT->timp_chx = timp_chx;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	88ba      	ldrh	r2, [r7, #4]
 800233e:	80da      	strh	r2, [r3, #6]
	HAL_TIM_PWM_Start_IT(htimx, timp_chx);		// PWM
 8002340:	88bb      	ldrh	r3, [r7, #4]
 8002342:	4619      	mov	r1, r3
 8002344:	68b8      	ldr	r0, [r7, #8]
 8002346:	f005 fb1f 	bl	8007988 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(htimx, timd_chx);		// Direction
 800234a:	88fb      	ldrh	r3, [r7, #6]
 800234c:	4619      	mov	r1, r3
 800234e:	68b8      	ldr	r0, [r7, #8]
 8002350:	f005 fb1a 	bl	8007988 <HAL_TIM_PWM_Start_IT>

}
 8002354:	bf00      	nop
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	0000      	movs	r0, r0
	...

08002360 <MOTOR_set_duty>:

void MOTOR_set_duty(MOTOR* MT, float percent_duty)
{
 8002360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002364:	b089      	sub	sp, #36	@ 0x24
 8002366:	af00      	add	r7, sp, #0
 8002368:	61f8      	str	r0, [r7, #28]
 800236a:	ed87 0a06 	vstr	s0, [r7, #24]
    if (MT == NULL || MT->htimx == NULL) {
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 8263 	beq.w	800283c <MOTOR_set_duty+0x4dc>
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 825e 	beq.w	800283c <MOTOR_set_duty+0x4dc>
        return;
    }
    if(percent_duty*42.499 >= 42499) percent_duty = 42499;
 8002380:	69b8      	ldr	r0, [r7, #24]
 8002382:	f7fe f8ad 	bl	80004e0 <__aeabi_f2d>
 8002386:	a394      	add	r3, pc, #592	@ (adr r3, 80025d8 <MOTOR_set_duty+0x278>)
 8002388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238c:	f7fe f900 	bl	8000590 <__aeabi_dmul>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	4610      	mov	r0, r2
 8002396:	4619      	mov	r1, r3
 8002398:	a395      	add	r3, pc, #596	@ (adr r3, 80025f0 <MOTOR_set_duty+0x290>)
 800239a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239e:	f7fe fb7d 	bl	8000a9c <__aeabi_dcmpge>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <MOTOR_set_duty+0x4c>
 80023a8:	4b8f      	ldr	r3, [pc, #572]	@ (80025e8 <MOTOR_set_duty+0x288>)
 80023aa:	61bb      	str	r3, [r7, #24]
    if(percent_duty*42.499 <= -42499) percent_duty = -42499;
 80023ac:	69b8      	ldr	r0, [r7, #24]
 80023ae:	f7fe f897 	bl	80004e0 <__aeabi_f2d>
 80023b2:	a389      	add	r3, pc, #548	@ (adr r3, 80025d8 <MOTOR_set_duty+0x278>)
 80023b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b8:	f7fe f8ea 	bl	8000590 <__aeabi_dmul>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4610      	mov	r0, r2
 80023c2:	4619      	mov	r1, r3
 80023c4:	a386      	add	r3, pc, #536	@ (adr r3, 80025e0 <MOTOR_set_duty+0x280>)
 80023c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ca:	f7fe fb5d 	bl	8000a88 <__aeabi_dcmple>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MOTOR_set_duty+0x78>
 80023d4:	4b85      	ldr	r3, [pc, #532]	@ (80025ec <MOTOR_set_duty+0x28c>)
 80023d6:	61bb      	str	r3, [r7, #24]

    if (percent_duty == 0) {
 80023d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80023dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e4:	d16e      	bne.n	80024c4 <MOTOR_set_duty+0x164>
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timd_chx, 0);
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	889b      	ldrh	r3, [r3, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d105      	bne.n	80023fa <MOTOR_set_duty+0x9a>
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2200      	movs	r2, #0
 80023f6:	635a      	str	r2, [r3, #52]	@ 0x34
 80023f8:	e02c      	b.n	8002454 <MOTOR_set_duty+0xf4>
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	889b      	ldrh	r3, [r3, #4]
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d105      	bne.n	800240e <MOTOR_set_duty+0xae>
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	2300      	movs	r3, #0
 800240a:	6393      	str	r3, [r2, #56]	@ 0x38
 800240c:	e022      	b.n	8002454 <MOTOR_set_duty+0xf4>
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	889b      	ldrh	r3, [r3, #4]
 8002412:	2b08      	cmp	r3, #8
 8002414:	d105      	bne.n	8002422 <MOTOR_set_duty+0xc2>
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	2300      	movs	r3, #0
 800241e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002420:	e018      	b.n	8002454 <MOTOR_set_duty+0xf4>
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	889b      	ldrh	r3, [r3, #4]
 8002426:	2b0c      	cmp	r3, #12
 8002428:	d105      	bne.n	8002436 <MOTOR_set_duty+0xd6>
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	2300      	movs	r3, #0
 8002432:	6413      	str	r3, [r2, #64]	@ 0x40
 8002434:	e00e      	b.n	8002454 <MOTOR_set_duty+0xf4>
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	889b      	ldrh	r3, [r3, #4]
 800243a:	2b10      	cmp	r3, #16
 800243c:	d105      	bne.n	800244a <MOTOR_set_duty+0xea>
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	2300      	movs	r3, #0
 8002446:	6493      	str	r3, [r2, #72]	@ 0x48
 8002448:	e004      	b.n	8002454 <MOTOR_set_duty+0xf4>
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	2300      	movs	r3, #0
 8002452:	64d3      	str	r3, [r2, #76]	@ 0x4c
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timp_chx, 0);
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	88db      	ldrh	r3, [r3, #6]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d105      	bne.n	8002468 <MOTOR_set_duty+0x108>
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2200      	movs	r2, #0
 8002464:	635a      	str	r2, [r3, #52]	@ 0x34
 8002466:	e1ea      	b.n	800283e <MOTOR_set_duty+0x4de>
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	88db      	ldrh	r3, [r3, #6]
 800246c:	2b04      	cmp	r3, #4
 800246e:	d105      	bne.n	800247c <MOTOR_set_duty+0x11c>
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	2300      	movs	r3, #0
 8002478:	6393      	str	r3, [r2, #56]	@ 0x38
 800247a:	e1e0      	b.n	800283e <MOTOR_set_duty+0x4de>
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	88db      	ldrh	r3, [r3, #6]
 8002480:	2b08      	cmp	r3, #8
 8002482:	d105      	bne.n	8002490 <MOTOR_set_duty+0x130>
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	2300      	movs	r3, #0
 800248c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800248e:	e1d6      	b.n	800283e <MOTOR_set_duty+0x4de>
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	88db      	ldrh	r3, [r3, #6]
 8002494:	2b0c      	cmp	r3, #12
 8002496:	d105      	bne.n	80024a4 <MOTOR_set_duty+0x144>
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	2300      	movs	r3, #0
 80024a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024a2:	e1cc      	b.n	800283e <MOTOR_set_duty+0x4de>
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	88db      	ldrh	r3, [r3, #6]
 80024a8:	2b10      	cmp	r3, #16
 80024aa:	d105      	bne.n	80024b8 <MOTOR_set_duty+0x158>
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	2300      	movs	r3, #0
 80024b4:	6493      	str	r3, [r2, #72]	@ 0x48
 80024b6:	e1c2      	b.n	800283e <MOTOR_set_duty+0x4de>
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	2300      	movs	r3, #0
 80024c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024c2:	e1bc      	b.n	800283e <MOTOR_set_duty+0x4de>
    } else if (percent_duty > 0) {
 80024c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80024c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d0:	f340 80d6 	ble.w	8002680 <MOTOR_set_duty+0x320>
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timd_chx, 0);
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	889b      	ldrh	r3, [r3, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d105      	bne.n	80024e8 <MOTOR_set_duty+0x188>
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2200      	movs	r2, #0
 80024e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80024e6:	e02c      	b.n	8002542 <MOTOR_set_duty+0x1e2>
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	889b      	ldrh	r3, [r3, #4]
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	d105      	bne.n	80024fc <MOTOR_set_duty+0x19c>
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	2300      	movs	r3, #0
 80024f8:	6393      	str	r3, [r2, #56]	@ 0x38
 80024fa:	e022      	b.n	8002542 <MOTOR_set_duty+0x1e2>
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	889b      	ldrh	r3, [r3, #4]
 8002500:	2b08      	cmp	r3, #8
 8002502:	d105      	bne.n	8002510 <MOTOR_set_duty+0x1b0>
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	2300      	movs	r3, #0
 800250c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800250e:	e018      	b.n	8002542 <MOTOR_set_duty+0x1e2>
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	889b      	ldrh	r3, [r3, #4]
 8002514:	2b0c      	cmp	r3, #12
 8002516:	d105      	bne.n	8002524 <MOTOR_set_duty+0x1c4>
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	2300      	movs	r3, #0
 8002520:	6413      	str	r3, [r2, #64]	@ 0x40
 8002522:	e00e      	b.n	8002542 <MOTOR_set_duty+0x1e2>
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	889b      	ldrh	r3, [r3, #4]
 8002528:	2b10      	cmp	r3, #16
 800252a:	d105      	bne.n	8002538 <MOTOR_set_duty+0x1d8>
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	2300      	movs	r3, #0
 8002534:	6493      	str	r3, [r2, #72]	@ 0x48
 8002536:	e004      	b.n	8002542 <MOTOR_set_duty+0x1e2>
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	2300      	movs	r3, #0
 8002540:	64d3      	str	r3, [r2, #76]	@ 0x4c
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timp_chx, (uint32_t)(percent_duty*42.499));
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	88db      	ldrh	r3, [r3, #6]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d113      	bne.n	8002572 <MOTOR_set_duty+0x212>
 800254a:	69b8      	ldr	r0, [r7, #24]
 800254c:	f7fd ffc8 	bl	80004e0 <__aeabi_f2d>
 8002550:	a321      	add	r3, pc, #132	@ (adr r3, 80025d8 <MOTOR_set_duty+0x278>)
 8002552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002556:	f7fe f81b 	bl	8000590 <__aeabi_dmul>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	4610      	mov	r0, r2
 8002560:	4619      	mov	r1, r3
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681c      	ldr	r4, [r3, #0]
 8002568:	f7fe fac2 	bl	8000af0 <__aeabi_d2uiz>
 800256c:	4603      	mov	r3, r0
 800256e:	6363      	str	r3, [r4, #52]	@ 0x34
 8002570:	e165      	b.n	800283e <MOTOR_set_duty+0x4de>
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	88db      	ldrh	r3, [r3, #6]
 8002576:	2b04      	cmp	r3, #4
 8002578:	d113      	bne.n	80025a2 <MOTOR_set_duty+0x242>
 800257a:	69b8      	ldr	r0, [r7, #24]
 800257c:	f7fd ffb0 	bl	80004e0 <__aeabi_f2d>
 8002580:	a315      	add	r3, pc, #84	@ (adr r3, 80025d8 <MOTOR_set_duty+0x278>)
 8002582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002586:	f7fe f803 	bl	8000590 <__aeabi_dmul>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	4610      	mov	r0, r2
 8002590:	4619      	mov	r1, r3
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681c      	ldr	r4, [r3, #0]
 8002598:	f7fe faaa 	bl	8000af0 <__aeabi_d2uiz>
 800259c:	4603      	mov	r3, r0
 800259e:	63a3      	str	r3, [r4, #56]	@ 0x38
 80025a0:	e14d      	b.n	800283e <MOTOR_set_duty+0x4de>
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	88db      	ldrh	r3, [r3, #6]
 80025a6:	2b08      	cmp	r3, #8
 80025a8:	d126      	bne.n	80025f8 <MOTOR_set_duty+0x298>
 80025aa:	69b8      	ldr	r0, [r7, #24]
 80025ac:	f7fd ff98 	bl	80004e0 <__aeabi_f2d>
 80025b0:	a309      	add	r3, pc, #36	@ (adr r3, 80025d8 <MOTOR_set_duty+0x278>)
 80025b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b6:	f7fd ffeb 	bl	8000590 <__aeabi_dmul>
 80025ba:	4602      	mov	r2, r0
 80025bc:	460b      	mov	r3, r1
 80025be:	4610      	mov	r0, r2
 80025c0:	4619      	mov	r1, r3
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681c      	ldr	r4, [r3, #0]
 80025c8:	f7fe fa92 	bl	8000af0 <__aeabi_d2uiz>
 80025cc:	4603      	mov	r3, r0
 80025ce:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80025d0:	e135      	b.n	800283e <MOTOR_set_duty+0x4de>
 80025d2:	bf00      	nop
 80025d4:	f3af 8000 	nop.w
 80025d8:	3b645a1d 	.word	0x3b645a1d
 80025dc:	40453fdf 	.word	0x40453fdf
 80025e0:	00000000 	.word	0x00000000
 80025e4:	c0e4c060 	.word	0xc0e4c060
 80025e8:	47260300 	.word	0x47260300
 80025ec:	c7260300 	.word	0xc7260300
 80025f0:	00000000 	.word	0x00000000
 80025f4:	40e4c060 	.word	0x40e4c060
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	88db      	ldrh	r3, [r3, #6]
 80025fc:	2b0c      	cmp	r3, #12
 80025fe:	d113      	bne.n	8002628 <MOTOR_set_duty+0x2c8>
 8002600:	69b8      	ldr	r0, [r7, #24]
 8002602:	f7fd ff6d 	bl	80004e0 <__aeabi_f2d>
 8002606:	a390      	add	r3, pc, #576	@ (adr r3, 8002848 <MOTOR_set_duty+0x4e8>)
 8002608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260c:	f7fd ffc0 	bl	8000590 <__aeabi_dmul>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	4610      	mov	r0, r2
 8002616:	4619      	mov	r1, r3
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681c      	ldr	r4, [r3, #0]
 800261e:	f7fe fa67 	bl	8000af0 <__aeabi_d2uiz>
 8002622:	4603      	mov	r3, r0
 8002624:	6423      	str	r3, [r4, #64]	@ 0x40
 8002626:	e10a      	b.n	800283e <MOTOR_set_duty+0x4de>
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	88db      	ldrh	r3, [r3, #6]
 800262c:	2b10      	cmp	r3, #16
 800262e:	d113      	bne.n	8002658 <MOTOR_set_duty+0x2f8>
 8002630:	69b8      	ldr	r0, [r7, #24]
 8002632:	f7fd ff55 	bl	80004e0 <__aeabi_f2d>
 8002636:	a384      	add	r3, pc, #528	@ (adr r3, 8002848 <MOTOR_set_duty+0x4e8>)
 8002638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263c:	f7fd ffa8 	bl	8000590 <__aeabi_dmul>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4610      	mov	r0, r2
 8002646:	4619      	mov	r1, r3
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681c      	ldr	r4, [r3, #0]
 800264e:	f7fe fa4f 	bl	8000af0 <__aeabi_d2uiz>
 8002652:	4603      	mov	r3, r0
 8002654:	64a3      	str	r3, [r4, #72]	@ 0x48
 8002656:	e0f2      	b.n	800283e <MOTOR_set_duty+0x4de>
 8002658:	69b8      	ldr	r0, [r7, #24]
 800265a:	f7fd ff41 	bl	80004e0 <__aeabi_f2d>
 800265e:	a37a      	add	r3, pc, #488	@ (adr r3, 8002848 <MOTOR_set_duty+0x4e8>)
 8002660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002664:	f7fd ff94 	bl	8000590 <__aeabi_dmul>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4610      	mov	r0, r2
 800266e:	4619      	mov	r1, r3
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681c      	ldr	r4, [r3, #0]
 8002676:	f7fe fa3b 	bl	8000af0 <__aeabi_d2uiz>
 800267a:	4603      	mov	r3, r0
 800267c:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800267e:	e0de      	b.n	800283e <MOTOR_set_duty+0x4de>
    } else {
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timd_chx, 42499);
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	889b      	ldrh	r3, [r3, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d106      	bne.n	8002696 <MOTOR_set_duty+0x336>
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f24a 6203 	movw	r2, #42499	@ 0xa603
 8002692:	635a      	str	r2, [r3, #52]	@ 0x34
 8002694:	e031      	b.n	80026fa <MOTOR_set_duty+0x39a>
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	889b      	ldrh	r3, [r3, #4]
 800269a:	2b04      	cmp	r3, #4
 800269c:	d106      	bne.n	80026ac <MOTOR_set_duty+0x34c>
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	f24a 6303 	movw	r3, #42499	@ 0xa603
 80026a8:	6393      	str	r3, [r2, #56]	@ 0x38
 80026aa:	e026      	b.n	80026fa <MOTOR_set_duty+0x39a>
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	889b      	ldrh	r3, [r3, #4]
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d106      	bne.n	80026c2 <MOTOR_set_duty+0x362>
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	f24a 6303 	movw	r3, #42499	@ 0xa603
 80026be:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80026c0:	e01b      	b.n	80026fa <MOTOR_set_duty+0x39a>
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	889b      	ldrh	r3, [r3, #4]
 80026c6:	2b0c      	cmp	r3, #12
 80026c8:	d106      	bne.n	80026d8 <MOTOR_set_duty+0x378>
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	f24a 6303 	movw	r3, #42499	@ 0xa603
 80026d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026d6:	e010      	b.n	80026fa <MOTOR_set_duty+0x39a>
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	889b      	ldrh	r3, [r3, #4]
 80026dc:	2b10      	cmp	r3, #16
 80026de:	d106      	bne.n	80026ee <MOTOR_set_duty+0x38e>
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	f24a 6303 	movw	r3, #42499	@ 0xa603
 80026ea:	6493      	str	r3, [r2, #72]	@ 0x48
 80026ec:	e005      	b.n	80026fa <MOTOR_set_duty+0x39a>
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	f24a 6303 	movw	r3, #42499	@ 0xa603
 80026f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timp_chx, (uint32_t)fabs((percent_duty*42.499)));
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	88db      	ldrh	r3, [r3, #6]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d117      	bne.n	8002732 <MOTOR_set_duty+0x3d2>
 8002702:	69b8      	ldr	r0, [r7, #24]
 8002704:	f7fd feec 	bl	80004e0 <__aeabi_f2d>
 8002708:	a34f      	add	r3, pc, #316	@ (adr r3, 8002848 <MOTOR_set_duty+0x4e8>)
 800270a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270e:	f7fd ff3f 	bl	8000590 <__aeabi_dmul>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	613a      	str	r2, [r7, #16]
 8002718:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681c      	ldr	r4, [r3, #0]
 8002724:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002728:	f7fe f9e2 	bl	8000af0 <__aeabi_d2uiz>
 800272c:	4603      	mov	r3, r0
 800272e:	6363      	str	r3, [r4, #52]	@ 0x34
 8002730:	e085      	b.n	800283e <MOTOR_set_duty+0x4de>
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	88db      	ldrh	r3, [r3, #6]
 8002736:	2b04      	cmp	r3, #4
 8002738:	d117      	bne.n	800276a <MOTOR_set_duty+0x40a>
 800273a:	69b8      	ldr	r0, [r7, #24]
 800273c:	f7fd fed0 	bl	80004e0 <__aeabi_f2d>
 8002740:	a341      	add	r3, pc, #260	@ (adr r3, 8002848 <MOTOR_set_duty+0x4e8>)
 8002742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002746:	f7fd ff23 	bl	8000590 <__aeabi_dmul>
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	60ba      	str	r2, [r7, #8]
 8002750:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681c      	ldr	r4, [r3, #0]
 800275c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002760:	f7fe f9c6 	bl	8000af0 <__aeabi_d2uiz>
 8002764:	4603      	mov	r3, r0
 8002766:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002768:	e069      	b.n	800283e <MOTOR_set_duty+0x4de>
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	88db      	ldrh	r3, [r3, #6]
 800276e:	2b08      	cmp	r3, #8
 8002770:	d117      	bne.n	80027a2 <MOTOR_set_duty+0x442>
 8002772:	69b8      	ldr	r0, [r7, #24]
 8002774:	f7fd feb4 	bl	80004e0 <__aeabi_f2d>
 8002778:	a333      	add	r3, pc, #204	@ (adr r3, 8002848 <MOTOR_set_duty+0x4e8>)
 800277a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277e:	f7fd ff07 	bl	8000590 <__aeabi_dmul>
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	603a      	str	r2, [r7, #0]
 8002788:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800278c:	607b      	str	r3, [r7, #4]
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681c      	ldr	r4, [r3, #0]
 8002794:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002798:	f7fe f9aa 	bl	8000af0 <__aeabi_d2uiz>
 800279c:	4603      	mov	r3, r0
 800279e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80027a0:	e04d      	b.n	800283e <MOTOR_set_duty+0x4de>
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	88db      	ldrh	r3, [r3, #6]
 80027a6:	2b0c      	cmp	r3, #12
 80027a8:	d116      	bne.n	80027d8 <MOTOR_set_duty+0x478>
 80027aa:	69b8      	ldr	r0, [r7, #24]
 80027ac:	f7fd fe98 	bl	80004e0 <__aeabi_f2d>
 80027b0:	a325      	add	r3, pc, #148	@ (adr r3, 8002848 <MOTOR_set_duty+0x4e8>)
 80027b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b6:	f7fd feeb 	bl	8000590 <__aeabi_dmul>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	4615      	mov	r5, r2
 80027c0:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681c      	ldr	r4, [r3, #0]
 80027ca:	4628      	mov	r0, r5
 80027cc:	4631      	mov	r1, r6
 80027ce:	f7fe f98f 	bl	8000af0 <__aeabi_d2uiz>
 80027d2:	4603      	mov	r3, r0
 80027d4:	6423      	str	r3, [r4, #64]	@ 0x40
 80027d6:	e032      	b.n	800283e <MOTOR_set_duty+0x4de>
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	88db      	ldrh	r3, [r3, #6]
 80027dc:	2b10      	cmp	r3, #16
 80027de:	d116      	bne.n	800280e <MOTOR_set_duty+0x4ae>
 80027e0:	69b8      	ldr	r0, [r7, #24]
 80027e2:	f7fd fe7d 	bl	80004e0 <__aeabi_f2d>
 80027e6:	a318      	add	r3, pc, #96	@ (adr r3, 8002848 <MOTOR_set_duty+0x4e8>)
 80027e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ec:	f7fd fed0 	bl	8000590 <__aeabi_dmul>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4692      	mov	sl, r2
 80027f6:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681c      	ldr	r4, [r3, #0]
 8002800:	4650      	mov	r0, sl
 8002802:	4659      	mov	r1, fp
 8002804:	f7fe f974 	bl	8000af0 <__aeabi_d2uiz>
 8002808:	4603      	mov	r3, r0
 800280a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800280c:	e017      	b.n	800283e <MOTOR_set_duty+0x4de>
 800280e:	69b8      	ldr	r0, [r7, #24]
 8002810:	f7fd fe66 	bl	80004e0 <__aeabi_f2d>
 8002814:	a30c      	add	r3, pc, #48	@ (adr r3, 8002848 <MOTOR_set_duty+0x4e8>)
 8002816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281a:	f7fd feb9 	bl	8000590 <__aeabi_dmul>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	4690      	mov	r8, r2
 8002824:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681c      	ldr	r4, [r3, #0]
 800282e:	4640      	mov	r0, r8
 8002830:	4649      	mov	r1, r9
 8002832:	f7fe f95d 	bl	8000af0 <__aeabi_d2uiz>
 8002836:	4603      	mov	r3, r0
 8002838:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800283a:	e000      	b.n	800283e <MOTOR_set_duty+0x4de>
        return;
 800283c:	bf00      	nop
    }
}
 800283e:	3724      	adds	r7, #36	@ 0x24
 8002840:	46bd      	mov	sp, r7
 8002842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002846:	bf00      	nop
 8002848:	3b645a1d 	.word	0x3b645a1d
 800284c:	40453fdf 	.word	0x40453fdf

08002850 <PID_controller_init>:
float boundary = 0.05;

//-------------------------------------------Function Code-------------------------------------------------------//

void PID_controller_init(PID_struct* PID,float UP_Kp, float UP_Ki, float UP_Kd)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	ed87 0a02 	vstr	s0, [r7, #8]
 800285c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002860:	ed87 1a00 	vstr	s2, [r7]
 PID->Kp = UP_Kp;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	601a      	str	r2, [r3, #0]
 PID->Ki = UP_Ki;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	605a      	str	r2, [r3, #4]
 PID->Kd = UP_Kd;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	609a      	str	r2, [r3, #8]

 PID->Error[n] = 0;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	60da      	str	r2, [r3, #12]
 PID->Error[n_1] = 0;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	611a      	str	r2, [r3, #16]
 PID->Error[n_2] = 0;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	615a      	str	r2, [r3, #20]
 PID->out = 0;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	619a      	str	r2, [r3, #24]
}
 8002896:	bf00      	nop
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
	...

080028a4 <PID_controller_calculate_pos>:
void PID_controller_calculate_pos(PID_struct* PID,AMT_Encoder* Feedback, float setpoint)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	ed87 0a01 	vstr	s0, [r7, #4]
 // Output velocity in boundary of 550mm/s
 PID->Error[n] = setpoint - Feedback->Linear_Position;
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80028b8:	ed97 7a01 	vldr	s14, [r7, #4]
 80028bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	edc3 7a03 	vstr	s15, [r3, #12]
 if (!((PID->out >= 550 && PID->Error[n] > 0) || (PID->out <= -550 && PID->Error[n] < 0))) {
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	edd3 7a06 	vldr	s15, [r3, #24]
 80028cc:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8002a08 <PID_controller_calculate_pos+0x164>
 80028d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d8:	bfac      	ite	ge
 80028da:	2301      	movge	r3, #1
 80028dc:	2300      	movlt	r3, #0
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	f083 0301 	eor.w	r3, r3, #1
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10f      	bne.n	800290a <PID_controller_calculate_pos+0x66>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80028f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f8:	bfcc      	ite	gt
 80028fa:	2301      	movgt	r3, #1
 80028fc:	2300      	movle	r3, #0
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	f083 0301 	eor.w	r3, r3, #1
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d056      	beq.n	80029b8 <PID_controller_calculate_pos+0x114>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002910:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8002a0c <PID_controller_calculate_pos+0x168>
 8002914:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800291c:	bf94      	ite	ls
 800291e:	2301      	movls	r3, #1
 8002920:	2300      	movhi	r3, #0
 8002922:	b2db      	uxtb	r3, r3
 8002924:	f083 0301 	eor.w	r3, r3, #1
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10f      	bne.n	800294e <PID_controller_calculate_pos+0xaa>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	edd3 7a03 	vldr	s15, [r3, #12]
 8002934:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800293c:	bf4c      	ite	mi
 800293e:	2301      	movmi	r3, #1
 8002940:	2300      	movpl	r3, #0
 8002942:	b2db      	uxtb	r3, r3
 8002944:	f083 0301 	eor.w	r3, r3, #1
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d034      	beq.n	80029b8 <PID_controller_calculate_pos+0x114>
     PID->out += ((PID->Kp + PID->Ki + PID->Kd) * PID->Error[n])
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	ed93 7a06 	vldr	s14, [r3, #24]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	edd3 6a00 	vldr	s13, [r3]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002960:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	edd3 7a02 	vldr	s15, [r3, #8]
 800296a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	edd3 7a03 	vldr	s15, [r3, #12]
 8002974:	ee66 6aa7 	vmul.f32	s13, s13, s15
                      - ((PID->Kp + (2 * PID->Kd)) * PID->Error[n_1])
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	ed93 6a00 	vldr	s12, [r3]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	edd3 7a02 	vldr	s15, [r3, #8]
 8002984:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002988:	ee36 6a27 	vadd.f32	s12, s12, s15
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002992:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002996:	ee76 6ae7 	vsub.f32	s13, s13, s15
                      + (PID->Kd * PID->Error[n_2]);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	ed93 6a02 	vldr	s12, [r3, #8]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	edd3 7a05 	vldr	s15, [r3, #20]
 80029a6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80029aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
     PID->out += ((PID->Kp + PID->Ki + PID->Kd) * PID->Error[n])
 80029ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	edc3 7a06 	vstr	s15, [r3, #24]
 }
 if(PID->out > 550){
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80029be:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002a08 <PID_controller_calculate_pos+0x164>
 80029c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ca:	dd02      	ble.n	80029d2 <PID_controller_calculate_pos+0x12e>
	 PID->out = 550;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4a10      	ldr	r2, [pc, #64]	@ (8002a10 <PID_controller_calculate_pos+0x16c>)
 80029d0:	619a      	str	r2, [r3, #24]
 }
 if(PID->out < -550){
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	edd3 7a06 	vldr	s15, [r3, #24]
 80029d8:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8002a0c <PID_controller_calculate_pos+0x168>
 80029dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e4:	d502      	bpl.n	80029ec <PID_controller_calculate_pos+0x148>
	 PID->out = -550;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002a14 <PID_controller_calculate_pos+0x170>)
 80029ea:	619a      	str	r2, [r3, #24]
 }
 PID->Error[n_2] = PID->Error[n_1];
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	691a      	ldr	r2, [r3, #16]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	615a      	str	r2, [r3, #20]
 PID->Error[n_1] = PID->Error[n];
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	68da      	ldr	r2, [r3, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	611a      	str	r2, [r3, #16]
}
 80029fc:	bf00      	nop
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	44098000 	.word	0x44098000
 8002a0c:	c4098000 	.word	0xc4098000
 8002a10:	44098000 	.word	0x44098000
 8002a14:	c4098000 	.word	0xc4098000

08002a18 <PID_controller_calculate_velo>:

void PID_controller_calculate_velo(PID_struct* PID,AMT_Encoder* Feedback, float setpoint)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	ed87 0a01 	vstr	s0, [r7, #4]
 // Output pwm to drive the motor
 PID->Error[n] = setpoint - Feedback->Linear_Velocity + Traj.currentVelocity;
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002a2c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002a30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a34:	4b54      	ldr	r3, [pc, #336]	@ (8002b88 <PID_controller_calculate_velo+0x170>)
 8002a36:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	edc3 7a03 	vstr	s15, [r3, #12]
 if (!((PID->out >= 1000 && PID->Error[n] > 0) || (PID->out <= -1000 && PID->Error[n] < 0))) {
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	edd3 7a06 	vldr	s15, [r3, #24]
 8002a4a:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8002b8c <PID_controller_calculate_velo+0x174>
 8002a4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a56:	bfac      	ite	ge
 8002a58:	2301      	movge	r3, #1
 8002a5a:	2300      	movlt	r3, #0
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	f083 0301 	eor.w	r3, r3, #1
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10f      	bne.n	8002a88 <PID_controller_calculate_velo+0x70>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a76:	bfcc      	ite	gt
 8002a78:	2301      	movgt	r3, #1
 8002a7a:	2300      	movle	r3, #0
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	f083 0301 	eor.w	r3, r3, #1
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d056      	beq.n	8002b36 <PID_controller_calculate_velo+0x11e>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	edd3 7a06 	vldr	s15, [r3, #24]
 8002a8e:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8002b90 <PID_controller_calculate_velo+0x178>
 8002a92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a9a:	bf94      	ite	ls
 8002a9c:	2301      	movls	r3, #1
 8002a9e:	2300      	movhi	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	f083 0301 	eor.w	r3, r3, #1
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10f      	bne.n	8002acc <PID_controller_calculate_velo+0xb4>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ab2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aba:	bf4c      	ite	mi
 8002abc:	2301      	movmi	r3, #1
 8002abe:	2300      	movpl	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	f083 0301 	eor.w	r3, r3, #1
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d034      	beq.n	8002b36 <PID_controller_calculate_velo+0x11e>
     PID->out += ((PID->Kp + PID->Ki + PID->Kd) * PID->Error[n])
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	ed93 7a06 	vldr	s14, [r3, #24]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	edd3 6a00 	vldr	s13, [r3]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ade:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ae8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	edd3 7a03 	vldr	s15, [r3, #12]
 8002af2:	ee66 6aa7 	vmul.f32	s13, s13, s15
                      - ((PID->Kp + (2 * PID->Kd)) * PID->Error[n_1])
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	ed93 6a00 	vldr	s12, [r3]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b02:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b06:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002b10:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002b14:	ee76 6ae7 	vsub.f32	s13, s13, s15
                      + (PID->Kd * PID->Error[n_2]);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	ed93 6a02 	vldr	s12, [r3, #8]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	edd3 7a05 	vldr	s15, [r3, #20]
 8002b24:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002b28:	ee76 7aa7 	vadd.f32	s15, s13, s15
     PID->out += ((PID->Kp + PID->Ki + PID->Kd) * PID->Error[n])
 8002b2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	edc3 7a06 	vstr	s15, [r3, #24]
 }
 if(PID->out > 1000){
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b3c:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8002b8c <PID_controller_calculate_velo+0x174>
 8002b40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b48:	dd02      	ble.n	8002b50 <PID_controller_calculate_velo+0x138>
	 PID->out = 1000;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	4a11      	ldr	r2, [pc, #68]	@ (8002b94 <PID_controller_calculate_velo+0x17c>)
 8002b4e:	619a      	str	r2, [r3, #24]
 }
 if(PID->out < -1000){
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b56:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002b90 <PID_controller_calculate_velo+0x178>
 8002b5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b62:	d502      	bpl.n	8002b6a <PID_controller_calculate_velo+0x152>
	 PID->out = -1000;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4a0c      	ldr	r2, [pc, #48]	@ (8002b98 <PID_controller_calculate_velo+0x180>)
 8002b68:	619a      	str	r2, [r3, #24]
 }
 PID->Error[n_2] = PID->Error[n_1];
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	691a      	ldr	r2, [r3, #16]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	615a      	str	r2, [r3, #20]
 PID->Error[n_1] = PID->Error[n];
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	611a      	str	r2, [r3, #16]
}
 8002b7a:	bf00      	nop
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	20000b34 	.word	0x20000b34
 8002b8c:	447a0000 	.word	0x447a0000
 8002b90:	c47a0000 	.word	0xc47a0000
 8002b94:	447a0000 	.word	0x447a0000
 8002b98:	c47a0000 	.word	0xc47a0000

08002b9c <PID_controller_cascade>:

void PID_controller_cascade(PID_struct* PID_pos, PID_struct* PID_vel, AMT_Encoder* QEI, float setpoint)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
 8002ba8:	ed87 0a00 	vstr	s0, [r7]
	PID_controller_calculate_pos(PID_pos, QEI , setpoint);
 8002bac:	ed97 0a00 	vldr	s0, [r7]
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f7ff fe76 	bl	80028a4 <PID_controller_calculate_pos>
	PID_controller_calculate_velo(PID_vel, QEI, ((PID_pos->out)));
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	edd3 7a06 	vldr	s15, [r3, #24]
 8002bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	68b8      	ldr	r0, [r7, #8]
 8002bc6:	f7ff ff27 	bl	8002a18 <PID_controller_calculate_velo>
//	PID_controller_calculate_velo(PID_vel, QEI, Traj.currentVelocity);
}
 8002bca:	bf00      	nop
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002bd4 <PS2X_Reader>:
    PS2->PIDPos = 0;
    PS2->on = 0;
}

void PS2X_Reader()
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
    if (ps2.ps2RX[0] == 69) 		// Press L4 to switch to use Joy stick
 8002bda:	4b86      	ldr	r3, [pc, #536]	@ (8002df4 <PS2X_Reader+0x220>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b45      	cmp	r3, #69	@ 0x45
 8002be0:	d105      	bne.n	8002bee <PS2X_Reader+0x1a>
    {
        ps2.mode = 1;
 8002be2:	4b84      	ldr	r3, [pc, #528]	@ (8002df4 <PS2X_Reader+0x220>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	66da      	str	r2, [r3, #108]	@ 0x6c
        ps2.on = 0;
 8002be8:	4b82      	ldr	r3, [pc, #520]	@ (8002df4 <PS2X_Reader+0x220>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	67da      	str	r2, [r3, #124]	@ 0x7c
    }
    if (ps2.ps2RX[0] == 70)		// Press L5 to switch to use Button
 8002bee:	4b81      	ldr	r3, [pc, #516]	@ (8002df4 <PS2X_Reader+0x220>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b46      	cmp	r3, #70	@ 0x46
 8002bf4:	d10d      	bne.n	8002c12 <PS2X_Reader+0x3e>
    {
        ps2.mode = 2;
 8002bf6:	4b7f      	ldr	r3, [pc, #508]	@ (8002df4 <PS2X_Reader+0x220>)
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	66da      	str	r2, [r3, #108]	@ 0x6c
        PID_velo.out = 0;
 8002bfc:	4b7e      	ldr	r3, [pc, #504]	@ (8002df8 <PS2X_Reader+0x224>)
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	619a      	str	r2, [r3, #24]
        ps2.on = 1;
 8002c04:	4b7b      	ldr	r3, [pc, #492]	@ (8002df4 <PS2X_Reader+0x220>)
 8002c06:	2201      	movs	r2, #1
 8002c08:	67da      	str	r2, [r3, #124]	@ 0x7c
        ps2.PIDPos = AMT.Linear_Position;
 8002c0a:	4b7c      	ldr	r3, [pc, #496]	@ (8002dfc <PS2X_Reader+0x228>)
 8002c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c0e:	4a79      	ldr	r2, [pc, #484]	@ (8002df4 <PS2X_Reader+0x220>)
 8002c10:	6793      	str	r3, [r2, #120]	@ 0x78
    }

    // Mode Joy stick
    if (ps2.mode == 1)
 8002c12:	4b78      	ldr	r3, [pc, #480]	@ (8002df4 <PS2X_Reader+0x220>)
 8002c14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	f040 8086 	bne.w	8002d28 <PS2X_Reader+0x154>
    {
        // Read Ps2 Joy stick in VERTICAL
        if (ps2.ps2RX[0] == 81)
 8002c1c:	4b75      	ldr	r3, [pc, #468]	@ (8002df4 <PS2X_Reader+0x220>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b51      	cmp	r3, #81	@ 0x51
 8002c22:	d169      	bne.n	8002cf8 <PS2X_Reader+0x124>
        {
            if (ps2.ps2RX[2] == 83) {
 8002c24:	4b73      	ldr	r3, [pc, #460]	@ (8002df4 <PS2X_Reader+0x220>)
 8002c26:	789b      	ldrb	r3, [r3, #2]
 8002c28:	2b53      	cmp	r3, #83	@ 0x53
 8002c2a:	d103      	bne.n	8002c34 <PS2X_Reader+0x60>
                ps2.digit = 1;
 8002c2c:	4b71      	ldr	r3, [pc, #452]	@ (8002df4 <PS2X_Reader+0x220>)
 8002c2e:	2201      	movs	r2, #1
 8002c30:	60da      	str	r2, [r3, #12]
 8002c32:	e00e      	b.n	8002c52 <PS2X_Reader+0x7e>
            }
            else if (ps2.ps2RX[3] == 83) {
 8002c34:	4b6f      	ldr	r3, [pc, #444]	@ (8002df4 <PS2X_Reader+0x220>)
 8002c36:	78db      	ldrb	r3, [r3, #3]
 8002c38:	2b53      	cmp	r3, #83	@ 0x53
 8002c3a:	d103      	bne.n	8002c44 <PS2X_Reader+0x70>
                ps2.digit = 2;
 8002c3c:	4b6d      	ldr	r3, [pc, #436]	@ (8002df4 <PS2X_Reader+0x220>)
 8002c3e:	2202      	movs	r2, #2
 8002c40:	60da      	str	r2, [r3, #12]
 8002c42:	e006      	b.n	8002c52 <PS2X_Reader+0x7e>
            }
            else if (ps2.ps2RX[4] == 83) {
 8002c44:	4b6b      	ldr	r3, [pc, #428]	@ (8002df4 <PS2X_Reader+0x220>)
 8002c46:	791b      	ldrb	r3, [r3, #4]
 8002c48:	2b53      	cmp	r3, #83	@ 0x53
 8002c4a:	d102      	bne.n	8002c52 <PS2X_Reader+0x7e>
                ps2.digit = 3;
 8002c4c:	4b69      	ldr	r3, [pc, #420]	@ (8002df4 <PS2X_Reader+0x220>)
 8002c4e:	2203      	movs	r2, #3
 8002c50:	60da      	str	r2, [r3, #12]
            }
            for (int k = 1; k < 5; k++) {
 8002c52:	2301      	movs	r3, #1
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	e01d      	b.n	8002c94 <PS2X_Reader+0xc0>
                for (int l = 0; l < 10; l++) {
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60bb      	str	r3, [r7, #8]
 8002c5c:	e014      	b.n	8002c88 <PS2X_Reader+0xb4>
                    if (ps2.ps2RX[k] == num[l]) {
 8002c5e:	4a65      	ldr	r2, [pc, #404]	@ (8002df4 <PS2X_Reader+0x220>)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4413      	add	r3, r2
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	4619      	mov	r1, r3
 8002c68:	4a65      	ldr	r2, [pc, #404]	@ (8002e00 <PS2X_Reader+0x22c>)
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c70:	4299      	cmp	r1, r3
 8002c72:	d106      	bne.n	8002c82 <PS2X_Reader+0xae>
                        ps2.gain[k - 1] = l;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	495e      	ldr	r1, [pc, #376]	@ (8002df4 <PS2X_Reader+0x220>)
 8002c7a:	3304      	adds	r3, #4
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                for (int l = 0; l < 10; l++) {
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	3301      	adds	r3, #1
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2b09      	cmp	r3, #9
 8002c8c:	dde7      	ble.n	8002c5e <PS2X_Reader+0x8a>
            for (int k = 1; k < 5; k++) {
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	3301      	adds	r3, #1
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	ddde      	ble.n	8002c58 <PS2X_Reader+0x84>
                    }
                }
            }
            if (ps2.digit == 1) {
 8002c9a:	4b56      	ldr	r3, [pc, #344]	@ (8002df4 <PS2X_Reader+0x220>)
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d104      	bne.n	8002cac <PS2X_Reader+0xd8>
                ps2.ps2YPos = ps2.gain[0];
 8002ca2:	4b54      	ldr	r3, [pc, #336]	@ (8002df4 <PS2X_Reader+0x220>)
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	4a53      	ldr	r2, [pc, #332]	@ (8002df4 <PS2X_Reader+0x220>)
 8002ca8:	6213      	str	r3, [r2, #32]
 8002caa:	e025      	b.n	8002cf8 <PS2X_Reader+0x124>
            }
            else if (ps2.digit == 2) {
 8002cac:	4b51      	ldr	r3, [pc, #324]	@ (8002df4 <PS2X_Reader+0x220>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d10c      	bne.n	8002cce <PS2X_Reader+0xfa>
                ps2.ps2YPos = (ps2.gain[0] * 10) + ps2.gain[1];
 8002cb4:	4b4f      	ldr	r3, [pc, #316]	@ (8002df4 <PS2X_Reader+0x220>)
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4b4c      	ldr	r3, [pc, #304]	@ (8002df4 <PS2X_Reader+0x220>)
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	4a4a      	ldr	r2, [pc, #296]	@ (8002df4 <PS2X_Reader+0x220>)
 8002cca:	6213      	str	r3, [r2, #32]
 8002ccc:	e014      	b.n	8002cf8 <PS2X_Reader+0x124>
            }
            else if (ps2.digit == 3) {
 8002cce:	4b49      	ldr	r3, [pc, #292]	@ (8002df4 <PS2X_Reader+0x220>)
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	2b03      	cmp	r3, #3
 8002cd4:	d110      	bne.n	8002cf8 <PS2X_Reader+0x124>
                ps2.ps2YPos = (ps2.gain[0] * 100) + (ps2.gain[1] * 10) + ps2.gain[2];
 8002cd6:	4b47      	ldr	r3, [pc, #284]	@ (8002df4 <PS2X_Reader+0x220>)
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	2264      	movs	r2, #100	@ 0x64
 8002cdc:	fb02 f103 	mul.w	r1, r2, r3
 8002ce0:	4b44      	ldr	r3, [pc, #272]	@ (8002df4 <PS2X_Reader+0x220>)
 8002ce2:	695a      	ldr	r2, [r3, #20]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	18ca      	adds	r2, r1, r3
 8002cee:	4b41      	ldr	r3, [pc, #260]	@ (8002df4 <PS2X_Reader+0x220>)
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	4a3f      	ldr	r2, [pc, #252]	@ (8002df4 <PS2X_Reader+0x220>)
 8002cf6:	6213      	str	r3, [r2, #32]
            }
        }

        // Convert from 0 - 255 to -128 - 128
//        ps2.pwmOut = ((ps2.ps2Y / 132.0) * 300) + 150;
        ps2.pwmOut = 320 - ps2.ps2YPos;
 8002cf8:	4b3e      	ldr	r3, [pc, #248]	@ (8002df4 <PS2X_Reader+0x220>)
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8002d00:	4a3c      	ldr	r2, [pc, #240]	@ (8002df4 <PS2X_Reader+0x220>)
 8002d02:	6693      	str	r3, [r2, #104]	@ 0x68
        if (ps2.pwmOut > 300) {
 8002d04:	4b3b      	ldr	r3, [pc, #236]	@ (8002df4 <PS2X_Reader+0x220>)
 8002d06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d08:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002d0c:	dd03      	ble.n	8002d16 <PS2X_Reader+0x142>
            ps2.pwmOut = 350;
 8002d0e:	4b39      	ldr	r3, [pc, #228]	@ (8002df4 <PS2X_Reader+0x220>)
 8002d10:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8002d14:	669a      	str	r2, [r3, #104]	@ 0x68
        }
        if (ps2.pwmOut < -300) {
 8002d16:	4b37      	ldr	r3, [pc, #220]	@ (8002df4 <PS2X_Reader+0x220>)
 8002d18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d1a:	f513 7f96 	cmn.w	r3, #300	@ 0x12c
 8002d1e:	da64      	bge.n	8002dea <PS2X_Reader+0x216>
            ps2.pwmOut = 0;
 8002d20:	4b34      	ldr	r3, [pc, #208]	@ (8002df4 <PS2X_Reader+0x220>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	669a      	str	r2, [r3, #104]	@ 0x68
        }

        handle_shelve_mode();
        handle_PIDPos_adjustment();
    }
}
 8002d26:	e060      	b.n	8002dea <PS2X_Reader+0x216>
    else if (ps2.mode == 2)
 8002d28:	4b32      	ldr	r3, [pc, #200]	@ (8002df4 <PS2X_Reader+0x220>)
 8002d2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d15c      	bne.n	8002dea <PS2X_Reader+0x216>
        ps2.on = 1;
 8002d30:	4b30      	ldr	r3, [pc, #192]	@ (8002df4 <PS2X_Reader+0x220>)
 8002d32:	2201      	movs	r2, #1
 8002d34:	67da      	str	r2, [r3, #124]	@ 0x7c
        ps2.ps2Y = 0;
 8002d36:	4b2f      	ldr	r3, [pc, #188]	@ (8002df4 <PS2X_Reader+0x220>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	61da      	str	r2, [r3, #28]
        if (timestamp < HAL_GetTick())
 8002d3c:	f001 fd16 	bl	800476c <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	4b30      	ldr	r3, [pc, #192]	@ (8002e04 <PS2X_Reader+0x230>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d908      	bls.n	8002d5c <PS2X_Reader+0x188>
            timestamp = HAL_GetTick() + 25;
 8002d4a:	f001 fd0f 	bl	800476c <HAL_GetTick>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	3319      	adds	r3, #25
 8002d52:	4a2c      	ldr	r2, [pc, #176]	@ (8002e04 <PS2X_Reader+0x230>)
 8002d54:	6013      	str	r3, [r2, #0]
            ps2.ps2RX[0] = 0;
 8002d56:	4b27      	ldr	r3, [pc, #156]	@ (8002df4 <PS2X_Reader+0x220>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 6; i++)
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	607b      	str	r3, [r7, #4]
 8002d60:	e00e      	b.n	8002d80 <PS2X_Reader+0x1ac>
            ps2.l[i] = 0;
 8002d62:	4a24      	ldr	r2, [pc, #144]	@ (8002df4 <PS2X_Reader+0x220>)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3314      	adds	r3, #20
 8002d68:	2100      	movs	r1, #0
 8002d6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            ps2.r[i] = 0;
 8002d6e:	4a21      	ldr	r2, [pc, #132]	@ (8002df4 <PS2X_Reader+0x220>)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	330e      	adds	r3, #14
 8002d74:	2100      	movs	r1, #0
 8002d76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (int i = 0; i < 6; i++)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	607b      	str	r3, [r7, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b05      	cmp	r3, #5
 8002d84:	dded      	ble.n	8002d62 <PS2X_Reader+0x18e>
        if (ps2.ps2RX[0] >= 65 && ps2.ps2RX[0] <= 70) {
 8002d86:	4b1b      	ldr	r3, [pc, #108]	@ (8002df4 <PS2X_Reader+0x220>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b40      	cmp	r3, #64	@ 0x40
 8002d8c:	d90b      	bls.n	8002da6 <PS2X_Reader+0x1d2>
 8002d8e:	4b19      	ldr	r3, [pc, #100]	@ (8002df4 <PS2X_Reader+0x220>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b46      	cmp	r3, #70	@ 0x46
 8002d94:	d807      	bhi.n	8002da6 <PS2X_Reader+0x1d2>
            ps2.l[ps2.ps2RX[0] - 65] = 1;
 8002d96:	4b17      	ldr	r3, [pc, #92]	@ (8002df4 <PS2X_Reader+0x220>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	3b41      	subs	r3, #65	@ 0x41
 8002d9c:	4a15      	ldr	r2, [pc, #84]	@ (8002df4 <PS2X_Reader+0x220>)
 8002d9e:	3314      	adds	r3, #20
 8002da0:	2101      	movs	r1, #1
 8002da2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if (ps2.ps2RX[0] >= 73 && ps2.ps2RX[0] <= 78) {
 8002da6:	4b13      	ldr	r3, [pc, #76]	@ (8002df4 <PS2X_Reader+0x220>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b48      	cmp	r3, #72	@ 0x48
 8002dac:	d90b      	bls.n	8002dc6 <PS2X_Reader+0x1f2>
 8002dae:	4b11      	ldr	r3, [pc, #68]	@ (8002df4 <PS2X_Reader+0x220>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b4e      	cmp	r3, #78	@ 0x4e
 8002db4:	d807      	bhi.n	8002dc6 <PS2X_Reader+0x1f2>
            ps2.r[ps2.ps2RX[0] - 73] = 1;
 8002db6:	4b0f      	ldr	r3, [pc, #60]	@ (8002df4 <PS2X_Reader+0x220>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	3b49      	subs	r3, #73	@ 0x49
 8002dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8002df4 <PS2X_Reader+0x220>)
 8002dbe:	330e      	adds	r3, #14
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        if (ps2.ps2RX[0] == 67) {
 8002dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8002df4 <PS2X_Reader+0x220>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b43      	cmp	r3, #67	@ 0x43
 8002dcc:	d102      	bne.n	8002dd4 <PS2X_Reader+0x200>
            ps2.l[2] = 1;
 8002dce:	4b09      	ldr	r3, [pc, #36]	@ (8002df4 <PS2X_Reader+0x220>)
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	659a      	str	r2, [r3, #88]	@ 0x58
        if (ps2.ps2RX[0] == 68) {
 8002dd4:	4b07      	ldr	r3, [pc, #28]	@ (8002df4 <PS2X_Reader+0x220>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b44      	cmp	r3, #68	@ 0x44
 8002dda:	d102      	bne.n	8002de2 <PS2X_Reader+0x20e>
            ps2.l[3] = 1;
 8002ddc:	4b05      	ldr	r3, [pc, #20]	@ (8002df4 <PS2X_Reader+0x220>)
 8002dde:	2201      	movs	r2, #1
 8002de0:	65da      	str	r2, [r3, #92]	@ 0x5c
        handle_shelve_mode();
 8002de2:	f000 f811 	bl	8002e08 <handle_shelve_mode>
        handle_PIDPos_adjustment();
 8002de6:	f000 f877 	bl	8002ed8 <handle_PIDPos_adjustment>
}
 8002dea:	bf00      	nop
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	20000b88 	.word	0x20000b88
 8002df8:	20000c08 	.word	0x20000c08
 8002dfc:	20000b48 	.word	0x20000b48
 8002e00:	20000214 	.word	0x20000214
 8002e04:	20000360 	.word	0x20000360

08002e08 <handle_shelve_mode>:

void handle_shelve_mode()
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
    static uint32_t debounce_time = 0;
    uint32_t current_time = HAL_GetTick();
 8002e0e:	f001 fcad 	bl	800476c <HAL_GetTick>
 8002e12:	6078      	str	r0, [r7, #4]
    if (base.ShelveMode == 1)
 8002e14:	4b2b      	ldr	r3, [pc, #172]	@ (8002ec4 <handle_shelve_mode+0xbc>)
 8002e16:	8b1b      	ldrh	r3, [r3, #24]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d14f      	bne.n	8002ebc <handle_shelve_mode+0xb4>
    {
        if (ps2.ps2RX[0] == 76 && current_time > debounce_time)
 8002e1c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ec8 <handle_shelve_mode+0xc0>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b4c      	cmp	r3, #76	@ 0x4c
 8002e22:	d11d      	bne.n	8002e60 <handle_shelve_mode+0x58>
 8002e24:	4b29      	ldr	r3, [pc, #164]	@ (8002ecc <handle_shelve_mode+0xc4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d918      	bls.n	8002e60 <handle_shelve_mode+0x58>
        {
            // Press Select to save shelve
            base.Shelve[(count - 1) / 2] = AMT.Linear_Position;
 8002e2e:	4b28      	ldr	r3, [pc, #160]	@ (8002ed0 <handle_shelve_mode+0xc8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	0fda      	lsrs	r2, r3, #31
 8002e36:	4413      	add	r3, r2
 8002e38:	105b      	asrs	r3, r3, #1
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	4b25      	ldr	r3, [pc, #148]	@ (8002ed4 <handle_shelve_mode+0xcc>)
 8002e3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e40:	4920      	ldr	r1, [pc, #128]	@ (8002ec4 <handle_shelve_mode+0xbc>)
 8002e42:	1d83      	adds	r3, r0, #6
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	440b      	add	r3, r1
 8002e48:	3304      	adds	r3, #4
 8002e4a:	601a      	str	r2, [r3, #0]
            count += 1;
 8002e4c:	4b20      	ldr	r3, [pc, #128]	@ (8002ed0 <handle_shelve_mode+0xc8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	3301      	adds	r3, #1
 8002e52:	4a1f      	ldr	r2, [pc, #124]	@ (8002ed0 <handle_shelve_mode+0xc8>)
 8002e54:	6013      	str	r3, [r2, #0]
            debounce_time = current_time + 250; // Debounce delay of 250ms
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	33fa      	adds	r3, #250	@ 0xfa
 8002e5a:	4a1c      	ldr	r2, [pc, #112]	@ (8002ecc <handle_shelve_mode+0xc4>)
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	e02d      	b.n	8002ebc <handle_shelve_mode+0xb4>
        }
        else if (ps2.ps2RX[0] == 73 && current_time > debounce_time)
 8002e60:	4b19      	ldr	r3, [pc, #100]	@ (8002ec8 <handle_shelve_mode+0xc0>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b49      	cmp	r3, #73	@ 0x49
 8002e66:	d11d      	bne.n	8002ea4 <handle_shelve_mode+0x9c>
 8002e68:	4b18      	ldr	r3, [pc, #96]	@ (8002ecc <handle_shelve_mode+0xc4>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d918      	bls.n	8002ea4 <handle_shelve_mode+0x9c>
        {
            // Press Triangle to delete old array
            base.Shelve[((count - 1) / 2) - 1] = 0;
 8002e72:	4b17      	ldr	r3, [pc, #92]	@ (8002ed0 <handle_shelve_mode+0xc8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	0fda      	lsrs	r2, r3, #31
 8002e7a:	4413      	add	r3, r2
 8002e7c:	105b      	asrs	r3, r3, #1
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	4a10      	ldr	r2, [pc, #64]	@ (8002ec4 <handle_shelve_mode+0xbc>)
 8002e82:	3306      	adds	r3, #6
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	3304      	adds	r3, #4
 8002e8a:	f04f 0200 	mov.w	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
            count -= 1;
 8002e90:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed0 <handle_shelve_mode+0xc8>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	3b01      	subs	r3, #1
 8002e96:	4a0e      	ldr	r2, [pc, #56]	@ (8002ed0 <handle_shelve_mode+0xc8>)
 8002e98:	6013      	str	r3, [r2, #0]
            debounce_time = current_time + 250; // Debounce delay of 250ms
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	33fa      	adds	r3, #250	@ 0xfa
 8002e9e:	4a0b      	ldr	r2, [pc, #44]	@ (8002ecc <handle_shelve_mode+0xc4>)
 8002ea0:	6013      	str	r3, [r2, #0]
 8002ea2:	e00b      	b.n	8002ebc <handle_shelve_mode+0xb4>
        }
        else if (ps2.ps2RX[0] == 72 && base.ShelveMode == 1)
 8002ea4:	4b08      	ldr	r3, [pc, #32]	@ (8002ec8 <handle_shelve_mode+0xc0>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b48      	cmp	r3, #72	@ 0x48
 8002eaa:	d107      	bne.n	8002ebc <handle_shelve_mode+0xb4>
 8002eac:	4b05      	ldr	r3, [pc, #20]	@ (8002ec4 <handle_shelve_mode+0xbc>)
 8002eae:	8b1b      	ldrh	r3, [r3, #24]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d103      	bne.n	8002ebc <handle_shelve_mode+0xb4>
        {
            // Press Start to finish set shelves and send data to basesystem
            base.ShelveMode = 0;
 8002eb4:	4b03      	ldr	r3, [pc, #12]	@ (8002ec4 <handle_shelve_mode+0xbc>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	831a      	strh	r2, [r3, #24]
        }
    }
}
 8002eba:	e7ff      	b.n	8002ebc <handle_shelve_mode+0xb4>
 8002ebc:	bf00      	nop
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	20000304 	.word	0x20000304
 8002ec8:	20000b88 	.word	0x20000b88
 8002ecc:	20000364 	.word	0x20000364
 8002ed0:	2000023c 	.word	0x2000023c
 8002ed4:	20000b48 	.word	0x20000b48

08002ed8 <handle_PIDPos_adjustment>:

void handle_PIDPos_adjustment()
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
    static uint32_t debounce_time = 0;
    uint32_t current_time = HAL_GetTick();
 8002ede:	f001 fc45 	bl	800476c <HAL_GetTick>
 8002ee2:	6078      	str	r0, [r7, #4]

    if (current_time > debounce_time)
 8002ee4:	4b22      	ldr	r3, [pc, #136]	@ (8002f70 <handle_PIDPos_adjustment+0x98>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d936      	bls.n	8002f5c <handle_PIDPos_adjustment+0x84>
    {
        if (ps2.l[2] == 1)
 8002eee:	4b21      	ldr	r3, [pc, #132]	@ (8002f74 <handle_PIDPos_adjustment+0x9c>)
 8002ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d117      	bne.n	8002f26 <handle_PIDPos_adjustment+0x4e>
        {
            // Increase ps2.PIDPos
            ps2.PIDPos += 0.1;
 8002ef6:	4b1f      	ldr	r3, [pc, #124]	@ (8002f74 <handle_PIDPos_adjustment+0x9c>)
 8002ef8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fd faf0 	bl	80004e0 <__aeabi_f2d>
 8002f00:	a319      	add	r3, pc, #100	@ (adr r3, 8002f68 <handle_PIDPos_adjustment+0x90>)
 8002f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f06:	f7fd f98d 	bl	8000224 <__adddf3>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	4610      	mov	r0, r2
 8002f10:	4619      	mov	r1, r3
 8002f12:	f7fd fe0d 	bl	8000b30 <__aeabi_d2f>
 8002f16:	4603      	mov	r3, r0
 8002f18:	4a16      	ldr	r2, [pc, #88]	@ (8002f74 <handle_PIDPos_adjustment+0x9c>)
 8002f1a:	6793      	str	r3, [r2, #120]	@ 0x78
            debounce_time = current_time + 250; // Debounce delay of 250ms
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	33fa      	adds	r3, #250	@ 0xfa
 8002f20:	4a13      	ldr	r2, [pc, #76]	@ (8002f70 <handle_PIDPos_adjustment+0x98>)
 8002f22:	6013      	str	r3, [r2, #0]
            // Decrease ps2.PIDPos
            ps2.PIDPos -= 0.1;
            debounce_time = current_time + 250; // Debounce delay of 250ms
        }
    }
}
 8002f24:	e01a      	b.n	8002f5c <handle_PIDPos_adjustment+0x84>
        else if (ps2.l[3] == 1)
 8002f26:	4b13      	ldr	r3, [pc, #76]	@ (8002f74 <handle_PIDPos_adjustment+0x9c>)
 8002f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d116      	bne.n	8002f5c <handle_PIDPos_adjustment+0x84>
            ps2.PIDPos -= 0.1;
 8002f2e:	4b11      	ldr	r3, [pc, #68]	@ (8002f74 <handle_PIDPos_adjustment+0x9c>)
 8002f30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fd fad4 	bl	80004e0 <__aeabi_f2d>
 8002f38:	a30b      	add	r3, pc, #44	@ (adr r3, 8002f68 <handle_PIDPos_adjustment+0x90>)
 8002f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3e:	f7fd f96f 	bl	8000220 <__aeabi_dsub>
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	4610      	mov	r0, r2
 8002f48:	4619      	mov	r1, r3
 8002f4a:	f7fd fdf1 	bl	8000b30 <__aeabi_d2f>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	4a08      	ldr	r2, [pc, #32]	@ (8002f74 <handle_PIDPos_adjustment+0x9c>)
 8002f52:	6793      	str	r3, [r2, #120]	@ 0x78
            debounce_time = current_time + 250; // Debounce delay of 250ms
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	33fa      	adds	r3, #250	@ 0xfa
 8002f58:	4a05      	ldr	r2, [pc, #20]	@ (8002f70 <handle_PIDPos_adjustment+0x98>)
 8002f5a:	6013      	str	r3, [r2, #0]
}
 8002f5c:	bf00      	nop
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	f3af 8000 	nop.w
 8002f68:	9999999a 	.word	0x9999999a
 8002f6c:	3fb99999 	.word	0x3fb99999
 8002f70:	20000368 	.word	0x20000368
 8002f74:	20000b88 	.word	0x20000b88

08002f78 <Traject_init>:
float Time_dec;

//-------------------------------------------Function Code-------------------------------------------------------//

void Traject_init(Trap_Traj* Traj, float v_max, float a_max)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	ed87 0a02 	vstr	s0, [r7, #8]
 8002f84:	edc7 0a01 	vstr	s1, [r7, #4]
	Traj->Velo_max = v_max;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	601a      	str	r2, [r3, #0]
	Traj->Accel_max = a_max;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	605a      	str	r2, [r3, #4]

	Traj->currentAcceleration = 0;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	611a      	str	r2, [r3, #16]
	Traj->currentVelocity = 0;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f04f 0200 	mov.w	r2, #0
 8002fa2:	60da      	str	r2, [r3, #12]
	Traj->currentPosition = 0;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f04f 0200 	mov.w	r2, #0
 8002faa:	609a      	str	r2, [r3, #8]
}
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <Traject>:

void Traject(Trap_Traj* Traj, float Pos_initial, float Pos_final)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	ed87 0a02 	vstr	s0, [r7, #8]
 8002fc4:	edc7 0a01 	vstr	s1, [r7, #4]

	  Distance = Pos_final - Pos_initial;
 8002fc8:	ed97 7a01 	vldr	s14, [r7, #4]
 8002fcc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fd4:	4bb1      	ldr	r3, [pc, #708]	@ (800329c <Traject+0x2e4>)
 8002fd6:	edc3 7a00 	vstr	s15, [r3]
	  Time_acc = Traj->Velo_max / Traj->Accel_max;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	edd3 6a00 	vldr	s13, [r3]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	ed93 7a01 	vldr	s14, [r3, #4]
 8002fe6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fea:	4bad      	ldr	r3, [pc, #692]	@ (80032a0 <Traject+0x2e8>)
 8002fec:	edc3 7a00 	vstr	s15, [r3]
	  Time_dec = Time_acc;
 8002ff0:	4bab      	ldr	r3, [pc, #684]	@ (80032a0 <Traject+0x2e8>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4aab      	ldr	r2, [pc, #684]	@ (80032a4 <Traject+0x2ec>)
 8002ff6:	6013      	str	r3, [r2, #0]


	  if (Distance >0)
 8002ff8:	4ba8      	ldr	r3, [pc, #672]	@ (800329c <Traject+0x2e4>)
 8002ffa:	edd3 7a00 	vldr	s15, [r3]
 8002ffe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003006:	dd23      	ble.n	8003050 <Traject+0x98>
			{
		  Acc_max = Traj->Accel_max;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	4aa6      	ldr	r2, [pc, #664]	@ (80032a8 <Traject+0x2f0>)
 800300e:	6013      	str	r3, [r2, #0]
		  Vel_max = Traj->Velo_max;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4aa5      	ldr	r2, [pc, #660]	@ (80032ac <Traject+0x2f4>)
 8003016:	6013      	str	r3, [r2, #0]
		  Distance_Velo_Max = Distance - (Vel_max * Time_acc);
 8003018:	4ba0      	ldr	r3, [pc, #640]	@ (800329c <Traject+0x2e4>)
 800301a:	ed93 7a00 	vldr	s14, [r3]
 800301e:	4ba3      	ldr	r3, [pc, #652]	@ (80032ac <Traject+0x2f4>)
 8003020:	edd3 6a00 	vldr	s13, [r3]
 8003024:	4b9e      	ldr	r3, [pc, #632]	@ (80032a0 <Traject+0x2e8>)
 8003026:	edd3 7a00 	vldr	s15, [r3]
 800302a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800302e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003032:	4b9f      	ldr	r3, [pc, #636]	@ (80032b0 <Traject+0x2f8>)
 8003034:	edc3 7a00 	vstr	s15, [r3]
		  Time_Velo_const = Distance_Velo_Max / Vel_max;
 8003038:	4b9d      	ldr	r3, [pc, #628]	@ (80032b0 <Traject+0x2f8>)
 800303a:	edd3 6a00 	vldr	s13, [r3]
 800303e:	4b9b      	ldr	r3, [pc, #620]	@ (80032ac <Traject+0x2f4>)
 8003040:	ed93 7a00 	vldr	s14, [r3]
 8003044:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003048:	4b9a      	ldr	r3, [pc, #616]	@ (80032b4 <Traject+0x2fc>)
 800304a:	edc3 7a00 	vstr	s15, [r3]
 800304e:	e032      	b.n	80030b6 <Traject+0xfe>
			}
	  else if(Distance < 0)
 8003050:	4b92      	ldr	r3, [pc, #584]	@ (800329c <Traject+0x2e4>)
 8003052:	edd3 7a00 	vldr	s15, [r3]
 8003056:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800305a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800305e:	d52a      	bpl.n	80030b6 <Traject+0xfe>
	  {
		  Acc_max = -Traj->Accel_max;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	edd3 7a01 	vldr	s15, [r3, #4]
 8003066:	eef1 7a67 	vneg.f32	s15, s15
 800306a:	4b8f      	ldr	r3, [pc, #572]	@ (80032a8 <Traject+0x2f0>)
 800306c:	edc3 7a00 	vstr	s15, [r3]
		  Vel_max = -Traj->Velo_max;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	edd3 7a00 	vldr	s15, [r3]
 8003076:	eef1 7a67 	vneg.f32	s15, s15
 800307a:	4b8c      	ldr	r3, [pc, #560]	@ (80032ac <Traject+0x2f4>)
 800307c:	edc3 7a00 	vstr	s15, [r3]
		  Distance_Velo_Max = Distance - (Vel_max * Time_acc);
 8003080:	4b86      	ldr	r3, [pc, #536]	@ (800329c <Traject+0x2e4>)
 8003082:	ed93 7a00 	vldr	s14, [r3]
 8003086:	4b89      	ldr	r3, [pc, #548]	@ (80032ac <Traject+0x2f4>)
 8003088:	edd3 6a00 	vldr	s13, [r3]
 800308c:	4b84      	ldr	r3, [pc, #528]	@ (80032a0 <Traject+0x2e8>)
 800308e:	edd3 7a00 	vldr	s15, [r3]
 8003092:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003096:	ee77 7a67 	vsub.f32	s15, s14, s15
 800309a:	4b85      	ldr	r3, [pc, #532]	@ (80032b0 <Traject+0x2f8>)
 800309c:	edc3 7a00 	vstr	s15, [r3]
		  Time_Velo_const = Distance_Velo_Max / Vel_max;
 80030a0:	4b83      	ldr	r3, [pc, #524]	@ (80032b0 <Traject+0x2f8>)
 80030a2:	edd3 6a00 	vldr	s13, [r3]
 80030a6:	4b81      	ldr	r3, [pc, #516]	@ (80032ac <Traject+0x2f4>)
 80030a8:	ed93 7a00 	vldr	s14, [r3]
 80030ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030b0:	4b80      	ldr	r3, [pc, #512]	@ (80032b4 <Traject+0x2fc>)
 80030b2:	edc3 7a00 	vstr	s15, [r3]
	}
	// Update trajectory phase
	time_ref1 = Time_acc + Time_Velo_const;
 80030b6:	4b7a      	ldr	r3, [pc, #488]	@ (80032a0 <Traject+0x2e8>)
 80030b8:	ed93 7a00 	vldr	s14, [r3]
 80030bc:	4b7d      	ldr	r3, [pc, #500]	@ (80032b4 <Traject+0x2fc>)
 80030be:	edd3 7a00 	vldr	s15, [r3]
 80030c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030c6:	4b7c      	ldr	r3, [pc, #496]	@ (80032b8 <Traject+0x300>)
 80030c8:	edc3 7a00 	vstr	s15, [r3]
	time_ref2 = time_ref1 + Time_dec;
 80030cc:	4b7a      	ldr	r3, [pc, #488]	@ (80032b8 <Traject+0x300>)
 80030ce:	ed93 7a00 	vldr	s14, [r3]
 80030d2:	4b74      	ldr	r3, [pc, #464]	@ (80032a4 <Traject+0x2ec>)
 80030d4:	edd3 7a00 	vldr	s15, [r3]
 80030d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030dc:	4b77      	ldr	r3, [pc, #476]	@ (80032bc <Traject+0x304>)
 80030de:	edc3 7a00 	vstr	s15, [r3]
	if(Time_Velo_const >0)
 80030e2:	4b74      	ldr	r3, [pc, #464]	@ (80032b4 <Traject+0x2fc>)
 80030e4:	edd3 7a00 	vldr	s15, [r3]
 80030e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f0:	f340 80cb 	ble.w	800328a <Traject+0x2d2>
	{
//		Time_acc_under = sqrt(Distance/Acc_max);
		if (elapsedTime < Time_acc)
 80030f4:	4b72      	ldr	r3, [pc, #456]	@ (80032c0 <Traject+0x308>)
 80030f6:	ed93 7a00 	vldr	s14, [r3]
 80030fa:	4b69      	ldr	r3, [pc, #420]	@ (80032a0 <Traject+0x2e8>)
 80030fc:	edd3 7a00 	vldr	s15, [r3]
 8003100:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003108:	d52f      	bpl.n	800316a <Traject+0x1b2>
		{
			// Acceleration phase
			Traj->currentAcceleration = Acc_max;
 800310a:	4b67      	ldr	r3, [pc, #412]	@ (80032a8 <Traject+0x2f0>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	611a      	str	r2, [r3, #16]
			Traj->currentVelocity = Acc_max * elapsedTime;
 8003112:	4b65      	ldr	r3, [pc, #404]	@ (80032a8 <Traject+0x2f0>)
 8003114:	ed93 7a00 	vldr	s14, [r3]
 8003118:	4b69      	ldr	r3, [pc, #420]	@ (80032c0 <Traject+0x308>)
 800311a:	edd3 7a00 	vldr	s15, [r3]
 800311e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	edc3 7a03 	vstr	s15, [r3, #12]
			Traj->currentPosition = 0.5f * Acc_max * elapsedTime * elapsedTime + Pos_initial;
 8003128:	4b5f      	ldr	r3, [pc, #380]	@ (80032a8 <Traject+0x2f0>)
 800312a:	edd3 7a00 	vldr	s15, [r3]
 800312e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003132:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003136:	4b62      	ldr	r3, [pc, #392]	@ (80032c0 <Traject+0x308>)
 8003138:	edd3 7a00 	vldr	s15, [r3]
 800313c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003140:	4b5f      	ldr	r3, [pc, #380]	@ (80032c0 <Traject+0x308>)
 8003142:	edd3 7a00 	vldr	s15, [r3]
 8003146:	ee27 7a27 	vmul.f32	s14, s14, s15
 800314a:	edd7 7a02 	vldr	s15, [r7, #8]
 800314e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	edc3 7a02 	vstr	s15, [r3, #8]
			temp_pos_acc = Traj->currentPosition;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	4a59      	ldr	r2, [pc, #356]	@ (80032c4 <Traject+0x30c>)
 800315e:	6013      	str	r3, [r2, #0]
			temp_pos_const = Traj->currentPosition;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	4a58      	ldr	r2, [pc, #352]	@ (80032c8 <Traject+0x310>)
 8003166:	6013      	str	r3, [r2, #0]
 8003168:	e08f      	b.n	800328a <Traject+0x2d2>
		}
		else if (elapsedTime < time_ref1 )
 800316a:	4b55      	ldr	r3, [pc, #340]	@ (80032c0 <Traject+0x308>)
 800316c:	ed93 7a00 	vldr	s14, [r3]
 8003170:	4b51      	ldr	r3, [pc, #324]	@ (80032b8 <Traject+0x300>)
 8003172:	edd3 7a00 	vldr	s15, [r3]
 8003176:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800317a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800317e:	d521      	bpl.n	80031c4 <Traject+0x20c>
		{
			// Constant velocity phase
			Traj->currentAcceleration = 0;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	611a      	str	r2, [r3, #16]
			Traj->currentVelocity = Vel_max;
 8003188:	4b48      	ldr	r3, [pc, #288]	@ (80032ac <Traject+0x2f4>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	60da      	str	r2, [r3, #12]
			Traj->currentPosition = (Vel_max * (elapsedTime-Time_acc)) + temp_pos_acc;
 8003190:	4b4b      	ldr	r3, [pc, #300]	@ (80032c0 <Traject+0x308>)
 8003192:	ed93 7a00 	vldr	s14, [r3]
 8003196:	4b42      	ldr	r3, [pc, #264]	@ (80032a0 <Traject+0x2e8>)
 8003198:	edd3 7a00 	vldr	s15, [r3]
 800319c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80031a0:	4b42      	ldr	r3, [pc, #264]	@ (80032ac <Traject+0x2f4>)
 80031a2:	edd3 7a00 	vldr	s15, [r3]
 80031a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031aa:	4b46      	ldr	r3, [pc, #280]	@ (80032c4 <Traject+0x30c>)
 80031ac:	edd3 7a00 	vldr	s15, [r3]
 80031b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	edc3 7a02 	vstr	s15, [r3, #8]
			temp_pos_const = Traj->currentPosition;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	4a42      	ldr	r2, [pc, #264]	@ (80032c8 <Traject+0x310>)
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	e062      	b.n	800328a <Traject+0x2d2>
		}
		else if (elapsedTime < time_ref2)
 80031c4:	4b3e      	ldr	r3, [pc, #248]	@ (80032c0 <Traject+0x308>)
 80031c6:	ed93 7a00 	vldr	s14, [r3]
 80031ca:	4b3c      	ldr	r3, [pc, #240]	@ (80032bc <Traject+0x304>)
 80031cc:	edd3 7a00 	vldr	s15, [r3]
 80031d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d8:	d54f      	bpl.n	800327a <Traject+0x2c2>
		{
			// Deceleration phase
			Traj->currentAcceleration = -Acc_max;
 80031da:	4b33      	ldr	r3, [pc, #204]	@ (80032a8 <Traject+0x2f0>)
 80031dc:	edd3 7a00 	vldr	s15, [r3]
 80031e0:	eef1 7a67 	vneg.f32	s15, s15
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	edc3 7a04 	vstr	s15, [r3, #16]
			Traj->currentVelocity = -(Acc_max * (elapsedTime-time_ref1)) + Vel_max;
 80031ea:	4b30      	ldr	r3, [pc, #192]	@ (80032ac <Traject+0x2f4>)
 80031ec:	ed93 7a00 	vldr	s14, [r3]
 80031f0:	4b33      	ldr	r3, [pc, #204]	@ (80032c0 <Traject+0x308>)
 80031f2:	edd3 6a00 	vldr	s13, [r3]
 80031f6:	4b30      	ldr	r3, [pc, #192]	@ (80032b8 <Traject+0x300>)
 80031f8:	edd3 7a00 	vldr	s15, [r3]
 80031fc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003200:	4b29      	ldr	r3, [pc, #164]	@ (80032a8 <Traject+0x2f0>)
 8003202:	edd3 7a00 	vldr	s15, [r3]
 8003206:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800320a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	edc3 7a03 	vstr	s15, [r3, #12]
			Traj->currentPosition = Traj->currentVelocity*(elapsedTime-time_ref1)+(0.5f*Acc_max*(elapsedTime-time_ref1)*(elapsedTime-time_ref1))+temp_pos_const ;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	ed93 7a03 	vldr	s14, [r3, #12]
 800321a:	4b29      	ldr	r3, [pc, #164]	@ (80032c0 <Traject+0x308>)
 800321c:	edd3 6a00 	vldr	s13, [r3]
 8003220:	4b25      	ldr	r3, [pc, #148]	@ (80032b8 <Traject+0x300>)
 8003222:	edd3 7a00 	vldr	s15, [r3]
 8003226:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800322a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800322e:	4b1e      	ldr	r3, [pc, #120]	@ (80032a8 <Traject+0x2f0>)
 8003230:	edd3 7a00 	vldr	s15, [r3]
 8003234:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8003238:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800323c:	4b20      	ldr	r3, [pc, #128]	@ (80032c0 <Traject+0x308>)
 800323e:	ed93 6a00 	vldr	s12, [r3]
 8003242:	4b1d      	ldr	r3, [pc, #116]	@ (80032b8 <Traject+0x300>)
 8003244:	edd3 7a00 	vldr	s15, [r3]
 8003248:	ee76 7a67 	vsub.f32	s15, s12, s15
 800324c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003250:	4b1b      	ldr	r3, [pc, #108]	@ (80032c0 <Traject+0x308>)
 8003252:	ed93 6a00 	vldr	s12, [r3]
 8003256:	4b18      	ldr	r3, [pc, #96]	@ (80032b8 <Traject+0x300>)
 8003258:	edd3 7a00 	vldr	s15, [r3]
 800325c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003260:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003264:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003268:	4b17      	ldr	r3, [pc, #92]	@ (80032c8 <Traject+0x310>)
 800326a:	edd3 7a00 	vldr	s15, [r3]
 800326e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	edc3 7a02 	vstr	s15, [r3, #8]
 8003278:	e007      	b.n	800328a <Traject+0x2d2>
		}
		else {
			// Trajectory complete
			Traj->currentAcceleration = 0.0f;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	611a      	str	r2, [r3, #16]
			Traj->currentVelocity = 0.0f;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	60da      	str	r2, [r3, #12]
//			elapsedTime = 0.0f;
		}
	}
	if (Time_Velo_const <= 0)
 800328a:	4b0a      	ldr	r3, [pc, #40]	@ (80032b4 <Traject+0x2fc>)
 800328c:	edd3 7a00 	vldr	s15, [r3]
 8003290:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003298:	d918      	bls.n	80032cc <Traject+0x314>

		}


	}
}
 800329a:	e0d2      	b.n	8003442 <Traject+0x48a>
 800329c:	20000394 	.word	0x20000394
 80032a0:	20000398 	.word	0x20000398
 80032a4:	2000039c 	.word	0x2000039c
 80032a8:	2000036c 	.word	0x2000036c
 80032ac:	20000370 	.word	0x20000370
 80032b0:	20000374 	.word	0x20000374
 80032b4:	20000378 	.word	0x20000378
 80032b8:	2000038c 	.word	0x2000038c
 80032bc:	20000390 	.word	0x20000390
 80032c0:	20001108 	.word	0x20001108
 80032c4:	20000380 	.word	0x20000380
 80032c8:	20000384 	.word	0x20000384
		Time_acc_under = sqrt(Distance/Acc_max);
 80032cc:	4b5f      	ldr	r3, [pc, #380]	@ (800344c <Traject+0x494>)
 80032ce:	ed93 7a00 	vldr	s14, [r3]
 80032d2:	4b5f      	ldr	r3, [pc, #380]	@ (8003450 <Traject+0x498>)
 80032d4:	edd3 7a00 	vldr	s15, [r3]
 80032d8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80032dc:	ee16 0a90 	vmov	r0, s13
 80032e0:	f7fd f8fe 	bl	80004e0 <__aeabi_f2d>
 80032e4:	4602      	mov	r2, r0
 80032e6:	460b      	mov	r3, r1
 80032e8:	ec43 2b10 	vmov	d0, r2, r3
 80032ec:	f008 fa3a 	bl	800b764 <sqrt>
 80032f0:	ec53 2b10 	vmov	r2, r3, d0
 80032f4:	4610      	mov	r0, r2
 80032f6:	4619      	mov	r1, r3
 80032f8:	f7fd fc1a 	bl	8000b30 <__aeabi_d2f>
 80032fc:	4603      	mov	r3, r0
 80032fe:	4a55      	ldr	r2, [pc, #340]	@ (8003454 <Traject+0x49c>)
 8003300:	6013      	str	r3, [r2, #0]
		if (elapsedTime < Time_acc_under)
 8003302:	4b55      	ldr	r3, [pc, #340]	@ (8003458 <Traject+0x4a0>)
 8003304:	ed93 7a00 	vldr	s14, [r3]
 8003308:	4b52      	ldr	r3, [pc, #328]	@ (8003454 <Traject+0x49c>)
 800330a:	edd3 7a00 	vldr	s15, [r3]
 800330e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003316:	d52f      	bpl.n	8003378 <Traject+0x3c0>
			Traj->currentAcceleration = Acc_max;
 8003318:	4b4d      	ldr	r3, [pc, #308]	@ (8003450 <Traject+0x498>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	611a      	str	r2, [r3, #16]
			Traj->currentVelocity = Acc_max * elapsedTime;
 8003320:	4b4b      	ldr	r3, [pc, #300]	@ (8003450 <Traject+0x498>)
 8003322:	ed93 7a00 	vldr	s14, [r3]
 8003326:	4b4c      	ldr	r3, [pc, #304]	@ (8003458 <Traject+0x4a0>)
 8003328:	edd3 7a00 	vldr	s15, [r3]
 800332c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	edc3 7a03 	vstr	s15, [r3, #12]
			Traj->currentPosition = Pos_initial + 0.5f * Acc_max * elapsedTime * elapsedTime;
 8003336:	4b46      	ldr	r3, [pc, #280]	@ (8003450 <Traject+0x498>)
 8003338:	edd3 7a00 	vldr	s15, [r3]
 800333c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003340:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003344:	4b44      	ldr	r3, [pc, #272]	@ (8003458 <Traject+0x4a0>)
 8003346:	edd3 7a00 	vldr	s15, [r3]
 800334a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800334e:	4b42      	ldr	r3, [pc, #264]	@ (8003458 <Traject+0x4a0>)
 8003350:	edd3 7a00 	vldr	s15, [r3]
 8003354:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003358:	edd7 7a02 	vldr	s15, [r7, #8]
 800335c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	edc3 7a02 	vstr	s15, [r3, #8]
			temp_pos_acc = Traj->currentPosition;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	4a3c      	ldr	r2, [pc, #240]	@ (800345c <Traject+0x4a4>)
 800336c:	6013      	str	r3, [r2, #0]
			temp_velo_acc = Traj->currentVelocity;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	4a3b      	ldr	r2, [pc, #236]	@ (8003460 <Traject+0x4a8>)
 8003374:	6013      	str	r3, [r2, #0]
}
 8003376:	e064      	b.n	8003442 <Traject+0x48a>
		else if (elapsedTime < 2*Time_acc_under)
 8003378:	4b36      	ldr	r3, [pc, #216]	@ (8003454 <Traject+0x49c>)
 800337a:	edd3 7a00 	vldr	s15, [r3]
 800337e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003382:	4b35      	ldr	r3, [pc, #212]	@ (8003458 <Traject+0x4a0>)
 8003384:	edd3 7a00 	vldr	s15, [r3]
 8003388:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800338c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003390:	dd4f      	ble.n	8003432 <Traject+0x47a>
			Traj->currentAcceleration = -Acc_max;
 8003392:	4b2f      	ldr	r3, [pc, #188]	@ (8003450 <Traject+0x498>)
 8003394:	edd3 7a00 	vldr	s15, [r3]
 8003398:	eef1 7a67 	vneg.f32	s15, s15
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	edc3 7a04 	vstr	s15, [r3, #16]
			Traj->currentVelocity = temp_velo_acc - Acc_max*(elapsedTime-Time_acc_under);
 80033a2:	4b2f      	ldr	r3, [pc, #188]	@ (8003460 <Traject+0x4a8>)
 80033a4:	ed93 7a00 	vldr	s14, [r3]
 80033a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003458 <Traject+0x4a0>)
 80033aa:	edd3 6a00 	vldr	s13, [r3]
 80033ae:	4b29      	ldr	r3, [pc, #164]	@ (8003454 <Traject+0x49c>)
 80033b0:	edd3 7a00 	vldr	s15, [r3]
 80033b4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80033b8:	4b25      	ldr	r3, [pc, #148]	@ (8003450 <Traject+0x498>)
 80033ba:	edd3 7a00 	vldr	s15, [r3]
 80033be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	edc3 7a03 	vstr	s15, [r3, #12]
			Traj->currentPosition = temp_pos_acc + Traj->currentVelocity *(elapsedTime-Time_acc_under)+(0.5f*Acc_max*(elapsedTime-Time_acc_under)*(elapsedTime-Time_acc_under));
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	ed93 7a03 	vldr	s14, [r3, #12]
 80033d2:	4b21      	ldr	r3, [pc, #132]	@ (8003458 <Traject+0x4a0>)
 80033d4:	edd3 6a00 	vldr	s13, [r3]
 80033d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003454 <Traject+0x49c>)
 80033da:	edd3 7a00 	vldr	s15, [r3]
 80033de:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80033e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033e6:	4b1d      	ldr	r3, [pc, #116]	@ (800345c <Traject+0x4a4>)
 80033e8:	edd3 7a00 	vldr	s15, [r3]
 80033ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033f0:	4b17      	ldr	r3, [pc, #92]	@ (8003450 <Traject+0x498>)
 80033f2:	edd3 7a00 	vldr	s15, [r3]
 80033f6:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80033fa:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80033fe:	4b16      	ldr	r3, [pc, #88]	@ (8003458 <Traject+0x4a0>)
 8003400:	ed93 6a00 	vldr	s12, [r3]
 8003404:	4b13      	ldr	r3, [pc, #76]	@ (8003454 <Traject+0x49c>)
 8003406:	edd3 7a00 	vldr	s15, [r3]
 800340a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800340e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003412:	4b11      	ldr	r3, [pc, #68]	@ (8003458 <Traject+0x4a0>)
 8003414:	ed93 6a00 	vldr	s12, [r3]
 8003418:	4b0e      	ldr	r3, [pc, #56]	@ (8003454 <Traject+0x49c>)
 800341a:	edd3 7a00 	vldr	s15, [r3]
 800341e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003422:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003426:	ee77 7a27 	vadd.f32	s15, s14, s15
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8003430:	e007      	b.n	8003442 <Traject+0x48a>
			Traj->currentAcceleration = 0.0f;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	611a      	str	r2, [r3, #16]
			Traj->currentVelocity = 0.0f;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	60da      	str	r2, [r3, #12]
}
 8003442:	bf00      	nop
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	20000394 	.word	0x20000394
 8003450:	2000036c 	.word	0x2000036c
 8003454:	2000037c 	.word	0x2000037c
 8003458:	20001108 	.word	0x20001108
 800345c:	20000380 	.word	0x20000380
 8003460:	20000388 	.word	0x20000388

08003464 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003464:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003468:	b086      	sub	sp, #24
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800346c:	f001 f919 	bl	80046a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003470:	f000 f8d0 	bl	8003614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003474:	f000 fc38 	bl	8003ce8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003478:	f000 fc04 	bl	8003c84 <MX_DMA_Init>
  MX_TIM2_Init();
 800347c:	f000 f98e 	bl	800379c <MX_TIM2_Init>
  MX_TIM3_Init();
 8003480:	f000 f9e0 	bl	8003844 <MX_TIM3_Init>
  MX_TIM5_Init();
 8003484:	f000 faae 	bl	80039e4 <MX_TIM5_Init>
  MX_UART4_Init();
 8003488:	f000 fb60 	bl	8003b4c <MX_UART4_Init>
  MX_TIM4_Init();
 800348c:	f000 fa5c 	bl	8003948 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8003490:	f000 fbaa 	bl	8003be8 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8003494:	f000 fb2a 	bl	8003aec <MX_TIM16_Init>
  MX_TIM6_Init();
 8003498:	f000 faf2 	bl	8003a80 <MX_TIM6_Init>
  MX_ADC1_Init();
 800349c:	f000 f906 	bl	80036ac <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);					// AMT Encoder
 80034a0:	4846      	ldr	r0, [pc, #280]	@ (80035bc <main+0x158>)
 80034a2:	f004 f91b 	bl	80076dc <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);					// Output compare
 80034a6:	4846      	ldr	r0, [pc, #280]	@ (80035c0 <main+0x15c>)
 80034a8:	f004 f918 	bl	80076dc <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim6);					// Trajectory trigger
 80034ac:	4845      	ldr	r0, [pc, #276]	@ (80035c4 <main+0x160>)
 80034ae:	f004 f915 	bl	80076dc <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);        // PWM
 80034b2:	2100      	movs	r1, #0
 80034b4:	4842      	ldr	r0, [pc, #264]	@ (80035c0 <main+0x15c>)
 80034b6:	f004 fa67 	bl	8007988 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_2);        // Direction
 80034ba:	2104      	movs	r1, #4
 80034bc:	4840      	ldr	r0, [pc, #256]	@ (80035c0 <main+0x15c>)
 80034be:	f004 fa63 	bl	8007988 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80034c2:	4841      	ldr	r0, [pc, #260]	@ (80035c8 <main+0x164>)
 80034c4:	f004 f97a 	bl	80077bc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 80034c8:	4840      	ldr	r0, [pc, #256]	@ (80035cc <main+0x168>)
 80034ca:	f004 f977 	bl	80077bc <HAL_TIM_Base_Start_IT>
  hmodbus.huart = &huart2;
 80034ce:	4b40      	ldr	r3, [pc, #256]	@ (80035d0 <main+0x16c>)
 80034d0:	4a40      	ldr	r2, [pc, #256]	@ (80035d4 <main+0x170>)
 80034d2:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 80034d4:	4b3e      	ldr	r3, [pc, #248]	@ (80035d0 <main+0x16c>)
 80034d6:	4a40      	ldr	r2, [pc, #256]	@ (80035d8 <main+0x174>)
 80034d8:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80034da:	4b3d      	ldr	r3, [pc, #244]	@ (80035d0 <main+0x16c>)
 80034dc:	2215      	movs	r2, #21
 80034de:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 80034e0:	4b3b      	ldr	r3, [pc, #236]	@ (80035d0 <main+0x16c>)
 80034e2:	22c8      	movs	r2, #200	@ 0xc8
 80034e4:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 80034e6:	493d      	ldr	r1, [pc, #244]	@ (80035dc <main+0x178>)
 80034e8:	4839      	ldr	r0, [pc, #228]	@ (80035d0 <main+0x16c>)
 80034ea:	f7fe fc21 	bl	8001d30 <Modbus_init>

  float PID_pos_K[3] = {12 ,0.003, 0.0001};
 80034ee:	4a3c      	ldr	r2, [pc, #240]	@ (80035e0 <main+0x17c>)
 80034f0:	f107 030c 	add.w	r3, r7, #12
 80034f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80034f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    float PID_velo_K[3] = {7.0 ,0.0022, 0.0001};
 80034fa:	4a3a      	ldr	r2, [pc, #232]	@ (80035e4 <main+0x180>)
 80034fc:	463b      	mov	r3, r7
 80034fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8003500:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  // Velocity 450 mm/s
//  float PID_pos_K[3] = {17 ,0.002, 0.0001};
//  float PID_velo_K[3] = {9 ,0.00002, 0.0};

  // Initialize ASRS
  Traject_init(&Traj,550, 600);				// V_max, A_max
 8003504:	eddf 0a38 	vldr	s1, [pc, #224]	@ 80035e8 <main+0x184>
 8003508:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 80035ec <main+0x188>
 800350c:	4838      	ldr	r0, [pc, #224]	@ (80035f0 <main+0x18c>)
 800350e:	f7ff fd33 	bl	8002f78 <Traject_init>
//  Kalman_Start(&Vel_filtered);
  AMT_encoder_init(&AMT, &htim2);
 8003512:	492a      	ldr	r1, [pc, #168]	@ (80035bc <main+0x158>)
 8003514:	4837      	ldr	r0, [pc, #220]	@ (80035f4 <main+0x190>)
 8003516:	f7fe faef 	bl	8001af8 <AMT_encoder_init>
  MOTOR_init(&MT, &htim3,TIM_CHANNEL_2, TIM_CHANNEL_1);
 800351a:	2300      	movs	r3, #0
 800351c:	2204      	movs	r2, #4
 800351e:	4928      	ldr	r1, [pc, #160]	@ (80035c0 <main+0x15c>)
 8003520:	4835      	ldr	r0, [pc, #212]	@ (80035f8 <main+0x194>)
 8003522:	f7fe fef9 	bl	8002318 <MOTOR_init>
  PID_controller_init(&PID_pos,PID_pos_K[0],PID_pos_K[1],PID_pos_K[2]);
 8003526:	edd7 7a03 	vldr	s15, [r7, #12]
 800352a:	ed97 7a04 	vldr	s14, [r7, #16]
 800352e:	edd7 6a05 	vldr	s13, [r7, #20]
 8003532:	eeb0 1a66 	vmov.f32	s2, s13
 8003536:	eef0 0a47 	vmov.f32	s1, s14
 800353a:	eeb0 0a67 	vmov.f32	s0, s15
 800353e:	482f      	ldr	r0, [pc, #188]	@ (80035fc <main+0x198>)
 8003540:	f7ff f986 	bl	8002850 <PID_controller_init>
  PID_controller_init(&PID_velo,PID_velo_K[0],PID_velo_K[1],PID_velo_K[3]);
 8003544:	edd7 7a00 	vldr	s15, [r7]
 8003548:	ed97 7a01 	vldr	s14, [r7, #4]
 800354c:	edd7 6a03 	vldr	s13, [r7, #12]
 8003550:	eeb0 1a66 	vmov.f32	s2, s13
 8003554:	eef0 0a47 	vmov.f32	s1, s14
 8003558:	eeb0 0a67 	vmov.f32	s0, s15
 800355c:	4828      	ldr	r0, [pc, #160]	@ (8003600 <main+0x19c>)
 800355e:	f7ff f977 	bl	8002850 <PID_controller_init>

    /* USER CODE BEGIN 3 */

	  // Feedback to base system 5 Hz
	  static uint64_t timestamps =0;
	  if(HAL_GetTick() > timestamps)
 8003562:	f001 f903 	bl	800476c <HAL_GetTick>
 8003566:	4603      	mov	r3, r0
 8003568:	2200      	movs	r2, #0
 800356a:	461c      	mov	r4, r3
 800356c:	4615      	mov	r5, r2
 800356e:	4b25      	ldr	r3, [pc, #148]	@ (8003604 <main+0x1a0>)
 8003570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003574:	42a2      	cmp	r2, r4
 8003576:	41ab      	sbcs	r3, r5
 8003578:	d20b      	bcs.n	8003592 <main+0x12e>
	  {
		  timestamps =HAL_GetTick() + 100;		//ms
 800357a:	f001 f8f7 	bl	800476c <HAL_GetTick>
 800357e:	4603      	mov	r3, r0
 8003580:	3364      	adds	r3, #100	@ 0x64
 8003582:	2200      	movs	r2, #0
 8003584:	4698      	mov	r8, r3
 8003586:	4691      	mov	r9, r2
 8003588:	4b1e      	ldr	r3, [pc, #120]	@ (8003604 <main+0x1a0>)
 800358a:	e9c3 8900 	strd	r8, r9, [r3]
	  	  Heartbeat();
 800358e:	f7fd fdbf 	bl	8001110 <Heartbeat>
	  }

	  // UI & Gripper
	  Vacuum();
 8003592:	f7fd fe29 	bl	80011e8 <Vacuum>
	  GripperMovement();
 8003596:	f7fd fe4b 	bl	8001230 <GripperMovement>
	  Modbus_Protocal_Worker();
 800359a:	f7fe fc55 	bl	8001e48 <Modbus_Protocal_Worker>
	  Routine();
 800359e:	f7fd fdc5 	bl	800112c <Routine>

////	  //Ps2
	  HAL_UART_Receive(&huart4,ps2.ps2RX, 10 ,10);
 80035a2:	230a      	movs	r3, #10
 80035a4:	220a      	movs	r2, #10
 80035a6:	4918      	ldr	r1, [pc, #96]	@ (8003608 <main+0x1a4>)
 80035a8:	4818      	ldr	r0, [pc, #96]	@ (800360c <main+0x1a8>)
 80035aa:	f006 f9f9 	bl	80099a0 <HAL_UART_Receive>
	  if (base.BaseStatus == 1){
 80035ae:	4b18      	ldr	r3, [pc, #96]	@ (8003610 <main+0x1ac>)
 80035b0:	881b      	ldrh	r3, [r3, #0]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d1d5      	bne.n	8003562 <main+0xfe>
		  SetShelves();
 80035b6:	f7fd fe6d 	bl	8001294 <SetShelves>
  {
 80035ba:	e7d2      	b.n	8003562 <main+0xfe>
 80035bc:	2000040c 	.word	0x2000040c
 80035c0:	200004d8 	.word	0x200004d8
 80035c4:	2000073c 	.word	0x2000073c
 80035c8:	200005a4 	.word	0x200005a4
 80035cc:	20000670 	.word	0x20000670
 80035d0:	20000c24 	.word	0x20000c24
 80035d4:	200009a0 	.word	0x200009a0
 80035d8:	20000808 	.word	0x20000808
 80035dc:	2000110c 	.word	0x2000110c
 80035e0:	0800b988 	.word	0x0800b988
 80035e4:	0800b994 	.word	0x0800b994
 80035e8:	44160000 	.word	0x44160000
 80035ec:	44098000 	.word	0x44098000
 80035f0:	20000b34 	.word	0x20000b34
 80035f4:	20000b48 	.word	0x20000b48
 80035f8:	20000b2c 	.word	0x20000b2c
 80035fc:	200002e8 	.word	0x200002e8
 8003600:	20000c08 	.word	0x20000c08
 8003604:	200012a0 	.word	0x200012a0
 8003608:	20000b88 	.word	0x20000b88
 800360c:	200008d4 	.word	0x200008d4
 8003610:	20000304 	.word	0x20000304

08003614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b094      	sub	sp, #80	@ 0x50
 8003618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800361a:	f107 0318 	add.w	r3, r7, #24
 800361e:	2238      	movs	r2, #56	@ 0x38
 8003620:	2100      	movs	r1, #0
 8003622:	4618      	mov	r0, r3
 8003624:	f008 f85e 	bl	800b6e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003628:	1d3b      	adds	r3, r7, #4
 800362a:	2200      	movs	r2, #0
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	605a      	str	r2, [r3, #4]
 8003630:	609a      	str	r2, [r3, #8]
 8003632:	60da      	str	r2, [r3, #12]
 8003634:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003636:	2000      	movs	r0, #0
 8003638:	f002 ffbc 	bl	80065b4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800363c:	2302      	movs	r3, #2
 800363e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003640:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003644:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003646:	2340      	movs	r3, #64	@ 0x40
 8003648:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800364a:	2302      	movs	r3, #2
 800364c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800364e:	2302      	movs	r3, #2
 8003650:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003652:	2304      	movs	r3, #4
 8003654:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003656:	2355      	movs	r3, #85	@ 0x55
 8003658:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800365a:	2302      	movs	r3, #2
 800365c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800365e:	2302      	movs	r3, #2
 8003660:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003662:	2302      	movs	r3, #2
 8003664:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003666:	f107 0318 	add.w	r3, r7, #24
 800366a:	4618      	mov	r0, r3
 800366c:	f003 f856 	bl	800671c <HAL_RCC_OscConfig>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8003676:	f000 fced 	bl	8004054 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800367a:	230f      	movs	r3, #15
 800367c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800367e:	2303      	movs	r3, #3
 8003680:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003682:	2300      	movs	r3, #0
 8003684:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003686:	2300      	movs	r3, #0
 8003688:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800368a:	2300      	movs	r3, #0
 800368c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800368e:	1d3b      	adds	r3, r7, #4
 8003690:	2104      	movs	r1, #4
 8003692:	4618      	mov	r0, r3
 8003694:	f003 fb54 	bl	8006d40 <HAL_RCC_ClockConfig>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800369e:	f000 fcd9 	bl	8004054 <Error_Handler>
  }
}
 80036a2:	bf00      	nop
 80036a4:	3750      	adds	r7, #80	@ 0x50
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
	...

080036ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08c      	sub	sp, #48	@ 0x30
 80036b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80036b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036b6:	2200      	movs	r2, #0
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	605a      	str	r2, [r3, #4]
 80036bc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80036be:	1d3b      	adds	r3, r7, #4
 80036c0:	2220      	movs	r2, #32
 80036c2:	2100      	movs	r1, #0
 80036c4:	4618      	mov	r0, r3
 80036c6:	f008 f80d 	bl	800b6e4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80036ca:	4b32      	ldr	r3, [pc, #200]	@ (8003794 <MX_ADC1_Init+0xe8>)
 80036cc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80036d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80036d2:	4b30      	ldr	r3, [pc, #192]	@ (8003794 <MX_ADC1_Init+0xe8>)
 80036d4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80036d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80036da:	4b2e      	ldr	r3, [pc, #184]	@ (8003794 <MX_ADC1_Init+0xe8>)
 80036dc:	2200      	movs	r2, #0
 80036de:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80036e0:	4b2c      	ldr	r3, [pc, #176]	@ (8003794 <MX_ADC1_Init+0xe8>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80036e6:	4b2b      	ldr	r3, [pc, #172]	@ (8003794 <MX_ADC1_Init+0xe8>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80036ec:	4b29      	ldr	r3, [pc, #164]	@ (8003794 <MX_ADC1_Init+0xe8>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80036f2:	4b28      	ldr	r3, [pc, #160]	@ (8003794 <MX_ADC1_Init+0xe8>)
 80036f4:	2204      	movs	r2, #4
 80036f6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80036f8:	4b26      	ldr	r3, [pc, #152]	@ (8003794 <MX_ADC1_Init+0xe8>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80036fe:	4b25      	ldr	r3, [pc, #148]	@ (8003794 <MX_ADC1_Init+0xe8>)
 8003700:	2200      	movs	r2, #0
 8003702:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8003704:	4b23      	ldr	r3, [pc, #140]	@ (8003794 <MX_ADC1_Init+0xe8>)
 8003706:	2201      	movs	r2, #1
 8003708:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800370a:	4b22      	ldr	r3, [pc, #136]	@ (8003794 <MX_ADC1_Init+0xe8>)
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003712:	4b20      	ldr	r3, [pc, #128]	@ (8003794 <MX_ADC1_Init+0xe8>)
 8003714:	2200      	movs	r2, #0
 8003716:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003718:	4b1e      	ldr	r3, [pc, #120]	@ (8003794 <MX_ADC1_Init+0xe8>)
 800371a:	2200      	movs	r2, #0
 800371c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800371e:	4b1d      	ldr	r3, [pc, #116]	@ (8003794 <MX_ADC1_Init+0xe8>)
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003726:	4b1b      	ldr	r3, [pc, #108]	@ (8003794 <MX_ADC1_Init+0xe8>)
 8003728:	2200      	movs	r2, #0
 800372a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800372c:	4b19      	ldr	r3, [pc, #100]	@ (8003794 <MX_ADC1_Init+0xe8>)
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003734:	4817      	ldr	r0, [pc, #92]	@ (8003794 <MX_ADC1_Init+0xe8>)
 8003736:	f001 f9fb 	bl	8004b30 <HAL_ADC_Init>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8003740:	f000 fc88 	bl	8004054 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003744:	2300      	movs	r3, #0
 8003746:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003748:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800374c:	4619      	mov	r1, r3
 800374e:	4811      	ldr	r0, [pc, #68]	@ (8003794 <MX_ADC1_Init+0xe8>)
 8003750:	f002 f810 	bl	8005774 <HAL_ADCEx_MultiModeConfigChannel>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800375a:	f000 fc7b 	bl	8004054 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800375e:	4b0e      	ldr	r3, [pc, #56]	@ (8003798 <MX_ADC1_Init+0xec>)
 8003760:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003762:	2306      	movs	r3, #6
 8003764:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003766:	2300      	movs	r3, #0
 8003768:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800376a:	237f      	movs	r3, #127	@ 0x7f
 800376c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800376e:	2304      	movs	r3, #4
 8003770:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003772:	2300      	movs	r3, #0
 8003774:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003776:	1d3b      	adds	r3, r7, #4
 8003778:	4619      	mov	r1, r3
 800377a:	4806      	ldr	r0, [pc, #24]	@ (8003794 <MX_ADC1_Init+0xe8>)
 800377c:	f001 fb94 	bl	8004ea8 <HAL_ADC_ConfigChannel>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8003786:	f000 fc65 	bl	8004054 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800378a:	bf00      	nop
 800378c:	3730      	adds	r7, #48	@ 0x30
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	200003a0 	.word	0x200003a0
 8003798:	19200040 	.word	0x19200040

0800379c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b08c      	sub	sp, #48	@ 0x30
 80037a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80037a2:	f107 030c 	add.w	r3, r7, #12
 80037a6:	2224      	movs	r2, #36	@ 0x24
 80037a8:	2100      	movs	r1, #0
 80037aa:	4618      	mov	r0, r3
 80037ac:	f007 ff9a 	bl	800b6e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037b0:	463b      	mov	r3, r7
 80037b2:	2200      	movs	r2, #0
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	605a      	str	r2, [r3, #4]
 80037b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80037ba:	4b21      	ldr	r3, [pc, #132]	@ (8003840 <MX_TIM2_Init+0xa4>)
 80037bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80037c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80037c2:	4b1f      	ldr	r3, [pc, #124]	@ (8003840 <MX_TIM2_Init+0xa4>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003840 <MX_TIM2_Init+0xa4>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80037ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003840 <MX_TIM2_Init+0xa4>)
 80037d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80037d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003840 <MX_TIM2_Init+0xa4>)
 80037d8:	2200      	movs	r2, #0
 80037da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037dc:	4b18      	ldr	r3, [pc, #96]	@ (8003840 <MX_TIM2_Init+0xa4>)
 80037de:	2200      	movs	r2, #0
 80037e0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80037e2:	2303      	movs	r3, #3
 80037e4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80037e6:	2300      	movs	r3, #0
 80037e8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80037ea:	2301      	movs	r3, #1
 80037ec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80037ee:	2300      	movs	r3, #0
 80037f0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 3;
 80037f2:	2303      	movs	r3, #3
 80037f4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80037f6:	2300      	movs	r3, #0
 80037f8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80037fa:	2301      	movs	r3, #1
 80037fc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80037fe:	2300      	movs	r3, #0
 8003800:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 3;
 8003802:	2303      	movs	r3, #3
 8003804:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003806:	f107 030c 	add.w	r3, r7, #12
 800380a:	4619      	mov	r1, r3
 800380c:	480c      	ldr	r0, [pc, #48]	@ (8003840 <MX_TIM2_Init+0xa4>)
 800380e:	f004 fb11 	bl	8007e34 <HAL_TIM_Encoder_Init>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8003818:	f000 fc1c 	bl	8004054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800381c:	2300      	movs	r3, #0
 800381e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003820:	2300      	movs	r3, #0
 8003822:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003824:	463b      	mov	r3, r7
 8003826:	4619      	mov	r1, r3
 8003828:	4805      	ldr	r0, [pc, #20]	@ (8003840 <MX_TIM2_Init+0xa4>)
 800382a:	f005 feb9 	bl	80095a0 <HAL_TIMEx_MasterConfigSynchronization>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8003834:	f000 fc0e 	bl	8004054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003838:	bf00      	nop
 800383a:	3730      	adds	r7, #48	@ 0x30
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	2000040c 	.word	0x2000040c

08003844 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b08e      	sub	sp, #56	@ 0x38
 8003848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800384a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	605a      	str	r2, [r3, #4]
 8003854:	609a      	str	r2, [r3, #8]
 8003856:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003858:	f107 031c 	add.w	r3, r7, #28
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	605a      	str	r2, [r3, #4]
 8003862:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003864:	463b      	mov	r3, r7
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	605a      	str	r2, [r3, #4]
 800386c:	609a      	str	r2, [r3, #8]
 800386e:	60da      	str	r2, [r3, #12]
 8003870:	611a      	str	r2, [r3, #16]
 8003872:	615a      	str	r2, [r3, #20]
 8003874:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003876:	4b32      	ldr	r3, [pc, #200]	@ (8003940 <MX_TIM3_Init+0xfc>)
 8003878:	4a32      	ldr	r2, [pc, #200]	@ (8003944 <MX_TIM3_Init+0x100>)
 800387a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 800387c:	4b30      	ldr	r3, [pc, #192]	@ (8003940 <MX_TIM3_Init+0xfc>)
 800387e:	2201      	movs	r2, #1
 8003880:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003882:	4b2f      	ldr	r3, [pc, #188]	@ (8003940 <MX_TIM3_Init+0xfc>)
 8003884:	2200      	movs	r2, #0
 8003886:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 42499;
 8003888:	4b2d      	ldr	r3, [pc, #180]	@ (8003940 <MX_TIM3_Init+0xfc>)
 800388a:	f24a 6203 	movw	r2, #42499	@ 0xa603
 800388e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003890:	4b2b      	ldr	r3, [pc, #172]	@ (8003940 <MX_TIM3_Init+0xfc>)
 8003892:	2200      	movs	r2, #0
 8003894:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003896:	4b2a      	ldr	r3, [pc, #168]	@ (8003940 <MX_TIM3_Init+0xfc>)
 8003898:	2200      	movs	r2, #0
 800389a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800389c:	4828      	ldr	r0, [pc, #160]	@ (8003940 <MX_TIM3_Init+0xfc>)
 800389e:	f003 feb9 	bl	8007614 <HAL_TIM_Base_Init>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80038a8:	f000 fbd4 	bl	8004054 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80038b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80038b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80038b6:	4619      	mov	r1, r3
 80038b8:	4821      	ldr	r0, [pc, #132]	@ (8003940 <MX_TIM3_Init+0xfc>)
 80038ba:	f004 fe8b 	bl	80085d4 <HAL_TIM_ConfigClockSource>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80038c4:	f000 fbc6 	bl	8004054 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80038c8:	481d      	ldr	r0, [pc, #116]	@ (8003940 <MX_TIM3_Init+0xfc>)
 80038ca:	f003 ffef 	bl	80078ac <HAL_TIM_PWM_Init>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d001      	beq.n	80038d8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80038d4:	f000 fbbe 	bl	8004054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038d8:	2300      	movs	r3, #0
 80038da:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038dc:	2300      	movs	r3, #0
 80038de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80038e0:	f107 031c 	add.w	r3, r7, #28
 80038e4:	4619      	mov	r1, r3
 80038e6:	4816      	ldr	r0, [pc, #88]	@ (8003940 <MX_TIM3_Init+0xfc>)
 80038e8:	f005 fe5a 	bl	80095a0 <HAL_TIMEx_MasterConfigSynchronization>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80038f2:	f000 fbaf 	bl	8004054 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038f6:	2360      	movs	r3, #96	@ 0x60
 80038f8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80038fa:	2300      	movs	r3, #0
 80038fc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038fe:	2300      	movs	r3, #0
 8003900:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003902:	2300      	movs	r3, #0
 8003904:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003906:	463b      	mov	r3, r7
 8003908:	2200      	movs	r2, #0
 800390a:	4619      	mov	r1, r3
 800390c:	480c      	ldr	r0, [pc, #48]	@ (8003940 <MX_TIM3_Init+0xfc>)
 800390e:	f004 fd4d 	bl	80083ac <HAL_TIM_PWM_ConfigChannel>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003918:	f000 fb9c 	bl	8004054 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800391c:	463b      	mov	r3, r7
 800391e:	2204      	movs	r2, #4
 8003920:	4619      	mov	r1, r3
 8003922:	4807      	ldr	r0, [pc, #28]	@ (8003940 <MX_TIM3_Init+0xfc>)
 8003924:	f004 fd42 	bl	80083ac <HAL_TIM_PWM_ConfigChannel>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800392e:	f000 fb91 	bl	8004054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003932:	4803      	ldr	r0, [pc, #12]	@ (8003940 <MX_TIM3_Init+0xfc>)
 8003934:	f000 fcd2 	bl	80042dc <HAL_TIM_MspPostInit>

}
 8003938:	bf00      	nop
 800393a:	3738      	adds	r7, #56	@ 0x38
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	200004d8 	.word	0x200004d8
 8003944:	40000400 	.word	0x40000400

08003948 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b088      	sub	sp, #32
 800394c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800394e:	f107 0310 	add.w	r3, r7, #16
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	605a      	str	r2, [r3, #4]
 8003958:	609a      	str	r2, [r3, #8]
 800395a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800395c:	1d3b      	adds	r3, r7, #4
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	605a      	str	r2, [r3, #4]
 8003964:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003966:	4b1d      	ldr	r3, [pc, #116]	@ (80039dc <MX_TIM4_Init+0x94>)
 8003968:	4a1d      	ldr	r2, [pc, #116]	@ (80039e0 <MX_TIM4_Init+0x98>)
 800396a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 800396c:	4b1b      	ldr	r3, [pc, #108]	@ (80039dc <MX_TIM4_Init+0x94>)
 800396e:	22a9      	movs	r2, #169	@ 0xa9
 8003970:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003972:	4b1a      	ldr	r3, [pc, #104]	@ (80039dc <MX_TIM4_Init+0x94>)
 8003974:	2200      	movs	r2, #0
 8003976:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50;
 8003978:	4b18      	ldr	r3, [pc, #96]	@ (80039dc <MX_TIM4_Init+0x94>)
 800397a:	2232      	movs	r2, #50	@ 0x32
 800397c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800397e:	4b17      	ldr	r3, [pc, #92]	@ (80039dc <MX_TIM4_Init+0x94>)
 8003980:	2200      	movs	r2, #0
 8003982:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003984:	4b15      	ldr	r3, [pc, #84]	@ (80039dc <MX_TIM4_Init+0x94>)
 8003986:	2200      	movs	r2, #0
 8003988:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800398a:	4814      	ldr	r0, [pc, #80]	@ (80039dc <MX_TIM4_Init+0x94>)
 800398c:	f003 fe42 	bl	8007614 <HAL_TIM_Base_Init>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8003996:	f000 fb5d 	bl	8004054 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800399a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800399e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80039a0:	f107 0310 	add.w	r3, r7, #16
 80039a4:	4619      	mov	r1, r3
 80039a6:	480d      	ldr	r0, [pc, #52]	@ (80039dc <MX_TIM4_Init+0x94>)
 80039a8:	f004 fe14 	bl	80085d4 <HAL_TIM_ConfigClockSource>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80039b2:	f000 fb4f 	bl	8004054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039b6:	2300      	movs	r3, #0
 80039b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039ba:	2300      	movs	r3, #0
 80039bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80039be:	1d3b      	adds	r3, r7, #4
 80039c0:	4619      	mov	r1, r3
 80039c2:	4806      	ldr	r0, [pc, #24]	@ (80039dc <MX_TIM4_Init+0x94>)
 80039c4:	f005 fdec 	bl	80095a0 <HAL_TIMEx_MasterConfigSynchronization>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80039ce:	f000 fb41 	bl	8004054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80039d2:	bf00      	nop
 80039d4:	3720      	adds	r7, #32
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	200005a4 	.word	0x200005a4
 80039e0:	40000800 	.word	0x40000800

080039e4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b088      	sub	sp, #32
 80039e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039ea:	f107 0310 	add.w	r3, r7, #16
 80039ee:	2200      	movs	r2, #0
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	605a      	str	r2, [r3, #4]
 80039f4:	609a      	str	r2, [r3, #8]
 80039f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039f8:	1d3b      	adds	r3, r7, #4
 80039fa:	2200      	movs	r2, #0
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	605a      	str	r2, [r3, #4]
 8003a00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003a02:	4b1d      	ldr	r3, [pc, #116]	@ (8003a78 <MX_TIM5_Init+0x94>)
 8003a04:	4a1d      	ldr	r2, [pc, #116]	@ (8003a7c <MX_TIM5_Init+0x98>)
 8003a06:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8003a08:	4b1b      	ldr	r3, [pc, #108]	@ (8003a78 <MX_TIM5_Init+0x94>)
 8003a0a:	22a9      	movs	r2, #169	@ 0xa9
 8003a0c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8003a78 <MX_TIM5_Init+0x94>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003a14:	4b18      	ldr	r3, [pc, #96]	@ (8003a78 <MX_TIM5_Init+0x94>)
 8003a16:	f04f 32ff 	mov.w	r2, #4294967295
 8003a1a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a1c:	4b16      	ldr	r3, [pc, #88]	@ (8003a78 <MX_TIM5_Init+0x94>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a22:	4b15      	ldr	r3, [pc, #84]	@ (8003a78 <MX_TIM5_Init+0x94>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003a28:	4813      	ldr	r0, [pc, #76]	@ (8003a78 <MX_TIM5_Init+0x94>)
 8003a2a:	f003 fdf3 	bl	8007614 <HAL_TIM_Base_Init>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003a34:	f000 fb0e 	bl	8004054 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a3c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003a3e:	f107 0310 	add.w	r3, r7, #16
 8003a42:	4619      	mov	r1, r3
 8003a44:	480c      	ldr	r0, [pc, #48]	@ (8003a78 <MX_TIM5_Init+0x94>)
 8003a46:	f004 fdc5 	bl	80085d4 <HAL_TIM_ConfigClockSource>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003a50:	f000 fb00 	bl	8004054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a54:	2300      	movs	r3, #0
 8003a56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003a5c:	1d3b      	adds	r3, r7, #4
 8003a5e:	4619      	mov	r1, r3
 8003a60:	4805      	ldr	r0, [pc, #20]	@ (8003a78 <MX_TIM5_Init+0x94>)
 8003a62:	f005 fd9d 	bl	80095a0 <HAL_TIMEx_MasterConfigSynchronization>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003a6c:	f000 faf2 	bl	8004054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003a70:	bf00      	nop
 8003a72:	3720      	adds	r7, #32
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	20000670 	.word	0x20000670
 8003a7c:	40000c00 	.word	0x40000c00

08003a80 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a86:	1d3b      	adds	r3, r7, #4
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	605a      	str	r2, [r3, #4]
 8003a8e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003a90:	4b14      	ldr	r3, [pc, #80]	@ (8003ae4 <MX_TIM6_Init+0x64>)
 8003a92:	4a15      	ldr	r2, [pc, #84]	@ (8003ae8 <MX_TIM6_Init+0x68>)
 8003a94:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8003a96:	4b13      	ldr	r3, [pc, #76]	@ (8003ae4 <MX_TIM6_Init+0x64>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a9c:	4b11      	ldr	r3, [pc, #68]	@ (8003ae4 <MX_TIM6_Init+0x64>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8003aa2:	4b10      	ldr	r3, [pc, #64]	@ (8003ae4 <MX_TIM6_Init+0x64>)
 8003aa4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003aa8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8003ae4 <MX_TIM6_Init+0x64>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003ab0:	480c      	ldr	r0, [pc, #48]	@ (8003ae4 <MX_TIM6_Init+0x64>)
 8003ab2:	f003 fdaf 	bl	8007614 <HAL_TIM_Base_Init>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003abc:	f000 faca 	bl	8004054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003ac8:	1d3b      	adds	r3, r7, #4
 8003aca:	4619      	mov	r1, r3
 8003acc:	4805      	ldr	r0, [pc, #20]	@ (8003ae4 <MX_TIM6_Init+0x64>)
 8003ace:	f005 fd67 	bl	80095a0 <HAL_TIMEx_MasterConfigSynchronization>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003ad8:	f000 fabc 	bl	8004054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003adc:	bf00      	nop
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	2000073c 	.word	0x2000073c
 8003ae8:	40001000 	.word	0x40001000

08003aec <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003af0:	4b14      	ldr	r3, [pc, #80]	@ (8003b44 <MX_TIM16_Init+0x58>)
 8003af2:	4a15      	ldr	r2, [pc, #84]	@ (8003b48 <MX_TIM16_Init+0x5c>)
 8003af4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8003af6:	4b13      	ldr	r3, [pc, #76]	@ (8003b44 <MX_TIM16_Init+0x58>)
 8003af8:	22a9      	movs	r2, #169	@ 0xa9
 8003afa:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003afc:	4b11      	ldr	r3, [pc, #68]	@ (8003b44 <MX_TIM16_Init+0x58>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8003b02:	4b10      	ldr	r3, [pc, #64]	@ (8003b44 <MX_TIM16_Init+0x58>)
 8003b04:	f240 4279 	movw	r2, #1145	@ 0x479
 8003b08:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8003b44 <MX_TIM16_Init+0x58>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003b10:	4b0c      	ldr	r3, [pc, #48]	@ (8003b44 <MX_TIM16_Init+0x58>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b16:	4b0b      	ldr	r3, [pc, #44]	@ (8003b44 <MX_TIM16_Init+0x58>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003b1c:	4809      	ldr	r0, [pc, #36]	@ (8003b44 <MX_TIM16_Init+0x58>)
 8003b1e:	f003 fd79 	bl	8007614 <HAL_TIM_Base_Init>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8003b28:	f000 fa94 	bl	8004054 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8003b2c:	2108      	movs	r1, #8
 8003b2e:	4805      	ldr	r0, [pc, #20]	@ (8003b44 <MX_TIM16_Init+0x58>)
 8003b30:	f004 f88a 	bl	8007c48 <HAL_TIM_OnePulse_Init>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8003b3a:	f000 fa8b 	bl	8004054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003b3e:	bf00      	nop
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	20000808 	.word	0x20000808
 8003b48:	40014400 	.word	0x40014400

08003b4c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003b50:	4b23      	ldr	r3, [pc, #140]	@ (8003be0 <MX_UART4_Init+0x94>)
 8003b52:	4a24      	ldr	r2, [pc, #144]	@ (8003be4 <MX_UART4_Init+0x98>)
 8003b54:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003b56:	4b22      	ldr	r3, [pc, #136]	@ (8003be0 <MX_UART4_Init+0x94>)
 8003b58:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003b5c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003b5e:	4b20      	ldr	r3, [pc, #128]	@ (8003be0 <MX_UART4_Init+0x94>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003b64:	4b1e      	ldr	r3, [pc, #120]	@ (8003be0 <MX_UART4_Init+0x94>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8003be0 <MX_UART4_Init+0x94>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003b70:	4b1b      	ldr	r3, [pc, #108]	@ (8003be0 <MX_UART4_Init+0x94>)
 8003b72:	220c      	movs	r2, #12
 8003b74:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b76:	4b1a      	ldr	r3, [pc, #104]	@ (8003be0 <MX_UART4_Init+0x94>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b7c:	4b18      	ldr	r3, [pc, #96]	@ (8003be0 <MX_UART4_Init+0x94>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 8003b82:	4b17      	ldr	r3, [pc, #92]	@ (8003be0 <MX_UART4_Init+0x94>)
 8003b84:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b88:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003b8a:	4b15      	ldr	r3, [pc, #84]	@ (8003be0 <MX_UART4_Init+0x94>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b90:	4b13      	ldr	r3, [pc, #76]	@ (8003be0 <MX_UART4_Init+0x94>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003b96:	4812      	ldr	r0, [pc, #72]	@ (8003be0 <MX_UART4_Init+0x94>)
 8003b98:	f005 fde8 	bl	800976c <HAL_UART_Init>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <MX_UART4_Init+0x5a>
  {
    Error_Handler();
 8003ba2:	f000 fa57 	bl	8004054 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	480d      	ldr	r0, [pc, #52]	@ (8003be0 <MX_UART4_Init+0x94>)
 8003baa:	f007 fcd0 	bl	800b54e <HAL_UARTEx_SetTxFifoThreshold>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <MX_UART4_Init+0x6c>
  {
    Error_Handler();
 8003bb4:	f000 fa4e 	bl	8004054 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8003bb8:	f04f 6120 	mov.w	r1, #167772160	@ 0xa000000
 8003bbc:	4808      	ldr	r0, [pc, #32]	@ (8003be0 <MX_UART4_Init+0x94>)
 8003bbe:	f007 fd04 	bl	800b5ca <HAL_UARTEx_SetRxFifoThreshold>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <MX_UART4_Init+0x80>
  {
    Error_Handler();
 8003bc8:	f000 fa44 	bl	8004054 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003bcc:	4804      	ldr	r0, [pc, #16]	@ (8003be0 <MX_UART4_Init+0x94>)
 8003bce:	f007 fc85 	bl	800b4dc <HAL_UARTEx_DisableFifoMode>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <MX_UART4_Init+0x90>
  {
    Error_Handler();
 8003bd8:	f000 fa3c 	bl	8004054 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003bdc:	bf00      	nop
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	200008d4 	.word	0x200008d4
 8003be4:	40004c00 	.word	0x40004c00

08003be8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003bec:	4b23      	ldr	r3, [pc, #140]	@ (8003c7c <MX_USART2_UART_Init+0x94>)
 8003bee:	4a24      	ldr	r2, [pc, #144]	@ (8003c80 <MX_USART2_UART_Init+0x98>)
 8003bf0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8003bf2:	4b22      	ldr	r3, [pc, #136]	@ (8003c7c <MX_USART2_UART_Init+0x94>)
 8003bf4:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8003bf8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8003bfa:	4b20      	ldr	r3, [pc, #128]	@ (8003c7c <MX_USART2_UART_Init+0x94>)
 8003bfc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003c00:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003c02:	4b1e      	ldr	r3, [pc, #120]	@ (8003c7c <MX_USART2_UART_Init+0x94>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8003c08:	4b1c      	ldr	r3, [pc, #112]	@ (8003c7c <MX_USART2_UART_Init+0x94>)
 8003c0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003c10:	4b1a      	ldr	r3, [pc, #104]	@ (8003c7c <MX_USART2_UART_Init+0x94>)
 8003c12:	220c      	movs	r2, #12
 8003c14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c16:	4b19      	ldr	r3, [pc, #100]	@ (8003c7c <MX_USART2_UART_Init+0x94>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c1c:	4b17      	ldr	r3, [pc, #92]	@ (8003c7c <MX_USART2_UART_Init+0x94>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c22:	4b16      	ldr	r3, [pc, #88]	@ (8003c7c <MX_USART2_UART_Init+0x94>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003c28:	4b14      	ldr	r3, [pc, #80]	@ (8003c7c <MX_USART2_UART_Init+0x94>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c2e:	4b13      	ldr	r3, [pc, #76]	@ (8003c7c <MX_USART2_UART_Init+0x94>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003c34:	4811      	ldr	r0, [pc, #68]	@ (8003c7c <MX_USART2_UART_Init+0x94>)
 8003c36:	f005 fd99 	bl	800976c <HAL_UART_Init>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8003c40:	f000 fa08 	bl	8004054 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c44:	2100      	movs	r1, #0
 8003c46:	480d      	ldr	r0, [pc, #52]	@ (8003c7c <MX_USART2_UART_Init+0x94>)
 8003c48:	f007 fc81 	bl	800b54e <HAL_UARTEx_SetTxFifoThreshold>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8003c52:	f000 f9ff 	bl	8004054 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c56:	2100      	movs	r1, #0
 8003c58:	4808      	ldr	r0, [pc, #32]	@ (8003c7c <MX_USART2_UART_Init+0x94>)
 8003c5a:	f007 fcb6 	bl	800b5ca <HAL_UARTEx_SetRxFifoThreshold>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8003c64:	f000 f9f6 	bl	8004054 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003c68:	4804      	ldr	r0, [pc, #16]	@ (8003c7c <MX_USART2_UART_Init+0x94>)
 8003c6a:	f007 fc37 	bl	800b4dc <HAL_UARTEx_DisableFifoMode>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8003c74:	f000 f9ee 	bl	8004054 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003c78:	bf00      	nop
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	200009a0 	.word	0x200009a0
 8003c80:	40004400 	.word	0x40004400

08003c84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003c8a:	4b16      	ldr	r3, [pc, #88]	@ (8003ce4 <MX_DMA_Init+0x60>)
 8003c8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c8e:	4a15      	ldr	r2, [pc, #84]	@ (8003ce4 <MX_DMA_Init+0x60>)
 8003c90:	f043 0304 	orr.w	r3, r3, #4
 8003c94:	6493      	str	r3, [r2, #72]	@ 0x48
 8003c96:	4b13      	ldr	r3, [pc, #76]	@ (8003ce4 <MX_DMA_Init+0x60>)
 8003c98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c9a:	f003 0304 	and.w	r3, r3, #4
 8003c9e:	607b      	str	r3, [r7, #4]
 8003ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003ca2:	4b10      	ldr	r3, [pc, #64]	@ (8003ce4 <MX_DMA_Init+0x60>)
 8003ca4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ca6:	4a0f      	ldr	r2, [pc, #60]	@ (8003ce4 <MX_DMA_Init+0x60>)
 8003ca8:	f043 0301 	orr.w	r3, r3, #1
 8003cac:	6493      	str	r3, [r2, #72]	@ 0x48
 8003cae:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce4 <MX_DMA_Init+0x60>)
 8003cb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	603b      	str	r3, [r7, #0]
 8003cb8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003cba:	2200      	movs	r2, #0
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	200b      	movs	r0, #11
 8003cc0:	f001 ff3b 	bl	8005b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003cc4:	200b      	movs	r0, #11
 8003cc6:	f001 ff52 	bl	8005b6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003cca:	2200      	movs	r2, #0
 8003ccc:	2100      	movs	r1, #0
 8003cce:	200c      	movs	r0, #12
 8003cd0:	f001 ff33 	bl	8005b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003cd4:	200c      	movs	r0, #12
 8003cd6:	f001 ff4a 	bl	8005b6e <HAL_NVIC_EnableIRQ>

}
 8003cda:	bf00      	nop
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40021000 	.word	0x40021000

08003ce8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08a      	sub	sp, #40	@ 0x28
 8003cec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cee:	f107 0314 	add.w	r3, r7, #20
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	605a      	str	r2, [r3, #4]
 8003cf8:	609a      	str	r2, [r3, #8]
 8003cfa:	60da      	str	r2, [r3, #12]
 8003cfc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cfe:	4b4c      	ldr	r3, [pc, #304]	@ (8003e30 <MX_GPIO_Init+0x148>)
 8003d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d02:	4a4b      	ldr	r2, [pc, #300]	@ (8003e30 <MX_GPIO_Init+0x148>)
 8003d04:	f043 0304 	orr.w	r3, r3, #4
 8003d08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d0a:	4b49      	ldr	r3, [pc, #292]	@ (8003e30 <MX_GPIO_Init+0x148>)
 8003d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d0e:	f003 0304 	and.w	r3, r3, #4
 8003d12:	613b      	str	r3, [r7, #16]
 8003d14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d16:	4b46      	ldr	r3, [pc, #280]	@ (8003e30 <MX_GPIO_Init+0x148>)
 8003d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d1a:	4a45      	ldr	r2, [pc, #276]	@ (8003e30 <MX_GPIO_Init+0x148>)
 8003d1c:	f043 0320 	orr.w	r3, r3, #32
 8003d20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d22:	4b43      	ldr	r3, [pc, #268]	@ (8003e30 <MX_GPIO_Init+0x148>)
 8003d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d26:	f003 0320 	and.w	r3, r3, #32
 8003d2a:	60fb      	str	r3, [r7, #12]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d2e:	4b40      	ldr	r3, [pc, #256]	@ (8003e30 <MX_GPIO_Init+0x148>)
 8003d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d32:	4a3f      	ldr	r2, [pc, #252]	@ (8003e30 <MX_GPIO_Init+0x148>)
 8003d34:	f043 0301 	orr.w	r3, r3, #1
 8003d38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d3a:	4b3d      	ldr	r3, [pc, #244]	@ (8003e30 <MX_GPIO_Init+0x148>)
 8003d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	60bb      	str	r3, [r7, #8]
 8003d44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d46:	4b3a      	ldr	r3, [pc, #232]	@ (8003e30 <MX_GPIO_Init+0x148>)
 8003d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d4a:	4a39      	ldr	r2, [pc, #228]	@ (8003e30 <MX_GPIO_Init+0x148>)
 8003d4c:	f043 0302 	orr.w	r3, r3, #2
 8003d50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d52:	4b37      	ldr	r3, [pc, #220]	@ (8003e30 <MX_GPIO_Init+0x148>)
 8003d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	607b      	str	r3, [r7, #4]
 8003d5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Push_solenoid_Pin, GPIO_PIN_RESET);
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8003d64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d68:	f002 fbe8 	bl	800653c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Pull_solenoid_Pin|Suck_solenoid_Pin, GPIO_PIN_RESET);
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	2130      	movs	r1, #48	@ 0x30
 8003d70:	4830      	ldr	r0, [pc, #192]	@ (8003e34 <MX_GPIO_Init+0x14c>)
 8003d72:	f002 fbe3 	bl	800653c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003d76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003d7c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d82:	2300      	movs	r3, #0
 8003d84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003d86:	f107 0314 	add.w	r3, r7, #20
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	4829      	ldr	r0, [pc, #164]	@ (8003e34 <MX_GPIO_Init+0x14c>)
 8003d8e:	f002 fa3b 	bl	8006208 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Base_Pin Limit_Top_Pin Reed_pull_Pin */
  GPIO_InitStruct.Pin = Limit_Base_Pin|Limit_Top_Pin|Reed_pull_Pin;
 8003d92:	23d0      	movs	r3, #208	@ 0xd0
 8003d94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d96:	2300      	movs	r3, #0
 8003d98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d9e:	f107 0314 	add.w	r3, r7, #20
 8003da2:	4619      	mov	r1, r3
 8003da4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003da8:	f002 fa2e 	bl	8006208 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Push_solenoid_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Push_solenoid_Pin;
 8003dac:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8003db0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003db2:	2301      	movs	r3, #1
 8003db4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db6:	2300      	movs	r3, #0
 8003db8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dbe:	f107 0314 	add.w	r3, r7, #20
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003dc8:	f002 fa1e 	bl	8006208 <HAL_GPIO_Init>

  /*Configure GPIO pins : Pull_solenoid_Pin Suck_solenoid_Pin */
  GPIO_InitStruct.Pin = Pull_solenoid_Pin|Suck_solenoid_Pin;
 8003dcc:	2330      	movs	r3, #48	@ 0x30
 8003dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ddc:	f107 0314 	add.w	r3, r7, #20
 8003de0:	4619      	mov	r1, r3
 8003de2:	4814      	ldr	r0, [pc, #80]	@ (8003e34 <MX_GPIO_Init+0x14c>)
 8003de4:	f002 fa10 	bl	8006208 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Signal_Pin */
  GPIO_InitStruct.Pin = Emergency_Signal_Pin;
 8003de8:	2380      	movs	r3, #128	@ 0x80
 8003dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003dec:	2300      	movs	r3, #0
 8003dee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003df0:	2302      	movs	r3, #2
 8003df2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_Signal_GPIO_Port, &GPIO_InitStruct);
 8003df4:	f107 0314 	add.w	r3, r7, #20
 8003df8:	4619      	mov	r1, r3
 8003dfa:	480e      	ldr	r0, [pc, #56]	@ (8003e34 <MX_GPIO_Init+0x14c>)
 8003dfc:	f002 fa04 	bl	8006208 <HAL_GPIO_Init>

  /*Configure GPIO pin : Reed_push_Pin */
  GPIO_InitStruct.Pin = Reed_push_Pin;
 8003e00:	2340      	movs	r3, #64	@ 0x40
 8003e02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e04:	2300      	movs	r3, #0
 8003e06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003e08:	2302      	movs	r3, #2
 8003e0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Reed_push_GPIO_Port, &GPIO_InitStruct);
 8003e0c:	f107 0314 	add.w	r3, r7, #20
 8003e10:	4619      	mov	r1, r3
 8003e12:	4809      	ldr	r0, [pc, #36]	@ (8003e38 <MX_GPIO_Init+0x150>)
 8003e14:	f002 f9f8 	bl	8006208 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003e18:	2200      	movs	r2, #0
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	2028      	movs	r0, #40	@ 0x28
 8003e1e:	f001 fe8c 	bl	8005b3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003e22:	2028      	movs	r0, #40	@ 0x28
 8003e24:	f001 fea3 	bl	8005b6e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003e28:	bf00      	nop
 8003e2a:	3728      	adds	r7, #40	@ 0x28
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	40021000 	.word	0x40021000
 8003e34:	48000800 	.word	0x48000800
 8003e38:	48000400 	.word	0x48000400

08003e3c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */

volatile uint32_t interrupt_counter = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
 8003e3c:	b5b0      	push	{r4, r5, r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
		if(htim == &htim5)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a69      	ldr	r2, [pc, #420]	@ (8003fec <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d108      	bne.n	8003e5e <HAL_TIM_PeriodElapsedCallback+0x22>
			{
			_micros += UINT32_MAX;
 8003e4c:	4b68      	ldr	r3, [pc, #416]	@ (8003ff0 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8003e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e52:	1e54      	subs	r4, r2, #1
 8003e54:	f143 0500 	adc.w	r5, r3, #0
 8003e58:	4b65      	ldr	r3, [pc, #404]	@ (8003ff0 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8003e5a:	e9c3 4500 	strd	r4, r5, [r3]
			}
		if(htim == &htim4)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a64      	ldr	r2, [pc, #400]	@ (8003ff4 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	f040 80bd 	bne.w	8003fe2 <HAL_TIM_PeriodElapsedCallback+0x1a6>
		{
			interrupt_counter++;
 8003e68:	4b63      	ldr	r3, [pc, #396]	@ (8003ff8 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	4a62      	ldr	r2, [pc, #392]	@ (8003ff8 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8003e70:	6013      	str	r3, [r2, #0]



			// For 1 kHz
			//-------For AMT Encoder & Base Status check----------//
			if(interrupt_counter % 20 == 0)
 8003e72:	4b61      	ldr	r3, [pc, #388]	@ (8003ff8 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8003e74:	6819      	ldr	r1, [r3, #0]
 8003e76:	4b61      	ldr	r3, [pc, #388]	@ (8003ffc <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003e78:	fba3 2301 	umull	r2, r3, r3, r1
 8003e7c:	091a      	lsrs	r2, r3, #4
 8003e7e:	4613      	mov	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	1aca      	subs	r2, r1, r3
 8003e88:	2a00      	cmp	r2, #0
 8003e8a:	d107      	bne.n	8003e9c <HAL_TIM_PeriodElapsedCallback+0x60>
			{

			    AMT_encoder_update(&AMT, &htim2, micros());
 8003e8c:	f000 f8c8 	bl	8004020 <micros>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	495a      	ldr	r1, [pc, #360]	@ (8004000 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8003e96:	485b      	ldr	r0, [pc, #364]	@ (8004004 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8003e98:	f7fd fe46 	bl	8001b28 <AMT_encoder_update>



			// For 5 KHz
			//----------------For PID & Traj Condition----------------//
			if(interrupt_counter % 4 == 0)
 8003e9c:	4b56      	ldr	r3, [pc, #344]	@ (8003ff8 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0303 	and.w	r3, r3, #3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f040 8083 	bne.w	8003fb0 <HAL_TIM_PeriodElapsedCallback+0x174>
			{
				//Modbus
				easyCase();
 8003eaa:	f7fd f917 	bl	80010dc <easyCase>
				switch(base.Base_case){
 8003eae:	4b56      	ldr	r3, [pc, #344]	@ (8004008 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8003eb0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	2b07      	cmp	r3, #7
 8003eb8:	d828      	bhi.n	8003f0c <HAL_TIM_PeriodElapsedCallback+0xd0>
 8003eba:	a201      	add	r2, pc, #4	@ (adr r2, 8003ec0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8003ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec0:	08003ee1 	.word	0x08003ee1
 8003ec4:	08003ee9 	.word	0x08003ee9
 8003ec8:	08003f0d 	.word	0x08003f0d
 8003ecc:	08003ef5 	.word	0x08003ef5
 8003ed0:	08003f0d 	.word	0x08003f0d
 8003ed4:	08003f0d 	.word	0x08003f0d
 8003ed8:	08003f0d 	.word	0x08003f0d
 8003edc:	08003f01 	.word	0x08003f01
					case 1:
						base.BaseStatus = 1;
 8003ee0:	4b49      	ldr	r3, [pc, #292]	@ (8004008 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	801a      	strh	r2, [r3, #0]
						break;
 8003ee6:	e016      	b.n	8003f16 <HAL_TIM_PeriodElapsedCallback+0xda>
					case 2:
						base.BaseStatus = 2;
 8003ee8:	4b47      	ldr	r3, [pc, #284]	@ (8004008 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8003eea:	2202      	movs	r2, #2
 8003eec:	801a      	strh	r2, [r3, #0]
						SetHome();
 8003eee:	f7fd faed 	bl	80014cc <SetHome>
						break;
 8003ef2:	e010      	b.n	8003f16 <HAL_TIM_PeriodElapsedCallback+0xda>
					case 4:
						base.BaseStatus = 4;
 8003ef4:	4b44      	ldr	r3, [pc, #272]	@ (8004008 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8003ef6:	2204      	movs	r2, #4
 8003ef8:	801a      	strh	r2, [r3, #0]
						RunJog();
 8003efa:	f7fd fb19 	bl	8001530 <RunJog>
						break;
 8003efe:	e00a      	b.n	8003f16 <HAL_TIM_PeriodElapsedCallback+0xda>
					case 8:
						base.BaseStatus = 16;
 8003f00:	4b41      	ldr	r3, [pc, #260]	@ (8004008 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8003f02:	2210      	movs	r2, #16
 8003f04:	801a      	strh	r2, [r3, #0]
						RunPoint();
 8003f06:	f7fd fa4f 	bl	80013a8 <RunPoint>
						break;
 8003f0a:	e004      	b.n	8003f16 <HAL_TIM_PeriodElapsedCallback+0xda>
					default :
						base.BaseStatus = 0;
 8003f0c:	4b3e      	ldr	r3, [pc, #248]	@ (8004008 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	801a      	strh	r2, [r3, #0]
						Holding_position();
 8003f12:	f7fd fd51 	bl	80019b8 <Holding_position>

				}

				// Reed Switch Status
				int pinCombination = (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) | HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 8003f16:	2140      	movs	r1, #64	@ 0x40
 8003f18:	483c      	ldr	r0, [pc, #240]	@ (800400c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8003f1a:	f002 faf7 	bl	800650c <HAL_GPIO_ReadPin>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	005c      	lsls	r4, r3, #1
 8003f22:	2180      	movs	r1, #128	@ 0x80
 8003f24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f28:	f002 faf0 	bl	800650c <HAL_GPIO_ReadPin>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	4323      	orrs	r3, r4
 8003f30:	60fb      	str	r3, [r7, #12]
				switch(pinCombination) {
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d007      	beq.n	8003f48 <HAL_TIM_PeriodElapsedCallback+0x10c>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d109      	bne.n	8003f52 <HAL_TIM_PeriodElapsedCallback+0x116>
					case 2: // Binary 10: B is SET, A is RESET
						base.ReedStatus = 0b0001;
 8003f3e:	4b32      	ldr	r3, [pc, #200]	@ (8004008 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8003f40:	2201      	movs	r2, #1
 8003f42:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
						break;
 8003f46:	e008      	b.n	8003f5a <HAL_TIM_PeriodElapsedCallback+0x11e>
					case 1: // Binary 01: B is RESET, A is SET
						base.ReedStatus = 0b0010;
 8003f48:	4b2f      	ldr	r3, [pc, #188]	@ (8004008 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
						break;
 8003f50:	e003      	b.n	8003f5a <HAL_TIM_PeriodElapsedCallback+0x11e>
					default:
						base.ReedStatus = 0b0000;
 8003f52:	4b2d      	ldr	r3, [pc, #180]	@ (8004008 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
				}

				// Coarse Step Joy
				if (ps2.mode == 1){
 8003f5a:	4b2d      	ldr	r3, [pc, #180]	@ (8004010 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8003f5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d10d      	bne.n	8003f7e <HAL_TIM_PeriodElapsedCallback+0x142>
					base.MotorHome = ps2.pwmOut;
 8003f62:	4b2b      	ldr	r3, [pc, #172]	@ (8004010 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8003f64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f66:	b21a      	sxth	r2, r3
 8003f68:	4b27      	ldr	r3, [pc, #156]	@ (8004008 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8003f6a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
					if (ps2.pwmOut < 0)
 8003f6e:	4b28      	ldr	r3, [pc, #160]	@ (8004010 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8003f70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	da03      	bge.n	8003f7e <HAL_TIM_PeriodElapsedCallback+0x142>
					{
						base.MotorHome = 0;
 8003f76:	4b24      	ldr	r3, [pc, #144]	@ (8004008 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
					}
				}

				// Fine Step Joy
				if (ps2.mode == 2){
 8003f7e:	4b24      	ldr	r3, [pc, #144]	@ (8004010 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8003f80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d114      	bne.n	8003fb0 <HAL_TIM_PeriodElapsedCallback+0x174>
					PID_controller_cascade(&PID_pos, &PID_velo, &AMT, ps2.PIDPos);
 8003f86:	4b22      	ldr	r3, [pc, #136]	@ (8004010 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8003f88:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 8003f8c:	eeb0 0a67 	vmov.f32	s0, s15
 8003f90:	4a1c      	ldr	r2, [pc, #112]	@ (8004004 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8003f92:	4920      	ldr	r1, [pc, #128]	@ (8004014 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8003f94:	4820      	ldr	r0, [pc, #128]	@ (8004018 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8003f96:	f7fe fe01 	bl	8002b9c <PID_controller_cascade>
					base.MotorHome = PID_velo.out;
 8003f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8004014 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8003f9c:	edd3 7a06 	vldr	s15, [r3, #24]
 8003fa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fa4:	ee17 3a90 	vmov	r3, s15
 8003fa8:	b21a      	sxth	r2, r3
 8003faa:	4b17      	ldr	r3, [pc, #92]	@ (8004008 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8003fac:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58



			// For 2 kHz
			//------------------For control PWM-------------------//
			if(interrupt_counter % 10 == 0)
 8003fb0:	4b11      	ldr	r3, [pc, #68]	@ (8003ff8 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8003fb2:	6819      	ldr	r1, [r3, #0]
 8003fb4:	4b11      	ldr	r3, [pc, #68]	@ (8003ffc <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8003fb6:	fba3 2301 	umull	r2, r3, r3, r1
 8003fba:	08da      	lsrs	r2, r3, #3
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	1aca      	subs	r2, r1, r3
 8003fc6:	2a00      	cmp	r2, #0
 8003fc8:	d10b      	bne.n	8003fe2 <HAL_TIM_PeriodElapsedCallback+0x1a6>
			{

//				elapsedTime += 0.0005;					//Calibrated Time

				MOTOR_set_duty(&MT, base.MotorHome);
 8003fca:	4b0f      	ldr	r3, [pc, #60]	@ (8004008 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8003fcc:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	@ 0x58
 8003fd0:	ee07 3a90 	vmov	s15, r3
 8003fd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fd8:	eeb0 0a67 	vmov.f32	s0, s15
 8003fdc:	480f      	ldr	r0, [pc, #60]	@ (800401c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8003fde:	f7fe f9bf 	bl	8002360 <MOTOR_set_duty>
			}
		}
	}
 8003fe2:	bf00      	nop
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bdb0      	pop	{r4, r5, r7, pc}
 8003fea:	bf00      	nop
 8003fec:	20000670 	.word	0x20000670
 8003ff0:	20001100 	.word	0x20001100
 8003ff4:	200005a4 	.word	0x200005a4
 8003ff8:	2000129c 	.word	0x2000129c
 8003ffc:	cccccccd 	.word	0xcccccccd
 8004000:	2000040c 	.word	0x2000040c
 8004004:	20000b48 	.word	0x20000b48
 8004008:	20000304 	.word	0x20000304
 800400c:	48000400 	.word	0x48000400
 8004010:	20000b88 	.word	0x20000b88
 8004014:	20000c08 	.word	0x20000c08
 8004018:	200002e8 	.word	0x200002e8
 800401c:	20000b2c 	.word	0x20000b2c

08004020 <micros>:

uint64_t micros()
	{
 8004020:	b4b0      	push	{r4, r5, r7}
 8004022:	af00      	add	r7, sp, #0
		return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 8004024:	4b09      	ldr	r3, [pc, #36]	@ (800404c <micros+0x2c>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402a:	2200      	movs	r2, #0
 800402c:	4618      	mov	r0, r3
 800402e:	4611      	mov	r1, r2
 8004030:	4b07      	ldr	r3, [pc, #28]	@ (8004050 <micros+0x30>)
 8004032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004036:	1884      	adds	r4, r0, r2
 8004038:	eb41 0503 	adc.w	r5, r1, r3
 800403c:	4622      	mov	r2, r4
 800403e:	462b      	mov	r3, r5
	}
 8004040:	4610      	mov	r0, r2
 8004042:	4619      	mov	r1, r3
 8004044:	46bd      	mov	sp, r7
 8004046:	bcb0      	pop	{r4, r5, r7}
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	20000670 	.word	0x20000670
 8004050:	20001100 	.word	0x20001100

08004054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004058:	b672      	cpsid	i
}
 800405a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800405c:	bf00      	nop
 800405e:	e7fd      	b.n	800405c <Error_Handler+0x8>

08004060 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004066:	4b0f      	ldr	r3, [pc, #60]	@ (80040a4 <HAL_MspInit+0x44>)
 8004068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800406a:	4a0e      	ldr	r2, [pc, #56]	@ (80040a4 <HAL_MspInit+0x44>)
 800406c:	f043 0301 	orr.w	r3, r3, #1
 8004070:	6613      	str	r3, [r2, #96]	@ 0x60
 8004072:	4b0c      	ldr	r3, [pc, #48]	@ (80040a4 <HAL_MspInit+0x44>)
 8004074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	607b      	str	r3, [r7, #4]
 800407c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800407e:	4b09      	ldr	r3, [pc, #36]	@ (80040a4 <HAL_MspInit+0x44>)
 8004080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004082:	4a08      	ldr	r2, [pc, #32]	@ (80040a4 <HAL_MspInit+0x44>)
 8004084:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004088:	6593      	str	r3, [r2, #88]	@ 0x58
 800408a:	4b06      	ldr	r3, [pc, #24]	@ (80040a4 <HAL_MspInit+0x44>)
 800408c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800408e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004092:	603b      	str	r3, [r7, #0]
 8004094:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004096:	f002 fb31 	bl	80066fc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800409a:	bf00      	nop
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40021000 	.word	0x40021000

080040a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b09e      	sub	sp, #120	@ 0x78
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040b0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80040b4:	2200      	movs	r2, #0
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	605a      	str	r2, [r3, #4]
 80040ba:	609a      	str	r2, [r3, #8]
 80040bc:	60da      	str	r2, [r3, #12]
 80040be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80040c0:	f107 0310 	add.w	r3, r7, #16
 80040c4:	2254      	movs	r2, #84	@ 0x54
 80040c6:	2100      	movs	r1, #0
 80040c8:	4618      	mov	r0, r3
 80040ca:	f007 fb0b 	bl	800b6e4 <memset>
  if(hadc->Instance==ADC1)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040d6:	d133      	bne.n	8004140 <HAL_ADC_MspInit+0x98>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80040d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040dc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80040de:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80040e2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040e4:	f107 0310 	add.w	r3, r7, #16
 80040e8:	4618      	mov	r0, r3
 80040ea:	f003 f845 	bl	8007178 <HAL_RCCEx_PeriphCLKConfig>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80040f4:	f7ff ffae 	bl	8004054 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80040f8:	4b13      	ldr	r3, [pc, #76]	@ (8004148 <HAL_ADC_MspInit+0xa0>)
 80040fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040fc:	4a12      	ldr	r2, [pc, #72]	@ (8004148 <HAL_ADC_MspInit+0xa0>)
 80040fe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004102:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004104:	4b10      	ldr	r3, [pc, #64]	@ (8004148 <HAL_ADC_MspInit+0xa0>)
 8004106:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004108:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004110:	4b0d      	ldr	r3, [pc, #52]	@ (8004148 <HAL_ADC_MspInit+0xa0>)
 8004112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004114:	4a0c      	ldr	r2, [pc, #48]	@ (8004148 <HAL_ADC_MspInit+0xa0>)
 8004116:	f043 0304 	orr.w	r3, r3, #4
 800411a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800411c:	4b0a      	ldr	r3, [pc, #40]	@ (8004148 <HAL_ADC_MspInit+0xa0>)
 800411e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004120:	f003 0304 	and.w	r3, r3, #4
 8004124:	60bb      	str	r3, [r7, #8]
 8004126:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Current_sensor_Pin;
 8004128:	2301      	movs	r3, #1
 800412a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800412c:	2303      	movs	r3, #3
 800412e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004130:	2300      	movs	r3, #0
 8004132:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(Current_sensor_GPIO_Port, &GPIO_InitStruct);
 8004134:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004138:	4619      	mov	r1, r3
 800413a:	4804      	ldr	r0, [pc, #16]	@ (800414c <HAL_ADC_MspInit+0xa4>)
 800413c:	f002 f864 	bl	8006208 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004140:	bf00      	nop
 8004142:	3778      	adds	r7, #120	@ 0x78
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40021000 	.word	0x40021000
 800414c:	48000800 	.word	0x48000800

08004150 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b08a      	sub	sp, #40	@ 0x28
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004158:	f107 0314 	add.w	r3, r7, #20
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	605a      	str	r2, [r3, #4]
 8004162:	609a      	str	r2, [r3, #8]
 8004164:	60da      	str	r2, [r3, #12]
 8004166:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004170:	d128      	bne.n	80041c4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004172:	4b16      	ldr	r3, [pc, #88]	@ (80041cc <HAL_TIM_Encoder_MspInit+0x7c>)
 8004174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004176:	4a15      	ldr	r2, [pc, #84]	@ (80041cc <HAL_TIM_Encoder_MspInit+0x7c>)
 8004178:	f043 0301 	orr.w	r3, r3, #1
 800417c:	6593      	str	r3, [r2, #88]	@ 0x58
 800417e:	4b13      	ldr	r3, [pc, #76]	@ (80041cc <HAL_TIM_Encoder_MspInit+0x7c>)
 8004180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	613b      	str	r3, [r7, #16]
 8004188:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800418a:	4b10      	ldr	r3, [pc, #64]	@ (80041cc <HAL_TIM_Encoder_MspInit+0x7c>)
 800418c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800418e:	4a0f      	ldr	r2, [pc, #60]	@ (80041cc <HAL_TIM_Encoder_MspInit+0x7c>)
 8004190:	f043 0301 	orr.w	r3, r3, #1
 8004194:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004196:	4b0d      	ldr	r3, [pc, #52]	@ (80041cc <HAL_TIM_Encoder_MspInit+0x7c>)
 8004198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80041a2:	2303      	movs	r3, #3
 80041a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a6:	2302      	movs	r3, #2
 80041a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041aa:	2300      	movs	r3, #0
 80041ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041ae:	2300      	movs	r3, #0
 80041b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80041b2:	2301      	movs	r3, #1
 80041b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041b6:	f107 0314 	add.w	r3, r7, #20
 80041ba:	4619      	mov	r1, r3
 80041bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80041c0:	f002 f822 	bl	8006208 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80041c4:	bf00      	nop
 80041c6:	3728      	adds	r7, #40	@ 0x28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40021000 	.word	0x40021000

080041d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b088      	sub	sp, #32
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a39      	ldr	r2, [pc, #228]	@ (80042c4 <HAL_TIM_Base_MspInit+0xf4>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d10c      	bne.n	80041fc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80041e2:	4b39      	ldr	r3, [pc, #228]	@ (80042c8 <HAL_TIM_Base_MspInit+0xf8>)
 80041e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041e6:	4a38      	ldr	r2, [pc, #224]	@ (80042c8 <HAL_TIM_Base_MspInit+0xf8>)
 80041e8:	f043 0302 	orr.w	r3, r3, #2
 80041ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80041ee:	4b36      	ldr	r3, [pc, #216]	@ (80042c8 <HAL_TIM_Base_MspInit+0xf8>)
 80041f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	61fb      	str	r3, [r7, #28]
 80041f8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80041fa:	e05e      	b.n	80042ba <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM4)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a32      	ldr	r2, [pc, #200]	@ (80042cc <HAL_TIM_Base_MspInit+0xfc>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d114      	bne.n	8004230 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004206:	4b30      	ldr	r3, [pc, #192]	@ (80042c8 <HAL_TIM_Base_MspInit+0xf8>)
 8004208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800420a:	4a2f      	ldr	r2, [pc, #188]	@ (80042c8 <HAL_TIM_Base_MspInit+0xf8>)
 800420c:	f043 0304 	orr.w	r3, r3, #4
 8004210:	6593      	str	r3, [r2, #88]	@ 0x58
 8004212:	4b2d      	ldr	r3, [pc, #180]	@ (80042c8 <HAL_TIM_Base_MspInit+0xf8>)
 8004214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004216:	f003 0304 	and.w	r3, r3, #4
 800421a:	61bb      	str	r3, [r7, #24]
 800421c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800421e:	2200      	movs	r2, #0
 8004220:	2100      	movs	r1, #0
 8004222:	201e      	movs	r0, #30
 8004224:	f001 fc89 	bl	8005b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004228:	201e      	movs	r0, #30
 800422a:	f001 fca0 	bl	8005b6e <HAL_NVIC_EnableIRQ>
}
 800422e:	e044      	b.n	80042ba <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM5)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a26      	ldr	r2, [pc, #152]	@ (80042d0 <HAL_TIM_Base_MspInit+0x100>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d114      	bne.n	8004264 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800423a:	4b23      	ldr	r3, [pc, #140]	@ (80042c8 <HAL_TIM_Base_MspInit+0xf8>)
 800423c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800423e:	4a22      	ldr	r2, [pc, #136]	@ (80042c8 <HAL_TIM_Base_MspInit+0xf8>)
 8004240:	f043 0308 	orr.w	r3, r3, #8
 8004244:	6593      	str	r3, [r2, #88]	@ 0x58
 8004246:	4b20      	ldr	r3, [pc, #128]	@ (80042c8 <HAL_TIM_Base_MspInit+0xf8>)
 8004248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800424a:	f003 0308 	and.w	r3, r3, #8
 800424e:	617b      	str	r3, [r7, #20]
 8004250:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004252:	2200      	movs	r2, #0
 8004254:	2100      	movs	r1, #0
 8004256:	2032      	movs	r0, #50	@ 0x32
 8004258:	f001 fc6f 	bl	8005b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800425c:	2032      	movs	r0, #50	@ 0x32
 800425e:	f001 fc86 	bl	8005b6e <HAL_NVIC_EnableIRQ>
}
 8004262:	e02a      	b.n	80042ba <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM6)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a1a      	ldr	r2, [pc, #104]	@ (80042d4 <HAL_TIM_Base_MspInit+0x104>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d10c      	bne.n	8004288 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800426e:	4b16      	ldr	r3, [pc, #88]	@ (80042c8 <HAL_TIM_Base_MspInit+0xf8>)
 8004270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004272:	4a15      	ldr	r2, [pc, #84]	@ (80042c8 <HAL_TIM_Base_MspInit+0xf8>)
 8004274:	f043 0310 	orr.w	r3, r3, #16
 8004278:	6593      	str	r3, [r2, #88]	@ 0x58
 800427a:	4b13      	ldr	r3, [pc, #76]	@ (80042c8 <HAL_TIM_Base_MspInit+0xf8>)
 800427c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800427e:	f003 0310 	and.w	r3, r3, #16
 8004282:	613b      	str	r3, [r7, #16]
 8004284:	693b      	ldr	r3, [r7, #16]
}
 8004286:	e018      	b.n	80042ba <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM16)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a12      	ldr	r2, [pc, #72]	@ (80042d8 <HAL_TIM_Base_MspInit+0x108>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d113      	bne.n	80042ba <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004292:	4b0d      	ldr	r3, [pc, #52]	@ (80042c8 <HAL_TIM_Base_MspInit+0xf8>)
 8004294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004296:	4a0c      	ldr	r2, [pc, #48]	@ (80042c8 <HAL_TIM_Base_MspInit+0xf8>)
 8004298:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800429c:	6613      	str	r3, [r2, #96]	@ 0x60
 800429e:	4b0a      	ldr	r3, [pc, #40]	@ (80042c8 <HAL_TIM_Base_MspInit+0xf8>)
 80042a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80042aa:	2200      	movs	r2, #0
 80042ac:	2100      	movs	r1, #0
 80042ae:	2019      	movs	r0, #25
 80042b0:	f001 fc43 	bl	8005b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80042b4:	2019      	movs	r0, #25
 80042b6:	f001 fc5a 	bl	8005b6e <HAL_NVIC_EnableIRQ>
}
 80042ba:	bf00      	nop
 80042bc:	3720      	adds	r7, #32
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	40000400 	.word	0x40000400
 80042c8:	40021000 	.word	0x40021000
 80042cc:	40000800 	.word	0x40000800
 80042d0:	40000c00 	.word	0x40000c00
 80042d4:	40001000 	.word	0x40001000
 80042d8:	40014400 	.word	0x40014400

080042dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b088      	sub	sp, #32
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042e4:	f107 030c 	add.w	r3, r7, #12
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]
 80042ec:	605a      	str	r2, [r3, #4]
 80042ee:	609a      	str	r2, [r3, #8]
 80042f0:	60da      	str	r2, [r3, #12]
 80042f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a11      	ldr	r2, [pc, #68]	@ (8004340 <HAL_TIM_MspPostInit+0x64>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d11b      	bne.n	8004336 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042fe:	4b11      	ldr	r3, [pc, #68]	@ (8004344 <HAL_TIM_MspPostInit+0x68>)
 8004300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004302:	4a10      	ldr	r2, [pc, #64]	@ (8004344 <HAL_TIM_MspPostInit+0x68>)
 8004304:	f043 0302 	orr.w	r3, r3, #2
 8004308:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800430a:	4b0e      	ldr	r3, [pc, #56]	@ (8004344 <HAL_TIM_MspPostInit+0x68>)
 800430c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	60bb      	str	r3, [r7, #8]
 8004314:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004316:	2330      	movs	r3, #48	@ 0x30
 8004318:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800431a:	2302      	movs	r3, #2
 800431c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800431e:	2300      	movs	r3, #0
 8004320:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004322:	2300      	movs	r3, #0
 8004324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004326:	2302      	movs	r3, #2
 8004328:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800432a:	f107 030c 	add.w	r3, r7, #12
 800432e:	4619      	mov	r1, r3
 8004330:	4805      	ldr	r0, [pc, #20]	@ (8004348 <HAL_TIM_MspPostInit+0x6c>)
 8004332:	f001 ff69 	bl	8006208 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004336:	bf00      	nop
 8004338:	3720      	adds	r7, #32
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	40000400 	.word	0x40000400
 8004344:	40021000 	.word	0x40021000
 8004348:	48000400 	.word	0x48000400

0800434c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b0a0      	sub	sp, #128	@ 0x80
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004354:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	605a      	str	r2, [r3, #4]
 800435e:	609a      	str	r2, [r3, #8]
 8004360:	60da      	str	r2, [r3, #12]
 8004362:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004364:	f107 0318 	add.w	r3, r7, #24
 8004368:	2254      	movs	r2, #84	@ 0x54
 800436a:	2100      	movs	r1, #0
 800436c:	4618      	mov	r0, r3
 800436e:	f007 f9b9 	bl	800b6e4 <memset>
  if(huart->Instance==UART4)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a6b      	ldr	r2, [pc, #428]	@ (8004524 <HAL_UART_MspInit+0x1d8>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d137      	bne.n	80043ec <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800437c:	2308      	movs	r3, #8
 800437e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8004380:	2300      	movs	r3, #0
 8004382:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004384:	f107 0318 	add.w	r3, r7, #24
 8004388:	4618      	mov	r0, r3
 800438a:	f002 fef5 	bl	8007178 <HAL_RCCEx_PeriphCLKConfig>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004394:	f7ff fe5e 	bl	8004054 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004398:	4b63      	ldr	r3, [pc, #396]	@ (8004528 <HAL_UART_MspInit+0x1dc>)
 800439a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800439c:	4a62      	ldr	r2, [pc, #392]	@ (8004528 <HAL_UART_MspInit+0x1dc>)
 800439e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80043a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80043a4:	4b60      	ldr	r3, [pc, #384]	@ (8004528 <HAL_UART_MspInit+0x1dc>)
 80043a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043ac:	617b      	str	r3, [r7, #20]
 80043ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043b0:	4b5d      	ldr	r3, [pc, #372]	@ (8004528 <HAL_UART_MspInit+0x1dc>)
 80043b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043b4:	4a5c      	ldr	r2, [pc, #368]	@ (8004528 <HAL_UART_MspInit+0x1dc>)
 80043b6:	f043 0304 	orr.w	r3, r3, #4
 80043ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043bc:	4b5a      	ldr	r3, [pc, #360]	@ (8004528 <HAL_UART_MspInit+0x1dc>)
 80043be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043c0:	f003 0304 	and.w	r3, r3, #4
 80043c4:	613b      	str	r3, [r7, #16]
 80043c6:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80043c8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80043cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ce:	2302      	movs	r3, #2
 80043d0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d2:	2300      	movs	r3, #0
 80043d4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043d6:	2300      	movs	r3, #0
 80043d8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80043da:	2305      	movs	r3, #5
 80043dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043de:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80043e2:	4619      	mov	r1, r3
 80043e4:	4851      	ldr	r0, [pc, #324]	@ (800452c <HAL_UART_MspInit+0x1e0>)
 80043e6:	f001 ff0f 	bl	8006208 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80043ea:	e097      	b.n	800451c <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART2)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a4f      	ldr	r2, [pc, #316]	@ (8004530 <HAL_UART_MspInit+0x1e4>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	f040 8092 	bne.w	800451c <HAL_UART_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80043f8:	2302      	movs	r3, #2
 80043fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80043fc:	2300      	movs	r3, #0
 80043fe:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004400:	f107 0318 	add.w	r3, r7, #24
 8004404:	4618      	mov	r0, r3
 8004406:	f002 feb7 	bl	8007178 <HAL_RCCEx_PeriphCLKConfig>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8004410:	f7ff fe20 	bl	8004054 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004414:	4b44      	ldr	r3, [pc, #272]	@ (8004528 <HAL_UART_MspInit+0x1dc>)
 8004416:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004418:	4a43      	ldr	r2, [pc, #268]	@ (8004528 <HAL_UART_MspInit+0x1dc>)
 800441a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800441e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004420:	4b41      	ldr	r3, [pc, #260]	@ (8004528 <HAL_UART_MspInit+0x1dc>)
 8004422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004424:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004428:	60fb      	str	r3, [r7, #12]
 800442a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800442c:	4b3e      	ldr	r3, [pc, #248]	@ (8004528 <HAL_UART_MspInit+0x1dc>)
 800442e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004430:	4a3d      	ldr	r2, [pc, #244]	@ (8004528 <HAL_UART_MspInit+0x1dc>)
 8004432:	f043 0301 	orr.w	r3, r3, #1
 8004436:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004438:	4b3b      	ldr	r3, [pc, #236]	@ (8004528 <HAL_UART_MspInit+0x1dc>)
 800443a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	60bb      	str	r3, [r7, #8]
 8004442:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004444:	230c      	movs	r3, #12
 8004446:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004448:	2302      	movs	r3, #2
 800444a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444c:	2300      	movs	r3, #0
 800444e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004450:	2300      	movs	r3, #0
 8004452:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004454:	2307      	movs	r3, #7
 8004456:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004458:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800445c:	4619      	mov	r1, r3
 800445e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004462:	f001 fed1 	bl	8006208 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8004466:	4b33      	ldr	r3, [pc, #204]	@ (8004534 <HAL_UART_MspInit+0x1e8>)
 8004468:	4a33      	ldr	r2, [pc, #204]	@ (8004538 <HAL_UART_MspInit+0x1ec>)
 800446a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800446c:	4b31      	ldr	r3, [pc, #196]	@ (8004534 <HAL_UART_MspInit+0x1e8>)
 800446e:	221b      	movs	r2, #27
 8004470:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004472:	4b30      	ldr	r3, [pc, #192]	@ (8004534 <HAL_UART_MspInit+0x1e8>)
 8004474:	2210      	movs	r2, #16
 8004476:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004478:	4b2e      	ldr	r3, [pc, #184]	@ (8004534 <HAL_UART_MspInit+0x1e8>)
 800447a:	2200      	movs	r2, #0
 800447c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800447e:	4b2d      	ldr	r3, [pc, #180]	@ (8004534 <HAL_UART_MspInit+0x1e8>)
 8004480:	2280      	movs	r2, #128	@ 0x80
 8004482:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004484:	4b2b      	ldr	r3, [pc, #172]	@ (8004534 <HAL_UART_MspInit+0x1e8>)
 8004486:	2200      	movs	r2, #0
 8004488:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800448a:	4b2a      	ldr	r3, [pc, #168]	@ (8004534 <HAL_UART_MspInit+0x1e8>)
 800448c:	2200      	movs	r2, #0
 800448e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004490:	4b28      	ldr	r3, [pc, #160]	@ (8004534 <HAL_UART_MspInit+0x1e8>)
 8004492:	2200      	movs	r2, #0
 8004494:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004496:	4b27      	ldr	r3, [pc, #156]	@ (8004534 <HAL_UART_MspInit+0x1e8>)
 8004498:	2200      	movs	r2, #0
 800449a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800449c:	4825      	ldr	r0, [pc, #148]	@ (8004534 <HAL_UART_MspInit+0x1e8>)
 800449e:	f001 fb81 	bl	8005ba4 <HAL_DMA_Init>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d001      	beq.n	80044ac <HAL_UART_MspInit+0x160>
      Error_Handler();
 80044a8:	f7ff fdd4 	bl	8004054 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a21      	ldr	r2, [pc, #132]	@ (8004534 <HAL_UART_MspInit+0x1e8>)
 80044b0:	67da      	str	r2, [r3, #124]	@ 0x7c
 80044b2:	4a20      	ldr	r2, [pc, #128]	@ (8004534 <HAL_UART_MspInit+0x1e8>)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80044b8:	4b20      	ldr	r3, [pc, #128]	@ (800453c <HAL_UART_MspInit+0x1f0>)
 80044ba:	4a21      	ldr	r2, [pc, #132]	@ (8004540 <HAL_UART_MspInit+0x1f4>)
 80044bc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80044be:	4b1f      	ldr	r3, [pc, #124]	@ (800453c <HAL_UART_MspInit+0x1f0>)
 80044c0:	221a      	movs	r2, #26
 80044c2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044c4:	4b1d      	ldr	r3, [pc, #116]	@ (800453c <HAL_UART_MspInit+0x1f0>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044ca:	4b1c      	ldr	r3, [pc, #112]	@ (800453c <HAL_UART_MspInit+0x1f0>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80044d0:	4b1a      	ldr	r3, [pc, #104]	@ (800453c <HAL_UART_MspInit+0x1f0>)
 80044d2:	2280      	movs	r2, #128	@ 0x80
 80044d4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044d6:	4b19      	ldr	r3, [pc, #100]	@ (800453c <HAL_UART_MspInit+0x1f0>)
 80044d8:	2200      	movs	r2, #0
 80044da:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044dc:	4b17      	ldr	r3, [pc, #92]	@ (800453c <HAL_UART_MspInit+0x1f0>)
 80044de:	2200      	movs	r2, #0
 80044e0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80044e2:	4b16      	ldr	r3, [pc, #88]	@ (800453c <HAL_UART_MspInit+0x1f0>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80044e8:	4b14      	ldr	r3, [pc, #80]	@ (800453c <HAL_UART_MspInit+0x1f0>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80044ee:	4813      	ldr	r0, [pc, #76]	@ (800453c <HAL_UART_MspInit+0x1f0>)
 80044f0:	f001 fb58 	bl	8005ba4 <HAL_DMA_Init>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <HAL_UART_MspInit+0x1b2>
      Error_Handler();
 80044fa:	f7ff fdab 	bl	8004054 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a0e      	ldr	r2, [pc, #56]	@ (800453c <HAL_UART_MspInit+0x1f0>)
 8004502:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004506:	4a0d      	ldr	r2, [pc, #52]	@ (800453c <HAL_UART_MspInit+0x1f0>)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800450c:	2200      	movs	r2, #0
 800450e:	2100      	movs	r1, #0
 8004510:	2026      	movs	r0, #38	@ 0x26
 8004512:	f001 fb12 	bl	8005b3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004516:	2026      	movs	r0, #38	@ 0x26
 8004518:	f001 fb29 	bl	8005b6e <HAL_NVIC_EnableIRQ>
}
 800451c:	bf00      	nop
 800451e:	3780      	adds	r7, #128	@ 0x80
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	40004c00 	.word	0x40004c00
 8004528:	40021000 	.word	0x40021000
 800452c:	48000800 	.word	0x48000800
 8004530:	40004400 	.word	0x40004400
 8004534:	20000a6c 	.word	0x20000a6c
 8004538:	40020008 	.word	0x40020008
 800453c:	20000acc 	.word	0x20000acc
 8004540:	4002001c 	.word	0x4002001c

08004544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004548:	bf00      	nop
 800454a:	e7fd      	b.n	8004548 <NMI_Handler+0x4>

0800454c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004550:	bf00      	nop
 8004552:	e7fd      	b.n	8004550 <HardFault_Handler+0x4>

08004554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004554:	b480      	push	{r7}
 8004556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004558:	bf00      	nop
 800455a:	e7fd      	b.n	8004558 <MemManage_Handler+0x4>

0800455c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004560:	bf00      	nop
 8004562:	e7fd      	b.n	8004560 <BusFault_Handler+0x4>

08004564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004568:	bf00      	nop
 800456a:	e7fd      	b.n	8004568 <UsageFault_Handler+0x4>

0800456c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004570:	bf00      	nop
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800457a:	b480      	push	{r7}
 800457c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800457e:	bf00      	nop
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800458c:	bf00      	nop
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800459a:	f000 f8d5 	bl	8004748 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800459e:	bf00      	nop
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80045a8:	4802      	ldr	r0, [pc, #8]	@ (80045b4 <DMA1_Channel1_IRQHandler+0x10>)
 80045aa:	f001 fcde 	bl	8005f6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80045ae:	bf00      	nop
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	20000a6c 	.word	0x20000a6c

080045b8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80045bc:	4802      	ldr	r0, [pc, #8]	@ (80045c8 <DMA1_Channel2_IRQHandler+0x10>)
 80045be:	f001 fcd4 	bl	8005f6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80045c2:	bf00      	nop
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	20000acc 	.word	0x20000acc

080045cc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80045d0:	4802      	ldr	r0, [pc, #8]	@ (80045dc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80045d2:	f003 fd71 	bl	80080b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80045d6:	bf00      	nop
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	20000808 	.word	0x20000808

080045e0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80045e4:	4802      	ldr	r0, [pc, #8]	@ (80045f0 <TIM4_IRQHandler+0x10>)
 80045e6:	f003 fd67 	bl	80080b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80045ea:	bf00      	nop
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	200005a4 	.word	0x200005a4

080045f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80045f8:	4802      	ldr	r0, [pc, #8]	@ (8004604 <USART2_IRQHandler+0x10>)
 80045fa:	f005 fb65 	bl	8009cc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80045fe:	bf00      	nop
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	200009a0 	.word	0x200009a0

08004608 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800460c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004610:	f001 ffac 	bl	800656c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004614:	bf00      	nop
 8004616:	bd80      	pop	{r7, pc}

08004618 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800461c:	4802      	ldr	r0, [pc, #8]	@ (8004628 <TIM5_IRQHandler+0x10>)
 800461e:	f003 fd4b 	bl	80080b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004622:	bf00      	nop
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	20000670 	.word	0x20000670

0800462c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800462c:	b480      	push	{r7}
 800462e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004630:	4b06      	ldr	r3, [pc, #24]	@ (800464c <SystemInit+0x20>)
 8004632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004636:	4a05      	ldr	r2, [pc, #20]	@ (800464c <SystemInit+0x20>)
 8004638:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800463c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004640:	bf00      	nop
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	e000ed00 	.word	0xe000ed00

08004650 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004650:	480d      	ldr	r0, [pc, #52]	@ (8004688 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004652:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004654:	f7ff ffea 	bl	800462c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004658:	480c      	ldr	r0, [pc, #48]	@ (800468c <LoopForever+0x6>)
  ldr r1, =_edata
 800465a:	490d      	ldr	r1, [pc, #52]	@ (8004690 <LoopForever+0xa>)
  ldr r2, =_sidata
 800465c:	4a0d      	ldr	r2, [pc, #52]	@ (8004694 <LoopForever+0xe>)
  movs r3, #0
 800465e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004660:	e002      	b.n	8004668 <LoopCopyDataInit>

08004662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004666:	3304      	adds	r3, #4

08004668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800466a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800466c:	d3f9      	bcc.n	8004662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800466e:	4a0a      	ldr	r2, [pc, #40]	@ (8004698 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004670:	4c0a      	ldr	r4, [pc, #40]	@ (800469c <LoopForever+0x16>)
  movs r3, #0
 8004672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004674:	e001      	b.n	800467a <LoopFillZerobss>

08004676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004678:	3204      	adds	r2, #4

0800467a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800467a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800467c:	d3fb      	bcc.n	8004676 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800467e:	f007 f83f 	bl	800b700 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004682:	f7fe feef 	bl	8003464 <main>

08004686 <LoopForever>:

LoopForever:
    b LoopForever
 8004686:	e7fe      	b.n	8004686 <LoopForever>
  ldr   r0, =_estack
 8004688:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800468c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004690:	200002b0 	.word	0x200002b0
  ldr r2, =_sidata
 8004694:	0800b9f0 	.word	0x0800b9f0
  ldr r2, =_sbss
 8004698:	200002b0 	.word	0x200002b0
  ldr r4, =_ebss
 800469c:	200013e4 	.word	0x200013e4

080046a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80046a0:	e7fe      	b.n	80046a0 <ADC1_2_IRQHandler>

080046a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b082      	sub	sp, #8
 80046a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80046a8:	2300      	movs	r3, #0
 80046aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046ac:	2003      	movs	r0, #3
 80046ae:	f001 fa39 	bl	8005b24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80046b2:	2000      	movs	r0, #0
 80046b4:	f000 f80e 	bl	80046d4 <HAL_InitTick>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d002      	beq.n	80046c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	71fb      	strb	r3, [r7, #7]
 80046c2:	e001      	b.n	80046c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80046c4:	f7ff fccc 	bl	8004060 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80046c8:	79fb      	ldrb	r3, [r7, #7]

}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
	...

080046d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80046dc:	2300      	movs	r3, #0
 80046de:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80046e0:	4b16      	ldr	r3, [pc, #88]	@ (800473c <HAL_InitTick+0x68>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d022      	beq.n	800472e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80046e8:	4b15      	ldr	r3, [pc, #84]	@ (8004740 <HAL_InitTick+0x6c>)
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	4b13      	ldr	r3, [pc, #76]	@ (800473c <HAL_InitTick+0x68>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80046f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80046f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046fc:	4618      	mov	r0, r3
 80046fe:	f001 fa44 	bl	8005b8a <HAL_SYSTICK_Config>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10f      	bne.n	8004728 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b0f      	cmp	r3, #15
 800470c:	d809      	bhi.n	8004722 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800470e:	2200      	movs	r2, #0
 8004710:	6879      	ldr	r1, [r7, #4]
 8004712:	f04f 30ff 	mov.w	r0, #4294967295
 8004716:	f001 fa10 	bl	8005b3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800471a:	4a0a      	ldr	r2, [pc, #40]	@ (8004744 <HAL_InitTick+0x70>)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6013      	str	r3, [r2, #0]
 8004720:	e007      	b.n	8004732 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	73fb      	strb	r3, [r7, #15]
 8004726:	e004      	b.n	8004732 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	73fb      	strb	r3, [r7, #15]
 800472c:	e001      	b.n	8004732 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004732:	7bfb      	ldrb	r3, [r7, #15]
}
 8004734:	4618      	mov	r0, r3
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	20000248 	.word	0x20000248
 8004740:	20000240 	.word	0x20000240
 8004744:	20000244 	.word	0x20000244

08004748 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004748:	b480      	push	{r7}
 800474a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800474c:	4b05      	ldr	r3, [pc, #20]	@ (8004764 <HAL_IncTick+0x1c>)
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	4b05      	ldr	r3, [pc, #20]	@ (8004768 <HAL_IncTick+0x20>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4413      	add	r3, r2
 8004756:	4a03      	ldr	r2, [pc, #12]	@ (8004764 <HAL_IncTick+0x1c>)
 8004758:	6013      	str	r3, [r2, #0]
}
 800475a:	bf00      	nop
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	200012a8 	.word	0x200012a8
 8004768:	20000248 	.word	0x20000248

0800476c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
  return uwTick;
 8004770:	4b03      	ldr	r3, [pc, #12]	@ (8004780 <HAL_GetTick+0x14>)
 8004772:	681b      	ldr	r3, [r3, #0]
}
 8004774:	4618      	mov	r0, r3
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	200012a8 	.word	0x200012a8

08004784 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	431a      	orrs	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	609a      	str	r2, [r3, #8]
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
 80047b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	431a      	orrs	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	609a      	str	r2, [r3, #8]
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b087      	sub	sp, #28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
 80047f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	3360      	adds	r3, #96	@ 0x60
 80047fe:	461a      	mov	r2, r3
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	4b08      	ldr	r3, [pc, #32]	@ (8004830 <LL_ADC_SetOffset+0x44>)
 800480e:	4013      	ands	r3, r2
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	4313      	orrs	r3, r2
 800481c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004824:	bf00      	nop
 8004826:	371c      	adds	r7, #28
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	03fff000 	.word	0x03fff000

08004834 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	3360      	adds	r3, #96	@ 0x60
 8004842:	461a      	mov	r2, r3
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	4413      	add	r3, r2
 800484a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004854:	4618      	mov	r0, r3
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004860:	b480      	push	{r7}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	3360      	adds	r3, #96	@ 0x60
 8004870:	461a      	mov	r2, r3
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	431a      	orrs	r2, r3
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800488a:	bf00      	nop
 800488c:	371c      	adds	r7, #28
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004896:	b480      	push	{r7}
 8004898:	b087      	sub	sp, #28
 800489a:	af00      	add	r7, sp, #0
 800489c:	60f8      	str	r0, [r7, #12]
 800489e:	60b9      	str	r1, [r7, #8]
 80048a0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	3360      	adds	r3, #96	@ 0x60
 80048a6:	461a      	mov	r2, r3
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	4413      	add	r3, r2
 80048ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	431a      	orrs	r2, r3
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80048c0:	bf00      	nop
 80048c2:	371c      	adds	r7, #28
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b087      	sub	sp, #28
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	3360      	adds	r3, #96	@ 0x60
 80048dc:	461a      	mov	r2, r3
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	431a      	orrs	r2, r3
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80048f6:	bf00      	nop
 80048f8:	371c      	adds	r7, #28
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004902:	b480      	push	{r7}
 8004904:	b083      	sub	sp, #12
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
 800490a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	615a      	str	r2, [r3, #20]
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	3330      	adds	r3, #48	@ 0x30
 8004938:	461a      	mov	r2, r3
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	0a1b      	lsrs	r3, r3, #8
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	f003 030c 	and.w	r3, r3, #12
 8004944:	4413      	add	r3, r2
 8004946:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	f003 031f 	and.w	r3, r3, #31
 8004952:	211f      	movs	r1, #31
 8004954:	fa01 f303 	lsl.w	r3, r1, r3
 8004958:	43db      	mvns	r3, r3
 800495a:	401a      	ands	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	0e9b      	lsrs	r3, r3, #26
 8004960:	f003 011f 	and.w	r1, r3, #31
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	f003 031f 	and.w	r3, r3, #31
 800496a:	fa01 f303 	lsl.w	r3, r1, r3
 800496e:	431a      	orrs	r2, r3
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004974:	bf00      	nop
 8004976:	371c      	adds	r7, #28
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004980:	b480      	push	{r7}
 8004982:	b087      	sub	sp, #28
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	3314      	adds	r3, #20
 8004990:	461a      	mov	r2, r3
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	0e5b      	lsrs	r3, r3, #25
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	f003 0304 	and.w	r3, r3, #4
 800499c:	4413      	add	r3, r2
 800499e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	0d1b      	lsrs	r3, r3, #20
 80049a8:	f003 031f 	and.w	r3, r3, #31
 80049ac:	2107      	movs	r1, #7
 80049ae:	fa01 f303 	lsl.w	r3, r1, r3
 80049b2:	43db      	mvns	r3, r3
 80049b4:	401a      	ands	r2, r3
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	0d1b      	lsrs	r3, r3, #20
 80049ba:	f003 031f 	and.w	r3, r3, #31
 80049be:	6879      	ldr	r1, [r7, #4]
 80049c0:	fa01 f303 	lsl.w	r3, r1, r3
 80049c4:	431a      	orrs	r2, r3
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80049ca:	bf00      	nop
 80049cc:	371c      	adds	r7, #28
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
	...

080049d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049f0:	43db      	mvns	r3, r3
 80049f2:	401a      	ands	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f003 0318 	and.w	r3, r3, #24
 80049fa:	4908      	ldr	r1, [pc, #32]	@ (8004a1c <LL_ADC_SetChannelSingleDiff+0x44>)
 80049fc:	40d9      	lsrs	r1, r3
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	400b      	ands	r3, r1
 8004a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a06:	431a      	orrs	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004a0e:	bf00      	nop
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	0007ffff 	.word	0x0007ffff

08004a20 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004a30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	6093      	str	r3, [r2, #8]
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a58:	d101      	bne.n	8004a5e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e000      	b.n	8004a60 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004a7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004a80:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aa4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004aa8:	d101      	bne.n	8004aae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e000      	b.n	8004ab0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <LL_ADC_IsEnabled+0x18>
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e000      	b.n	8004ad6 <LL_ADC_IsEnabled+0x1a>
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b083      	sub	sp, #12
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 0304 	and.w	r3, r3, #4
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d101      	bne.n	8004afa <LL_ADC_REG_IsConversionOngoing+0x18>
 8004af6:	2301      	movs	r3, #1
 8004af8:	e000      	b.n	8004afc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f003 0308 	and.w	r3, r3, #8
 8004b18:	2b08      	cmp	r3, #8
 8004b1a:	d101      	bne.n	8004b20 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e000      	b.n	8004b22 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
	...

08004b30 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004b30:	b590      	push	{r4, r7, lr}
 8004b32:	b089      	sub	sp, #36	@ 0x24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d101      	bne.n	8004b4a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e1a9      	b.n	8004e9e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d109      	bne.n	8004b6c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7ff faa5 	bl	80040a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7ff ff67 	bl	8004a44 <LL_ADC_IsDeepPowerDownEnabled>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d004      	beq.n	8004b86 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7ff ff4d 	bl	8004a20 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff ff82 	bl	8004a94 <LL_ADC_IsInternalRegulatorEnabled>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d115      	bne.n	8004bc2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7ff ff66 	bl	8004a6c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ba0:	4b9c      	ldr	r3, [pc, #624]	@ (8004e14 <HAL_ADC_Init+0x2e4>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	099b      	lsrs	r3, r3, #6
 8004ba6:	4a9c      	ldr	r2, [pc, #624]	@ (8004e18 <HAL_ADC_Init+0x2e8>)
 8004ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bac:	099b      	lsrs	r3, r3, #6
 8004bae:	3301      	adds	r3, #1
 8004bb0:	005b      	lsls	r3, r3, #1
 8004bb2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004bb4:	e002      	b.n	8004bbc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1f9      	bne.n	8004bb6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7ff ff64 	bl	8004a94 <LL_ADC_IsInternalRegulatorEnabled>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10d      	bne.n	8004bee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bd6:	f043 0210 	orr.w	r2, r3, #16
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004be2:	f043 0201 	orr.w	r2, r3, #1
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7ff ff75 	bl	8004ae2 <LL_ADC_REG_IsConversionOngoing>
 8004bf8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bfe:	f003 0310 	and.w	r3, r3, #16
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f040 8142 	bne.w	8004e8c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f040 813e 	bne.w	8004e8c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c14:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004c18:	f043 0202 	orr.w	r2, r3, #2
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7ff ff49 	bl	8004abc <LL_ADC_IsEnabled>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d141      	bne.n	8004cb4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c38:	d004      	beq.n	8004c44 <HAL_ADC_Init+0x114>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a77      	ldr	r2, [pc, #476]	@ (8004e1c <HAL_ADC_Init+0x2ec>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d10f      	bne.n	8004c64 <HAL_ADC_Init+0x134>
 8004c44:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004c48:	f7ff ff38 	bl	8004abc <LL_ADC_IsEnabled>
 8004c4c:	4604      	mov	r4, r0
 8004c4e:	4873      	ldr	r0, [pc, #460]	@ (8004e1c <HAL_ADC_Init+0x2ec>)
 8004c50:	f7ff ff34 	bl	8004abc <LL_ADC_IsEnabled>
 8004c54:	4603      	mov	r3, r0
 8004c56:	4323      	orrs	r3, r4
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	bf0c      	ite	eq
 8004c5c:	2301      	moveq	r3, #1
 8004c5e:	2300      	movne	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	e012      	b.n	8004c8a <HAL_ADC_Init+0x15a>
 8004c64:	486e      	ldr	r0, [pc, #440]	@ (8004e20 <HAL_ADC_Init+0x2f0>)
 8004c66:	f7ff ff29 	bl	8004abc <LL_ADC_IsEnabled>
 8004c6a:	4604      	mov	r4, r0
 8004c6c:	486d      	ldr	r0, [pc, #436]	@ (8004e24 <HAL_ADC_Init+0x2f4>)
 8004c6e:	f7ff ff25 	bl	8004abc <LL_ADC_IsEnabled>
 8004c72:	4603      	mov	r3, r0
 8004c74:	431c      	orrs	r4, r3
 8004c76:	486c      	ldr	r0, [pc, #432]	@ (8004e28 <HAL_ADC_Init+0x2f8>)
 8004c78:	f7ff ff20 	bl	8004abc <LL_ADC_IsEnabled>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	4323      	orrs	r3, r4
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	bf0c      	ite	eq
 8004c84:	2301      	moveq	r3, #1
 8004c86:	2300      	movne	r3, #0
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d012      	beq.n	8004cb4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c96:	d004      	beq.n	8004ca2 <HAL_ADC_Init+0x172>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a5f      	ldr	r2, [pc, #380]	@ (8004e1c <HAL_ADC_Init+0x2ec>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d101      	bne.n	8004ca6 <HAL_ADC_Init+0x176>
 8004ca2:	4a62      	ldr	r2, [pc, #392]	@ (8004e2c <HAL_ADC_Init+0x2fc>)
 8004ca4:	e000      	b.n	8004ca8 <HAL_ADC_Init+0x178>
 8004ca6:	4a62      	ldr	r2, [pc, #392]	@ (8004e30 <HAL_ADC_Init+0x300>)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	4619      	mov	r1, r3
 8004cae:	4610      	mov	r0, r2
 8004cb0:	f7ff fd68 	bl	8004784 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	7f5b      	ldrb	r3, [r3, #29]
 8004cb8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004cbe:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004cc4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004cca:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004cd2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d106      	bne.n	8004cf0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	045b      	lsls	r3, r3, #17
 8004cea:	69ba      	ldr	r2, [r7, #24]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d009      	beq.n	8004d0c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d04:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68da      	ldr	r2, [r3, #12]
 8004d12:	4b48      	ldr	r3, [pc, #288]	@ (8004e34 <HAL_ADC_Init+0x304>)
 8004d14:	4013      	ands	r3, r2
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	6812      	ldr	r2, [r2, #0]
 8004d1a:	69b9      	ldr	r1, [r7, #24]
 8004d1c:	430b      	orrs	r3, r1
 8004d1e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7ff fee4 	bl	8004b08 <LL_ADC_INJ_IsConversionOngoing>
 8004d40:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d17f      	bne.n	8004e48 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d17c      	bne.n	8004e48 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004d52:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004d5a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d6a:	f023 0302 	bic.w	r3, r3, #2
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	6812      	ldr	r2, [r2, #0]
 8004d72:	69b9      	ldr	r1, [r7, #24]
 8004d74:	430b      	orrs	r3, r1
 8004d76:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d017      	beq.n	8004db0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	691a      	ldr	r2, [r3, #16]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004d8e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004d98:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004d9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6911      	ldr	r1, [r2, #16]
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	6812      	ldr	r2, [r2, #0]
 8004da8:	430b      	orrs	r3, r1
 8004daa:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004dae:	e013      	b.n	8004dd8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	691a      	ldr	r2, [r3, #16]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004dbe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	6812      	ldr	r2, [r2, #0]
 8004dcc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004dd0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004dd4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d12a      	bne.n	8004e38 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004dec:	f023 0304 	bic.w	r3, r3, #4
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004df8:	4311      	orrs	r1, r2
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004dfe:	4311      	orrs	r1, r2
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004e04:	430a      	orrs	r2, r1
 8004e06:	431a      	orrs	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f042 0201 	orr.w	r2, r2, #1
 8004e10:	611a      	str	r2, [r3, #16]
 8004e12:	e019      	b.n	8004e48 <HAL_ADC_Init+0x318>
 8004e14:	20000240 	.word	0x20000240
 8004e18:	053e2d63 	.word	0x053e2d63
 8004e1c:	50000100 	.word	0x50000100
 8004e20:	50000400 	.word	0x50000400
 8004e24:	50000500 	.word	0x50000500
 8004e28:	50000600 	.word	0x50000600
 8004e2c:	50000300 	.word	0x50000300
 8004e30:	50000700 	.word	0x50000700
 8004e34:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	691a      	ldr	r2, [r3, #16]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 0201 	bic.w	r2, r2, #1
 8004e46:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d10c      	bne.n	8004e6a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e56:	f023 010f 	bic.w	r1, r3, #15
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	1e5a      	subs	r2, r3, #1
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e68:	e007      	b.n	8004e7a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 020f 	bic.w	r2, r2, #15
 8004e78:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e7e:	f023 0303 	bic.w	r3, r3, #3
 8004e82:	f043 0201 	orr.w	r2, r3, #1
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004e8a:	e007      	b.n	8004e9c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e90:	f043 0210 	orr.w	r2, r3, #16
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004e9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3724      	adds	r7, #36	@ 0x24
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd90      	pop	{r4, r7, pc}
 8004ea6:	bf00      	nop

08004ea8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b0b6      	sub	sp, #216	@ 0xd8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d102      	bne.n	8004ecc <HAL_ADC_ConfigChannel+0x24>
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	f000 bc13 	b.w	80056f2 <HAL_ADC_ConfigChannel+0x84a>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff fe02 	bl	8004ae2 <LL_ADC_REG_IsConversionOngoing>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f040 83f3 	bne.w	80056cc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6818      	ldr	r0, [r3, #0]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	6859      	ldr	r1, [r3, #4]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	f7ff fd18 	bl	8004928 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7ff fdf0 	bl	8004ae2 <LL_ADC_REG_IsConversionOngoing>
 8004f02:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7ff fdfc 	bl	8004b08 <LL_ADC_INJ_IsConversionOngoing>
 8004f10:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004f14:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f040 81d9 	bne.w	80052d0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004f1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f040 81d4 	bne.w	80052d0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f30:	d10f      	bne.n	8004f52 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6818      	ldr	r0, [r3, #0]
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	f7ff fd1f 	bl	8004980 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7ff fcd9 	bl	8004902 <LL_ADC_SetSamplingTimeCommonConfig>
 8004f50:	e00e      	b.n	8004f70 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6818      	ldr	r0, [r3, #0]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	6819      	ldr	r1, [r3, #0]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	461a      	mov	r2, r3
 8004f60:	f7ff fd0e 	bl	8004980 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2100      	movs	r1, #0
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7ff fcc9 	bl	8004902 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	695a      	ldr	r2, [r3, #20]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	08db      	lsrs	r3, r3, #3
 8004f7c:	f003 0303 	and.w	r3, r3, #3
 8004f80:	005b      	lsls	r3, r3, #1
 8004f82:	fa02 f303 	lsl.w	r3, r2, r3
 8004f86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d022      	beq.n	8004fd8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6818      	ldr	r0, [r3, #0]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	6919      	ldr	r1, [r3, #16]
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004fa2:	f7ff fc23 	bl	80047ec <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6818      	ldr	r0, [r3, #0]
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	6919      	ldr	r1, [r3, #16]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	f7ff fc6f 	bl	8004896 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6818      	ldr	r0, [r3, #0]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d102      	bne.n	8004fce <HAL_ADC_ConfigChannel+0x126>
 8004fc8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004fcc:	e000      	b.n	8004fd0 <HAL_ADC_ConfigChannel+0x128>
 8004fce:	2300      	movs	r3, #0
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	f7ff fc7b 	bl	80048cc <LL_ADC_SetOffsetSaturation>
 8004fd6:	e17b      	b.n	80052d0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2100      	movs	r1, #0
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7ff fc28 	bl	8004834 <LL_ADC_GetOffsetChannel>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10a      	bne.n	8005004 <HAL_ADC_ConfigChannel+0x15c>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7ff fc1d 	bl	8004834 <LL_ADC_GetOffsetChannel>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	0e9b      	lsrs	r3, r3, #26
 8004ffe:	f003 021f 	and.w	r2, r3, #31
 8005002:	e01e      	b.n	8005042 <HAL_ADC_ConfigChannel+0x19a>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2100      	movs	r1, #0
 800500a:	4618      	mov	r0, r3
 800500c:	f7ff fc12 	bl	8004834 <LL_ADC_GetOffsetChannel>
 8005010:	4603      	mov	r3, r0
 8005012:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005016:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800501a:	fa93 f3a3 	rbit	r3, r3
 800501e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005022:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005026:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800502a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8005032:	2320      	movs	r3, #32
 8005034:	e004      	b.n	8005040 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8005036:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800503a:	fab3 f383 	clz	r3, r3
 800503e:	b2db      	uxtb	r3, r3
 8005040:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800504a:	2b00      	cmp	r3, #0
 800504c:	d105      	bne.n	800505a <HAL_ADC_ConfigChannel+0x1b2>
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	0e9b      	lsrs	r3, r3, #26
 8005054:	f003 031f 	and.w	r3, r3, #31
 8005058:	e018      	b.n	800508c <HAL_ADC_ConfigChannel+0x1e4>
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005062:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005066:	fa93 f3a3 	rbit	r3, r3
 800506a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800506e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005072:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8005076:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800507e:	2320      	movs	r3, #32
 8005080:	e004      	b.n	800508c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8005082:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005086:	fab3 f383 	clz	r3, r3
 800508a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800508c:	429a      	cmp	r2, r3
 800508e:	d106      	bne.n	800509e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2200      	movs	r2, #0
 8005096:	2100      	movs	r1, #0
 8005098:	4618      	mov	r0, r3
 800509a:	f7ff fbe1 	bl	8004860 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2101      	movs	r1, #1
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7ff fbc5 	bl	8004834 <LL_ADC_GetOffsetChannel>
 80050aa:	4603      	mov	r3, r0
 80050ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10a      	bne.n	80050ca <HAL_ADC_ConfigChannel+0x222>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2101      	movs	r1, #1
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7ff fbba 	bl	8004834 <LL_ADC_GetOffsetChannel>
 80050c0:	4603      	mov	r3, r0
 80050c2:	0e9b      	lsrs	r3, r3, #26
 80050c4:	f003 021f 	and.w	r2, r3, #31
 80050c8:	e01e      	b.n	8005108 <HAL_ADC_ConfigChannel+0x260>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2101      	movs	r1, #1
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7ff fbaf 	bl	8004834 <LL_ADC_GetOffsetChannel>
 80050d6:	4603      	mov	r3, r0
 80050d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80050e0:	fa93 f3a3 	rbit	r3, r3
 80050e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80050e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80050ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80050f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80050f8:	2320      	movs	r3, #32
 80050fa:	e004      	b.n	8005106 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80050fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005100:	fab3 f383 	clz	r3, r3
 8005104:	b2db      	uxtb	r3, r3
 8005106:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005110:	2b00      	cmp	r3, #0
 8005112:	d105      	bne.n	8005120 <HAL_ADC_ConfigChannel+0x278>
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	0e9b      	lsrs	r3, r3, #26
 800511a:	f003 031f 	and.w	r3, r3, #31
 800511e:	e018      	b.n	8005152 <HAL_ADC_ConfigChannel+0x2aa>
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005128:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800512c:	fa93 f3a3 	rbit	r3, r3
 8005130:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005134:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005138:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800513c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005144:	2320      	movs	r3, #32
 8005146:	e004      	b.n	8005152 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005148:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800514c:	fab3 f383 	clz	r3, r3
 8005150:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005152:	429a      	cmp	r2, r3
 8005154:	d106      	bne.n	8005164 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2200      	movs	r2, #0
 800515c:	2101      	movs	r1, #1
 800515e:	4618      	mov	r0, r3
 8005160:	f7ff fb7e 	bl	8004860 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2102      	movs	r1, #2
 800516a:	4618      	mov	r0, r3
 800516c:	f7ff fb62 	bl	8004834 <LL_ADC_GetOffsetChannel>
 8005170:	4603      	mov	r3, r0
 8005172:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10a      	bne.n	8005190 <HAL_ADC_ConfigChannel+0x2e8>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2102      	movs	r1, #2
 8005180:	4618      	mov	r0, r3
 8005182:	f7ff fb57 	bl	8004834 <LL_ADC_GetOffsetChannel>
 8005186:	4603      	mov	r3, r0
 8005188:	0e9b      	lsrs	r3, r3, #26
 800518a:	f003 021f 	and.w	r2, r3, #31
 800518e:	e01e      	b.n	80051ce <HAL_ADC_ConfigChannel+0x326>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2102      	movs	r1, #2
 8005196:	4618      	mov	r0, r3
 8005198:	f7ff fb4c 	bl	8004834 <LL_ADC_GetOffsetChannel>
 800519c:	4603      	mov	r3, r0
 800519e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80051a6:	fa93 f3a3 	rbit	r3, r3
 80051aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80051ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80051b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80051b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80051be:	2320      	movs	r3, #32
 80051c0:	e004      	b.n	80051cc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80051c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80051c6:	fab3 f383 	clz	r3, r3
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d105      	bne.n	80051e6 <HAL_ADC_ConfigChannel+0x33e>
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	0e9b      	lsrs	r3, r3, #26
 80051e0:	f003 031f 	and.w	r3, r3, #31
 80051e4:	e016      	b.n	8005214 <HAL_ADC_ConfigChannel+0x36c>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80051f2:	fa93 f3a3 	rbit	r3, r3
 80051f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80051f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80051fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80051fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8005206:	2320      	movs	r3, #32
 8005208:	e004      	b.n	8005214 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800520a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800520e:	fab3 f383 	clz	r3, r3
 8005212:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005214:	429a      	cmp	r2, r3
 8005216:	d106      	bne.n	8005226 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2200      	movs	r2, #0
 800521e:	2102      	movs	r1, #2
 8005220:	4618      	mov	r0, r3
 8005222:	f7ff fb1d 	bl	8004860 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2103      	movs	r1, #3
 800522c:	4618      	mov	r0, r3
 800522e:	f7ff fb01 	bl	8004834 <LL_ADC_GetOffsetChannel>
 8005232:	4603      	mov	r3, r0
 8005234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10a      	bne.n	8005252 <HAL_ADC_ConfigChannel+0x3aa>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2103      	movs	r1, #3
 8005242:	4618      	mov	r0, r3
 8005244:	f7ff faf6 	bl	8004834 <LL_ADC_GetOffsetChannel>
 8005248:	4603      	mov	r3, r0
 800524a:	0e9b      	lsrs	r3, r3, #26
 800524c:	f003 021f 	and.w	r2, r3, #31
 8005250:	e017      	b.n	8005282 <HAL_ADC_ConfigChannel+0x3da>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2103      	movs	r1, #3
 8005258:	4618      	mov	r0, r3
 800525a:	f7ff faeb 	bl	8004834 <LL_ADC_GetOffsetChannel>
 800525e:	4603      	mov	r3, r0
 8005260:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005262:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005264:	fa93 f3a3 	rbit	r3, r3
 8005268:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800526a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800526c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800526e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005270:	2b00      	cmp	r3, #0
 8005272:	d101      	bne.n	8005278 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8005274:	2320      	movs	r3, #32
 8005276:	e003      	b.n	8005280 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8005278:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800527a:	fab3 f383 	clz	r3, r3
 800527e:	b2db      	uxtb	r3, r3
 8005280:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800528a:	2b00      	cmp	r3, #0
 800528c:	d105      	bne.n	800529a <HAL_ADC_ConfigChannel+0x3f2>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	0e9b      	lsrs	r3, r3, #26
 8005294:	f003 031f 	and.w	r3, r3, #31
 8005298:	e011      	b.n	80052be <HAL_ADC_ConfigChannel+0x416>
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80052a2:	fa93 f3a3 	rbit	r3, r3
 80052a6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80052a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80052ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80052b2:	2320      	movs	r3, #32
 80052b4:	e003      	b.n	80052be <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80052b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052b8:	fab3 f383 	clz	r3, r3
 80052bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80052be:	429a      	cmp	r2, r3
 80052c0:	d106      	bne.n	80052d0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2200      	movs	r2, #0
 80052c8:	2103      	movs	r1, #3
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7ff fac8 	bl	8004860 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7ff fbf1 	bl	8004abc <LL_ADC_IsEnabled>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f040 813d 	bne.w	800555c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6818      	ldr	r0, [r3, #0]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	6819      	ldr	r1, [r3, #0]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	461a      	mov	r2, r3
 80052f0:	f7ff fb72 	bl	80049d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	4aa2      	ldr	r2, [pc, #648]	@ (8005584 <HAL_ADC_ConfigChannel+0x6dc>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	f040 812e 	bne.w	800555c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10b      	bne.n	8005328 <HAL_ADC_ConfigChannel+0x480>
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	0e9b      	lsrs	r3, r3, #26
 8005316:	3301      	adds	r3, #1
 8005318:	f003 031f 	and.w	r3, r3, #31
 800531c:	2b09      	cmp	r3, #9
 800531e:	bf94      	ite	ls
 8005320:	2301      	movls	r3, #1
 8005322:	2300      	movhi	r3, #0
 8005324:	b2db      	uxtb	r3, r3
 8005326:	e019      	b.n	800535c <HAL_ADC_ConfigChannel+0x4b4>
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800532e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005330:	fa93 f3a3 	rbit	r3, r3
 8005334:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8005336:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005338:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800533a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005340:	2320      	movs	r3, #32
 8005342:	e003      	b.n	800534c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005344:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005346:	fab3 f383 	clz	r3, r3
 800534a:	b2db      	uxtb	r3, r3
 800534c:	3301      	adds	r3, #1
 800534e:	f003 031f 	and.w	r3, r3, #31
 8005352:	2b09      	cmp	r3, #9
 8005354:	bf94      	ite	ls
 8005356:	2301      	movls	r3, #1
 8005358:	2300      	movhi	r3, #0
 800535a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800535c:	2b00      	cmp	r3, #0
 800535e:	d079      	beq.n	8005454 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005368:	2b00      	cmp	r3, #0
 800536a:	d107      	bne.n	800537c <HAL_ADC_ConfigChannel+0x4d4>
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	0e9b      	lsrs	r3, r3, #26
 8005372:	3301      	adds	r3, #1
 8005374:	069b      	lsls	r3, r3, #26
 8005376:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800537a:	e015      	b.n	80053a8 <HAL_ADC_ConfigChannel+0x500>
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005382:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005384:	fa93 f3a3 	rbit	r3, r3
 8005388:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800538a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800538c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800538e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005394:	2320      	movs	r3, #32
 8005396:	e003      	b.n	80053a0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8005398:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800539a:	fab3 f383 	clz	r3, r3
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	3301      	adds	r3, #1
 80053a2:	069b      	lsls	r3, r3, #26
 80053a4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d109      	bne.n	80053c8 <HAL_ADC_ConfigChannel+0x520>
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	0e9b      	lsrs	r3, r3, #26
 80053ba:	3301      	adds	r3, #1
 80053bc:	f003 031f 	and.w	r3, r3, #31
 80053c0:	2101      	movs	r1, #1
 80053c2:	fa01 f303 	lsl.w	r3, r1, r3
 80053c6:	e017      	b.n	80053f8 <HAL_ADC_ConfigChannel+0x550>
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053d0:	fa93 f3a3 	rbit	r3, r3
 80053d4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80053d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80053da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80053e0:	2320      	movs	r3, #32
 80053e2:	e003      	b.n	80053ec <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80053e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053e6:	fab3 f383 	clz	r3, r3
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	3301      	adds	r3, #1
 80053ee:	f003 031f 	and.w	r3, r3, #31
 80053f2:	2101      	movs	r1, #1
 80053f4:	fa01 f303 	lsl.w	r3, r1, r3
 80053f8:	ea42 0103 	orr.w	r1, r2, r3
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10a      	bne.n	800541e <HAL_ADC_ConfigChannel+0x576>
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	0e9b      	lsrs	r3, r3, #26
 800540e:	3301      	adds	r3, #1
 8005410:	f003 021f 	and.w	r2, r3, #31
 8005414:	4613      	mov	r3, r2
 8005416:	005b      	lsls	r3, r3, #1
 8005418:	4413      	add	r3, r2
 800541a:	051b      	lsls	r3, r3, #20
 800541c:	e018      	b.n	8005450 <HAL_ADC_ConfigChannel+0x5a8>
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005426:	fa93 f3a3 	rbit	r3, r3
 800542a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800542c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800542e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005430:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005436:	2320      	movs	r3, #32
 8005438:	e003      	b.n	8005442 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800543a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800543c:	fab3 f383 	clz	r3, r3
 8005440:	b2db      	uxtb	r3, r3
 8005442:	3301      	adds	r3, #1
 8005444:	f003 021f 	and.w	r2, r3, #31
 8005448:	4613      	mov	r3, r2
 800544a:	005b      	lsls	r3, r3, #1
 800544c:	4413      	add	r3, r2
 800544e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005450:	430b      	orrs	r3, r1
 8005452:	e07e      	b.n	8005552 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800545c:	2b00      	cmp	r3, #0
 800545e:	d107      	bne.n	8005470 <HAL_ADC_ConfigChannel+0x5c8>
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	0e9b      	lsrs	r3, r3, #26
 8005466:	3301      	adds	r3, #1
 8005468:	069b      	lsls	r3, r3, #26
 800546a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800546e:	e015      	b.n	800549c <HAL_ADC_ConfigChannel+0x5f4>
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005478:	fa93 f3a3 	rbit	r3, r3
 800547c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800547e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005480:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005484:	2b00      	cmp	r3, #0
 8005486:	d101      	bne.n	800548c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005488:	2320      	movs	r3, #32
 800548a:	e003      	b.n	8005494 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800548c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800548e:	fab3 f383 	clz	r3, r3
 8005492:	b2db      	uxtb	r3, r3
 8005494:	3301      	adds	r3, #1
 8005496:	069b      	lsls	r3, r3, #26
 8005498:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d109      	bne.n	80054bc <HAL_ADC_ConfigChannel+0x614>
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	0e9b      	lsrs	r3, r3, #26
 80054ae:	3301      	adds	r3, #1
 80054b0:	f003 031f 	and.w	r3, r3, #31
 80054b4:	2101      	movs	r1, #1
 80054b6:	fa01 f303 	lsl.w	r3, r1, r3
 80054ba:	e017      	b.n	80054ec <HAL_ADC_ConfigChannel+0x644>
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	fa93 f3a3 	rbit	r3, r3
 80054c8:	61fb      	str	r3, [r7, #28]
  return result;
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80054ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80054d4:	2320      	movs	r3, #32
 80054d6:	e003      	b.n	80054e0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80054d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054da:	fab3 f383 	clz	r3, r3
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	3301      	adds	r3, #1
 80054e2:	f003 031f 	and.w	r3, r3, #31
 80054e6:	2101      	movs	r1, #1
 80054e8:	fa01 f303 	lsl.w	r3, r1, r3
 80054ec:	ea42 0103 	orr.w	r1, r2, r3
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10d      	bne.n	8005518 <HAL_ADC_ConfigChannel+0x670>
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	0e9b      	lsrs	r3, r3, #26
 8005502:	3301      	adds	r3, #1
 8005504:	f003 021f 	and.w	r2, r3, #31
 8005508:	4613      	mov	r3, r2
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	4413      	add	r3, r2
 800550e:	3b1e      	subs	r3, #30
 8005510:	051b      	lsls	r3, r3, #20
 8005512:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005516:	e01b      	b.n	8005550 <HAL_ADC_ConfigChannel+0x6a8>
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	fa93 f3a3 	rbit	r3, r3
 8005524:	613b      	str	r3, [r7, #16]
  return result;
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005530:	2320      	movs	r3, #32
 8005532:	e003      	b.n	800553c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	fab3 f383 	clz	r3, r3
 800553a:	b2db      	uxtb	r3, r3
 800553c:	3301      	adds	r3, #1
 800553e:	f003 021f 	and.w	r2, r3, #31
 8005542:	4613      	mov	r3, r2
 8005544:	005b      	lsls	r3, r3, #1
 8005546:	4413      	add	r3, r2
 8005548:	3b1e      	subs	r3, #30
 800554a:	051b      	lsls	r3, r3, #20
 800554c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005550:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005556:	4619      	mov	r1, r3
 8005558:	f7ff fa12 	bl	8004980 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	4b09      	ldr	r3, [pc, #36]	@ (8005588 <HAL_ADC_ConfigChannel+0x6e0>)
 8005562:	4013      	ands	r3, r2
 8005564:	2b00      	cmp	r3, #0
 8005566:	f000 80be 	beq.w	80056e6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005572:	d004      	beq.n	800557e <HAL_ADC_ConfigChannel+0x6d6>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a04      	ldr	r2, [pc, #16]	@ (800558c <HAL_ADC_ConfigChannel+0x6e4>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d10a      	bne.n	8005594 <HAL_ADC_ConfigChannel+0x6ec>
 800557e:	4b04      	ldr	r3, [pc, #16]	@ (8005590 <HAL_ADC_ConfigChannel+0x6e8>)
 8005580:	e009      	b.n	8005596 <HAL_ADC_ConfigChannel+0x6ee>
 8005582:	bf00      	nop
 8005584:	407f0000 	.word	0x407f0000
 8005588:	80080000 	.word	0x80080000
 800558c:	50000100 	.word	0x50000100
 8005590:	50000300 	.word	0x50000300
 8005594:	4b59      	ldr	r3, [pc, #356]	@ (80056fc <HAL_ADC_ConfigChannel+0x854>)
 8005596:	4618      	mov	r0, r3
 8005598:	f7ff f91a 	bl	80047d0 <LL_ADC_GetCommonPathInternalCh>
 800559c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a56      	ldr	r2, [pc, #344]	@ (8005700 <HAL_ADC_ConfigChannel+0x858>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d004      	beq.n	80055b4 <HAL_ADC_ConfigChannel+0x70c>
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a55      	ldr	r2, [pc, #340]	@ (8005704 <HAL_ADC_ConfigChannel+0x85c>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d13a      	bne.n	800562a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80055b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80055b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d134      	bne.n	800562a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055c8:	d005      	beq.n	80055d6 <HAL_ADC_ConfigChannel+0x72e>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a4e      	ldr	r2, [pc, #312]	@ (8005708 <HAL_ADC_ConfigChannel+0x860>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	f040 8085 	bne.w	80056e0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055de:	d004      	beq.n	80055ea <HAL_ADC_ConfigChannel+0x742>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a49      	ldr	r2, [pc, #292]	@ (800570c <HAL_ADC_ConfigChannel+0x864>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d101      	bne.n	80055ee <HAL_ADC_ConfigChannel+0x746>
 80055ea:	4a49      	ldr	r2, [pc, #292]	@ (8005710 <HAL_ADC_ConfigChannel+0x868>)
 80055ec:	e000      	b.n	80055f0 <HAL_ADC_ConfigChannel+0x748>
 80055ee:	4a43      	ldr	r2, [pc, #268]	@ (80056fc <HAL_ADC_ConfigChannel+0x854>)
 80055f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80055f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80055f8:	4619      	mov	r1, r3
 80055fa:	4610      	mov	r0, r2
 80055fc:	f7ff f8d5 	bl	80047aa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005600:	4b44      	ldr	r3, [pc, #272]	@ (8005714 <HAL_ADC_ConfigChannel+0x86c>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	099b      	lsrs	r3, r3, #6
 8005606:	4a44      	ldr	r2, [pc, #272]	@ (8005718 <HAL_ADC_ConfigChannel+0x870>)
 8005608:	fba2 2303 	umull	r2, r3, r2, r3
 800560c:	099b      	lsrs	r3, r3, #6
 800560e:	1c5a      	adds	r2, r3, #1
 8005610:	4613      	mov	r3, r2
 8005612:	005b      	lsls	r3, r3, #1
 8005614:	4413      	add	r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800561a:	e002      	b.n	8005622 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	3b01      	subs	r3, #1
 8005620:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1f9      	bne.n	800561c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005628:	e05a      	b.n	80056e0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a3b      	ldr	r2, [pc, #236]	@ (800571c <HAL_ADC_ConfigChannel+0x874>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d125      	bne.n	8005680 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005634:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005638:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d11f      	bne.n	8005680 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a31      	ldr	r2, [pc, #196]	@ (800570c <HAL_ADC_ConfigChannel+0x864>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d104      	bne.n	8005654 <HAL_ADC_ConfigChannel+0x7ac>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a34      	ldr	r2, [pc, #208]	@ (8005720 <HAL_ADC_ConfigChannel+0x878>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d047      	beq.n	80056e4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800565c:	d004      	beq.n	8005668 <HAL_ADC_ConfigChannel+0x7c0>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a2a      	ldr	r2, [pc, #168]	@ (800570c <HAL_ADC_ConfigChannel+0x864>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d101      	bne.n	800566c <HAL_ADC_ConfigChannel+0x7c4>
 8005668:	4a29      	ldr	r2, [pc, #164]	@ (8005710 <HAL_ADC_ConfigChannel+0x868>)
 800566a:	e000      	b.n	800566e <HAL_ADC_ConfigChannel+0x7c6>
 800566c:	4a23      	ldr	r2, [pc, #140]	@ (80056fc <HAL_ADC_ConfigChannel+0x854>)
 800566e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005672:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005676:	4619      	mov	r1, r3
 8005678:	4610      	mov	r0, r2
 800567a:	f7ff f896 	bl	80047aa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800567e:	e031      	b.n	80056e4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a27      	ldr	r2, [pc, #156]	@ (8005724 <HAL_ADC_ConfigChannel+0x87c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d12d      	bne.n	80056e6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800568a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800568e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d127      	bne.n	80056e6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a1c      	ldr	r2, [pc, #112]	@ (800570c <HAL_ADC_ConfigChannel+0x864>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d022      	beq.n	80056e6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80056a8:	d004      	beq.n	80056b4 <HAL_ADC_ConfigChannel+0x80c>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a17      	ldr	r2, [pc, #92]	@ (800570c <HAL_ADC_ConfigChannel+0x864>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d101      	bne.n	80056b8 <HAL_ADC_ConfigChannel+0x810>
 80056b4:	4a16      	ldr	r2, [pc, #88]	@ (8005710 <HAL_ADC_ConfigChannel+0x868>)
 80056b6:	e000      	b.n	80056ba <HAL_ADC_ConfigChannel+0x812>
 80056b8:	4a10      	ldr	r2, [pc, #64]	@ (80056fc <HAL_ADC_ConfigChannel+0x854>)
 80056ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80056be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80056c2:	4619      	mov	r1, r3
 80056c4:	4610      	mov	r0, r2
 80056c6:	f7ff f870 	bl	80047aa <LL_ADC_SetCommonPathInternalCh>
 80056ca:	e00c      	b.n	80056e6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056d0:	f043 0220 	orr.w	r2, r3, #32
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80056de:	e002      	b.n	80056e6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80056e0:	bf00      	nop
 80056e2:	e000      	b.n	80056e6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80056e4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80056ee:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	37d8      	adds	r7, #216	@ 0xd8
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	50000700 	.word	0x50000700
 8005700:	c3210000 	.word	0xc3210000
 8005704:	90c00010 	.word	0x90c00010
 8005708:	50000600 	.word	0x50000600
 800570c:	50000100 	.word	0x50000100
 8005710:	50000300 	.word	0x50000300
 8005714:	20000240 	.word	0x20000240
 8005718:	053e2d63 	.word	0x053e2d63
 800571c:	c7520000 	.word	0xc7520000
 8005720:	50000500 	.word	0x50000500
 8005724:	cb840000 	.word	0xcb840000

08005728 <LL_ADC_IsEnabled>:
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f003 0301 	and.w	r3, r3, #1
 8005738:	2b01      	cmp	r3, #1
 800573a:	d101      	bne.n	8005740 <LL_ADC_IsEnabled+0x18>
 800573c:	2301      	movs	r3, #1
 800573e:	e000      	b.n	8005742 <LL_ADC_IsEnabled+0x1a>
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	370c      	adds	r7, #12
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr

0800574e <LL_ADC_REG_IsConversionOngoing>:
{
 800574e:	b480      	push	{r7}
 8005750:	b083      	sub	sp, #12
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f003 0304 	and.w	r3, r3, #4
 800575e:	2b04      	cmp	r3, #4
 8005760:	d101      	bne.n	8005766 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005762:	2301      	movs	r3, #1
 8005764:	e000      	b.n	8005768 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005774:	b590      	push	{r4, r7, lr}
 8005776:	b0a1      	sub	sp, #132	@ 0x84
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800577e:	2300      	movs	r3, #0
 8005780:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800578a:	2b01      	cmp	r3, #1
 800578c:	d101      	bne.n	8005792 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800578e:	2302      	movs	r3, #2
 8005790:	e0e7      	b.n	8005962 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800579a:	2300      	movs	r3, #0
 800579c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800579e:	2300      	movs	r3, #0
 80057a0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057aa:	d102      	bne.n	80057b2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80057ac:	4b6f      	ldr	r3, [pc, #444]	@ (800596c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80057ae:	60bb      	str	r3, [r7, #8]
 80057b0:	e009      	b.n	80057c6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a6e      	ldr	r2, [pc, #440]	@ (8005970 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d102      	bne.n	80057c2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80057bc:	4b6d      	ldr	r3, [pc, #436]	@ (8005974 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80057be:	60bb      	str	r3, [r7, #8]
 80057c0:	e001      	b.n	80057c6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80057c2:	2300      	movs	r3, #0
 80057c4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10b      	bne.n	80057e4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057d0:	f043 0220 	orr.w	r2, r3, #32
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e0be      	b.n	8005962 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7ff ffb1 	bl	800574e <LL_ADC_REG_IsConversionOngoing>
 80057ec:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7ff ffab 	bl	800574e <LL_ADC_REG_IsConversionOngoing>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f040 80a0 	bne.w	8005940 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005800:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005802:	2b00      	cmp	r3, #0
 8005804:	f040 809c 	bne.w	8005940 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005810:	d004      	beq.n	800581c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a55      	ldr	r2, [pc, #340]	@ (800596c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d101      	bne.n	8005820 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800581c:	4b56      	ldr	r3, [pc, #344]	@ (8005978 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800581e:	e000      	b.n	8005822 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005820:	4b56      	ldr	r3, [pc, #344]	@ (800597c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005822:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d04b      	beq.n	80058c4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800582c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	6859      	ldr	r1, [r3, #4]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800583e:	035b      	lsls	r3, r3, #13
 8005840:	430b      	orrs	r3, r1
 8005842:	431a      	orrs	r2, r3
 8005844:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005846:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005850:	d004      	beq.n	800585c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a45      	ldr	r2, [pc, #276]	@ (800596c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d10f      	bne.n	800587c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800585c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005860:	f7ff ff62 	bl	8005728 <LL_ADC_IsEnabled>
 8005864:	4604      	mov	r4, r0
 8005866:	4841      	ldr	r0, [pc, #260]	@ (800596c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005868:	f7ff ff5e 	bl	8005728 <LL_ADC_IsEnabled>
 800586c:	4603      	mov	r3, r0
 800586e:	4323      	orrs	r3, r4
 8005870:	2b00      	cmp	r3, #0
 8005872:	bf0c      	ite	eq
 8005874:	2301      	moveq	r3, #1
 8005876:	2300      	movne	r3, #0
 8005878:	b2db      	uxtb	r3, r3
 800587a:	e012      	b.n	80058a2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800587c:	483c      	ldr	r0, [pc, #240]	@ (8005970 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800587e:	f7ff ff53 	bl	8005728 <LL_ADC_IsEnabled>
 8005882:	4604      	mov	r4, r0
 8005884:	483b      	ldr	r0, [pc, #236]	@ (8005974 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005886:	f7ff ff4f 	bl	8005728 <LL_ADC_IsEnabled>
 800588a:	4603      	mov	r3, r0
 800588c:	431c      	orrs	r4, r3
 800588e:	483c      	ldr	r0, [pc, #240]	@ (8005980 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005890:	f7ff ff4a 	bl	8005728 <LL_ADC_IsEnabled>
 8005894:	4603      	mov	r3, r0
 8005896:	4323      	orrs	r3, r4
 8005898:	2b00      	cmp	r3, #0
 800589a:	bf0c      	ite	eq
 800589c:	2301      	moveq	r3, #1
 800589e:	2300      	movne	r3, #0
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d056      	beq.n	8005954 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80058a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80058ae:	f023 030f 	bic.w	r3, r3, #15
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	6811      	ldr	r1, [r2, #0]
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	6892      	ldr	r2, [r2, #8]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	431a      	orrs	r2, r3
 80058be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058c0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80058c2:	e047      	b.n	8005954 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80058c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80058cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058ce:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058d8:	d004      	beq.n	80058e4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a23      	ldr	r2, [pc, #140]	@ (800596c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d10f      	bne.n	8005904 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80058e4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80058e8:	f7ff ff1e 	bl	8005728 <LL_ADC_IsEnabled>
 80058ec:	4604      	mov	r4, r0
 80058ee:	481f      	ldr	r0, [pc, #124]	@ (800596c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80058f0:	f7ff ff1a 	bl	8005728 <LL_ADC_IsEnabled>
 80058f4:	4603      	mov	r3, r0
 80058f6:	4323      	orrs	r3, r4
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	bf0c      	ite	eq
 80058fc:	2301      	moveq	r3, #1
 80058fe:	2300      	movne	r3, #0
 8005900:	b2db      	uxtb	r3, r3
 8005902:	e012      	b.n	800592a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005904:	481a      	ldr	r0, [pc, #104]	@ (8005970 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005906:	f7ff ff0f 	bl	8005728 <LL_ADC_IsEnabled>
 800590a:	4604      	mov	r4, r0
 800590c:	4819      	ldr	r0, [pc, #100]	@ (8005974 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800590e:	f7ff ff0b 	bl	8005728 <LL_ADC_IsEnabled>
 8005912:	4603      	mov	r3, r0
 8005914:	431c      	orrs	r4, r3
 8005916:	481a      	ldr	r0, [pc, #104]	@ (8005980 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005918:	f7ff ff06 	bl	8005728 <LL_ADC_IsEnabled>
 800591c:	4603      	mov	r3, r0
 800591e:	4323      	orrs	r3, r4
 8005920:	2b00      	cmp	r3, #0
 8005922:	bf0c      	ite	eq
 8005924:	2301      	moveq	r3, #1
 8005926:	2300      	movne	r3, #0
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d012      	beq.n	8005954 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800592e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005936:	f023 030f 	bic.w	r3, r3, #15
 800593a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800593c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800593e:	e009      	b.n	8005954 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005944:	f043 0220 	orr.w	r2, r3, #32
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005952:	e000      	b.n	8005956 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005954:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800595e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005962:	4618      	mov	r0, r3
 8005964:	3784      	adds	r7, #132	@ 0x84
 8005966:	46bd      	mov	sp, r7
 8005968:	bd90      	pop	{r4, r7, pc}
 800596a:	bf00      	nop
 800596c:	50000100 	.word	0x50000100
 8005970:	50000400 	.word	0x50000400
 8005974:	50000500 	.word	0x50000500
 8005978:	50000300 	.word	0x50000300
 800597c:	50000700 	.word	0x50000700
 8005980:	50000600 	.word	0x50000600

08005984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f003 0307 	and.w	r3, r3, #7
 8005992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005994:	4b0c      	ldr	r3, [pc, #48]	@ (80059c8 <__NVIC_SetPriorityGrouping+0x44>)
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80059a0:	4013      	ands	r3, r2
 80059a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80059ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80059b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80059b6:	4a04      	ldr	r2, [pc, #16]	@ (80059c8 <__NVIC_SetPriorityGrouping+0x44>)
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	60d3      	str	r3, [r2, #12]
}
 80059bc:	bf00      	nop
 80059be:	3714      	adds	r7, #20
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr
 80059c8:	e000ed00 	.word	0xe000ed00

080059cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80059cc:	b480      	push	{r7}
 80059ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059d0:	4b04      	ldr	r3, [pc, #16]	@ (80059e4 <__NVIC_GetPriorityGrouping+0x18>)
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	0a1b      	lsrs	r3, r3, #8
 80059d6:	f003 0307 	and.w	r3, r3, #7
}
 80059da:	4618      	mov	r0, r3
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr
 80059e4:	e000ed00 	.word	0xe000ed00

080059e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	4603      	mov	r3, r0
 80059f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	db0b      	blt.n	8005a12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059fa:	79fb      	ldrb	r3, [r7, #7]
 80059fc:	f003 021f 	and.w	r2, r3, #31
 8005a00:	4907      	ldr	r1, [pc, #28]	@ (8005a20 <__NVIC_EnableIRQ+0x38>)
 8005a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a06:	095b      	lsrs	r3, r3, #5
 8005a08:	2001      	movs	r0, #1
 8005a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8005a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005a12:	bf00      	nop
 8005a14:	370c      	adds	r7, #12
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	e000e100 	.word	0xe000e100

08005a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	6039      	str	r1, [r7, #0]
 8005a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	db0a      	blt.n	8005a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	b2da      	uxtb	r2, r3
 8005a3c:	490c      	ldr	r1, [pc, #48]	@ (8005a70 <__NVIC_SetPriority+0x4c>)
 8005a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a42:	0112      	lsls	r2, r2, #4
 8005a44:	b2d2      	uxtb	r2, r2
 8005a46:	440b      	add	r3, r1
 8005a48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a4c:	e00a      	b.n	8005a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	4908      	ldr	r1, [pc, #32]	@ (8005a74 <__NVIC_SetPriority+0x50>)
 8005a54:	79fb      	ldrb	r3, [r7, #7]
 8005a56:	f003 030f 	and.w	r3, r3, #15
 8005a5a:	3b04      	subs	r3, #4
 8005a5c:	0112      	lsls	r2, r2, #4
 8005a5e:	b2d2      	uxtb	r2, r2
 8005a60:	440b      	add	r3, r1
 8005a62:	761a      	strb	r2, [r3, #24]
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr
 8005a70:	e000e100 	.word	0xe000e100
 8005a74:	e000ed00 	.word	0xe000ed00

08005a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b089      	sub	sp, #36	@ 0x24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f003 0307 	and.w	r3, r3, #7
 8005a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	f1c3 0307 	rsb	r3, r3, #7
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	bf28      	it	cs
 8005a96:	2304      	movcs	r3, #4
 8005a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	3304      	adds	r3, #4
 8005a9e:	2b06      	cmp	r3, #6
 8005aa0:	d902      	bls.n	8005aa8 <NVIC_EncodePriority+0x30>
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	3b03      	subs	r3, #3
 8005aa6:	e000      	b.n	8005aaa <NVIC_EncodePriority+0x32>
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005aac:	f04f 32ff 	mov.w	r2, #4294967295
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab6:	43da      	mvns	r2, r3
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	401a      	ands	r2, r3
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8005aca:	43d9      	mvns	r1, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ad0:	4313      	orrs	r3, r2
         );
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3724      	adds	r7, #36	@ 0x24
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
	...

08005ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	3b01      	subs	r3, #1
 8005aec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005af0:	d301      	bcc.n	8005af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005af2:	2301      	movs	r3, #1
 8005af4:	e00f      	b.n	8005b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005af6:	4a0a      	ldr	r2, [pc, #40]	@ (8005b20 <SysTick_Config+0x40>)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	3b01      	subs	r3, #1
 8005afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005afe:	210f      	movs	r1, #15
 8005b00:	f04f 30ff 	mov.w	r0, #4294967295
 8005b04:	f7ff ff8e 	bl	8005a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b08:	4b05      	ldr	r3, [pc, #20]	@ (8005b20 <SysTick_Config+0x40>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b0e:	4b04      	ldr	r3, [pc, #16]	@ (8005b20 <SysTick_Config+0x40>)
 8005b10:	2207      	movs	r2, #7
 8005b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	e000e010 	.word	0xe000e010

08005b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7ff ff29 	bl	8005984 <__NVIC_SetPriorityGrouping>
}
 8005b32:	bf00      	nop
 8005b34:	3708      	adds	r7, #8
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b086      	sub	sp, #24
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	4603      	mov	r3, r0
 8005b42:	60b9      	str	r1, [r7, #8]
 8005b44:	607a      	str	r2, [r7, #4]
 8005b46:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005b48:	f7ff ff40 	bl	80059cc <__NVIC_GetPriorityGrouping>
 8005b4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	68b9      	ldr	r1, [r7, #8]
 8005b52:	6978      	ldr	r0, [r7, #20]
 8005b54:	f7ff ff90 	bl	8005a78 <NVIC_EncodePriority>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b5e:	4611      	mov	r1, r2
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7ff ff5f 	bl	8005a24 <__NVIC_SetPriority>
}
 8005b66:	bf00      	nop
 8005b68:	3718      	adds	r7, #24
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b082      	sub	sp, #8
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	4603      	mov	r3, r0
 8005b76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7ff ff33 	bl	80059e8 <__NVIC_EnableIRQ>
}
 8005b82:	bf00      	nop
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b082      	sub	sp, #8
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f7ff ffa4 	bl	8005ae0 <SysTick_Config>
 8005b98:	4603      	mov	r3, r0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
	...

08005ba4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e08d      	b.n	8005cd2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	4b47      	ldr	r3, [pc, #284]	@ (8005cdc <HAL_DMA_Init+0x138>)
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d80f      	bhi.n	8005be2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	4b45      	ldr	r3, [pc, #276]	@ (8005ce0 <HAL_DMA_Init+0x13c>)
 8005bca:	4413      	add	r3, r2
 8005bcc:	4a45      	ldr	r2, [pc, #276]	@ (8005ce4 <HAL_DMA_Init+0x140>)
 8005bce:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd2:	091b      	lsrs	r3, r3, #4
 8005bd4:	009a      	lsls	r2, r3, #2
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a42      	ldr	r2, [pc, #264]	@ (8005ce8 <HAL_DMA_Init+0x144>)
 8005bde:	641a      	str	r2, [r3, #64]	@ 0x40
 8005be0:	e00e      	b.n	8005c00 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	461a      	mov	r2, r3
 8005be8:	4b40      	ldr	r3, [pc, #256]	@ (8005cec <HAL_DMA_Init+0x148>)
 8005bea:	4413      	add	r3, r2
 8005bec:	4a3d      	ldr	r2, [pc, #244]	@ (8005ce4 <HAL_DMA_Init+0x140>)
 8005bee:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf2:	091b      	lsrs	r3, r3, #4
 8005bf4:	009a      	lsls	r2, r3, #2
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a3c      	ldr	r2, [pc, #240]	@ (8005cf0 <HAL_DMA_Init+0x14c>)
 8005bfe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2202      	movs	r2, #2
 8005c04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005c16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c1a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005c24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fa76 	bl	8006144 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c60:	d102      	bne.n	8005c68 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c70:	b2d2      	uxtb	r2, r2
 8005c72:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005c7c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d010      	beq.n	8005ca8 <HAL_DMA_Init+0x104>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	2b04      	cmp	r3, #4
 8005c8c:	d80c      	bhi.n	8005ca8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 fa96 	bl	80061c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005ca4:	605a      	str	r2, [r3, #4]
 8005ca6:	e008      	b.n	8005cba <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	40020407 	.word	0x40020407
 8005ce0:	bffdfff8 	.word	0xbffdfff8
 8005ce4:	cccccccd 	.word	0xcccccccd
 8005ce8:	40020000 	.word	0x40020000
 8005cec:	bffdfbf8 	.word	0xbffdfbf8
 8005cf0:	40020400 	.word	0x40020400

08005cf4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
 8005d00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d02:	2300      	movs	r3, #0
 8005d04:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d101      	bne.n	8005d14 <HAL_DMA_Start_IT+0x20>
 8005d10:	2302      	movs	r3, #2
 8005d12:	e066      	b.n	8005de2 <HAL_DMA_Start_IT+0xee>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d155      	bne.n	8005dd4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f022 0201 	bic.w	r2, r2, #1
 8005d44:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	68b9      	ldr	r1, [r7, #8]
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f000 f9bb 	bl	80060c8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d008      	beq.n	8005d6c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f042 020e 	orr.w	r2, r2, #14
 8005d68:	601a      	str	r2, [r3, #0]
 8005d6a:	e00f      	b.n	8005d8c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f022 0204 	bic.w	r2, r2, #4
 8005d7a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f042 020a 	orr.w	r2, r2, #10
 8005d8a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d007      	beq.n	8005daa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005da4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005da8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d007      	beq.n	8005dc2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005dc0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f042 0201 	orr.w	r2, r2, #1
 8005dd0:	601a      	str	r2, [r3, #0]
 8005dd2:	e005      	b.n	8005de0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005ddc:	2302      	movs	r3, #2
 8005dde:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3718      	adds	r7, #24
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005dea:	b480      	push	{r7}
 8005dec:	b085      	sub	sp, #20
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005df2:	2300      	movs	r3, #0
 8005df4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d005      	beq.n	8005e0e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2204      	movs	r2, #4
 8005e06:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	73fb      	strb	r3, [r7, #15]
 8005e0c:	e037      	b.n	8005e7e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 020e 	bic.w	r2, r2, #14
 8005e1c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e2c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f022 0201 	bic.w	r2, r2, #1
 8005e3c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e42:	f003 021f 	and.w	r2, r3, #31
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8005e50:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005e5a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00c      	beq.n	8005e7e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e6e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e72:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005e7c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3714      	adds	r7, #20
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d00d      	beq.n	8005ed0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2204      	movs	r2, #4
 8005eb8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	73fb      	strb	r3, [r7, #15]
 8005ece:	e047      	b.n	8005f60 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f022 020e 	bic.w	r2, r2, #14
 8005ede:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 0201 	bic.w	r2, r2, #1
 8005eee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005efa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005efe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f04:	f003 021f 	and.w	r2, r3, #31
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0c:	2101      	movs	r1, #1
 8005f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8005f12:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005f1c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00c      	beq.n	8005f40 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f34:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005f3e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d003      	beq.n	8005f60 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	4798      	blx	r3
    }
  }
  return status;
 8005f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b084      	sub	sp, #16
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f86:	f003 031f 	and.w	r3, r3, #31
 8005f8a:	2204      	movs	r2, #4
 8005f8c:	409a      	lsls	r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	4013      	ands	r3, r2
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d026      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0x7a>
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	f003 0304 	and.w	r3, r3, #4
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d021      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0320 	and.w	r3, r3, #32
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d107      	bne.n	8005fbe <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f022 0204 	bic.w	r2, r2, #4
 8005fbc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fc2:	f003 021f 	and.w	r2, r3, #31
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fca:	2104      	movs	r1, #4
 8005fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8005fd0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d071      	beq.n	80060be <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005fe2:	e06c      	b.n	80060be <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fe8:	f003 031f 	and.w	r3, r3, #31
 8005fec:	2202      	movs	r2, #2
 8005fee:	409a      	lsls	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d02e      	beq.n	8006056 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	f003 0302 	and.w	r3, r3, #2
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d029      	beq.n	8006056 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0320 	and.w	r3, r3, #32
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10b      	bne.n	8006028 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f022 020a 	bic.w	r2, r2, #10
 800601e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800602c:	f003 021f 	and.w	r2, r3, #31
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006034:	2102      	movs	r1, #2
 8006036:	fa01 f202 	lsl.w	r2, r1, r2
 800603a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006048:	2b00      	cmp	r3, #0
 800604a:	d038      	beq.n	80060be <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006054:	e033      	b.n	80060be <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800605a:	f003 031f 	and.w	r3, r3, #31
 800605e:	2208      	movs	r2, #8
 8006060:	409a      	lsls	r2, r3
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	4013      	ands	r3, r2
 8006066:	2b00      	cmp	r3, #0
 8006068:	d02a      	beq.n	80060c0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	f003 0308 	and.w	r3, r3, #8
 8006070:	2b00      	cmp	r3, #0
 8006072:	d025      	beq.n	80060c0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f022 020e 	bic.w	r2, r2, #14
 8006082:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006088:	f003 021f 	and.w	r2, r3, #31
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006090:	2101      	movs	r1, #1
 8006092:	fa01 f202 	lsl.w	r2, r1, r2
 8006096:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d004      	beq.n	80060c0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80060be:	bf00      	nop
 80060c0:	bf00      	nop
}
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
 80060d4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80060de:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d004      	beq.n	80060f2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80060f0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060f6:	f003 021f 	and.w	r2, r3, #31
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060fe:	2101      	movs	r1, #1
 8006100:	fa01 f202 	lsl.w	r2, r1, r2
 8006104:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	2b10      	cmp	r3, #16
 8006114:	d108      	bne.n	8006128 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006126:	e007      	b.n	8006138 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	60da      	str	r2, [r3, #12]
}
 8006138:	bf00      	nop
 800613a:	3714      	adds	r7, #20
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006144:	b480      	push	{r7}
 8006146:	b087      	sub	sp, #28
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	461a      	mov	r2, r3
 8006152:	4b16      	ldr	r3, [pc, #88]	@ (80061ac <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006154:	429a      	cmp	r2, r3
 8006156:	d802      	bhi.n	800615e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006158:	4b15      	ldr	r3, [pc, #84]	@ (80061b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800615a:	617b      	str	r3, [r7, #20]
 800615c:	e001      	b.n	8006162 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800615e:	4b15      	ldr	r3, [pc, #84]	@ (80061b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006160:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	b2db      	uxtb	r3, r3
 800616c:	3b08      	subs	r3, #8
 800616e:	4a12      	ldr	r2, [pc, #72]	@ (80061b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006170:	fba2 2303 	umull	r2, r3, r2, r3
 8006174:	091b      	lsrs	r3, r3, #4
 8006176:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800617c:	089b      	lsrs	r3, r3, #2
 800617e:	009a      	lsls	r2, r3, #2
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	4413      	add	r3, r2
 8006184:	461a      	mov	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a0b      	ldr	r2, [pc, #44]	@ (80061bc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800618e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f003 031f 	and.w	r3, r3, #31
 8006196:	2201      	movs	r2, #1
 8006198:	409a      	lsls	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800619e:	bf00      	nop
 80061a0:	371c      	adds	r7, #28
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	40020407 	.word	0x40020407
 80061b0:	40020800 	.word	0x40020800
 80061b4:	40020820 	.word	0x40020820
 80061b8:	cccccccd 	.word	0xcccccccd
 80061bc:	40020880 	.word	0x40020880

080061c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b085      	sub	sp, #20
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006200 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80061d4:	4413      	add	r3, r2
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	461a      	mov	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a08      	ldr	r2, [pc, #32]	@ (8006204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80061e2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	3b01      	subs	r3, #1
 80061e8:	f003 031f 	and.w	r3, r3, #31
 80061ec:	2201      	movs	r2, #1
 80061ee:	409a      	lsls	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80061f4:	bf00      	nop
 80061f6:	3714      	adds	r7, #20
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	1000823f 	.word	0x1000823f
 8006204:	40020940 	.word	0x40020940

08006208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006208:	b480      	push	{r7}
 800620a:	b087      	sub	sp, #28
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006212:	2300      	movs	r3, #0
 8006214:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006216:	e15a      	b.n	80064ce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	2101      	movs	r1, #1
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	fa01 f303 	lsl.w	r3, r1, r3
 8006224:	4013      	ands	r3, r2
 8006226:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2b00      	cmp	r3, #0
 800622c:	f000 814c 	beq.w	80064c8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f003 0303 	and.w	r3, r3, #3
 8006238:	2b01      	cmp	r3, #1
 800623a:	d005      	beq.n	8006248 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006244:	2b02      	cmp	r3, #2
 8006246:	d130      	bne.n	80062aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	005b      	lsls	r3, r3, #1
 8006252:	2203      	movs	r2, #3
 8006254:	fa02 f303 	lsl.w	r3, r2, r3
 8006258:	43db      	mvns	r3, r3
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	4013      	ands	r3, r2
 800625e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	68da      	ldr	r2, [r3, #12]
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	005b      	lsls	r3, r3, #1
 8006268:	fa02 f303 	lsl.w	r3, r2, r3
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	4313      	orrs	r3, r2
 8006270:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800627e:	2201      	movs	r2, #1
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	fa02 f303 	lsl.w	r3, r2, r3
 8006286:	43db      	mvns	r3, r3
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	4013      	ands	r3, r2
 800628c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	091b      	lsrs	r3, r3, #4
 8006294:	f003 0201 	and.w	r2, r3, #1
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	fa02 f303 	lsl.w	r3, r2, r3
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f003 0303 	and.w	r3, r3, #3
 80062b2:	2b03      	cmp	r3, #3
 80062b4:	d017      	beq.n	80062e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	005b      	lsls	r3, r3, #1
 80062c0:	2203      	movs	r2, #3
 80062c2:	fa02 f303 	lsl.w	r3, r2, r3
 80062c6:	43db      	mvns	r3, r3
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	4013      	ands	r3, r2
 80062cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	689a      	ldr	r2, [r3, #8]
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	fa02 f303 	lsl.w	r3, r2, r3
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	4313      	orrs	r3, r2
 80062de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	f003 0303 	and.w	r3, r3, #3
 80062ee:	2b02      	cmp	r3, #2
 80062f0:	d123      	bne.n	800633a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	08da      	lsrs	r2, r3, #3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	3208      	adds	r2, #8
 80062fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f003 0307 	and.w	r3, r3, #7
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	220f      	movs	r2, #15
 800630a:	fa02 f303 	lsl.w	r3, r2, r3
 800630e:	43db      	mvns	r3, r3
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	4013      	ands	r3, r2
 8006314:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	691a      	ldr	r2, [r3, #16]
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f003 0307 	and.w	r3, r3, #7
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	fa02 f303 	lsl.w	r3, r2, r3
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	4313      	orrs	r3, r2
 800632a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	08da      	lsrs	r2, r3, #3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	3208      	adds	r2, #8
 8006334:	6939      	ldr	r1, [r7, #16]
 8006336:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	005b      	lsls	r3, r3, #1
 8006344:	2203      	movs	r2, #3
 8006346:	fa02 f303 	lsl.w	r3, r2, r3
 800634a:	43db      	mvns	r3, r3
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	4013      	ands	r3, r2
 8006350:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f003 0203 	and.w	r2, r3, #3
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	005b      	lsls	r3, r3, #1
 800635e:	fa02 f303 	lsl.w	r3, r2, r3
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	4313      	orrs	r3, r2
 8006366:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006376:	2b00      	cmp	r3, #0
 8006378:	f000 80a6 	beq.w	80064c8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800637c:	4b5b      	ldr	r3, [pc, #364]	@ (80064ec <HAL_GPIO_Init+0x2e4>)
 800637e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006380:	4a5a      	ldr	r2, [pc, #360]	@ (80064ec <HAL_GPIO_Init+0x2e4>)
 8006382:	f043 0301 	orr.w	r3, r3, #1
 8006386:	6613      	str	r3, [r2, #96]	@ 0x60
 8006388:	4b58      	ldr	r3, [pc, #352]	@ (80064ec <HAL_GPIO_Init+0x2e4>)
 800638a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800638c:	f003 0301 	and.w	r3, r3, #1
 8006390:	60bb      	str	r3, [r7, #8]
 8006392:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006394:	4a56      	ldr	r2, [pc, #344]	@ (80064f0 <HAL_GPIO_Init+0x2e8>)
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	089b      	lsrs	r3, r3, #2
 800639a:	3302      	adds	r3, #2
 800639c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f003 0303 	and.w	r3, r3, #3
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	220f      	movs	r2, #15
 80063ac:	fa02 f303 	lsl.w	r3, r2, r3
 80063b0:	43db      	mvns	r3, r3
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	4013      	ands	r3, r2
 80063b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80063be:	d01f      	beq.n	8006400 <HAL_GPIO_Init+0x1f8>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a4c      	ldr	r2, [pc, #304]	@ (80064f4 <HAL_GPIO_Init+0x2ec>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d019      	beq.n	80063fc <HAL_GPIO_Init+0x1f4>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a4b      	ldr	r2, [pc, #300]	@ (80064f8 <HAL_GPIO_Init+0x2f0>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d013      	beq.n	80063f8 <HAL_GPIO_Init+0x1f0>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a4a      	ldr	r2, [pc, #296]	@ (80064fc <HAL_GPIO_Init+0x2f4>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d00d      	beq.n	80063f4 <HAL_GPIO_Init+0x1ec>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a49      	ldr	r2, [pc, #292]	@ (8006500 <HAL_GPIO_Init+0x2f8>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d007      	beq.n	80063f0 <HAL_GPIO_Init+0x1e8>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a48      	ldr	r2, [pc, #288]	@ (8006504 <HAL_GPIO_Init+0x2fc>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d101      	bne.n	80063ec <HAL_GPIO_Init+0x1e4>
 80063e8:	2305      	movs	r3, #5
 80063ea:	e00a      	b.n	8006402 <HAL_GPIO_Init+0x1fa>
 80063ec:	2306      	movs	r3, #6
 80063ee:	e008      	b.n	8006402 <HAL_GPIO_Init+0x1fa>
 80063f0:	2304      	movs	r3, #4
 80063f2:	e006      	b.n	8006402 <HAL_GPIO_Init+0x1fa>
 80063f4:	2303      	movs	r3, #3
 80063f6:	e004      	b.n	8006402 <HAL_GPIO_Init+0x1fa>
 80063f8:	2302      	movs	r3, #2
 80063fa:	e002      	b.n	8006402 <HAL_GPIO_Init+0x1fa>
 80063fc:	2301      	movs	r3, #1
 80063fe:	e000      	b.n	8006402 <HAL_GPIO_Init+0x1fa>
 8006400:	2300      	movs	r3, #0
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	f002 0203 	and.w	r2, r2, #3
 8006408:	0092      	lsls	r2, r2, #2
 800640a:	4093      	lsls	r3, r2
 800640c:	693a      	ldr	r2, [r7, #16]
 800640e:	4313      	orrs	r3, r2
 8006410:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006412:	4937      	ldr	r1, [pc, #220]	@ (80064f0 <HAL_GPIO_Init+0x2e8>)
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	089b      	lsrs	r3, r3, #2
 8006418:	3302      	adds	r3, #2
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006420:	4b39      	ldr	r3, [pc, #228]	@ (8006508 <HAL_GPIO_Init+0x300>)
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	43db      	mvns	r3, r3
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	4013      	ands	r3, r2
 800642e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d003      	beq.n	8006444 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	4313      	orrs	r3, r2
 8006442:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006444:	4a30      	ldr	r2, [pc, #192]	@ (8006508 <HAL_GPIO_Init+0x300>)
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800644a:	4b2f      	ldr	r3, [pc, #188]	@ (8006508 <HAL_GPIO_Init+0x300>)
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	43db      	mvns	r3, r3
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	4013      	ands	r3, r2
 8006458:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d003      	beq.n	800646e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	4313      	orrs	r3, r2
 800646c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800646e:	4a26      	ldr	r2, [pc, #152]	@ (8006508 <HAL_GPIO_Init+0x300>)
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006474:	4b24      	ldr	r3, [pc, #144]	@ (8006508 <HAL_GPIO_Init+0x300>)
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	43db      	mvns	r3, r3
 800647e:	693a      	ldr	r2, [r7, #16]
 8006480:	4013      	ands	r3, r2
 8006482:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d003      	beq.n	8006498 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	4313      	orrs	r3, r2
 8006496:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006498:	4a1b      	ldr	r2, [pc, #108]	@ (8006508 <HAL_GPIO_Init+0x300>)
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800649e:	4b1a      	ldr	r3, [pc, #104]	@ (8006508 <HAL_GPIO_Init+0x300>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	43db      	mvns	r3, r3
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	4013      	ands	r3, r2
 80064ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d003      	beq.n	80064c2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80064ba:	693a      	ldr	r2, [r7, #16]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	4313      	orrs	r3, r2
 80064c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80064c2:	4a11      	ldr	r2, [pc, #68]	@ (8006508 <HAL_GPIO_Init+0x300>)
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	3301      	adds	r3, #1
 80064cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	fa22 f303 	lsr.w	r3, r2, r3
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f47f ae9d 	bne.w	8006218 <HAL_GPIO_Init+0x10>
  }
}
 80064de:	bf00      	nop
 80064e0:	bf00      	nop
 80064e2:	371c      	adds	r7, #28
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr
 80064ec:	40021000 	.word	0x40021000
 80064f0:	40010000 	.word	0x40010000
 80064f4:	48000400 	.word	0x48000400
 80064f8:	48000800 	.word	0x48000800
 80064fc:	48000c00 	.word	0x48000c00
 8006500:	48001000 	.word	0x48001000
 8006504:	48001400 	.word	0x48001400
 8006508:	40010400 	.word	0x40010400

0800650c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	460b      	mov	r3, r1
 8006516:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	691a      	ldr	r2, [r3, #16]
 800651c:	887b      	ldrh	r3, [r7, #2]
 800651e:	4013      	ands	r3, r2
 8006520:	2b00      	cmp	r3, #0
 8006522:	d002      	beq.n	800652a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006524:	2301      	movs	r3, #1
 8006526:	73fb      	strb	r3, [r7, #15]
 8006528:	e001      	b.n	800652e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800652a:	2300      	movs	r3, #0
 800652c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800652e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006530:	4618      	mov	r0, r3
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	460b      	mov	r3, r1
 8006546:	807b      	strh	r3, [r7, #2]
 8006548:	4613      	mov	r3, r2
 800654a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800654c:	787b      	ldrb	r3, [r7, #1]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d003      	beq.n	800655a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006552:	887a      	ldrh	r2, [r7, #2]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006558:	e002      	b.n	8006560 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800655a:	887a      	ldrh	r2, [r7, #2]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	4603      	mov	r3, r0
 8006574:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006576:	4b08      	ldr	r3, [pc, #32]	@ (8006598 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006578:	695a      	ldr	r2, [r3, #20]
 800657a:	88fb      	ldrh	r3, [r7, #6]
 800657c:	4013      	ands	r3, r2
 800657e:	2b00      	cmp	r3, #0
 8006580:	d006      	beq.n	8006590 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006582:	4a05      	ldr	r2, [pc, #20]	@ (8006598 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006584:	88fb      	ldrh	r3, [r7, #6]
 8006586:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006588:	88fb      	ldrh	r3, [r7, #6]
 800658a:	4618      	mov	r0, r3
 800658c:	f000 f806 	bl	800659c <HAL_GPIO_EXTI_Callback>
  }
}
 8006590:	bf00      	nop
 8006592:	3708      	adds	r7, #8
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	40010400 	.word	0x40010400

0800659c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	4603      	mov	r3, r0
 80065a4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80065a6:	bf00      	nop
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
	...

080065b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d141      	bne.n	8006646 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80065c2:	4b4b      	ldr	r3, [pc, #300]	@ (80066f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80065ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065ce:	d131      	bne.n	8006634 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80065d0:	4b47      	ldr	r3, [pc, #284]	@ (80066f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065d6:	4a46      	ldr	r2, [pc, #280]	@ (80066f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80065e0:	4b43      	ldr	r3, [pc, #268]	@ (80066f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80065e8:	4a41      	ldr	r2, [pc, #260]	@ (80066f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80065ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80065f0:	4b40      	ldr	r3, [pc, #256]	@ (80066f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2232      	movs	r2, #50	@ 0x32
 80065f6:	fb02 f303 	mul.w	r3, r2, r3
 80065fa:	4a3f      	ldr	r2, [pc, #252]	@ (80066f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80065fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006600:	0c9b      	lsrs	r3, r3, #18
 8006602:	3301      	adds	r3, #1
 8006604:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006606:	e002      	b.n	800660e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	3b01      	subs	r3, #1
 800660c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800660e:	4b38      	ldr	r3, [pc, #224]	@ (80066f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006616:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800661a:	d102      	bne.n	8006622 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1f2      	bne.n	8006608 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006622:	4b33      	ldr	r3, [pc, #204]	@ (80066f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800662a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800662e:	d158      	bne.n	80066e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e057      	b.n	80066e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006634:	4b2e      	ldr	r3, [pc, #184]	@ (80066f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006636:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800663a:	4a2d      	ldr	r2, [pc, #180]	@ (80066f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800663c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006640:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006644:	e04d      	b.n	80066e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800664c:	d141      	bne.n	80066d2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800664e:	4b28      	ldr	r3, [pc, #160]	@ (80066f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006656:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800665a:	d131      	bne.n	80066c0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800665c:	4b24      	ldr	r3, [pc, #144]	@ (80066f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800665e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006662:	4a23      	ldr	r2, [pc, #140]	@ (80066f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006668:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800666c:	4b20      	ldr	r3, [pc, #128]	@ (80066f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006674:	4a1e      	ldr	r2, [pc, #120]	@ (80066f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006676:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800667a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800667c:	4b1d      	ldr	r3, [pc, #116]	@ (80066f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2232      	movs	r2, #50	@ 0x32
 8006682:	fb02 f303 	mul.w	r3, r2, r3
 8006686:	4a1c      	ldr	r2, [pc, #112]	@ (80066f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006688:	fba2 2303 	umull	r2, r3, r2, r3
 800668c:	0c9b      	lsrs	r3, r3, #18
 800668e:	3301      	adds	r3, #1
 8006690:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006692:	e002      	b.n	800669a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	3b01      	subs	r3, #1
 8006698:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800669a:	4b15      	ldr	r3, [pc, #84]	@ (80066f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066a6:	d102      	bne.n	80066ae <HAL_PWREx_ControlVoltageScaling+0xfa>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1f2      	bne.n	8006694 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80066ae:	4b10      	ldr	r3, [pc, #64]	@ (80066f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066ba:	d112      	bne.n	80066e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e011      	b.n	80066e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80066c0:	4b0b      	ldr	r3, [pc, #44]	@ (80066f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066c6:	4a0a      	ldr	r2, [pc, #40]	@ (80066f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80066d0:	e007      	b.n	80066e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80066d2:	4b07      	ldr	r3, [pc, #28]	@ (80066f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80066da:	4a05      	ldr	r2, [pc, #20]	@ (80066f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80066e0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3714      	adds	r7, #20
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr
 80066f0:	40007000 	.word	0x40007000
 80066f4:	20000240 	.word	0x20000240
 80066f8:	431bde83 	.word	0x431bde83

080066fc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80066fc:	b480      	push	{r7}
 80066fe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006700:	4b05      	ldr	r3, [pc, #20]	@ (8006718 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	4a04      	ldr	r2, [pc, #16]	@ (8006718 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006706:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800670a:	6093      	str	r3, [r2, #8]
}
 800670c:	bf00      	nop
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	40007000 	.word	0x40007000

0800671c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b088      	sub	sp, #32
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d101      	bne.n	800672e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e2fe      	b.n	8006d2c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	2b00      	cmp	r3, #0
 8006738:	d075      	beq.n	8006826 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800673a:	4b97      	ldr	r3, [pc, #604]	@ (8006998 <HAL_RCC_OscConfig+0x27c>)
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f003 030c 	and.w	r3, r3, #12
 8006742:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006744:	4b94      	ldr	r3, [pc, #592]	@ (8006998 <HAL_RCC_OscConfig+0x27c>)
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	f003 0303 	and.w	r3, r3, #3
 800674c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	2b0c      	cmp	r3, #12
 8006752:	d102      	bne.n	800675a <HAL_RCC_OscConfig+0x3e>
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	2b03      	cmp	r3, #3
 8006758:	d002      	beq.n	8006760 <HAL_RCC_OscConfig+0x44>
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	2b08      	cmp	r3, #8
 800675e:	d10b      	bne.n	8006778 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006760:	4b8d      	ldr	r3, [pc, #564]	@ (8006998 <HAL_RCC_OscConfig+0x27c>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d05b      	beq.n	8006824 <HAL_RCC_OscConfig+0x108>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d157      	bne.n	8006824 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e2d9      	b.n	8006d2c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006780:	d106      	bne.n	8006790 <HAL_RCC_OscConfig+0x74>
 8006782:	4b85      	ldr	r3, [pc, #532]	@ (8006998 <HAL_RCC_OscConfig+0x27c>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a84      	ldr	r2, [pc, #528]	@ (8006998 <HAL_RCC_OscConfig+0x27c>)
 8006788:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800678c:	6013      	str	r3, [r2, #0]
 800678e:	e01d      	b.n	80067cc <HAL_RCC_OscConfig+0xb0>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006798:	d10c      	bne.n	80067b4 <HAL_RCC_OscConfig+0x98>
 800679a:	4b7f      	ldr	r3, [pc, #508]	@ (8006998 <HAL_RCC_OscConfig+0x27c>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a7e      	ldr	r2, [pc, #504]	@ (8006998 <HAL_RCC_OscConfig+0x27c>)
 80067a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80067a4:	6013      	str	r3, [r2, #0]
 80067a6:	4b7c      	ldr	r3, [pc, #496]	@ (8006998 <HAL_RCC_OscConfig+0x27c>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a7b      	ldr	r2, [pc, #492]	@ (8006998 <HAL_RCC_OscConfig+0x27c>)
 80067ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067b0:	6013      	str	r3, [r2, #0]
 80067b2:	e00b      	b.n	80067cc <HAL_RCC_OscConfig+0xb0>
 80067b4:	4b78      	ldr	r3, [pc, #480]	@ (8006998 <HAL_RCC_OscConfig+0x27c>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a77      	ldr	r2, [pc, #476]	@ (8006998 <HAL_RCC_OscConfig+0x27c>)
 80067ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067be:	6013      	str	r3, [r2, #0]
 80067c0:	4b75      	ldr	r3, [pc, #468]	@ (8006998 <HAL_RCC_OscConfig+0x27c>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a74      	ldr	r2, [pc, #464]	@ (8006998 <HAL_RCC_OscConfig+0x27c>)
 80067c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80067ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d013      	beq.n	80067fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067d4:	f7fd ffca 	bl	800476c <HAL_GetTick>
 80067d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067da:	e008      	b.n	80067ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067dc:	f7fd ffc6 	bl	800476c <HAL_GetTick>
 80067e0:	4602      	mov	r2, r0
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	2b64      	cmp	r3, #100	@ 0x64
 80067e8:	d901      	bls.n	80067ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80067ea:	2303      	movs	r3, #3
 80067ec:	e29e      	b.n	8006d2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067ee:	4b6a      	ldr	r3, [pc, #424]	@ (8006998 <HAL_RCC_OscConfig+0x27c>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d0f0      	beq.n	80067dc <HAL_RCC_OscConfig+0xc0>
 80067fa:	e014      	b.n	8006826 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067fc:	f7fd ffb6 	bl	800476c <HAL_GetTick>
 8006800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006802:	e008      	b.n	8006816 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006804:	f7fd ffb2 	bl	800476c <HAL_GetTick>
 8006808:	4602      	mov	r2, r0
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	2b64      	cmp	r3, #100	@ 0x64
 8006810:	d901      	bls.n	8006816 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	e28a      	b.n	8006d2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006816:	4b60      	ldr	r3, [pc, #384]	@ (8006998 <HAL_RCC_OscConfig+0x27c>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1f0      	bne.n	8006804 <HAL_RCC_OscConfig+0xe8>
 8006822:	e000      	b.n	8006826 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	2b00      	cmp	r3, #0
 8006830:	d075      	beq.n	800691e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006832:	4b59      	ldr	r3, [pc, #356]	@ (8006998 <HAL_RCC_OscConfig+0x27c>)
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	f003 030c 	and.w	r3, r3, #12
 800683a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800683c:	4b56      	ldr	r3, [pc, #344]	@ (8006998 <HAL_RCC_OscConfig+0x27c>)
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	f003 0303 	and.w	r3, r3, #3
 8006844:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	2b0c      	cmp	r3, #12
 800684a:	d102      	bne.n	8006852 <HAL_RCC_OscConfig+0x136>
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	2b02      	cmp	r3, #2
 8006850:	d002      	beq.n	8006858 <HAL_RCC_OscConfig+0x13c>
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	2b04      	cmp	r3, #4
 8006856:	d11f      	bne.n	8006898 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006858:	4b4f      	ldr	r3, [pc, #316]	@ (8006998 <HAL_RCC_OscConfig+0x27c>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006860:	2b00      	cmp	r3, #0
 8006862:	d005      	beq.n	8006870 <HAL_RCC_OscConfig+0x154>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d101      	bne.n	8006870 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e25d      	b.n	8006d2c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006870:	4b49      	ldr	r3, [pc, #292]	@ (8006998 <HAL_RCC_OscConfig+0x27c>)
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	061b      	lsls	r3, r3, #24
 800687e:	4946      	ldr	r1, [pc, #280]	@ (8006998 <HAL_RCC_OscConfig+0x27c>)
 8006880:	4313      	orrs	r3, r2
 8006882:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006884:	4b45      	ldr	r3, [pc, #276]	@ (800699c <HAL_RCC_OscConfig+0x280>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4618      	mov	r0, r3
 800688a:	f7fd ff23 	bl	80046d4 <HAL_InitTick>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d043      	beq.n	800691c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e249      	b.n	8006d2c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d023      	beq.n	80068e8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068a0:	4b3d      	ldr	r3, [pc, #244]	@ (8006998 <HAL_RCC_OscConfig+0x27c>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a3c      	ldr	r2, [pc, #240]	@ (8006998 <HAL_RCC_OscConfig+0x27c>)
 80068a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ac:	f7fd ff5e 	bl	800476c <HAL_GetTick>
 80068b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068b2:	e008      	b.n	80068c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068b4:	f7fd ff5a 	bl	800476c <HAL_GetTick>
 80068b8:	4602      	mov	r2, r0
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d901      	bls.n	80068c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e232      	b.n	8006d2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068c6:	4b34      	ldr	r3, [pc, #208]	@ (8006998 <HAL_RCC_OscConfig+0x27c>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d0f0      	beq.n	80068b4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068d2:	4b31      	ldr	r3, [pc, #196]	@ (8006998 <HAL_RCC_OscConfig+0x27c>)
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	061b      	lsls	r3, r3, #24
 80068e0:	492d      	ldr	r1, [pc, #180]	@ (8006998 <HAL_RCC_OscConfig+0x27c>)
 80068e2:	4313      	orrs	r3, r2
 80068e4:	604b      	str	r3, [r1, #4]
 80068e6:	e01a      	b.n	800691e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068e8:	4b2b      	ldr	r3, [pc, #172]	@ (8006998 <HAL_RCC_OscConfig+0x27c>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a2a      	ldr	r2, [pc, #168]	@ (8006998 <HAL_RCC_OscConfig+0x27c>)
 80068ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068f4:	f7fd ff3a 	bl	800476c <HAL_GetTick>
 80068f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80068fa:	e008      	b.n	800690e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068fc:	f7fd ff36 	bl	800476c <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	2b02      	cmp	r3, #2
 8006908:	d901      	bls.n	800690e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e20e      	b.n	8006d2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800690e:	4b22      	ldr	r3, [pc, #136]	@ (8006998 <HAL_RCC_OscConfig+0x27c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1f0      	bne.n	80068fc <HAL_RCC_OscConfig+0x1e0>
 800691a:	e000      	b.n	800691e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800691c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0308 	and.w	r3, r3, #8
 8006926:	2b00      	cmp	r3, #0
 8006928:	d041      	beq.n	80069ae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d01c      	beq.n	800696c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006932:	4b19      	ldr	r3, [pc, #100]	@ (8006998 <HAL_RCC_OscConfig+0x27c>)
 8006934:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006938:	4a17      	ldr	r2, [pc, #92]	@ (8006998 <HAL_RCC_OscConfig+0x27c>)
 800693a:	f043 0301 	orr.w	r3, r3, #1
 800693e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006942:	f7fd ff13 	bl	800476c <HAL_GetTick>
 8006946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006948:	e008      	b.n	800695c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800694a:	f7fd ff0f 	bl	800476c <HAL_GetTick>
 800694e:	4602      	mov	r2, r0
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	2b02      	cmp	r3, #2
 8006956:	d901      	bls.n	800695c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006958:	2303      	movs	r3, #3
 800695a:	e1e7      	b.n	8006d2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800695c:	4b0e      	ldr	r3, [pc, #56]	@ (8006998 <HAL_RCC_OscConfig+0x27c>)
 800695e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006962:	f003 0302 	and.w	r3, r3, #2
 8006966:	2b00      	cmp	r3, #0
 8006968:	d0ef      	beq.n	800694a <HAL_RCC_OscConfig+0x22e>
 800696a:	e020      	b.n	80069ae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800696c:	4b0a      	ldr	r3, [pc, #40]	@ (8006998 <HAL_RCC_OscConfig+0x27c>)
 800696e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006972:	4a09      	ldr	r2, [pc, #36]	@ (8006998 <HAL_RCC_OscConfig+0x27c>)
 8006974:	f023 0301 	bic.w	r3, r3, #1
 8006978:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800697c:	f7fd fef6 	bl	800476c <HAL_GetTick>
 8006980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006982:	e00d      	b.n	80069a0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006984:	f7fd fef2 	bl	800476c <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	2b02      	cmp	r3, #2
 8006990:	d906      	bls.n	80069a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	e1ca      	b.n	8006d2c <HAL_RCC_OscConfig+0x610>
 8006996:	bf00      	nop
 8006998:	40021000 	.word	0x40021000
 800699c:	20000244 	.word	0x20000244
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80069a0:	4b8c      	ldr	r3, [pc, #560]	@ (8006bd4 <HAL_RCC_OscConfig+0x4b8>)
 80069a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069a6:	f003 0302 	and.w	r3, r3, #2
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1ea      	bne.n	8006984 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0304 	and.w	r3, r3, #4
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f000 80a6 	beq.w	8006b08 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069bc:	2300      	movs	r3, #0
 80069be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80069c0:	4b84      	ldr	r3, [pc, #528]	@ (8006bd4 <HAL_RCC_OscConfig+0x4b8>)
 80069c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d101      	bne.n	80069d0 <HAL_RCC_OscConfig+0x2b4>
 80069cc:	2301      	movs	r3, #1
 80069ce:	e000      	b.n	80069d2 <HAL_RCC_OscConfig+0x2b6>
 80069d0:	2300      	movs	r3, #0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00d      	beq.n	80069f2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069d6:	4b7f      	ldr	r3, [pc, #508]	@ (8006bd4 <HAL_RCC_OscConfig+0x4b8>)
 80069d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069da:	4a7e      	ldr	r2, [pc, #504]	@ (8006bd4 <HAL_RCC_OscConfig+0x4b8>)
 80069dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80069e2:	4b7c      	ldr	r3, [pc, #496]	@ (8006bd4 <HAL_RCC_OscConfig+0x4b8>)
 80069e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069ea:	60fb      	str	r3, [r7, #12]
 80069ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80069ee:	2301      	movs	r3, #1
 80069f0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069f2:	4b79      	ldr	r3, [pc, #484]	@ (8006bd8 <HAL_RCC_OscConfig+0x4bc>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d118      	bne.n	8006a30 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069fe:	4b76      	ldr	r3, [pc, #472]	@ (8006bd8 <HAL_RCC_OscConfig+0x4bc>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a75      	ldr	r2, [pc, #468]	@ (8006bd8 <HAL_RCC_OscConfig+0x4bc>)
 8006a04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a0a:	f7fd feaf 	bl	800476c <HAL_GetTick>
 8006a0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a10:	e008      	b.n	8006a24 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a12:	f7fd feab 	bl	800476c <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d901      	bls.n	8006a24 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e183      	b.n	8006d2c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a24:	4b6c      	ldr	r3, [pc, #432]	@ (8006bd8 <HAL_RCC_OscConfig+0x4bc>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d0f0      	beq.n	8006a12 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d108      	bne.n	8006a4a <HAL_RCC_OscConfig+0x32e>
 8006a38:	4b66      	ldr	r3, [pc, #408]	@ (8006bd4 <HAL_RCC_OscConfig+0x4b8>)
 8006a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a3e:	4a65      	ldr	r2, [pc, #404]	@ (8006bd4 <HAL_RCC_OscConfig+0x4b8>)
 8006a40:	f043 0301 	orr.w	r3, r3, #1
 8006a44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006a48:	e024      	b.n	8006a94 <HAL_RCC_OscConfig+0x378>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	2b05      	cmp	r3, #5
 8006a50:	d110      	bne.n	8006a74 <HAL_RCC_OscConfig+0x358>
 8006a52:	4b60      	ldr	r3, [pc, #384]	@ (8006bd4 <HAL_RCC_OscConfig+0x4b8>)
 8006a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a58:	4a5e      	ldr	r2, [pc, #376]	@ (8006bd4 <HAL_RCC_OscConfig+0x4b8>)
 8006a5a:	f043 0304 	orr.w	r3, r3, #4
 8006a5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006a62:	4b5c      	ldr	r3, [pc, #368]	@ (8006bd4 <HAL_RCC_OscConfig+0x4b8>)
 8006a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a68:	4a5a      	ldr	r2, [pc, #360]	@ (8006bd4 <HAL_RCC_OscConfig+0x4b8>)
 8006a6a:	f043 0301 	orr.w	r3, r3, #1
 8006a6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006a72:	e00f      	b.n	8006a94 <HAL_RCC_OscConfig+0x378>
 8006a74:	4b57      	ldr	r3, [pc, #348]	@ (8006bd4 <HAL_RCC_OscConfig+0x4b8>)
 8006a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a7a:	4a56      	ldr	r2, [pc, #344]	@ (8006bd4 <HAL_RCC_OscConfig+0x4b8>)
 8006a7c:	f023 0301 	bic.w	r3, r3, #1
 8006a80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006a84:	4b53      	ldr	r3, [pc, #332]	@ (8006bd4 <HAL_RCC_OscConfig+0x4b8>)
 8006a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a8a:	4a52      	ldr	r2, [pc, #328]	@ (8006bd4 <HAL_RCC_OscConfig+0x4b8>)
 8006a8c:	f023 0304 	bic.w	r3, r3, #4
 8006a90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d016      	beq.n	8006aca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a9c:	f7fd fe66 	bl	800476c <HAL_GetTick>
 8006aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006aa2:	e00a      	b.n	8006aba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aa4:	f7fd fe62 	bl	800476c <HAL_GetTick>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d901      	bls.n	8006aba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e138      	b.n	8006d2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006aba:	4b46      	ldr	r3, [pc, #280]	@ (8006bd4 <HAL_RCC_OscConfig+0x4b8>)
 8006abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ac0:	f003 0302 	and.w	r3, r3, #2
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d0ed      	beq.n	8006aa4 <HAL_RCC_OscConfig+0x388>
 8006ac8:	e015      	b.n	8006af6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aca:	f7fd fe4f 	bl	800476c <HAL_GetTick>
 8006ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ad0:	e00a      	b.n	8006ae8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ad2:	f7fd fe4b 	bl	800476c <HAL_GetTick>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d901      	bls.n	8006ae8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	e121      	b.n	8006d2c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ae8:	4b3a      	ldr	r3, [pc, #232]	@ (8006bd4 <HAL_RCC_OscConfig+0x4b8>)
 8006aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aee:	f003 0302 	and.w	r3, r3, #2
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1ed      	bne.n	8006ad2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006af6:	7ffb      	ldrb	r3, [r7, #31]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d105      	bne.n	8006b08 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006afc:	4b35      	ldr	r3, [pc, #212]	@ (8006bd4 <HAL_RCC_OscConfig+0x4b8>)
 8006afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b00:	4a34      	ldr	r2, [pc, #208]	@ (8006bd4 <HAL_RCC_OscConfig+0x4b8>)
 8006b02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b06:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 0320 	and.w	r3, r3, #32
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d03c      	beq.n	8006b8e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	699b      	ldr	r3, [r3, #24]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d01c      	beq.n	8006b56 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006b1c:	4b2d      	ldr	r3, [pc, #180]	@ (8006bd4 <HAL_RCC_OscConfig+0x4b8>)
 8006b1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b22:	4a2c      	ldr	r2, [pc, #176]	@ (8006bd4 <HAL_RCC_OscConfig+0x4b8>)
 8006b24:	f043 0301 	orr.w	r3, r3, #1
 8006b28:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b2c:	f7fd fe1e 	bl	800476c <HAL_GetTick>
 8006b30:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006b32:	e008      	b.n	8006b46 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b34:	f7fd fe1a 	bl	800476c <HAL_GetTick>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d901      	bls.n	8006b46 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e0f2      	b.n	8006d2c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006b46:	4b23      	ldr	r3, [pc, #140]	@ (8006bd4 <HAL_RCC_OscConfig+0x4b8>)
 8006b48:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b4c:	f003 0302 	and.w	r3, r3, #2
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d0ef      	beq.n	8006b34 <HAL_RCC_OscConfig+0x418>
 8006b54:	e01b      	b.n	8006b8e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006b56:	4b1f      	ldr	r3, [pc, #124]	@ (8006bd4 <HAL_RCC_OscConfig+0x4b8>)
 8006b58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b5c:	4a1d      	ldr	r2, [pc, #116]	@ (8006bd4 <HAL_RCC_OscConfig+0x4b8>)
 8006b5e:	f023 0301 	bic.w	r3, r3, #1
 8006b62:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b66:	f7fd fe01 	bl	800476c <HAL_GetTick>
 8006b6a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b6c:	e008      	b.n	8006b80 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b6e:	f7fd fdfd 	bl	800476c <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d901      	bls.n	8006b80 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e0d5      	b.n	8006d2c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006b80:	4b14      	ldr	r3, [pc, #80]	@ (8006bd4 <HAL_RCC_OscConfig+0x4b8>)
 8006b82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b86:	f003 0302 	and.w	r3, r3, #2
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1ef      	bne.n	8006b6e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	f000 80c9 	beq.w	8006d2a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b98:	4b0e      	ldr	r3, [pc, #56]	@ (8006bd4 <HAL_RCC_OscConfig+0x4b8>)
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	f003 030c 	and.w	r3, r3, #12
 8006ba0:	2b0c      	cmp	r3, #12
 8006ba2:	f000 8083 	beq.w	8006cac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	69db      	ldr	r3, [r3, #28]
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d15e      	bne.n	8006c6c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bae:	4b09      	ldr	r3, [pc, #36]	@ (8006bd4 <HAL_RCC_OscConfig+0x4b8>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a08      	ldr	r2, [pc, #32]	@ (8006bd4 <HAL_RCC_OscConfig+0x4b8>)
 8006bb4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006bb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bba:	f7fd fdd7 	bl	800476c <HAL_GetTick>
 8006bbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bc0:	e00c      	b.n	8006bdc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bc2:	f7fd fdd3 	bl	800476c <HAL_GetTick>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d905      	bls.n	8006bdc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e0ab      	b.n	8006d2c <HAL_RCC_OscConfig+0x610>
 8006bd4:	40021000 	.word	0x40021000
 8006bd8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bdc:	4b55      	ldr	r3, [pc, #340]	@ (8006d34 <HAL_RCC_OscConfig+0x618>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1ec      	bne.n	8006bc2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006be8:	4b52      	ldr	r3, [pc, #328]	@ (8006d34 <HAL_RCC_OscConfig+0x618>)
 8006bea:	68da      	ldr	r2, [r3, #12]
 8006bec:	4b52      	ldr	r3, [pc, #328]	@ (8006d38 <HAL_RCC_OscConfig+0x61c>)
 8006bee:	4013      	ands	r3, r2
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	6a11      	ldr	r1, [r2, #32]
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006bf8:	3a01      	subs	r2, #1
 8006bfa:	0112      	lsls	r2, r2, #4
 8006bfc:	4311      	orrs	r1, r2
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006c02:	0212      	lsls	r2, r2, #8
 8006c04:	4311      	orrs	r1, r2
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006c0a:	0852      	lsrs	r2, r2, #1
 8006c0c:	3a01      	subs	r2, #1
 8006c0e:	0552      	lsls	r2, r2, #21
 8006c10:	4311      	orrs	r1, r2
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006c16:	0852      	lsrs	r2, r2, #1
 8006c18:	3a01      	subs	r2, #1
 8006c1a:	0652      	lsls	r2, r2, #25
 8006c1c:	4311      	orrs	r1, r2
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006c22:	06d2      	lsls	r2, r2, #27
 8006c24:	430a      	orrs	r2, r1
 8006c26:	4943      	ldr	r1, [pc, #268]	@ (8006d34 <HAL_RCC_OscConfig+0x618>)
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c2c:	4b41      	ldr	r3, [pc, #260]	@ (8006d34 <HAL_RCC_OscConfig+0x618>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a40      	ldr	r2, [pc, #256]	@ (8006d34 <HAL_RCC_OscConfig+0x618>)
 8006c32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c36:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006c38:	4b3e      	ldr	r3, [pc, #248]	@ (8006d34 <HAL_RCC_OscConfig+0x618>)
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	4a3d      	ldr	r2, [pc, #244]	@ (8006d34 <HAL_RCC_OscConfig+0x618>)
 8006c3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c42:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c44:	f7fd fd92 	bl	800476c <HAL_GetTick>
 8006c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c4a:	e008      	b.n	8006c5e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c4c:	f7fd fd8e 	bl	800476c <HAL_GetTick>
 8006c50:	4602      	mov	r2, r0
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d901      	bls.n	8006c5e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e066      	b.n	8006d2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c5e:	4b35      	ldr	r3, [pc, #212]	@ (8006d34 <HAL_RCC_OscConfig+0x618>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d0f0      	beq.n	8006c4c <HAL_RCC_OscConfig+0x530>
 8006c6a:	e05e      	b.n	8006d2a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c6c:	4b31      	ldr	r3, [pc, #196]	@ (8006d34 <HAL_RCC_OscConfig+0x618>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a30      	ldr	r2, [pc, #192]	@ (8006d34 <HAL_RCC_OscConfig+0x618>)
 8006c72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c78:	f7fd fd78 	bl	800476c <HAL_GetTick>
 8006c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c7e:	e008      	b.n	8006c92 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c80:	f7fd fd74 	bl	800476c <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d901      	bls.n	8006c92 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e04c      	b.n	8006d2c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c92:	4b28      	ldr	r3, [pc, #160]	@ (8006d34 <HAL_RCC_OscConfig+0x618>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1f0      	bne.n	8006c80 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006c9e:	4b25      	ldr	r3, [pc, #148]	@ (8006d34 <HAL_RCC_OscConfig+0x618>)
 8006ca0:	68da      	ldr	r2, [r3, #12]
 8006ca2:	4924      	ldr	r1, [pc, #144]	@ (8006d34 <HAL_RCC_OscConfig+0x618>)
 8006ca4:	4b25      	ldr	r3, [pc, #148]	@ (8006d3c <HAL_RCC_OscConfig+0x620>)
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	60cb      	str	r3, [r1, #12]
 8006caa:	e03e      	b.n	8006d2a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	69db      	ldr	r3, [r3, #28]
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d101      	bne.n	8006cb8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e039      	b.n	8006d2c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006cb8:	4b1e      	ldr	r3, [pc, #120]	@ (8006d34 <HAL_RCC_OscConfig+0x618>)
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	f003 0203 	and.w	r2, r3, #3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a1b      	ldr	r3, [r3, #32]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d12c      	bne.n	8006d26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d123      	bne.n	8006d26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d11b      	bne.n	8006d26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d113      	bne.n	8006d26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d08:	085b      	lsrs	r3, r3, #1
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d109      	bne.n	8006d26 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d1c:	085b      	lsrs	r3, r3, #1
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d001      	beq.n	8006d2a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e000      	b.n	8006d2c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3720      	adds	r7, #32
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	40021000 	.word	0x40021000
 8006d38:	019f800c 	.word	0x019f800c
 8006d3c:	feeefffc 	.word	0xfeeefffc

08006d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b086      	sub	sp, #24
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d101      	bne.n	8006d58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e11e      	b.n	8006f96 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d58:	4b91      	ldr	r3, [pc, #580]	@ (8006fa0 <HAL_RCC_ClockConfig+0x260>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 030f 	and.w	r3, r3, #15
 8006d60:	683a      	ldr	r2, [r7, #0]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d910      	bls.n	8006d88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d66:	4b8e      	ldr	r3, [pc, #568]	@ (8006fa0 <HAL_RCC_ClockConfig+0x260>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f023 020f 	bic.w	r2, r3, #15
 8006d6e:	498c      	ldr	r1, [pc, #560]	@ (8006fa0 <HAL_RCC_ClockConfig+0x260>)
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d76:	4b8a      	ldr	r3, [pc, #552]	@ (8006fa0 <HAL_RCC_ClockConfig+0x260>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 030f 	and.w	r3, r3, #15
 8006d7e:	683a      	ldr	r2, [r7, #0]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d001      	beq.n	8006d88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e106      	b.n	8006f96 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 0301 	and.w	r3, r3, #1
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d073      	beq.n	8006e7c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	2b03      	cmp	r3, #3
 8006d9a:	d129      	bne.n	8006df0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d9c:	4b81      	ldr	r3, [pc, #516]	@ (8006fa4 <HAL_RCC_ClockConfig+0x264>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d101      	bne.n	8006dac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e0f4      	b.n	8006f96 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006dac:	f000 f99e 	bl	80070ec <RCC_GetSysClockFreqFromPLLSource>
 8006db0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	4a7c      	ldr	r2, [pc, #496]	@ (8006fa8 <HAL_RCC_ClockConfig+0x268>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d93f      	bls.n	8006e3a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006dba:	4b7a      	ldr	r3, [pc, #488]	@ (8006fa4 <HAL_RCC_ClockConfig+0x264>)
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d009      	beq.n	8006dda <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d033      	beq.n	8006e3a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d12f      	bne.n	8006e3a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006dda:	4b72      	ldr	r3, [pc, #456]	@ (8006fa4 <HAL_RCC_ClockConfig+0x264>)
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006de2:	4a70      	ldr	r2, [pc, #448]	@ (8006fa4 <HAL_RCC_ClockConfig+0x264>)
 8006de4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006de8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006dea:	2380      	movs	r3, #128	@ 0x80
 8006dec:	617b      	str	r3, [r7, #20]
 8006dee:	e024      	b.n	8006e3a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	d107      	bne.n	8006e08 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006df8:	4b6a      	ldr	r3, [pc, #424]	@ (8006fa4 <HAL_RCC_ClockConfig+0x264>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d109      	bne.n	8006e18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e0c6      	b.n	8006f96 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e08:	4b66      	ldr	r3, [pc, #408]	@ (8006fa4 <HAL_RCC_ClockConfig+0x264>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e0be      	b.n	8006f96 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006e18:	f000 f8ce 	bl	8006fb8 <HAL_RCC_GetSysClockFreq>
 8006e1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	4a61      	ldr	r2, [pc, #388]	@ (8006fa8 <HAL_RCC_ClockConfig+0x268>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d909      	bls.n	8006e3a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006e26:	4b5f      	ldr	r3, [pc, #380]	@ (8006fa4 <HAL_RCC_ClockConfig+0x264>)
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e2e:	4a5d      	ldr	r2, [pc, #372]	@ (8006fa4 <HAL_RCC_ClockConfig+0x264>)
 8006e30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e34:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006e36:	2380      	movs	r3, #128	@ 0x80
 8006e38:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e3a:	4b5a      	ldr	r3, [pc, #360]	@ (8006fa4 <HAL_RCC_ClockConfig+0x264>)
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f023 0203 	bic.w	r2, r3, #3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	4957      	ldr	r1, [pc, #348]	@ (8006fa4 <HAL_RCC_ClockConfig+0x264>)
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e4c:	f7fd fc8e 	bl	800476c <HAL_GetTick>
 8006e50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e52:	e00a      	b.n	8006e6a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e54:	f7fd fc8a 	bl	800476c <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d901      	bls.n	8006e6a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e095      	b.n	8006f96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e6a:	4b4e      	ldr	r3, [pc, #312]	@ (8006fa4 <HAL_RCC_ClockConfig+0x264>)
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f003 020c 	and.w	r2, r3, #12
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d1eb      	bne.n	8006e54 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 0302 	and.w	r3, r3, #2
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d023      	beq.n	8006ed0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0304 	and.w	r3, r3, #4
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d005      	beq.n	8006ea0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e94:	4b43      	ldr	r3, [pc, #268]	@ (8006fa4 <HAL_RCC_ClockConfig+0x264>)
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	4a42      	ldr	r2, [pc, #264]	@ (8006fa4 <HAL_RCC_ClockConfig+0x264>)
 8006e9a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006e9e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 0308 	and.w	r3, r3, #8
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d007      	beq.n	8006ebc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006eac:	4b3d      	ldr	r3, [pc, #244]	@ (8006fa4 <HAL_RCC_ClockConfig+0x264>)
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006eb4:	4a3b      	ldr	r2, [pc, #236]	@ (8006fa4 <HAL_RCC_ClockConfig+0x264>)
 8006eb6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006eba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ebc:	4b39      	ldr	r3, [pc, #228]	@ (8006fa4 <HAL_RCC_ClockConfig+0x264>)
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	4936      	ldr	r1, [pc, #216]	@ (8006fa4 <HAL_RCC_ClockConfig+0x264>)
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	608b      	str	r3, [r1, #8]
 8006ece:	e008      	b.n	8006ee2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	2b80      	cmp	r3, #128	@ 0x80
 8006ed4:	d105      	bne.n	8006ee2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006ed6:	4b33      	ldr	r3, [pc, #204]	@ (8006fa4 <HAL_RCC_ClockConfig+0x264>)
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	4a32      	ldr	r2, [pc, #200]	@ (8006fa4 <HAL_RCC_ClockConfig+0x264>)
 8006edc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ee0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ee2:	4b2f      	ldr	r3, [pc, #188]	@ (8006fa0 <HAL_RCC_ClockConfig+0x260>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 030f 	and.w	r3, r3, #15
 8006eea:	683a      	ldr	r2, [r7, #0]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d21d      	bcs.n	8006f2c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ef0:	4b2b      	ldr	r3, [pc, #172]	@ (8006fa0 <HAL_RCC_ClockConfig+0x260>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f023 020f 	bic.w	r2, r3, #15
 8006ef8:	4929      	ldr	r1, [pc, #164]	@ (8006fa0 <HAL_RCC_ClockConfig+0x260>)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006f00:	f7fd fc34 	bl	800476c <HAL_GetTick>
 8006f04:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f06:	e00a      	b.n	8006f1e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f08:	f7fd fc30 	bl	800476c <HAL_GetTick>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d901      	bls.n	8006f1e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e03b      	b.n	8006f96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f1e:	4b20      	ldr	r3, [pc, #128]	@ (8006fa0 <HAL_RCC_ClockConfig+0x260>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 030f 	and.w	r3, r3, #15
 8006f26:	683a      	ldr	r2, [r7, #0]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d1ed      	bne.n	8006f08 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0304 	and.w	r3, r3, #4
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d008      	beq.n	8006f4a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f38:	4b1a      	ldr	r3, [pc, #104]	@ (8006fa4 <HAL_RCC_ClockConfig+0x264>)
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	4917      	ldr	r1, [pc, #92]	@ (8006fa4 <HAL_RCC_ClockConfig+0x264>)
 8006f46:	4313      	orrs	r3, r2
 8006f48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 0308 	and.w	r3, r3, #8
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d009      	beq.n	8006f6a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f56:	4b13      	ldr	r3, [pc, #76]	@ (8006fa4 <HAL_RCC_ClockConfig+0x264>)
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	00db      	lsls	r3, r3, #3
 8006f64:	490f      	ldr	r1, [pc, #60]	@ (8006fa4 <HAL_RCC_ClockConfig+0x264>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006f6a:	f000 f825 	bl	8006fb8 <HAL_RCC_GetSysClockFreq>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	4b0c      	ldr	r3, [pc, #48]	@ (8006fa4 <HAL_RCC_ClockConfig+0x264>)
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	091b      	lsrs	r3, r3, #4
 8006f76:	f003 030f 	and.w	r3, r3, #15
 8006f7a:	490c      	ldr	r1, [pc, #48]	@ (8006fac <HAL_RCC_ClockConfig+0x26c>)
 8006f7c:	5ccb      	ldrb	r3, [r1, r3]
 8006f7e:	f003 031f 	and.w	r3, r3, #31
 8006f82:	fa22 f303 	lsr.w	r3, r2, r3
 8006f86:	4a0a      	ldr	r2, [pc, #40]	@ (8006fb0 <HAL_RCC_ClockConfig+0x270>)
 8006f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8006fb4 <HAL_RCC_ClockConfig+0x274>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7fd fba0 	bl	80046d4 <HAL_InitTick>
 8006f94:	4603      	mov	r3, r0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3718      	adds	r7, #24
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	40022000 	.word	0x40022000
 8006fa4:	40021000 	.word	0x40021000
 8006fa8:	04c4b400 	.word	0x04c4b400
 8006fac:	0800b9a0 	.word	0x0800b9a0
 8006fb0:	20000240 	.word	0x20000240
 8006fb4:	20000244 	.word	0x20000244

08006fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b087      	sub	sp, #28
 8006fbc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006fbe:	4b2c      	ldr	r3, [pc, #176]	@ (8007070 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f003 030c 	and.w	r3, r3, #12
 8006fc6:	2b04      	cmp	r3, #4
 8006fc8:	d102      	bne.n	8006fd0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006fca:	4b2a      	ldr	r3, [pc, #168]	@ (8007074 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006fcc:	613b      	str	r3, [r7, #16]
 8006fce:	e047      	b.n	8007060 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006fd0:	4b27      	ldr	r3, [pc, #156]	@ (8007070 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	f003 030c 	and.w	r3, r3, #12
 8006fd8:	2b08      	cmp	r3, #8
 8006fda:	d102      	bne.n	8006fe2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006fdc:	4b26      	ldr	r3, [pc, #152]	@ (8007078 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006fde:	613b      	str	r3, [r7, #16]
 8006fe0:	e03e      	b.n	8007060 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006fe2:	4b23      	ldr	r3, [pc, #140]	@ (8007070 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f003 030c 	and.w	r3, r3, #12
 8006fea:	2b0c      	cmp	r3, #12
 8006fec:	d136      	bne.n	800705c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006fee:	4b20      	ldr	r3, [pc, #128]	@ (8007070 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	f003 0303 	and.w	r3, r3, #3
 8006ff6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8007070 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	091b      	lsrs	r3, r3, #4
 8006ffe:	f003 030f 	and.w	r3, r3, #15
 8007002:	3301      	adds	r3, #1
 8007004:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2b03      	cmp	r3, #3
 800700a:	d10c      	bne.n	8007026 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800700c:	4a1a      	ldr	r2, [pc, #104]	@ (8007078 <HAL_RCC_GetSysClockFreq+0xc0>)
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	fbb2 f3f3 	udiv	r3, r2, r3
 8007014:	4a16      	ldr	r2, [pc, #88]	@ (8007070 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007016:	68d2      	ldr	r2, [r2, #12]
 8007018:	0a12      	lsrs	r2, r2, #8
 800701a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800701e:	fb02 f303 	mul.w	r3, r2, r3
 8007022:	617b      	str	r3, [r7, #20]
      break;
 8007024:	e00c      	b.n	8007040 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007026:	4a13      	ldr	r2, [pc, #76]	@ (8007074 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	fbb2 f3f3 	udiv	r3, r2, r3
 800702e:	4a10      	ldr	r2, [pc, #64]	@ (8007070 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007030:	68d2      	ldr	r2, [r2, #12]
 8007032:	0a12      	lsrs	r2, r2, #8
 8007034:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007038:	fb02 f303 	mul.w	r3, r2, r3
 800703c:	617b      	str	r3, [r7, #20]
      break;
 800703e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007040:	4b0b      	ldr	r3, [pc, #44]	@ (8007070 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	0e5b      	lsrs	r3, r3, #25
 8007046:	f003 0303 	and.w	r3, r3, #3
 800704a:	3301      	adds	r3, #1
 800704c:	005b      	lsls	r3, r3, #1
 800704e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007050:	697a      	ldr	r2, [r7, #20]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	fbb2 f3f3 	udiv	r3, r2, r3
 8007058:	613b      	str	r3, [r7, #16]
 800705a:	e001      	b.n	8007060 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800705c:	2300      	movs	r3, #0
 800705e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007060:	693b      	ldr	r3, [r7, #16]
}
 8007062:	4618      	mov	r0, r3
 8007064:	371c      	adds	r7, #28
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	40021000 	.word	0x40021000
 8007074:	00f42400 	.word	0x00f42400
 8007078:	016e3600 	.word	0x016e3600

0800707c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800707c:	b480      	push	{r7}
 800707e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007080:	4b03      	ldr	r3, [pc, #12]	@ (8007090 <HAL_RCC_GetHCLKFreq+0x14>)
 8007082:	681b      	ldr	r3, [r3, #0]
}
 8007084:	4618      	mov	r0, r3
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	20000240 	.word	0x20000240

08007094 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007098:	f7ff fff0 	bl	800707c <HAL_RCC_GetHCLKFreq>
 800709c:	4602      	mov	r2, r0
 800709e:	4b06      	ldr	r3, [pc, #24]	@ (80070b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	0a1b      	lsrs	r3, r3, #8
 80070a4:	f003 0307 	and.w	r3, r3, #7
 80070a8:	4904      	ldr	r1, [pc, #16]	@ (80070bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80070aa:	5ccb      	ldrb	r3, [r1, r3]
 80070ac:	f003 031f 	and.w	r3, r3, #31
 80070b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	40021000 	.word	0x40021000
 80070bc:	0800b9b0 	.word	0x0800b9b0

080070c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80070c4:	f7ff ffda 	bl	800707c <HAL_RCC_GetHCLKFreq>
 80070c8:	4602      	mov	r2, r0
 80070ca:	4b06      	ldr	r3, [pc, #24]	@ (80070e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	0adb      	lsrs	r3, r3, #11
 80070d0:	f003 0307 	and.w	r3, r3, #7
 80070d4:	4904      	ldr	r1, [pc, #16]	@ (80070e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80070d6:	5ccb      	ldrb	r3, [r1, r3]
 80070d8:	f003 031f 	and.w	r3, r3, #31
 80070dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	40021000 	.word	0x40021000
 80070e8:	0800b9b0 	.word	0x0800b9b0

080070ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b087      	sub	sp, #28
 80070f0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80070f2:	4b1e      	ldr	r3, [pc, #120]	@ (800716c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	f003 0303 	and.w	r3, r3, #3
 80070fa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80070fc:	4b1b      	ldr	r3, [pc, #108]	@ (800716c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	091b      	lsrs	r3, r3, #4
 8007102:	f003 030f 	and.w	r3, r3, #15
 8007106:	3301      	adds	r3, #1
 8007108:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	2b03      	cmp	r3, #3
 800710e:	d10c      	bne.n	800712a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007110:	4a17      	ldr	r2, [pc, #92]	@ (8007170 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	fbb2 f3f3 	udiv	r3, r2, r3
 8007118:	4a14      	ldr	r2, [pc, #80]	@ (800716c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800711a:	68d2      	ldr	r2, [r2, #12]
 800711c:	0a12      	lsrs	r2, r2, #8
 800711e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007122:	fb02 f303 	mul.w	r3, r2, r3
 8007126:	617b      	str	r3, [r7, #20]
    break;
 8007128:	e00c      	b.n	8007144 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800712a:	4a12      	ldr	r2, [pc, #72]	@ (8007174 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007132:	4a0e      	ldr	r2, [pc, #56]	@ (800716c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007134:	68d2      	ldr	r2, [r2, #12]
 8007136:	0a12      	lsrs	r2, r2, #8
 8007138:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800713c:	fb02 f303 	mul.w	r3, r2, r3
 8007140:	617b      	str	r3, [r7, #20]
    break;
 8007142:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007144:	4b09      	ldr	r3, [pc, #36]	@ (800716c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	0e5b      	lsrs	r3, r3, #25
 800714a:	f003 0303 	and.w	r3, r3, #3
 800714e:	3301      	adds	r3, #1
 8007150:	005b      	lsls	r3, r3, #1
 8007152:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007154:	697a      	ldr	r2, [r7, #20]
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	fbb2 f3f3 	udiv	r3, r2, r3
 800715c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800715e:	687b      	ldr	r3, [r7, #4]
}
 8007160:	4618      	mov	r0, r3
 8007162:	371c      	adds	r7, #28
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr
 800716c:	40021000 	.word	0x40021000
 8007170:	016e3600 	.word	0x016e3600
 8007174:	00f42400 	.word	0x00f42400

08007178 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b086      	sub	sp, #24
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007180:	2300      	movs	r3, #0
 8007182:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007184:	2300      	movs	r3, #0
 8007186:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007190:	2b00      	cmp	r3, #0
 8007192:	f000 8098 	beq.w	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007196:	2300      	movs	r3, #0
 8007198:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800719a:	4b43      	ldr	r3, [pc, #268]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800719c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800719e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10d      	bne.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071a6:	4b40      	ldr	r3, [pc, #256]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071aa:	4a3f      	ldr	r2, [pc, #252]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80071b2:	4b3d      	ldr	r3, [pc, #244]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071ba:	60bb      	str	r3, [r7, #8]
 80071bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071be:	2301      	movs	r3, #1
 80071c0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071c2:	4b3a      	ldr	r3, [pc, #232]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a39      	ldr	r2, [pc, #228]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80071c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80071ce:	f7fd facd 	bl	800476c <HAL_GetTick>
 80071d2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071d4:	e009      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071d6:	f7fd fac9 	bl	800476c <HAL_GetTick>
 80071da:	4602      	mov	r2, r0
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	d902      	bls.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80071e4:	2303      	movs	r3, #3
 80071e6:	74fb      	strb	r3, [r7, #19]
        break;
 80071e8:	e005      	b.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80071ea:	4b30      	ldr	r3, [pc, #192]	@ (80072ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d0ef      	beq.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80071f6:	7cfb      	ldrb	r3, [r7, #19]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d159      	bne.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80071fc:	4b2a      	ldr	r3, [pc, #168]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007202:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007206:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d01e      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	429a      	cmp	r2, r3
 8007216:	d019      	beq.n	800724c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007218:	4b23      	ldr	r3, [pc, #140]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800721a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800721e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007222:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007224:	4b20      	ldr	r3, [pc, #128]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800722a:	4a1f      	ldr	r2, [pc, #124]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800722c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007230:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007234:	4b1c      	ldr	r3, [pc, #112]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800723a:	4a1b      	ldr	r2, [pc, #108]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800723c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007240:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007244:	4a18      	ldr	r2, [pc, #96]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	2b00      	cmp	r3, #0
 8007254:	d016      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007256:	f7fd fa89 	bl	800476c <HAL_GetTick>
 800725a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800725c:	e00b      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800725e:	f7fd fa85 	bl	800476c <HAL_GetTick>
 8007262:	4602      	mov	r2, r0
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	f241 3288 	movw	r2, #5000	@ 0x1388
 800726c:	4293      	cmp	r3, r2
 800726e:	d902      	bls.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	74fb      	strb	r3, [r7, #19]
            break;
 8007274:	e006      	b.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007276:	4b0c      	ldr	r3, [pc, #48]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007278:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800727c:	f003 0302 	and.w	r3, r3, #2
 8007280:	2b00      	cmp	r3, #0
 8007282:	d0ec      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007284:	7cfb      	ldrb	r3, [r7, #19]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10b      	bne.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800728a:	4b07      	ldr	r3, [pc, #28]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800728c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007290:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007298:	4903      	ldr	r1, [pc, #12]	@ (80072a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800729a:	4313      	orrs	r3, r2
 800729c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80072a0:	e008      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80072a2:	7cfb      	ldrb	r3, [r7, #19]
 80072a4:	74bb      	strb	r3, [r7, #18]
 80072a6:	e005      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80072a8:	40021000 	.word	0x40021000
 80072ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072b0:	7cfb      	ldrb	r3, [r7, #19]
 80072b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072b4:	7c7b      	ldrb	r3, [r7, #17]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d105      	bne.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072ba:	4ba7      	ldr	r3, [pc, #668]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072be:	4aa6      	ldr	r2, [pc, #664]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80072c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 0301 	and.w	r3, r3, #1
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00a      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80072d2:	4ba1      	ldr	r3, [pc, #644]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072d8:	f023 0203 	bic.w	r2, r3, #3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	499d      	ldr	r1, [pc, #628]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072e2:	4313      	orrs	r3, r2
 80072e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 0302 	and.w	r3, r3, #2
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00a      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80072f4:	4b98      	ldr	r3, [pc, #608]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072fa:	f023 020c 	bic.w	r2, r3, #12
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	4995      	ldr	r1, [pc, #596]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007304:	4313      	orrs	r3, r2
 8007306:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 0304 	and.w	r3, r3, #4
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00a      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007316:	4b90      	ldr	r3, [pc, #576]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007318:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800731c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	498c      	ldr	r1, [pc, #560]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007326:	4313      	orrs	r3, r2
 8007328:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 0308 	and.w	r3, r3, #8
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00a      	beq.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007338:	4b87      	ldr	r3, [pc, #540]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800733a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800733e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	4984      	ldr	r1, [pc, #528]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007348:	4313      	orrs	r3, r2
 800734a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0310 	and.w	r3, r3, #16
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00a      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800735a:	4b7f      	ldr	r3, [pc, #508]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800735c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007360:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	695b      	ldr	r3, [r3, #20]
 8007368:	497b      	ldr	r1, [pc, #492]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800736a:	4313      	orrs	r3, r2
 800736c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 0320 	and.w	r3, r3, #32
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00a      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800737c:	4b76      	ldr	r3, [pc, #472]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800737e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007382:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	4973      	ldr	r1, [pc, #460]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800738c:	4313      	orrs	r3, r2
 800738e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00a      	beq.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800739e:	4b6e      	ldr	r3, [pc, #440]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073a4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	69db      	ldr	r3, [r3, #28]
 80073ac:	496a      	ldr	r1, [pc, #424]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073ae:	4313      	orrs	r3, r2
 80073b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00a      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80073c0:	4b65      	ldr	r3, [pc, #404]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073c6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a1b      	ldr	r3, [r3, #32]
 80073ce:	4962      	ldr	r1, [pc, #392]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073d0:	4313      	orrs	r3, r2
 80073d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00a      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80073e2:	4b5d      	ldr	r3, [pc, #372]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f0:	4959      	ldr	r1, [pc, #356]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073f2:	4313      	orrs	r3, r2
 80073f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00a      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007404:	4b54      	ldr	r3, [pc, #336]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007406:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800740a:	f023 0203 	bic.w	r2, r3, #3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007412:	4951      	ldr	r1, [pc, #324]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007414:	4313      	orrs	r3, r2
 8007416:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00a      	beq.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007426:	4b4c      	ldr	r3, [pc, #304]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800742c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007434:	4948      	ldr	r1, [pc, #288]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007436:	4313      	orrs	r3, r2
 8007438:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007444:	2b00      	cmp	r3, #0
 8007446:	d015      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007448:	4b43      	ldr	r3, [pc, #268]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800744a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800744e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007456:	4940      	ldr	r1, [pc, #256]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007458:	4313      	orrs	r3, r2
 800745a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007462:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007466:	d105      	bne.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007468:	4b3b      	ldr	r3, [pc, #236]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	4a3a      	ldr	r2, [pc, #232]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800746e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007472:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800747c:	2b00      	cmp	r3, #0
 800747e:	d015      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007480:	4b35      	ldr	r3, [pc, #212]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007486:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800748e:	4932      	ldr	r1, [pc, #200]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007490:	4313      	orrs	r3, r2
 8007492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800749a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800749e:	d105      	bne.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074a0:	4b2d      	ldr	r3, [pc, #180]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	4a2c      	ldr	r2, [pc, #176]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074aa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d015      	beq.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80074b8:	4b27      	ldr	r3, [pc, #156]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074be:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074c6:	4924      	ldr	r1, [pc, #144]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074c8:	4313      	orrs	r3, r2
 80074ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80074d6:	d105      	bne.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074d8:	4b1f      	ldr	r3, [pc, #124]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	4a1e      	ldr	r2, [pc, #120]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074e2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d015      	beq.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80074f0:	4b19      	ldr	r3, [pc, #100]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074fe:	4916      	ldr	r1, [pc, #88]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007500:	4313      	orrs	r3, r2
 8007502:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800750a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800750e:	d105      	bne.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007510:	4b11      	ldr	r3, [pc, #68]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	4a10      	ldr	r2, [pc, #64]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007516:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800751a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007524:	2b00      	cmp	r3, #0
 8007526:	d019      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007528:	4b0b      	ldr	r3, [pc, #44]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800752a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800752e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007536:	4908      	ldr	r1, [pc, #32]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007538:	4313      	orrs	r3, r2
 800753a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007542:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007546:	d109      	bne.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007548:	4b03      	ldr	r3, [pc, #12]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	4a02      	ldr	r2, [pc, #8]	@ (8007558 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800754e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007552:	60d3      	str	r3, [r2, #12]
 8007554:	e002      	b.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007556:	bf00      	nop
 8007558:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007564:	2b00      	cmp	r3, #0
 8007566:	d015      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007568:	4b29      	ldr	r3, [pc, #164]	@ (8007610 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800756a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800756e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007576:	4926      	ldr	r1, [pc, #152]	@ (8007610 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007578:	4313      	orrs	r3, r2
 800757a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007582:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007586:	d105      	bne.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007588:	4b21      	ldr	r3, [pc, #132]	@ (8007610 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	4a20      	ldr	r2, [pc, #128]	@ (8007610 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800758e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007592:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d015      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80075a0:	4b1b      	ldr	r3, [pc, #108]	@ (8007610 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075a6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075ae:	4918      	ldr	r1, [pc, #96]	@ (8007610 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075b0:	4313      	orrs	r3, r2
 80075b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075be:	d105      	bne.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80075c0:	4b13      	ldr	r3, [pc, #76]	@ (8007610 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	4a12      	ldr	r2, [pc, #72]	@ (8007610 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075ca:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d015      	beq.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80075d8:	4b0d      	ldr	r3, [pc, #52]	@ (8007610 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80075de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075e6:	490a      	ldr	r1, [pc, #40]	@ (8007610 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075e8:	4313      	orrs	r3, r2
 80075ea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80075f6:	d105      	bne.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075f8:	4b05      	ldr	r3, [pc, #20]	@ (8007610 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	4a04      	ldr	r2, [pc, #16]	@ (8007610 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007602:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007604:	7cbb      	ldrb	r3, [r7, #18]
}
 8007606:	4618      	mov	r0, r3
 8007608:	3718      	adds	r7, #24
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	40021000 	.word	0x40021000

08007614 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d101      	bne.n	8007626 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007622:	2301      	movs	r3, #1
 8007624:	e054      	b.n	80076d0 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800762c:	b2db      	uxtb	r3, r3
 800762e:	2b00      	cmp	r3, #0
 8007630:	d111      	bne.n	8007656 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f001 ff3a 	bl	80094b4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007644:	2b00      	cmp	r3, #0
 8007646:	d102      	bne.n	800764e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a23      	ldr	r2, [pc, #140]	@ (80076d8 <HAL_TIM_Base_Init+0xc4>)
 800764c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2202      	movs	r2, #2
 800765a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	3304      	adds	r3, #4
 8007666:	4619      	mov	r1, r3
 8007668:	4610      	mov	r0, r2
 800766a:	f001 fa83 	bl	8008b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2201      	movs	r2, #1
 800767a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2201      	movs	r2, #1
 8007682:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2201      	movs	r2, #1
 800768a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2201      	movs	r2, #1
 8007692:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2201      	movs	r2, #1
 800769a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2201      	movs	r2, #1
 80076a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2201      	movs	r2, #1
 80076aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2201      	movs	r2, #1
 80076b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2201      	movs	r2, #1
 80076c2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2201      	movs	r2, #1
 80076ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3708      	adds	r7, #8
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	080041d1 	.word	0x080041d1

080076dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d001      	beq.n	80076f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e04c      	b.n	800778e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2202      	movs	r2, #2
 80076f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a26      	ldr	r2, [pc, #152]	@ (800779c <HAL_TIM_Base_Start+0xc0>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d022      	beq.n	800774c <HAL_TIM_Base_Start+0x70>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800770e:	d01d      	beq.n	800774c <HAL_TIM_Base_Start+0x70>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a22      	ldr	r2, [pc, #136]	@ (80077a0 <HAL_TIM_Base_Start+0xc4>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d018      	beq.n	800774c <HAL_TIM_Base_Start+0x70>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a21      	ldr	r2, [pc, #132]	@ (80077a4 <HAL_TIM_Base_Start+0xc8>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d013      	beq.n	800774c <HAL_TIM_Base_Start+0x70>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a1f      	ldr	r2, [pc, #124]	@ (80077a8 <HAL_TIM_Base_Start+0xcc>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d00e      	beq.n	800774c <HAL_TIM_Base_Start+0x70>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a1e      	ldr	r2, [pc, #120]	@ (80077ac <HAL_TIM_Base_Start+0xd0>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d009      	beq.n	800774c <HAL_TIM_Base_Start+0x70>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a1c      	ldr	r2, [pc, #112]	@ (80077b0 <HAL_TIM_Base_Start+0xd4>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d004      	beq.n	800774c <HAL_TIM_Base_Start+0x70>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a1b      	ldr	r2, [pc, #108]	@ (80077b4 <HAL_TIM_Base_Start+0xd8>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d115      	bne.n	8007778 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	689a      	ldr	r2, [r3, #8]
 8007752:	4b19      	ldr	r3, [pc, #100]	@ (80077b8 <HAL_TIM_Base_Start+0xdc>)
 8007754:	4013      	ands	r3, r2
 8007756:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2b06      	cmp	r3, #6
 800775c:	d015      	beq.n	800778a <HAL_TIM_Base_Start+0xae>
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007764:	d011      	beq.n	800778a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f042 0201 	orr.w	r2, r2, #1
 8007774:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007776:	e008      	b.n	800778a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f042 0201 	orr.w	r2, r2, #1
 8007786:	601a      	str	r2, [r3, #0]
 8007788:	e000      	b.n	800778c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800778a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3714      	adds	r7, #20
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	40012c00 	.word	0x40012c00
 80077a0:	40000400 	.word	0x40000400
 80077a4:	40000800 	.word	0x40000800
 80077a8:	40000c00 	.word	0x40000c00
 80077ac:	40013400 	.word	0x40013400
 80077b0:	40014000 	.word	0x40014000
 80077b4:	40015000 	.word	0x40015000
 80077b8:	00010007 	.word	0x00010007

080077bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80077bc:	b480      	push	{r7}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d001      	beq.n	80077d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e054      	b.n	800787e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2202      	movs	r2, #2
 80077d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68da      	ldr	r2, [r3, #12]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f042 0201 	orr.w	r2, r2, #1
 80077ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a26      	ldr	r2, [pc, #152]	@ (800788c <HAL_TIM_Base_Start_IT+0xd0>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d022      	beq.n	800783c <HAL_TIM_Base_Start_IT+0x80>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077fe:	d01d      	beq.n	800783c <HAL_TIM_Base_Start_IT+0x80>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a22      	ldr	r2, [pc, #136]	@ (8007890 <HAL_TIM_Base_Start_IT+0xd4>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d018      	beq.n	800783c <HAL_TIM_Base_Start_IT+0x80>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a21      	ldr	r2, [pc, #132]	@ (8007894 <HAL_TIM_Base_Start_IT+0xd8>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d013      	beq.n	800783c <HAL_TIM_Base_Start_IT+0x80>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a1f      	ldr	r2, [pc, #124]	@ (8007898 <HAL_TIM_Base_Start_IT+0xdc>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d00e      	beq.n	800783c <HAL_TIM_Base_Start_IT+0x80>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a1e      	ldr	r2, [pc, #120]	@ (800789c <HAL_TIM_Base_Start_IT+0xe0>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d009      	beq.n	800783c <HAL_TIM_Base_Start_IT+0x80>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a1c      	ldr	r2, [pc, #112]	@ (80078a0 <HAL_TIM_Base_Start_IT+0xe4>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d004      	beq.n	800783c <HAL_TIM_Base_Start_IT+0x80>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a1b      	ldr	r2, [pc, #108]	@ (80078a4 <HAL_TIM_Base_Start_IT+0xe8>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d115      	bne.n	8007868 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	689a      	ldr	r2, [r3, #8]
 8007842:	4b19      	ldr	r3, [pc, #100]	@ (80078a8 <HAL_TIM_Base_Start_IT+0xec>)
 8007844:	4013      	ands	r3, r2
 8007846:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2b06      	cmp	r3, #6
 800784c:	d015      	beq.n	800787a <HAL_TIM_Base_Start_IT+0xbe>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007854:	d011      	beq.n	800787a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f042 0201 	orr.w	r2, r2, #1
 8007864:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007866:	e008      	b.n	800787a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f042 0201 	orr.w	r2, r2, #1
 8007876:	601a      	str	r2, [r3, #0]
 8007878:	e000      	b.n	800787c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800787a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	3714      	adds	r7, #20
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	40012c00 	.word	0x40012c00
 8007890:	40000400 	.word	0x40000400
 8007894:	40000800 	.word	0x40000800
 8007898:	40000c00 	.word	0x40000c00
 800789c:	40013400 	.word	0x40013400
 80078a0:	40014000 	.word	0x40014000
 80078a4:	40015000 	.word	0x40015000
 80078a8:	00010007 	.word	0x00010007

080078ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d101      	bne.n	80078be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e054      	b.n	8007968 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d111      	bne.n	80078ee <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f001 fdee 	bl	80094b4 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d102      	bne.n	80078e6 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a23      	ldr	r2, [pc, #140]	@ (8007970 <HAL_TIM_PWM_Init+0xc4>)
 80078e4:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2202      	movs	r2, #2
 80078f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	3304      	adds	r3, #4
 80078fe:	4619      	mov	r1, r3
 8007900:	4610      	mov	r0, r2
 8007902:	f001 f937 	bl	8008b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2201      	movs	r2, #1
 800790a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2201      	movs	r2, #1
 8007912:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2201      	movs	r2, #1
 800791a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2201      	movs	r2, #1
 8007922:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2201      	movs	r2, #1
 800792a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2201      	movs	r2, #1
 8007932:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2201      	movs	r2, #1
 800793a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2201      	movs	r2, #1
 8007942:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2201      	movs	r2, #1
 8007952:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2201      	movs	r2, #1
 800795a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2201      	movs	r2, #1
 8007962:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007966:	2300      	movs	r3, #0
}
 8007968:	4618      	mov	r0, r3
 800796a:	3708      	adds	r7, #8
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}
 8007970:	08007975 	.word	0x08007975

08007974 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800797c:	bf00      	nop
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007992:	2300      	movs	r3, #0
 8007994:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d109      	bne.n	80079b0 <HAL_TIM_PWM_Start_IT+0x28>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	bf14      	ite	ne
 80079a8:	2301      	movne	r3, #1
 80079aa:	2300      	moveq	r3, #0
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	e03c      	b.n	8007a2a <HAL_TIM_PWM_Start_IT+0xa2>
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	2b04      	cmp	r3, #4
 80079b4:	d109      	bne.n	80079ca <HAL_TIM_PWM_Start_IT+0x42>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	2b01      	cmp	r3, #1
 80079c0:	bf14      	ite	ne
 80079c2:	2301      	movne	r3, #1
 80079c4:	2300      	moveq	r3, #0
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	e02f      	b.n	8007a2a <HAL_TIM_PWM_Start_IT+0xa2>
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	2b08      	cmp	r3, #8
 80079ce:	d109      	bne.n	80079e4 <HAL_TIM_PWM_Start_IT+0x5c>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	2b01      	cmp	r3, #1
 80079da:	bf14      	ite	ne
 80079dc:	2301      	movne	r3, #1
 80079de:	2300      	moveq	r3, #0
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	e022      	b.n	8007a2a <HAL_TIM_PWM_Start_IT+0xa2>
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	2b0c      	cmp	r3, #12
 80079e8:	d109      	bne.n	80079fe <HAL_TIM_PWM_Start_IT+0x76>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	bf14      	ite	ne
 80079f6:	2301      	movne	r3, #1
 80079f8:	2300      	moveq	r3, #0
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	e015      	b.n	8007a2a <HAL_TIM_PWM_Start_IT+0xa2>
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	2b10      	cmp	r3, #16
 8007a02:	d109      	bne.n	8007a18 <HAL_TIM_PWM_Start_IT+0x90>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	bf14      	ite	ne
 8007a10:	2301      	movne	r3, #1
 8007a12:	2300      	moveq	r3, #0
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	e008      	b.n	8007a2a <HAL_TIM_PWM_Start_IT+0xa2>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	bf14      	ite	ne
 8007a24:	2301      	movne	r3, #1
 8007a26:	2300      	moveq	r3, #0
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d001      	beq.n	8007a32 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e0f1      	b.n	8007c16 <HAL_TIM_PWM_Start_IT+0x28e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d104      	bne.n	8007a42 <HAL_TIM_PWM_Start_IT+0xba>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2202      	movs	r2, #2
 8007a3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a40:	e023      	b.n	8007a8a <HAL_TIM_PWM_Start_IT+0x102>
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	2b04      	cmp	r3, #4
 8007a46:	d104      	bne.n	8007a52 <HAL_TIM_PWM_Start_IT+0xca>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2202      	movs	r2, #2
 8007a4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a50:	e01b      	b.n	8007a8a <HAL_TIM_PWM_Start_IT+0x102>
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	2b08      	cmp	r3, #8
 8007a56:	d104      	bne.n	8007a62 <HAL_TIM_PWM_Start_IT+0xda>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2202      	movs	r2, #2
 8007a5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a60:	e013      	b.n	8007a8a <HAL_TIM_PWM_Start_IT+0x102>
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	2b0c      	cmp	r3, #12
 8007a66:	d104      	bne.n	8007a72 <HAL_TIM_PWM_Start_IT+0xea>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2202      	movs	r2, #2
 8007a6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a70:	e00b      	b.n	8007a8a <HAL_TIM_PWM_Start_IT+0x102>
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	2b10      	cmp	r3, #16
 8007a76:	d104      	bne.n	8007a82 <HAL_TIM_PWM_Start_IT+0xfa>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2202      	movs	r2, #2
 8007a7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a80:	e003      	b.n	8007a8a <HAL_TIM_PWM_Start_IT+0x102>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2202      	movs	r2, #2
 8007a86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	2b0c      	cmp	r3, #12
 8007a8e:	d841      	bhi.n	8007b14 <HAL_TIM_PWM_Start_IT+0x18c>
 8007a90:	a201      	add	r2, pc, #4	@ (adr r2, 8007a98 <HAL_TIM_PWM_Start_IT+0x110>)
 8007a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a96:	bf00      	nop
 8007a98:	08007acd 	.word	0x08007acd
 8007a9c:	08007b15 	.word	0x08007b15
 8007aa0:	08007b15 	.word	0x08007b15
 8007aa4:	08007b15 	.word	0x08007b15
 8007aa8:	08007adf 	.word	0x08007adf
 8007aac:	08007b15 	.word	0x08007b15
 8007ab0:	08007b15 	.word	0x08007b15
 8007ab4:	08007b15 	.word	0x08007b15
 8007ab8:	08007af1 	.word	0x08007af1
 8007abc:	08007b15 	.word	0x08007b15
 8007ac0:	08007b15 	.word	0x08007b15
 8007ac4:	08007b15 	.word	0x08007b15
 8007ac8:	08007b03 	.word	0x08007b03
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	68da      	ldr	r2, [r3, #12]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f042 0202 	orr.w	r2, r2, #2
 8007ada:	60da      	str	r2, [r3, #12]
      break;
 8007adc:	e01d      	b.n	8007b1a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68da      	ldr	r2, [r3, #12]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f042 0204 	orr.w	r2, r2, #4
 8007aec:	60da      	str	r2, [r3, #12]
      break;
 8007aee:	e014      	b.n	8007b1a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68da      	ldr	r2, [r3, #12]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f042 0208 	orr.w	r2, r2, #8
 8007afe:	60da      	str	r2, [r3, #12]
      break;
 8007b00:	e00b      	b.n	8007b1a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68da      	ldr	r2, [r3, #12]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f042 0210 	orr.w	r2, r2, #16
 8007b10:	60da      	str	r2, [r3, #12]
      break;
 8007b12:	e002      	b.n	8007b1a <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	73fb      	strb	r3, [r7, #15]
      break;
 8007b18:	bf00      	nop
  }

  if (status == HAL_OK)
 8007b1a:	7bfb      	ldrb	r3, [r7, #15]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d179      	bne.n	8007c14 <HAL_TIM_PWM_Start_IT+0x28c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2201      	movs	r2, #1
 8007b26:	6839      	ldr	r1, [r7, #0]
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f001 fc9d 	bl	8009468 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a3b      	ldr	r2, [pc, #236]	@ (8007c20 <HAL_TIM_PWM_Start_IT+0x298>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d018      	beq.n	8007b6a <HAL_TIM_PWM_Start_IT+0x1e2>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a39      	ldr	r2, [pc, #228]	@ (8007c24 <HAL_TIM_PWM_Start_IT+0x29c>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d013      	beq.n	8007b6a <HAL_TIM_PWM_Start_IT+0x1e2>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a38      	ldr	r2, [pc, #224]	@ (8007c28 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d00e      	beq.n	8007b6a <HAL_TIM_PWM_Start_IT+0x1e2>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a36      	ldr	r2, [pc, #216]	@ (8007c2c <HAL_TIM_PWM_Start_IT+0x2a4>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d009      	beq.n	8007b6a <HAL_TIM_PWM_Start_IT+0x1e2>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a35      	ldr	r2, [pc, #212]	@ (8007c30 <HAL_TIM_PWM_Start_IT+0x2a8>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d004      	beq.n	8007b6a <HAL_TIM_PWM_Start_IT+0x1e2>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a33      	ldr	r2, [pc, #204]	@ (8007c34 <HAL_TIM_PWM_Start_IT+0x2ac>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d101      	bne.n	8007b6e <HAL_TIM_PWM_Start_IT+0x1e6>
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e000      	b.n	8007b70 <HAL_TIM_PWM_Start_IT+0x1e8>
 8007b6e:	2300      	movs	r3, #0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d007      	beq.n	8007b84 <HAL_TIM_PWM_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007b82:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a25      	ldr	r2, [pc, #148]	@ (8007c20 <HAL_TIM_PWM_Start_IT+0x298>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d022      	beq.n	8007bd4 <HAL_TIM_PWM_Start_IT+0x24c>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b96:	d01d      	beq.n	8007bd4 <HAL_TIM_PWM_Start_IT+0x24c>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a26      	ldr	r2, [pc, #152]	@ (8007c38 <HAL_TIM_PWM_Start_IT+0x2b0>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d018      	beq.n	8007bd4 <HAL_TIM_PWM_Start_IT+0x24c>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a25      	ldr	r2, [pc, #148]	@ (8007c3c <HAL_TIM_PWM_Start_IT+0x2b4>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d013      	beq.n	8007bd4 <HAL_TIM_PWM_Start_IT+0x24c>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a23      	ldr	r2, [pc, #140]	@ (8007c40 <HAL_TIM_PWM_Start_IT+0x2b8>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d00e      	beq.n	8007bd4 <HAL_TIM_PWM_Start_IT+0x24c>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a1a      	ldr	r2, [pc, #104]	@ (8007c24 <HAL_TIM_PWM_Start_IT+0x29c>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d009      	beq.n	8007bd4 <HAL_TIM_PWM_Start_IT+0x24c>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a18      	ldr	r2, [pc, #96]	@ (8007c28 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d004      	beq.n	8007bd4 <HAL_TIM_PWM_Start_IT+0x24c>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a19      	ldr	r2, [pc, #100]	@ (8007c34 <HAL_TIM_PWM_Start_IT+0x2ac>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d115      	bne.n	8007c00 <HAL_TIM_PWM_Start_IT+0x278>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	689a      	ldr	r2, [r3, #8]
 8007bda:	4b1a      	ldr	r3, [pc, #104]	@ (8007c44 <HAL_TIM_PWM_Start_IT+0x2bc>)
 8007bdc:	4013      	ands	r3, r2
 8007bde:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	2b06      	cmp	r3, #6
 8007be4:	d015      	beq.n	8007c12 <HAL_TIM_PWM_Start_IT+0x28a>
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bec:	d011      	beq.n	8007c12 <HAL_TIM_PWM_Start_IT+0x28a>
      {
        __HAL_TIM_ENABLE(htim);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f042 0201 	orr.w	r2, r2, #1
 8007bfc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bfe:	e008      	b.n	8007c12 <HAL_TIM_PWM_Start_IT+0x28a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f042 0201 	orr.w	r2, r2, #1
 8007c0e:	601a      	str	r2, [r3, #0]
 8007c10:	e000      	b.n	8007c14 <HAL_TIM_PWM_Start_IT+0x28c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c12:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	40012c00 	.word	0x40012c00
 8007c24:	40013400 	.word	0x40013400
 8007c28:	40014000 	.word	0x40014000
 8007c2c:	40014400 	.word	0x40014400
 8007c30:	40014800 	.word	0x40014800
 8007c34:	40015000 	.word	0x40015000
 8007c38:	40000400 	.word	0x40000400
 8007c3c:	40000800 	.word	0x40000800
 8007c40:	40000c00 	.word	0x40000c00
 8007c44:	00010007 	.word	0x00010007

08007c48 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d101      	bne.n	8007c5c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e04c      	b.n	8007cf6 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d111      	bne.n	8007c8c <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f001 fc1f 	bl	80094b4 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d102      	bne.n	8007c84 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a1f      	ldr	r2, [pc, #124]	@ (8007d00 <HAL_TIM_OnePulse_Init+0xb8>)
 8007c82:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2202      	movs	r2, #2
 8007c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681a      	ldr	r2, [r3, #0]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	3304      	adds	r3, #4
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	4610      	mov	r0, r2
 8007ca0:	f000 ff68 	bl	8008b74 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f022 0208 	bic.w	r2, r2, #8
 8007cb2:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	6819      	ldr	r1, [r3, #0]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	683a      	ldr	r2, [r7, #0]
 8007cc0:	430a      	orrs	r2, r1
 8007cc2:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3708      	adds	r7, #8
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	08007d05 	.word	0x08007d05

08007d04 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007d0c:	bf00      	nop
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d28:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007d30:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d38:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d40:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d42:	7bfb      	ldrb	r3, [r7, #15]
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d108      	bne.n	8007d5a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d48:	7bbb      	ldrb	r3, [r7, #14]
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d105      	bne.n	8007d5a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d4e:	7b7b      	ldrb	r3, [r7, #13]
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d102      	bne.n	8007d5a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d54:	7b3b      	ldrb	r3, [r7, #12]
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d001      	beq.n	8007d5e <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e059      	b.n	8007e12 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2202      	movs	r2, #2
 8007d62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2202      	movs	r2, #2
 8007d6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2202      	movs	r2, #2
 8007d72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2202      	movs	r2, #2
 8007d7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	68da      	ldr	r2, [r3, #12]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f042 0202 	orr.w	r2, r2, #2
 8007d8c:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	68da      	ldr	r2, [r3, #12]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f042 0204 	orr.w	r2, r2, #4
 8007d9c:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2201      	movs	r2, #1
 8007da4:	2100      	movs	r1, #0
 8007da6:	4618      	mov	r0, r3
 8007da8:	f001 fb5e 	bl	8009468 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2201      	movs	r2, #1
 8007db2:	2104      	movs	r1, #4
 8007db4:	4618      	mov	r0, r3
 8007db6:	f001 fb57 	bl	8009468 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a17      	ldr	r2, [pc, #92]	@ (8007e1c <HAL_TIM_OnePulse_Start_IT+0x104>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d018      	beq.n	8007df6 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a15      	ldr	r2, [pc, #84]	@ (8007e20 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d013      	beq.n	8007df6 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a14      	ldr	r2, [pc, #80]	@ (8007e24 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d00e      	beq.n	8007df6 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a12      	ldr	r2, [pc, #72]	@ (8007e28 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d009      	beq.n	8007df6 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a11      	ldr	r2, [pc, #68]	@ (8007e2c <HAL_TIM_OnePulse_Start_IT+0x114>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d004      	beq.n	8007df6 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a0f      	ldr	r2, [pc, #60]	@ (8007e30 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d101      	bne.n	8007dfa <HAL_TIM_OnePulse_Start_IT+0xe2>
 8007df6:	2301      	movs	r3, #1
 8007df8:	e000      	b.n	8007dfc <HAL_TIM_OnePulse_Start_IT+0xe4>
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d007      	beq.n	8007e10 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007e0e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	40012c00 	.word	0x40012c00
 8007e20:	40013400 	.word	0x40013400
 8007e24:	40014000 	.word	0x40014000
 8007e28:	40014400 	.word	0x40014400
 8007e2c:	40014800 	.word	0x40014800
 8007e30:	40015000 	.word	0x40015000

08007e34 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b086      	sub	sp, #24
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d101      	bne.n	8007e48 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007e44:	2301      	movs	r3, #1
 8007e46:	e0a2      	b.n	8007f8e <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d111      	bne.n	8007e78 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f001 fb29 	bl	80094b4 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d102      	bne.n	8007e70 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a4a      	ldr	r2, [pc, #296]	@ (8007f98 <HAL_TIM_Encoder_Init+0x164>)
 8007e6e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2202      	movs	r2, #2
 8007e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	6812      	ldr	r2, [r2, #0]
 8007e8a:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007e8e:	f023 0307 	bic.w	r3, r3, #7
 8007e92:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	3304      	adds	r3, #4
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	4610      	mov	r0, r2
 8007ea0:	f000 fe68 	bl	8008b74 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	699b      	ldr	r3, [r3, #24]
 8007eb2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6a1b      	ldr	r3, [r3, #32]
 8007eba:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	697a      	ldr	r2, [r7, #20]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ecc:	f023 0303 	bic.w	r3, r3, #3
 8007ed0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	689a      	ldr	r2, [r3, #8]
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	699b      	ldr	r3, [r3, #24]
 8007eda:	021b      	lsls	r3, r3, #8
 8007edc:	4313      	orrs	r3, r2
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007eea:	f023 030c 	bic.w	r3, r3, #12
 8007eee:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007ef6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007efa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	68da      	ldr	r2, [r3, #12]
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	69db      	ldr	r3, [r3, #28]
 8007f04:	021b      	lsls	r3, r3, #8
 8007f06:	4313      	orrs	r3, r2
 8007f08:	693a      	ldr	r2, [r7, #16]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	011a      	lsls	r2, r3, #4
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	6a1b      	ldr	r3, [r3, #32]
 8007f18:	031b      	lsls	r3, r3, #12
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	693a      	ldr	r2, [r7, #16]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007f28:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007f30:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	685a      	ldr	r2, [r3, #4]
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	695b      	ldr	r3, [r3, #20]
 8007f3a:	011b      	lsls	r3, r3, #4
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	697a      	ldr	r2, [r7, #20]
 8007f4a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	693a      	ldr	r2, [r7, #16]
 8007f52:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68fa      	ldr	r2, [r7, #12]
 8007f5a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3718      	adds	r7, #24
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	08004151 	.word	0x08004151

08007f9c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007fac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007fb4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007fbc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007fc4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d110      	bne.n	8007fee <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007fcc:	7bfb      	ldrb	r3, [r7, #15]
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d102      	bne.n	8007fd8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007fd2:	7b7b      	ldrb	r3, [r7, #13]
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d001      	beq.n	8007fdc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	e069      	b.n	80080b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2202      	movs	r2, #2
 8007fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2202      	movs	r2, #2
 8007fe8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007fec:	e031      	b.n	8008052 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	2b04      	cmp	r3, #4
 8007ff2:	d110      	bne.n	8008016 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ff4:	7bbb      	ldrb	r3, [r7, #14]
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d102      	bne.n	8008000 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007ffa:	7b3b      	ldrb	r3, [r7, #12]
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d001      	beq.n	8008004 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	e055      	b.n	80080b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2202      	movs	r2, #2
 8008008:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2202      	movs	r2, #2
 8008010:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008014:	e01d      	b.n	8008052 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008016:	7bfb      	ldrb	r3, [r7, #15]
 8008018:	2b01      	cmp	r3, #1
 800801a:	d108      	bne.n	800802e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800801c:	7bbb      	ldrb	r3, [r7, #14]
 800801e:	2b01      	cmp	r3, #1
 8008020:	d105      	bne.n	800802e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008022:	7b7b      	ldrb	r3, [r7, #13]
 8008024:	2b01      	cmp	r3, #1
 8008026:	d102      	bne.n	800802e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008028:	7b3b      	ldrb	r3, [r7, #12]
 800802a:	2b01      	cmp	r3, #1
 800802c:	d001      	beq.n	8008032 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	e03e      	b.n	80080b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2202      	movs	r2, #2
 8008036:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2202      	movs	r2, #2
 800803e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2202      	movs	r2, #2
 8008046:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2202      	movs	r2, #2
 800804e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d003      	beq.n	8008060 <HAL_TIM_Encoder_Start+0xc4>
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	2b04      	cmp	r3, #4
 800805c:	d008      	beq.n	8008070 <HAL_TIM_Encoder_Start+0xd4>
 800805e:	e00f      	b.n	8008080 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2201      	movs	r2, #1
 8008066:	2100      	movs	r1, #0
 8008068:	4618      	mov	r0, r3
 800806a:	f001 f9fd 	bl	8009468 <TIM_CCxChannelCmd>
      break;
 800806e:	e016      	b.n	800809e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2201      	movs	r2, #1
 8008076:	2104      	movs	r1, #4
 8008078:	4618      	mov	r0, r3
 800807a:	f001 f9f5 	bl	8009468 <TIM_CCxChannelCmd>
      break;
 800807e:	e00e      	b.n	800809e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2201      	movs	r2, #1
 8008086:	2100      	movs	r1, #0
 8008088:	4618      	mov	r0, r3
 800808a:	f001 f9ed 	bl	8009468 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2201      	movs	r2, #1
 8008094:	2104      	movs	r1, #4
 8008096:	4618      	mov	r0, r3
 8008098:	f001 f9e6 	bl	8009468 <TIM_CCxChannelCmd>
      break;
 800809c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f042 0201 	orr.w	r2, r2, #1
 80080ac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3710      	adds	r7, #16
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	f003 0302 	and.w	r3, r3, #2
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d026      	beq.n	8008128 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	f003 0302 	and.w	r3, r3, #2
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d021      	beq.n	8008128 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f06f 0202 	mvn.w	r2, #2
 80080ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2201      	movs	r2, #1
 80080f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	699b      	ldr	r3, [r3, #24]
 80080fa:	f003 0303 	and.w	r3, r3, #3
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d005      	beq.n	800810e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	4798      	blx	r3
 800810c:	e009      	b.n	8008122 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	f003 0304 	and.w	r3, r3, #4
 800812e:	2b00      	cmp	r3, #0
 8008130:	d026      	beq.n	8008180 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f003 0304 	and.w	r3, r3, #4
 8008138:	2b00      	cmp	r3, #0
 800813a:	d021      	beq.n	8008180 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f06f 0204 	mvn.w	r2, #4
 8008144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2202      	movs	r2, #2
 800814a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	699b      	ldr	r3, [r3, #24]
 8008152:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008156:	2b00      	cmp	r3, #0
 8008158:	d005      	beq.n	8008166 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	4798      	blx	r3
 8008164:	e009      	b.n	800817a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	f003 0308 	and.w	r3, r3, #8
 8008186:	2b00      	cmp	r3, #0
 8008188:	d026      	beq.n	80081d8 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f003 0308 	and.w	r3, r3, #8
 8008190:	2b00      	cmp	r3, #0
 8008192:	d021      	beq.n	80081d8 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f06f 0208 	mvn.w	r2, #8
 800819c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2204      	movs	r2, #4
 80081a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	69db      	ldr	r3, [r3, #28]
 80081aa:	f003 0303 	and.w	r3, r3, #3
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d005      	beq.n	80081be <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	4798      	blx	r3
 80081bc:	e009      	b.n	80081d2 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	f003 0310 	and.w	r3, r3, #16
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d026      	beq.n	8008230 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f003 0310 	and.w	r3, r3, #16
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d021      	beq.n	8008230 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f06f 0210 	mvn.w	r2, #16
 80081f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2208      	movs	r2, #8
 80081fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	69db      	ldr	r3, [r3, #28]
 8008202:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008206:	2b00      	cmp	r3, #0
 8008208:	d005      	beq.n	8008216 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	4798      	blx	r3
 8008214:	e009      	b.n	800822a <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	f003 0301 	and.w	r3, r3, #1
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00e      	beq.n	8008258 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f003 0301 	and.w	r3, r3, #1
 8008240:	2b00      	cmp	r3, #0
 8008242:	d009      	beq.n	8008258 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f06f 0201 	mvn.w	r2, #1
 800824c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800825e:	2b00      	cmp	r3, #0
 8008260:	d104      	bne.n	800826c <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008268:	2b00      	cmp	r3, #0
 800826a:	d00e      	beq.n	800828a <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008272:	2b00      	cmp	r3, #0
 8008274:	d009      	beq.n	800828a <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800827e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008290:	2b00      	cmp	r3, #0
 8008292:	d00e      	beq.n	80082b2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800829a:	2b00      	cmp	r3, #0
 800829c:	d009      	beq.n	80082b2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80082a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d00e      	beq.n	80082da <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d009      	beq.n	80082da <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80082ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	f003 0320 	and.w	r3, r3, #32
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00e      	beq.n	8008302 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f003 0320 	and.w	r3, r3, #32
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d009      	beq.n	8008302 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f06f 0220 	mvn.w	r2, #32
 80082f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00e      	beq.n	800832a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008312:	2b00      	cmp	r3, #0
 8008314:	d009      	beq.n	800832a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800831e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008330:	2b00      	cmp	r3, #0
 8008332:	d00e      	beq.n	8008352 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800833a:	2b00      	cmp	r3, #0
 800833c:	d009      	beq.n	8008352 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00e      	beq.n	800837a <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008362:	2b00      	cmp	r3, #0
 8008364:	d009      	beq.n	800837a <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800836e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00e      	beq.n	80083a2 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800838a:	2b00      	cmp	r3, #0
 800838c:	d009      	beq.n	80083a2 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80083a2:	bf00      	nop
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
	...

080083ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b086      	sub	sp, #24
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083b8:	2300      	movs	r3, #0
 80083ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d101      	bne.n	80083ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80083c6:	2302      	movs	r3, #2
 80083c8:	e0ff      	b.n	80085ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2201      	movs	r2, #1
 80083ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2b14      	cmp	r3, #20
 80083d6:	f200 80f0 	bhi.w	80085ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80083da:	a201      	add	r2, pc, #4	@ (adr r2, 80083e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80083dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e0:	08008435 	.word	0x08008435
 80083e4:	080085bb 	.word	0x080085bb
 80083e8:	080085bb 	.word	0x080085bb
 80083ec:	080085bb 	.word	0x080085bb
 80083f0:	08008475 	.word	0x08008475
 80083f4:	080085bb 	.word	0x080085bb
 80083f8:	080085bb 	.word	0x080085bb
 80083fc:	080085bb 	.word	0x080085bb
 8008400:	080084b7 	.word	0x080084b7
 8008404:	080085bb 	.word	0x080085bb
 8008408:	080085bb 	.word	0x080085bb
 800840c:	080085bb 	.word	0x080085bb
 8008410:	080084f7 	.word	0x080084f7
 8008414:	080085bb 	.word	0x080085bb
 8008418:	080085bb 	.word	0x080085bb
 800841c:	080085bb 	.word	0x080085bb
 8008420:	08008539 	.word	0x08008539
 8008424:	080085bb 	.word	0x080085bb
 8008428:	080085bb 	.word	0x080085bb
 800842c:	080085bb 	.word	0x080085bb
 8008430:	08008579 	.word	0x08008579
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68b9      	ldr	r1, [r7, #8]
 800843a:	4618      	mov	r0, r3
 800843c:	f000 fc4e 	bl	8008cdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	699a      	ldr	r2, [r3, #24]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f042 0208 	orr.w	r2, r2, #8
 800844e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	699a      	ldr	r2, [r3, #24]
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f022 0204 	bic.w	r2, r2, #4
 800845e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	6999      	ldr	r1, [r3, #24]
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	691a      	ldr	r2, [r3, #16]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	430a      	orrs	r2, r1
 8008470:	619a      	str	r2, [r3, #24]
      break;
 8008472:	e0a5      	b.n	80085c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68b9      	ldr	r1, [r7, #8]
 800847a:	4618      	mov	r0, r3
 800847c:	f000 fcc8 	bl	8008e10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	699a      	ldr	r2, [r3, #24]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800848e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	699a      	ldr	r2, [r3, #24]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800849e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	6999      	ldr	r1, [r3, #24]
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	021a      	lsls	r2, r3, #8
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	430a      	orrs	r2, r1
 80084b2:	619a      	str	r2, [r3, #24]
      break;
 80084b4:	e084      	b.n	80085c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68b9      	ldr	r1, [r7, #8]
 80084bc:	4618      	mov	r0, r3
 80084be:	f000 fd3b 	bl	8008f38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	69da      	ldr	r2, [r3, #28]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f042 0208 	orr.w	r2, r2, #8
 80084d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	69da      	ldr	r2, [r3, #28]
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f022 0204 	bic.w	r2, r2, #4
 80084e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	69d9      	ldr	r1, [r3, #28]
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	691a      	ldr	r2, [r3, #16]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	430a      	orrs	r2, r1
 80084f2:	61da      	str	r2, [r3, #28]
      break;
 80084f4:	e064      	b.n	80085c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	68b9      	ldr	r1, [r7, #8]
 80084fc:	4618      	mov	r0, r3
 80084fe:	f000 fdad 	bl	800905c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	69da      	ldr	r2, [r3, #28]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008510:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	69da      	ldr	r2, [r3, #28]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008520:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	69d9      	ldr	r1, [r3, #28]
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	691b      	ldr	r3, [r3, #16]
 800852c:	021a      	lsls	r2, r3, #8
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	430a      	orrs	r2, r1
 8008534:	61da      	str	r2, [r3, #28]
      break;
 8008536:	e043      	b.n	80085c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	68b9      	ldr	r1, [r7, #8]
 800853e:	4618      	mov	r0, r3
 8008540:	f000 fe20 	bl	8009184 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f042 0208 	orr.w	r2, r2, #8
 8008552:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f022 0204 	bic.w	r2, r2, #4
 8008562:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	691a      	ldr	r2, [r3, #16]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	430a      	orrs	r2, r1
 8008574:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008576:	e023      	b.n	80085c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68b9      	ldr	r1, [r7, #8]
 800857e:	4618      	mov	r0, r3
 8008580:	f000 fe6a 	bl	8009258 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008592:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80085a2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	021a      	lsls	r2, r3, #8
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	430a      	orrs	r2, r1
 80085b6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80085b8:	e002      	b.n	80085c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	75fb      	strb	r3, [r7, #23]
      break;
 80085be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80085c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3718      	adds	r7, #24
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop

080085d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085de:	2300      	movs	r3, #0
 80085e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d101      	bne.n	80085f0 <HAL_TIM_ConfigClockSource+0x1c>
 80085ec:	2302      	movs	r3, #2
 80085ee:	e0f6      	b.n	80087de <HAL_TIM_ConfigClockSource+0x20a>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2202      	movs	r2, #2
 80085fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800860e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008612:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800861a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	68ba      	ldr	r2, [r7, #8]
 8008622:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a6f      	ldr	r2, [pc, #444]	@ (80087e8 <HAL_TIM_ConfigClockSource+0x214>)
 800862a:	4293      	cmp	r3, r2
 800862c:	f000 80c1 	beq.w	80087b2 <HAL_TIM_ConfigClockSource+0x1de>
 8008630:	4a6d      	ldr	r2, [pc, #436]	@ (80087e8 <HAL_TIM_ConfigClockSource+0x214>)
 8008632:	4293      	cmp	r3, r2
 8008634:	f200 80c6 	bhi.w	80087c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008638:	4a6c      	ldr	r2, [pc, #432]	@ (80087ec <HAL_TIM_ConfigClockSource+0x218>)
 800863a:	4293      	cmp	r3, r2
 800863c:	f000 80b9 	beq.w	80087b2 <HAL_TIM_ConfigClockSource+0x1de>
 8008640:	4a6a      	ldr	r2, [pc, #424]	@ (80087ec <HAL_TIM_ConfigClockSource+0x218>)
 8008642:	4293      	cmp	r3, r2
 8008644:	f200 80be 	bhi.w	80087c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008648:	4a69      	ldr	r2, [pc, #420]	@ (80087f0 <HAL_TIM_ConfigClockSource+0x21c>)
 800864a:	4293      	cmp	r3, r2
 800864c:	f000 80b1 	beq.w	80087b2 <HAL_TIM_ConfigClockSource+0x1de>
 8008650:	4a67      	ldr	r2, [pc, #412]	@ (80087f0 <HAL_TIM_ConfigClockSource+0x21c>)
 8008652:	4293      	cmp	r3, r2
 8008654:	f200 80b6 	bhi.w	80087c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008658:	4a66      	ldr	r2, [pc, #408]	@ (80087f4 <HAL_TIM_ConfigClockSource+0x220>)
 800865a:	4293      	cmp	r3, r2
 800865c:	f000 80a9 	beq.w	80087b2 <HAL_TIM_ConfigClockSource+0x1de>
 8008660:	4a64      	ldr	r2, [pc, #400]	@ (80087f4 <HAL_TIM_ConfigClockSource+0x220>)
 8008662:	4293      	cmp	r3, r2
 8008664:	f200 80ae 	bhi.w	80087c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008668:	4a63      	ldr	r2, [pc, #396]	@ (80087f8 <HAL_TIM_ConfigClockSource+0x224>)
 800866a:	4293      	cmp	r3, r2
 800866c:	f000 80a1 	beq.w	80087b2 <HAL_TIM_ConfigClockSource+0x1de>
 8008670:	4a61      	ldr	r2, [pc, #388]	@ (80087f8 <HAL_TIM_ConfigClockSource+0x224>)
 8008672:	4293      	cmp	r3, r2
 8008674:	f200 80a6 	bhi.w	80087c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008678:	4a60      	ldr	r2, [pc, #384]	@ (80087fc <HAL_TIM_ConfigClockSource+0x228>)
 800867a:	4293      	cmp	r3, r2
 800867c:	f000 8099 	beq.w	80087b2 <HAL_TIM_ConfigClockSource+0x1de>
 8008680:	4a5e      	ldr	r2, [pc, #376]	@ (80087fc <HAL_TIM_ConfigClockSource+0x228>)
 8008682:	4293      	cmp	r3, r2
 8008684:	f200 809e 	bhi.w	80087c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008688:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800868c:	f000 8091 	beq.w	80087b2 <HAL_TIM_ConfigClockSource+0x1de>
 8008690:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008694:	f200 8096 	bhi.w	80087c4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008698:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800869c:	f000 8089 	beq.w	80087b2 <HAL_TIM_ConfigClockSource+0x1de>
 80086a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086a4:	f200 808e 	bhi.w	80087c4 <HAL_TIM_ConfigClockSource+0x1f0>
 80086a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086ac:	d03e      	beq.n	800872c <HAL_TIM_ConfigClockSource+0x158>
 80086ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086b2:	f200 8087 	bhi.w	80087c4 <HAL_TIM_ConfigClockSource+0x1f0>
 80086b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086ba:	f000 8086 	beq.w	80087ca <HAL_TIM_ConfigClockSource+0x1f6>
 80086be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086c2:	d87f      	bhi.n	80087c4 <HAL_TIM_ConfigClockSource+0x1f0>
 80086c4:	2b70      	cmp	r3, #112	@ 0x70
 80086c6:	d01a      	beq.n	80086fe <HAL_TIM_ConfigClockSource+0x12a>
 80086c8:	2b70      	cmp	r3, #112	@ 0x70
 80086ca:	d87b      	bhi.n	80087c4 <HAL_TIM_ConfigClockSource+0x1f0>
 80086cc:	2b60      	cmp	r3, #96	@ 0x60
 80086ce:	d050      	beq.n	8008772 <HAL_TIM_ConfigClockSource+0x19e>
 80086d0:	2b60      	cmp	r3, #96	@ 0x60
 80086d2:	d877      	bhi.n	80087c4 <HAL_TIM_ConfigClockSource+0x1f0>
 80086d4:	2b50      	cmp	r3, #80	@ 0x50
 80086d6:	d03c      	beq.n	8008752 <HAL_TIM_ConfigClockSource+0x17e>
 80086d8:	2b50      	cmp	r3, #80	@ 0x50
 80086da:	d873      	bhi.n	80087c4 <HAL_TIM_ConfigClockSource+0x1f0>
 80086dc:	2b40      	cmp	r3, #64	@ 0x40
 80086de:	d058      	beq.n	8008792 <HAL_TIM_ConfigClockSource+0x1be>
 80086e0:	2b40      	cmp	r3, #64	@ 0x40
 80086e2:	d86f      	bhi.n	80087c4 <HAL_TIM_ConfigClockSource+0x1f0>
 80086e4:	2b30      	cmp	r3, #48	@ 0x30
 80086e6:	d064      	beq.n	80087b2 <HAL_TIM_ConfigClockSource+0x1de>
 80086e8:	2b30      	cmp	r3, #48	@ 0x30
 80086ea:	d86b      	bhi.n	80087c4 <HAL_TIM_ConfigClockSource+0x1f0>
 80086ec:	2b20      	cmp	r3, #32
 80086ee:	d060      	beq.n	80087b2 <HAL_TIM_ConfigClockSource+0x1de>
 80086f0:	2b20      	cmp	r3, #32
 80086f2:	d867      	bhi.n	80087c4 <HAL_TIM_ConfigClockSource+0x1f0>
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d05c      	beq.n	80087b2 <HAL_TIM_ConfigClockSource+0x1de>
 80086f8:	2b10      	cmp	r3, #16
 80086fa:	d05a      	beq.n	80087b2 <HAL_TIM_ConfigClockSource+0x1de>
 80086fc:	e062      	b.n	80087c4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800870e:	f000 fe8b 	bl	8009428 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008720:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	68ba      	ldr	r2, [r7, #8]
 8008728:	609a      	str	r2, [r3, #8]
      break;
 800872a:	e04f      	b.n	80087cc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800873c:	f000 fe74 	bl	8009428 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	689a      	ldr	r2, [r3, #8]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800874e:	609a      	str	r2, [r3, #8]
      break;
 8008750:	e03c      	b.n	80087cc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800875e:	461a      	mov	r2, r3
 8008760:	f000 fde6 	bl	8009330 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2150      	movs	r1, #80	@ 0x50
 800876a:	4618      	mov	r0, r3
 800876c:	f000 fe3f 	bl	80093ee <TIM_ITRx_SetConfig>
      break;
 8008770:	e02c      	b.n	80087cc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800877e:	461a      	mov	r2, r3
 8008780:	f000 fe05 	bl	800938e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2160      	movs	r1, #96	@ 0x60
 800878a:	4618      	mov	r0, r3
 800878c:	f000 fe2f 	bl	80093ee <TIM_ITRx_SetConfig>
      break;
 8008790:	e01c      	b.n	80087cc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800879e:	461a      	mov	r2, r3
 80087a0:	f000 fdc6 	bl	8009330 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2140      	movs	r1, #64	@ 0x40
 80087aa:	4618      	mov	r0, r3
 80087ac:	f000 fe1f 	bl	80093ee <TIM_ITRx_SetConfig>
      break;
 80087b0:	e00c      	b.n	80087cc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4619      	mov	r1, r3
 80087bc:	4610      	mov	r0, r2
 80087be:	f000 fe16 	bl	80093ee <TIM_ITRx_SetConfig>
      break;
 80087c2:	e003      	b.n	80087cc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80087c4:	2301      	movs	r3, #1
 80087c6:	73fb      	strb	r3, [r7, #15]
      break;
 80087c8:	e000      	b.n	80087cc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80087ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80087dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	00100070 	.word	0x00100070
 80087ec:	00100060 	.word	0x00100060
 80087f0:	00100050 	.word	0x00100050
 80087f4:	00100040 	.word	0x00100040
 80087f8:	00100030 	.word	0x00100030
 80087fc:	00100020 	.word	0x00100020

08008800 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008808:	bf00      	nop
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008830:	bf00      	nop
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008844:	bf00      	nop
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008858:	bf00      	nop
 800885a:	370c      	adds	r7, #12
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800886c:	bf00      	nop
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008878:	b480      	push	{r7}
 800887a:	b083      	sub	sp, #12
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008880:	bf00      	nop
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008894:	bf00      	nop
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80088a8:	bf00      	nop
 80088aa:	370c      	adds	r7, #12
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b087      	sub	sp, #28
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	460b      	mov	r3, r1
 80088be:	607a      	str	r2, [r7, #4]
 80088c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80088c2:	2300      	movs	r3, #0
 80088c4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d101      	bne.n	80088d0 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	e14a      	b.n	8008b66 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	2b01      	cmp	r3, #1
 80088da:	f040 80dd 	bne.w	8008a98 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 80088de:	7afb      	ldrb	r3, [r7, #11]
 80088e0:	2b1f      	cmp	r3, #31
 80088e2:	f200 80d6 	bhi.w	8008a92 <HAL_TIM_RegisterCallback+0x1de>
 80088e6:	a201      	add	r2, pc, #4	@ (adr r2, 80088ec <HAL_TIM_RegisterCallback+0x38>)
 80088e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ec:	0800896d 	.word	0x0800896d
 80088f0:	08008975 	.word	0x08008975
 80088f4:	0800897d 	.word	0x0800897d
 80088f8:	08008985 	.word	0x08008985
 80088fc:	0800898d 	.word	0x0800898d
 8008900:	08008995 	.word	0x08008995
 8008904:	0800899d 	.word	0x0800899d
 8008908:	080089a5 	.word	0x080089a5
 800890c:	080089ad 	.word	0x080089ad
 8008910:	080089b5 	.word	0x080089b5
 8008914:	080089bd 	.word	0x080089bd
 8008918:	080089c5 	.word	0x080089c5
 800891c:	080089cd 	.word	0x080089cd
 8008920:	080089d5 	.word	0x080089d5
 8008924:	080089df 	.word	0x080089df
 8008928:	080089e9 	.word	0x080089e9
 800892c:	080089f3 	.word	0x080089f3
 8008930:	080089fd 	.word	0x080089fd
 8008934:	08008a07 	.word	0x08008a07
 8008938:	08008a11 	.word	0x08008a11
 800893c:	08008a1b 	.word	0x08008a1b
 8008940:	08008a25 	.word	0x08008a25
 8008944:	08008a2f 	.word	0x08008a2f
 8008948:	08008a39 	.word	0x08008a39
 800894c:	08008a43 	.word	0x08008a43
 8008950:	08008a4d 	.word	0x08008a4d
 8008954:	08008a57 	.word	0x08008a57
 8008958:	08008a61 	.word	0x08008a61
 800895c:	08008a6b 	.word	0x08008a6b
 8008960:	08008a75 	.word	0x08008a75
 8008964:	08008a7f 	.word	0x08008a7f
 8008968:	08008a89 	.word	0x08008a89
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008972:	e0f7      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800897a:	e0f3      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008982:	e0ef      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800898a:	e0eb      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008992:	e0e7      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800899a:	e0e3      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80089a2:	e0df      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80089aa:	e0db      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80089b2:	e0d7      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80089ba:	e0d3      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80089c2:	e0cf      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80089ca:	e0cb      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80089d2:	e0c7      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80089dc:	e0c2      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 80089e6:	e0bd      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 80089f0:	e0b8      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 80089fa:	e0b3      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8008a04:	e0ae      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008a0e:	e0a9      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8008a18:	e0a4      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008a22:	e09f      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008a2c:	e09a      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008a36:	e095      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008a40:	e090      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008a4a:	e08b      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008a54:	e086      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008a5e:	e081      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008a68:	e07c      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008a72:	e077      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8008a7c:	e072      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008a86:	e06d      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008a90:	e068      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	75fb      	strb	r3, [r7, #23]
        break;
 8008a96:	e065      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d15d      	bne.n	8008b60 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8008aa4:	7afb      	ldrb	r3, [r7, #11]
 8008aa6:	2b0d      	cmp	r3, #13
 8008aa8:	d857      	bhi.n	8008b5a <HAL_TIM_RegisterCallback+0x2a6>
 8008aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8008ab0 <HAL_TIM_RegisterCallback+0x1fc>)
 8008aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab0:	08008ae9 	.word	0x08008ae9
 8008ab4:	08008af1 	.word	0x08008af1
 8008ab8:	08008af9 	.word	0x08008af9
 8008abc:	08008b01 	.word	0x08008b01
 8008ac0:	08008b09 	.word	0x08008b09
 8008ac4:	08008b11 	.word	0x08008b11
 8008ac8:	08008b19 	.word	0x08008b19
 8008acc:	08008b21 	.word	0x08008b21
 8008ad0:	08008b29 	.word	0x08008b29
 8008ad4:	08008b31 	.word	0x08008b31
 8008ad8:	08008b39 	.word	0x08008b39
 8008adc:	08008b41 	.word	0x08008b41
 8008ae0:	08008b49 	.word	0x08008b49
 8008ae4:	08008b51 	.word	0x08008b51
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008aee:	e039      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008af6:	e035      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008afe:	e031      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008b06:	e02d      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008b0e:	e029      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008b16:	e025      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008b1e:	e021      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008b26:	e01d      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008b2e:	e019      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008b36:	e015      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008b3e:	e011      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008b46:	e00d      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008b4e:	e009      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008b58:	e004      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	75fb      	strb	r3, [r7, #23]
        break;
 8008b5e:	e001      	b.n	8008b64 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	371c      	adds	r7, #28
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop

08008b74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b085      	sub	sp, #20
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4a4c      	ldr	r2, [pc, #304]	@ (8008cb8 <TIM_Base_SetConfig+0x144>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d017      	beq.n	8008bbc <TIM_Base_SetConfig+0x48>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b92:	d013      	beq.n	8008bbc <TIM_Base_SetConfig+0x48>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4a49      	ldr	r2, [pc, #292]	@ (8008cbc <TIM_Base_SetConfig+0x148>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d00f      	beq.n	8008bbc <TIM_Base_SetConfig+0x48>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a48      	ldr	r2, [pc, #288]	@ (8008cc0 <TIM_Base_SetConfig+0x14c>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d00b      	beq.n	8008bbc <TIM_Base_SetConfig+0x48>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4a47      	ldr	r2, [pc, #284]	@ (8008cc4 <TIM_Base_SetConfig+0x150>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d007      	beq.n	8008bbc <TIM_Base_SetConfig+0x48>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	4a46      	ldr	r2, [pc, #280]	@ (8008cc8 <TIM_Base_SetConfig+0x154>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d003      	beq.n	8008bbc <TIM_Base_SetConfig+0x48>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	4a45      	ldr	r2, [pc, #276]	@ (8008ccc <TIM_Base_SetConfig+0x158>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d108      	bne.n	8008bce <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	4a39      	ldr	r2, [pc, #228]	@ (8008cb8 <TIM_Base_SetConfig+0x144>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d023      	beq.n	8008c1e <TIM_Base_SetConfig+0xaa>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bdc:	d01f      	beq.n	8008c1e <TIM_Base_SetConfig+0xaa>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4a36      	ldr	r2, [pc, #216]	@ (8008cbc <TIM_Base_SetConfig+0x148>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d01b      	beq.n	8008c1e <TIM_Base_SetConfig+0xaa>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	4a35      	ldr	r2, [pc, #212]	@ (8008cc0 <TIM_Base_SetConfig+0x14c>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d017      	beq.n	8008c1e <TIM_Base_SetConfig+0xaa>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4a34      	ldr	r2, [pc, #208]	@ (8008cc4 <TIM_Base_SetConfig+0x150>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d013      	beq.n	8008c1e <TIM_Base_SetConfig+0xaa>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	4a33      	ldr	r2, [pc, #204]	@ (8008cc8 <TIM_Base_SetConfig+0x154>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d00f      	beq.n	8008c1e <TIM_Base_SetConfig+0xaa>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4a33      	ldr	r2, [pc, #204]	@ (8008cd0 <TIM_Base_SetConfig+0x15c>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d00b      	beq.n	8008c1e <TIM_Base_SetConfig+0xaa>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a32      	ldr	r2, [pc, #200]	@ (8008cd4 <TIM_Base_SetConfig+0x160>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d007      	beq.n	8008c1e <TIM_Base_SetConfig+0xaa>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a31      	ldr	r2, [pc, #196]	@ (8008cd8 <TIM_Base_SetConfig+0x164>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d003      	beq.n	8008c1e <TIM_Base_SetConfig+0xaa>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a2c      	ldr	r2, [pc, #176]	@ (8008ccc <TIM_Base_SetConfig+0x158>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d108      	bne.n	8008c30 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	695b      	ldr	r3, [r3, #20]
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	68fa      	ldr	r2, [r7, #12]
 8008c42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	689a      	ldr	r2, [r3, #8]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4a18      	ldr	r2, [pc, #96]	@ (8008cb8 <TIM_Base_SetConfig+0x144>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d013      	beq.n	8008c84 <TIM_Base_SetConfig+0x110>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a1a      	ldr	r2, [pc, #104]	@ (8008cc8 <TIM_Base_SetConfig+0x154>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d00f      	beq.n	8008c84 <TIM_Base_SetConfig+0x110>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a1a      	ldr	r2, [pc, #104]	@ (8008cd0 <TIM_Base_SetConfig+0x15c>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d00b      	beq.n	8008c84 <TIM_Base_SetConfig+0x110>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4a19      	ldr	r2, [pc, #100]	@ (8008cd4 <TIM_Base_SetConfig+0x160>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d007      	beq.n	8008c84 <TIM_Base_SetConfig+0x110>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a18      	ldr	r2, [pc, #96]	@ (8008cd8 <TIM_Base_SetConfig+0x164>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d003      	beq.n	8008c84 <TIM_Base_SetConfig+0x110>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	4a13      	ldr	r2, [pc, #76]	@ (8008ccc <TIM_Base_SetConfig+0x158>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d103      	bne.n	8008c8c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	691a      	ldr	r2, [r3, #16]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	691b      	ldr	r3, [r3, #16]
 8008c96:	f003 0301 	and.w	r3, r3, #1
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	d105      	bne.n	8008caa <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	f023 0201 	bic.w	r2, r3, #1
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	611a      	str	r2, [r3, #16]
  }
}
 8008caa:	bf00      	nop
 8008cac:	3714      	adds	r7, #20
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr
 8008cb6:	bf00      	nop
 8008cb8:	40012c00 	.word	0x40012c00
 8008cbc:	40000400 	.word	0x40000400
 8008cc0:	40000800 	.word	0x40000800
 8008cc4:	40000c00 	.word	0x40000c00
 8008cc8:	40013400 	.word	0x40013400
 8008ccc:	40015000 	.word	0x40015000
 8008cd0:	40014000 	.word	0x40014000
 8008cd4:	40014400 	.word	0x40014400
 8008cd8:	40014800 	.word	0x40014800

08008cdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b087      	sub	sp, #28
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6a1b      	ldr	r3, [r3, #32]
 8008cea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6a1b      	ldr	r3, [r3, #32]
 8008cf0:	f023 0201 	bic.w	r2, r3, #1
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	699b      	ldr	r3, [r3, #24]
 8008d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f023 0303 	bic.w	r3, r3, #3
 8008d16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	f023 0302 	bic.w	r3, r3, #2
 8008d28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	697a      	ldr	r2, [r7, #20]
 8008d30:	4313      	orrs	r3, r2
 8008d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4a30      	ldr	r2, [pc, #192]	@ (8008df8 <TIM_OC1_SetConfig+0x11c>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d013      	beq.n	8008d64 <TIM_OC1_SetConfig+0x88>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	4a2f      	ldr	r2, [pc, #188]	@ (8008dfc <TIM_OC1_SetConfig+0x120>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d00f      	beq.n	8008d64 <TIM_OC1_SetConfig+0x88>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4a2e      	ldr	r2, [pc, #184]	@ (8008e00 <TIM_OC1_SetConfig+0x124>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d00b      	beq.n	8008d64 <TIM_OC1_SetConfig+0x88>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	4a2d      	ldr	r2, [pc, #180]	@ (8008e04 <TIM_OC1_SetConfig+0x128>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d007      	beq.n	8008d64 <TIM_OC1_SetConfig+0x88>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	4a2c      	ldr	r2, [pc, #176]	@ (8008e08 <TIM_OC1_SetConfig+0x12c>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d003      	beq.n	8008d64 <TIM_OC1_SetConfig+0x88>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	4a2b      	ldr	r2, [pc, #172]	@ (8008e0c <TIM_OC1_SetConfig+0x130>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d10c      	bne.n	8008d7e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	f023 0308 	bic.w	r3, r3, #8
 8008d6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	697a      	ldr	r2, [r7, #20]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	f023 0304 	bic.w	r3, r3, #4
 8008d7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4a1d      	ldr	r2, [pc, #116]	@ (8008df8 <TIM_OC1_SetConfig+0x11c>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d013      	beq.n	8008dae <TIM_OC1_SetConfig+0xd2>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4a1c      	ldr	r2, [pc, #112]	@ (8008dfc <TIM_OC1_SetConfig+0x120>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d00f      	beq.n	8008dae <TIM_OC1_SetConfig+0xd2>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4a1b      	ldr	r2, [pc, #108]	@ (8008e00 <TIM_OC1_SetConfig+0x124>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d00b      	beq.n	8008dae <TIM_OC1_SetConfig+0xd2>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	4a1a      	ldr	r2, [pc, #104]	@ (8008e04 <TIM_OC1_SetConfig+0x128>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d007      	beq.n	8008dae <TIM_OC1_SetConfig+0xd2>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4a19      	ldr	r2, [pc, #100]	@ (8008e08 <TIM_OC1_SetConfig+0x12c>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d003      	beq.n	8008dae <TIM_OC1_SetConfig+0xd2>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4a18      	ldr	r2, [pc, #96]	@ (8008e0c <TIM_OC1_SetConfig+0x130>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d111      	bne.n	8008dd2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008db4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	695b      	ldr	r3, [r3, #20]
 8008dc2:	693a      	ldr	r2, [r7, #16]
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	699b      	ldr	r3, [r3, #24]
 8008dcc:	693a      	ldr	r2, [r7, #16]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	693a      	ldr	r2, [r7, #16]
 8008dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	68fa      	ldr	r2, [r7, #12]
 8008ddc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	685a      	ldr	r2, [r3, #4]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	697a      	ldr	r2, [r7, #20]
 8008dea:	621a      	str	r2, [r3, #32]
}
 8008dec:	bf00      	nop
 8008dee:	371c      	adds	r7, #28
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr
 8008df8:	40012c00 	.word	0x40012c00
 8008dfc:	40013400 	.word	0x40013400
 8008e00:	40014000 	.word	0x40014000
 8008e04:	40014400 	.word	0x40014400
 8008e08:	40014800 	.word	0x40014800
 8008e0c:	40015000 	.word	0x40015000

08008e10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b087      	sub	sp, #28
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a1b      	ldr	r3, [r3, #32]
 8008e1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6a1b      	ldr	r3, [r3, #32]
 8008e24:	f023 0210 	bic.w	r2, r3, #16
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	699b      	ldr	r3, [r3, #24]
 8008e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008e3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	021b      	lsls	r3, r3, #8
 8008e52:	68fa      	ldr	r2, [r7, #12]
 8008e54:	4313      	orrs	r3, r2
 8008e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	f023 0320 	bic.w	r3, r3, #32
 8008e5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	011b      	lsls	r3, r3, #4
 8008e66:	697a      	ldr	r2, [r7, #20]
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	4a2c      	ldr	r2, [pc, #176]	@ (8008f20 <TIM_OC2_SetConfig+0x110>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d007      	beq.n	8008e84 <TIM_OC2_SetConfig+0x74>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	4a2b      	ldr	r2, [pc, #172]	@ (8008f24 <TIM_OC2_SetConfig+0x114>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d003      	beq.n	8008e84 <TIM_OC2_SetConfig+0x74>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4a2a      	ldr	r2, [pc, #168]	@ (8008f28 <TIM_OC2_SetConfig+0x118>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d10d      	bne.n	8008ea0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	011b      	lsls	r3, r3, #4
 8008e92:	697a      	ldr	r2, [r7, #20]
 8008e94:	4313      	orrs	r3, r2
 8008e96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4a1f      	ldr	r2, [pc, #124]	@ (8008f20 <TIM_OC2_SetConfig+0x110>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d013      	beq.n	8008ed0 <TIM_OC2_SetConfig+0xc0>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4a1e      	ldr	r2, [pc, #120]	@ (8008f24 <TIM_OC2_SetConfig+0x114>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d00f      	beq.n	8008ed0 <TIM_OC2_SetConfig+0xc0>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8008f2c <TIM_OC2_SetConfig+0x11c>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d00b      	beq.n	8008ed0 <TIM_OC2_SetConfig+0xc0>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	4a1d      	ldr	r2, [pc, #116]	@ (8008f30 <TIM_OC2_SetConfig+0x120>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d007      	beq.n	8008ed0 <TIM_OC2_SetConfig+0xc0>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4a1c      	ldr	r2, [pc, #112]	@ (8008f34 <TIM_OC2_SetConfig+0x124>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d003      	beq.n	8008ed0 <TIM_OC2_SetConfig+0xc0>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	4a17      	ldr	r2, [pc, #92]	@ (8008f28 <TIM_OC2_SetConfig+0x118>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d113      	bne.n	8008ef8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ed6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008ede:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	695b      	ldr	r3, [r3, #20]
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	693a      	ldr	r2, [r7, #16]
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	699b      	ldr	r3, [r3, #24]
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	693a      	ldr	r2, [r7, #16]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	693a      	ldr	r2, [r7, #16]
 8008efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	685a      	ldr	r2, [r3, #4]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	697a      	ldr	r2, [r7, #20]
 8008f10:	621a      	str	r2, [r3, #32]
}
 8008f12:	bf00      	nop
 8008f14:	371c      	adds	r7, #28
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr
 8008f1e:	bf00      	nop
 8008f20:	40012c00 	.word	0x40012c00
 8008f24:	40013400 	.word	0x40013400
 8008f28:	40015000 	.word	0x40015000
 8008f2c:	40014000 	.word	0x40014000
 8008f30:	40014400 	.word	0x40014400
 8008f34:	40014800 	.word	0x40014800

08008f38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b087      	sub	sp, #28
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6a1b      	ldr	r3, [r3, #32]
 8008f46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6a1b      	ldr	r3, [r3, #32]
 8008f4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	69db      	ldr	r3, [r3, #28]
 8008f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f023 0303 	bic.w	r3, r3, #3
 8008f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008f84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	021b      	lsls	r3, r3, #8
 8008f8c:	697a      	ldr	r2, [r7, #20]
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	4a2b      	ldr	r2, [pc, #172]	@ (8009044 <TIM_OC3_SetConfig+0x10c>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d007      	beq.n	8008faa <TIM_OC3_SetConfig+0x72>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	4a2a      	ldr	r2, [pc, #168]	@ (8009048 <TIM_OC3_SetConfig+0x110>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d003      	beq.n	8008faa <TIM_OC3_SetConfig+0x72>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	4a29      	ldr	r2, [pc, #164]	@ (800904c <TIM_OC3_SetConfig+0x114>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d10d      	bne.n	8008fc6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008fb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	021b      	lsls	r3, r3, #8
 8008fb8:	697a      	ldr	r2, [r7, #20]
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	4a1e      	ldr	r2, [pc, #120]	@ (8009044 <TIM_OC3_SetConfig+0x10c>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d013      	beq.n	8008ff6 <TIM_OC3_SetConfig+0xbe>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	4a1d      	ldr	r2, [pc, #116]	@ (8009048 <TIM_OC3_SetConfig+0x110>)
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	d00f      	beq.n	8008ff6 <TIM_OC3_SetConfig+0xbe>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	4a1d      	ldr	r2, [pc, #116]	@ (8009050 <TIM_OC3_SetConfig+0x118>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d00b      	beq.n	8008ff6 <TIM_OC3_SetConfig+0xbe>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	4a1c      	ldr	r2, [pc, #112]	@ (8009054 <TIM_OC3_SetConfig+0x11c>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d007      	beq.n	8008ff6 <TIM_OC3_SetConfig+0xbe>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	4a1b      	ldr	r2, [pc, #108]	@ (8009058 <TIM_OC3_SetConfig+0x120>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d003      	beq.n	8008ff6 <TIM_OC3_SetConfig+0xbe>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	4a16      	ldr	r2, [pc, #88]	@ (800904c <TIM_OC3_SetConfig+0x114>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d113      	bne.n	800901e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ffc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	695b      	ldr	r3, [r3, #20]
 800900a:	011b      	lsls	r3, r3, #4
 800900c:	693a      	ldr	r2, [r7, #16]
 800900e:	4313      	orrs	r3, r2
 8009010:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	699b      	ldr	r3, [r3, #24]
 8009016:	011b      	lsls	r3, r3, #4
 8009018:	693a      	ldr	r2, [r7, #16]
 800901a:	4313      	orrs	r3, r2
 800901c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	693a      	ldr	r2, [r7, #16]
 8009022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	68fa      	ldr	r2, [r7, #12]
 8009028:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	685a      	ldr	r2, [r3, #4]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	697a      	ldr	r2, [r7, #20]
 8009036:	621a      	str	r2, [r3, #32]
}
 8009038:	bf00      	nop
 800903a:	371c      	adds	r7, #28
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr
 8009044:	40012c00 	.word	0x40012c00
 8009048:	40013400 	.word	0x40013400
 800904c:	40015000 	.word	0x40015000
 8009050:	40014000 	.word	0x40014000
 8009054:	40014400 	.word	0x40014400
 8009058:	40014800 	.word	0x40014800

0800905c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800905c:	b480      	push	{r7}
 800905e:	b087      	sub	sp, #28
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a1b      	ldr	r3, [r3, #32]
 800906a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6a1b      	ldr	r3, [r3, #32]
 8009070:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	69db      	ldr	r3, [r3, #28]
 8009082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800908a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800908e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009096:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	021b      	lsls	r3, r3, #8
 800909e:	68fa      	ldr	r2, [r7, #12]
 80090a0:	4313      	orrs	r3, r2
 80090a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80090aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	689b      	ldr	r3, [r3, #8]
 80090b0:	031b      	lsls	r3, r3, #12
 80090b2:	697a      	ldr	r2, [r7, #20]
 80090b4:	4313      	orrs	r3, r2
 80090b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4a2c      	ldr	r2, [pc, #176]	@ (800916c <TIM_OC4_SetConfig+0x110>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d007      	beq.n	80090d0 <TIM_OC4_SetConfig+0x74>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4a2b      	ldr	r2, [pc, #172]	@ (8009170 <TIM_OC4_SetConfig+0x114>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d003      	beq.n	80090d0 <TIM_OC4_SetConfig+0x74>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	4a2a      	ldr	r2, [pc, #168]	@ (8009174 <TIM_OC4_SetConfig+0x118>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d10d      	bne.n	80090ec <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80090d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	031b      	lsls	r3, r3, #12
 80090de:	697a      	ldr	r2, [r7, #20]
 80090e0:	4313      	orrs	r3, r2
 80090e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80090ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	4a1f      	ldr	r2, [pc, #124]	@ (800916c <TIM_OC4_SetConfig+0x110>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d013      	beq.n	800911c <TIM_OC4_SetConfig+0xc0>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4a1e      	ldr	r2, [pc, #120]	@ (8009170 <TIM_OC4_SetConfig+0x114>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d00f      	beq.n	800911c <TIM_OC4_SetConfig+0xc0>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	4a1e      	ldr	r2, [pc, #120]	@ (8009178 <TIM_OC4_SetConfig+0x11c>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d00b      	beq.n	800911c <TIM_OC4_SetConfig+0xc0>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	4a1d      	ldr	r2, [pc, #116]	@ (800917c <TIM_OC4_SetConfig+0x120>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d007      	beq.n	800911c <TIM_OC4_SetConfig+0xc0>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	4a1c      	ldr	r2, [pc, #112]	@ (8009180 <TIM_OC4_SetConfig+0x124>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d003      	beq.n	800911c <TIM_OC4_SetConfig+0xc0>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	4a17      	ldr	r2, [pc, #92]	@ (8009174 <TIM_OC4_SetConfig+0x118>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d113      	bne.n	8009144 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009122:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800912a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	695b      	ldr	r3, [r3, #20]
 8009130:	019b      	lsls	r3, r3, #6
 8009132:	693a      	ldr	r2, [r7, #16]
 8009134:	4313      	orrs	r3, r2
 8009136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	699b      	ldr	r3, [r3, #24]
 800913c:	019b      	lsls	r3, r3, #6
 800913e:	693a      	ldr	r2, [r7, #16]
 8009140:	4313      	orrs	r3, r2
 8009142:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	693a      	ldr	r2, [r7, #16]
 8009148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	68fa      	ldr	r2, [r7, #12]
 800914e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	685a      	ldr	r2, [r3, #4]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	697a      	ldr	r2, [r7, #20]
 800915c:	621a      	str	r2, [r3, #32]
}
 800915e:	bf00      	nop
 8009160:	371c      	adds	r7, #28
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr
 800916a:	bf00      	nop
 800916c:	40012c00 	.word	0x40012c00
 8009170:	40013400 	.word	0x40013400
 8009174:	40015000 	.word	0x40015000
 8009178:	40014000 	.word	0x40014000
 800917c:	40014400 	.word	0x40014400
 8009180:	40014800 	.word	0x40014800

08009184 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009184:	b480      	push	{r7}
 8009186:	b087      	sub	sp, #28
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6a1b      	ldr	r3, [r3, #32]
 8009192:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6a1b      	ldr	r3, [r3, #32]
 8009198:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80091b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	68fa      	ldr	r2, [r7, #12]
 80091be:	4313      	orrs	r3, r2
 80091c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80091c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	041b      	lsls	r3, r3, #16
 80091d0:	693a      	ldr	r2, [r7, #16]
 80091d2:	4313      	orrs	r3, r2
 80091d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	4a19      	ldr	r2, [pc, #100]	@ (8009240 <TIM_OC5_SetConfig+0xbc>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d013      	beq.n	8009206 <TIM_OC5_SetConfig+0x82>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	4a18      	ldr	r2, [pc, #96]	@ (8009244 <TIM_OC5_SetConfig+0xc0>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d00f      	beq.n	8009206 <TIM_OC5_SetConfig+0x82>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	4a17      	ldr	r2, [pc, #92]	@ (8009248 <TIM_OC5_SetConfig+0xc4>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d00b      	beq.n	8009206 <TIM_OC5_SetConfig+0x82>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4a16      	ldr	r2, [pc, #88]	@ (800924c <TIM_OC5_SetConfig+0xc8>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d007      	beq.n	8009206 <TIM_OC5_SetConfig+0x82>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	4a15      	ldr	r2, [pc, #84]	@ (8009250 <TIM_OC5_SetConfig+0xcc>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d003      	beq.n	8009206 <TIM_OC5_SetConfig+0x82>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4a14      	ldr	r2, [pc, #80]	@ (8009254 <TIM_OC5_SetConfig+0xd0>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d109      	bne.n	800921a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800920c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	695b      	ldr	r3, [r3, #20]
 8009212:	021b      	lsls	r3, r3, #8
 8009214:	697a      	ldr	r2, [r7, #20]
 8009216:	4313      	orrs	r3, r2
 8009218:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	697a      	ldr	r2, [r7, #20]
 800921e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	68fa      	ldr	r2, [r7, #12]
 8009224:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	685a      	ldr	r2, [r3, #4]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	693a      	ldr	r2, [r7, #16]
 8009232:	621a      	str	r2, [r3, #32]
}
 8009234:	bf00      	nop
 8009236:	371c      	adds	r7, #28
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr
 8009240:	40012c00 	.word	0x40012c00
 8009244:	40013400 	.word	0x40013400
 8009248:	40014000 	.word	0x40014000
 800924c:	40014400 	.word	0x40014400
 8009250:	40014800 	.word	0x40014800
 8009254:	40015000 	.word	0x40015000

08009258 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009258:	b480      	push	{r7}
 800925a:	b087      	sub	sp, #28
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6a1b      	ldr	r3, [r3, #32]
 8009266:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6a1b      	ldr	r3, [r3, #32]
 800926c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800927e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009286:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800928a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	021b      	lsls	r3, r3, #8
 8009292:	68fa      	ldr	r2, [r7, #12]
 8009294:	4313      	orrs	r3, r2
 8009296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800929e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	051b      	lsls	r3, r3, #20
 80092a6:	693a      	ldr	r2, [r7, #16]
 80092a8:	4313      	orrs	r3, r2
 80092aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	4a1a      	ldr	r2, [pc, #104]	@ (8009318 <TIM_OC6_SetConfig+0xc0>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d013      	beq.n	80092dc <TIM_OC6_SetConfig+0x84>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	4a19      	ldr	r2, [pc, #100]	@ (800931c <TIM_OC6_SetConfig+0xc4>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d00f      	beq.n	80092dc <TIM_OC6_SetConfig+0x84>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	4a18      	ldr	r2, [pc, #96]	@ (8009320 <TIM_OC6_SetConfig+0xc8>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d00b      	beq.n	80092dc <TIM_OC6_SetConfig+0x84>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4a17      	ldr	r2, [pc, #92]	@ (8009324 <TIM_OC6_SetConfig+0xcc>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d007      	beq.n	80092dc <TIM_OC6_SetConfig+0x84>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	4a16      	ldr	r2, [pc, #88]	@ (8009328 <TIM_OC6_SetConfig+0xd0>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d003      	beq.n	80092dc <TIM_OC6_SetConfig+0x84>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4a15      	ldr	r2, [pc, #84]	@ (800932c <TIM_OC6_SetConfig+0xd4>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d109      	bne.n	80092f0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80092e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	695b      	ldr	r3, [r3, #20]
 80092e8:	029b      	lsls	r3, r3, #10
 80092ea:	697a      	ldr	r2, [r7, #20]
 80092ec:	4313      	orrs	r3, r2
 80092ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	697a      	ldr	r2, [r7, #20]
 80092f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	68fa      	ldr	r2, [r7, #12]
 80092fa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	685a      	ldr	r2, [r3, #4]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	693a      	ldr	r2, [r7, #16]
 8009308:	621a      	str	r2, [r3, #32]
}
 800930a:	bf00      	nop
 800930c:	371c      	adds	r7, #28
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop
 8009318:	40012c00 	.word	0x40012c00
 800931c:	40013400 	.word	0x40013400
 8009320:	40014000 	.word	0x40014000
 8009324:	40014400 	.word	0x40014400
 8009328:	40014800 	.word	0x40014800
 800932c:	40015000 	.word	0x40015000

08009330 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009330:	b480      	push	{r7}
 8009332:	b087      	sub	sp, #28
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6a1b      	ldr	r3, [r3, #32]
 8009340:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	6a1b      	ldr	r3, [r3, #32]
 8009346:	f023 0201 	bic.w	r2, r3, #1
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	699b      	ldr	r3, [r3, #24]
 8009352:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800935a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	011b      	lsls	r3, r3, #4
 8009360:	693a      	ldr	r2, [r7, #16]
 8009362:	4313      	orrs	r3, r2
 8009364:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	f023 030a 	bic.w	r3, r3, #10
 800936c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800936e:	697a      	ldr	r2, [r7, #20]
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	4313      	orrs	r3, r2
 8009374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	693a      	ldr	r2, [r7, #16]
 800937a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	697a      	ldr	r2, [r7, #20]
 8009380:	621a      	str	r2, [r3, #32]
}
 8009382:	bf00      	nop
 8009384:	371c      	adds	r7, #28
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr

0800938e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800938e:	b480      	push	{r7}
 8009390:	b087      	sub	sp, #28
 8009392:	af00      	add	r7, sp, #0
 8009394:	60f8      	str	r0, [r7, #12]
 8009396:	60b9      	str	r1, [r7, #8]
 8009398:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	6a1b      	ldr	r3, [r3, #32]
 800939e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	6a1b      	ldr	r3, [r3, #32]
 80093a4:	f023 0210 	bic.w	r2, r3, #16
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	699b      	ldr	r3, [r3, #24]
 80093b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80093b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	031b      	lsls	r3, r3, #12
 80093be:	693a      	ldr	r2, [r7, #16]
 80093c0:	4313      	orrs	r3, r2
 80093c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80093ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	011b      	lsls	r3, r3, #4
 80093d0:	697a      	ldr	r2, [r7, #20]
 80093d2:	4313      	orrs	r3, r2
 80093d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	693a      	ldr	r2, [r7, #16]
 80093da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	697a      	ldr	r2, [r7, #20]
 80093e0:	621a      	str	r2, [r3, #32]
}
 80093e2:	bf00      	nop
 80093e4:	371c      	adds	r7, #28
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr

080093ee <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80093ee:	b480      	push	{r7}
 80093f0:	b085      	sub	sp, #20
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
 80093f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009404:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009408:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800940a:	683a      	ldr	r2, [r7, #0]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	4313      	orrs	r3, r2
 8009410:	f043 0307 	orr.w	r3, r3, #7
 8009414:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	609a      	str	r2, [r3, #8]
}
 800941c:	bf00      	nop
 800941e:	3714      	adds	r7, #20
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009428:	b480      	push	{r7}
 800942a:	b087      	sub	sp, #28
 800942c:	af00      	add	r7, sp, #0
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	60b9      	str	r1, [r7, #8]
 8009432:	607a      	str	r2, [r7, #4]
 8009434:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009442:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	021a      	lsls	r2, r3, #8
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	431a      	orrs	r2, r3
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	4313      	orrs	r3, r2
 8009450:	697a      	ldr	r2, [r7, #20]
 8009452:	4313      	orrs	r3, r2
 8009454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	697a      	ldr	r2, [r7, #20]
 800945a:	609a      	str	r2, [r3, #8]
}
 800945c:	bf00      	nop
 800945e:	371c      	adds	r7, #28
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009468:	b480      	push	{r7}
 800946a:	b087      	sub	sp, #28
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	f003 031f 	and.w	r3, r3, #31
 800947a:	2201      	movs	r2, #1
 800947c:	fa02 f303 	lsl.w	r3, r2, r3
 8009480:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	6a1a      	ldr	r2, [r3, #32]
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	43db      	mvns	r3, r3
 800948a:	401a      	ands	r2, r3
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	6a1a      	ldr	r2, [r3, #32]
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	f003 031f 	and.w	r3, r3, #31
 800949a:	6879      	ldr	r1, [r7, #4]
 800949c:	fa01 f303 	lsl.w	r3, r1, r3
 80094a0:	431a      	orrs	r2, r3
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	621a      	str	r2, [r3, #32]
}
 80094a6:	bf00      	nop
 80094a8:	371c      	adds	r7, #28
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr
	...

080094b4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4a26      	ldr	r2, [pc, #152]	@ (8009558 <TIM_ResetCallback+0xa4>)
 80094c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	4a25      	ldr	r2, [pc, #148]	@ (800955c <TIM_ResetCallback+0xa8>)
 80094c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4a24      	ldr	r2, [pc, #144]	@ (8009560 <TIM_ResetCallback+0xac>)
 80094d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	4a23      	ldr	r2, [pc, #140]	@ (8009564 <TIM_ResetCallback+0xb0>)
 80094d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4a22      	ldr	r2, [pc, #136]	@ (8009568 <TIM_ResetCallback+0xb4>)
 80094e0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	4a21      	ldr	r2, [pc, #132]	@ (800956c <TIM_ResetCallback+0xb8>)
 80094e8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4a20      	ldr	r2, [pc, #128]	@ (8009570 <TIM_ResetCallback+0xbc>)
 80094f0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4a1f      	ldr	r2, [pc, #124]	@ (8009574 <TIM_ResetCallback+0xc0>)
 80094f8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	4a1e      	ldr	r2, [pc, #120]	@ (8009578 <TIM_ResetCallback+0xc4>)
 8009500:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4a1d      	ldr	r2, [pc, #116]	@ (800957c <TIM_ResetCallback+0xc8>)
 8009508:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4a1c      	ldr	r2, [pc, #112]	@ (8009580 <TIM_ResetCallback+0xcc>)
 8009510:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	4a1b      	ldr	r2, [pc, #108]	@ (8009584 <TIM_ResetCallback+0xd0>)
 8009518:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4a1a      	ldr	r2, [pc, #104]	@ (8009588 <TIM_ResetCallback+0xd4>)
 8009520:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4a19      	ldr	r2, [pc, #100]	@ (800958c <TIM_ResetCallback+0xd8>)
 8009528:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	4a18      	ldr	r2, [pc, #96]	@ (8009590 <TIM_ResetCallback+0xdc>)
 8009530:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4a17      	ldr	r2, [pc, #92]	@ (8009594 <TIM_ResetCallback+0xe0>)
 8009538:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	4a16      	ldr	r2, [pc, #88]	@ (8009598 <TIM_ResetCallback+0xe4>)
 8009540:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4a15      	ldr	r2, [pc, #84]	@ (800959c <TIM_ResetCallback+0xe8>)
 8009548:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800954c:	bf00      	nop
 800954e:	370c      	adds	r7, #12
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr
 8009558:	08003e3d 	.word	0x08003e3d
 800955c:	08008801 	.word	0x08008801
 8009560:	08008879 	.word	0x08008879
 8009564:	0800888d 	.word	0x0800888d
 8009568:	08008829 	.word	0x08008829
 800956c:	0800883d 	.word	0x0800883d
 8009570:	08008815 	.word	0x08008815
 8009574:	08008851 	.word	0x08008851
 8009578:	08008865 	.word	0x08008865
 800957c:	080088a1 	.word	0x080088a1
 8009580:	080096cd 	.word	0x080096cd
 8009584:	080096e1 	.word	0x080096e1
 8009588:	080096f5 	.word	0x080096f5
 800958c:	08009709 	.word	0x08009709
 8009590:	0800971d 	.word	0x0800971d
 8009594:	08009731 	.word	0x08009731
 8009598:	08009745 	.word	0x08009745
 800959c:	08009759 	.word	0x08009759

080095a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b085      	sub	sp, #20
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d101      	bne.n	80095b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80095b4:	2302      	movs	r3, #2
 80095b6:	e074      	b.n	80096a2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2201      	movs	r2, #1
 80095bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2202      	movs	r2, #2
 80095c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a34      	ldr	r2, [pc, #208]	@ (80096b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d009      	beq.n	80095f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4a33      	ldr	r2, [pc, #204]	@ (80096b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d004      	beq.n	80095f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a31      	ldr	r2, [pc, #196]	@ (80096b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d108      	bne.n	8009608 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80095fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	68fa      	ldr	r2, [r7, #12]
 8009604:	4313      	orrs	r3, r2
 8009606:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800960e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009612:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	68fa      	ldr	r2, [r7, #12]
 800961a:	4313      	orrs	r3, r2
 800961c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	68fa      	ldr	r2, [r7, #12]
 8009624:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a21      	ldr	r2, [pc, #132]	@ (80096b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d022      	beq.n	8009676 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009638:	d01d      	beq.n	8009676 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a1f      	ldr	r2, [pc, #124]	@ (80096bc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d018      	beq.n	8009676 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a1d      	ldr	r2, [pc, #116]	@ (80096c0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d013      	beq.n	8009676 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a1c      	ldr	r2, [pc, #112]	@ (80096c4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d00e      	beq.n	8009676 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a15      	ldr	r2, [pc, #84]	@ (80096b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d009      	beq.n	8009676 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a18      	ldr	r2, [pc, #96]	@ (80096c8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d004      	beq.n	8009676 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a11      	ldr	r2, [pc, #68]	@ (80096b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d10c      	bne.n	8009690 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800967c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	68ba      	ldr	r2, [r7, #8]
 8009684:	4313      	orrs	r3, r2
 8009686:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	68ba      	ldr	r2, [r7, #8]
 800968e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2201      	movs	r2, #1
 8009694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2200      	movs	r2, #0
 800969c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80096a0:	2300      	movs	r3, #0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3714      	adds	r7, #20
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop
 80096b0:	40012c00 	.word	0x40012c00
 80096b4:	40013400 	.word	0x40013400
 80096b8:	40015000 	.word	0x40015000
 80096bc:	40000400 	.word	0x40000400
 80096c0:	40000800 	.word	0x40000800
 80096c4:	40000c00 	.word	0x40000c00
 80096c8:	40014000 	.word	0x40014000

080096cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096d4:	bf00      	nop
 80096d6:	370c      	adds	r7, #12
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80096e8:	bf00      	nop
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096fc:	bf00      	nop
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009710:	bf00      	nop
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009724:	bf00      	nop
 8009726:	370c      	adds	r7, #12
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009738:	bf00      	nop
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800974c:	bf00      	nop
 800974e:	370c      	adds	r7, #12
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009760:	bf00      	nop
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d101      	bne.n	800977e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800977a:	2301      	movs	r3, #1
 800977c:	e050      	b.n	8009820 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009784:	2b00      	cmp	r3, #0
 8009786:	d114      	bne.n	80097b2 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 fe8d 	bl	800a4b0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800979c:	2b00      	cmp	r3, #0
 800979e:	d103      	bne.n	80097a8 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4a21      	ldr	r2, [pc, #132]	@ (8009828 <HAL_UART_Init+0xbc>)
 80097a4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2224      	movs	r2, #36	@ 0x24
 80097b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f022 0201 	bic.w	r2, r2, #1
 80097c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d002      	beq.n	80097d8 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f001 f9ba 	bl	800ab4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 febb 	bl	800a554 <UART_SetConfig>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d101      	bne.n	80097e8 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 80097e4:	2301      	movs	r3, #1
 80097e6:	e01b      	b.n	8009820 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	685a      	ldr	r2, [r3, #4]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80097f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	689a      	ldr	r2, [r3, #8]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009806:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f042 0201 	orr.w	r2, r2, #1
 8009816:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f001 fa39 	bl	800ac90 <UART_CheckIdleState>
 800981e:	4603      	mov	r3, r0
}
 8009820:	4618      	mov	r0, r3
 8009822:	3708      	adds	r7, #8
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}
 8009828:	0800434d 	.word	0x0800434d

0800982c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800982c:	b480      	push	{r7}
 800982e:	b087      	sub	sp, #28
 8009830:	af00      	add	r7, sp, #0
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	460b      	mov	r3, r1
 8009836:	607a      	str	r2, [r7, #4]
 8009838:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800983a:	2300      	movs	r3, #0
 800983c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d109      	bne.n	8009858 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800984a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8009854:	2301      	movs	r3, #1
 8009856:	e09c      	b.n	8009992 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800985e:	2b20      	cmp	r3, #32
 8009860:	d16c      	bne.n	800993c <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8009862:	7afb      	ldrb	r3, [r7, #11]
 8009864:	2b0c      	cmp	r3, #12
 8009866:	d85e      	bhi.n	8009926 <HAL_UART_RegisterCallback+0xfa>
 8009868:	a201      	add	r2, pc, #4	@ (adr r2, 8009870 <HAL_UART_RegisterCallback+0x44>)
 800986a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800986e:	bf00      	nop
 8009870:	080098a5 	.word	0x080098a5
 8009874:	080098af 	.word	0x080098af
 8009878:	080098b9 	.word	0x080098b9
 800987c:	080098c3 	.word	0x080098c3
 8009880:	080098cd 	.word	0x080098cd
 8009884:	080098d7 	.word	0x080098d7
 8009888:	080098e1 	.word	0x080098e1
 800988c:	080098eb 	.word	0x080098eb
 8009890:	080098f5 	.word	0x080098f5
 8009894:	080098ff 	.word	0x080098ff
 8009898:	08009909 	.word	0x08009909
 800989c:	08009913 	.word	0x08009913
 80098a0:	0800991d 	.word	0x0800991d
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80098ac:	e070      	b.n	8009990 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80098b6:	e06b      	b.n	8009990 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80098c0:	e066      	b.n	8009990 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80098ca:	e061      	b.n	8009990 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80098d4:	e05c      	b.n	8009990 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80098de:	e057      	b.n	8009990 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80098e8:	e052      	b.n	8009990 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80098f2:	e04d      	b.n	8009990 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80098fc:	e048      	b.n	8009990 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009906:	e043      	b.n	8009990 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	687a      	ldr	r2, [r7, #4]
 800990c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009910:	e03e      	b.n	8009990 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800991a:	e039      	b.n	8009990 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009924:	e034      	b.n	8009990 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800992c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009936:	2301      	movs	r3, #1
 8009938:	75fb      	strb	r3, [r7, #23]
        break;
 800993a:	e029      	b.n	8009990 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009942:	2b00      	cmp	r3, #0
 8009944:	d11a      	bne.n	800997c <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8009946:	7afb      	ldrb	r3, [r7, #11]
 8009948:	2b0b      	cmp	r3, #11
 800994a:	d002      	beq.n	8009952 <HAL_UART_RegisterCallback+0x126>
 800994c:	2b0c      	cmp	r3, #12
 800994e:	d005      	beq.n	800995c <HAL_UART_RegisterCallback+0x130>
 8009950:	e009      	b.n	8009966 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800995a:	e019      	b.n	8009990 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	687a      	ldr	r2, [r7, #4]
 8009960:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009964:	e014      	b.n	8009990 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800996c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	75fb      	strb	r3, [r7, #23]
        break;
 800997a:	e009      	b.n	8009990 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009982:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800998c:	2301      	movs	r3, #1
 800998e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009990:	7dfb      	ldrb	r3, [r7, #23]
}
 8009992:	4618      	mov	r0, r3
 8009994:	371c      	adds	r7, #28
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr
 800999e:	bf00      	nop

080099a0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b08a      	sub	sp, #40	@ 0x28
 80099a4:	af02      	add	r7, sp, #8
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	60b9      	str	r1, [r7, #8]
 80099aa:	603b      	str	r3, [r7, #0]
 80099ac:	4613      	mov	r3, r2
 80099ae:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80099b6:	2b20      	cmp	r3, #32
 80099b8:	f040 80b5 	bne.w	8009b26 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d002      	beq.n	80099c8 <HAL_UART_Receive+0x28>
 80099c2:	88fb      	ldrh	r3, [r7, #6]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d101      	bne.n	80099cc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80099c8:	2301      	movs	r3, #1
 80099ca:	e0ad      	b.n	8009b28 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2222      	movs	r2, #34	@ 0x22
 80099d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2200      	movs	r2, #0
 80099e0:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80099e2:	f7fa fec3 	bl	800476c <HAL_GetTick>
 80099e6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	88fa      	ldrh	r2, [r7, #6]
 80099ec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	88fa      	ldrh	r2, [r7, #6]
 80099f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a00:	d10e      	bne.n	8009a20 <HAL_UART_Receive+0x80>
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	691b      	ldr	r3, [r3, #16]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d105      	bne.n	8009a16 <HAL_UART_Receive+0x76>
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009a10:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009a14:	e02d      	b.n	8009a72 <HAL_UART_Receive+0xd2>
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	22ff      	movs	r2, #255	@ 0xff
 8009a1a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009a1e:	e028      	b.n	8009a72 <HAL_UART_Receive+0xd2>
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d10d      	bne.n	8009a44 <HAL_UART_Receive+0xa4>
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	691b      	ldr	r3, [r3, #16]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d104      	bne.n	8009a3a <HAL_UART_Receive+0x9a>
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	22ff      	movs	r2, #255	@ 0xff
 8009a34:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009a38:	e01b      	b.n	8009a72 <HAL_UART_Receive+0xd2>
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	227f      	movs	r2, #127	@ 0x7f
 8009a3e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009a42:	e016      	b.n	8009a72 <HAL_UART_Receive+0xd2>
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a4c:	d10d      	bne.n	8009a6a <HAL_UART_Receive+0xca>
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	691b      	ldr	r3, [r3, #16]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d104      	bne.n	8009a60 <HAL_UART_Receive+0xc0>
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	227f      	movs	r2, #127	@ 0x7f
 8009a5a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009a5e:	e008      	b.n	8009a72 <HAL_UART_Receive+0xd2>
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	223f      	movs	r2, #63	@ 0x3f
 8009a64:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009a68:	e003      	b.n	8009a72 <HAL_UART_Receive+0xd2>
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009a78:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a82:	d108      	bne.n	8009a96 <HAL_UART_Receive+0xf6>
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	691b      	ldr	r3, [r3, #16]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d104      	bne.n	8009a96 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	61bb      	str	r3, [r7, #24]
 8009a94:	e003      	b.n	8009a9e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009a9e:	e036      	b.n	8009b0e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	9300      	str	r3, [sp, #0]
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	2120      	movs	r1, #32
 8009aaa:	68f8      	ldr	r0, [r7, #12]
 8009aac:	f001 f99a 	bl	800ade4 <UART_WaitOnFlagUntilTimeout>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d005      	beq.n	8009ac2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2220      	movs	r2, #32
 8009aba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8009abe:	2303      	movs	r3, #3
 8009ac0:	e032      	b.n	8009b28 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8009ac2:	69fb      	ldr	r3, [r7, #28]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d10c      	bne.n	8009ae2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ace:	b29a      	uxth	r2, r3
 8009ad0:	8a7b      	ldrh	r3, [r7, #18]
 8009ad2:	4013      	ands	r3, r2
 8009ad4:	b29a      	uxth	r2, r3
 8009ad6:	69bb      	ldr	r3, [r7, #24]
 8009ad8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009ada:	69bb      	ldr	r3, [r7, #24]
 8009adc:	3302      	adds	r3, #2
 8009ade:	61bb      	str	r3, [r7, #24]
 8009ae0:	e00c      	b.n	8009afc <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ae8:	b2da      	uxtb	r2, r3
 8009aea:	8a7b      	ldrh	r3, [r7, #18]
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	4013      	ands	r3, r2
 8009af0:	b2da      	uxtb	r2, r3
 8009af2:	69fb      	ldr	r3, [r7, #28]
 8009af4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009af6:	69fb      	ldr	r3, [r7, #28]
 8009af8:	3301      	adds	r3, #1
 8009afa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	3b01      	subs	r3, #1
 8009b06:	b29a      	uxth	r2, r3
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d1c2      	bne.n	8009aa0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2220      	movs	r2, #32
 8009b1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8009b22:	2300      	movs	r3, #0
 8009b24:	e000      	b.n	8009b28 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8009b26:	2302      	movs	r3, #2
  }
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3720      	adds	r7, #32
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b08a      	sub	sp, #40	@ 0x28
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	60b9      	str	r1, [r7, #8]
 8009b3a:	4613      	mov	r3, r2
 8009b3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b44:	2b20      	cmp	r3, #32
 8009b46:	d167      	bne.n	8009c18 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d002      	beq.n	8009b54 <HAL_UART_Transmit_DMA+0x24>
 8009b4e:	88fb      	ldrh	r3, [r7, #6]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d101      	bne.n	8009b58 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009b54:	2301      	movs	r3, #1
 8009b56:	e060      	b.n	8009c1a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	68ba      	ldr	r2, [r7, #8]
 8009b5c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	88fa      	ldrh	r2, [r7, #6]
 8009b62:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	88fa      	ldrh	r2, [r7, #6]
 8009b6a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2200      	movs	r2, #0
 8009b72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2221      	movs	r2, #33	@ 0x21
 8009b7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d028      	beq.n	8009bd8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b8a:	4a26      	ldr	r2, [pc, #152]	@ (8009c24 <HAL_UART_Transmit_DMA+0xf4>)
 8009b8c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b92:	4a25      	ldr	r2, [pc, #148]	@ (8009c28 <HAL_UART_Transmit_DMA+0xf8>)
 8009b94:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b9a:	4a24      	ldr	r2, [pc, #144]	@ (8009c2c <HAL_UART_Transmit_DMA+0xfc>)
 8009b9c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bae:	4619      	mov	r1, r3
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	3328      	adds	r3, #40	@ 0x28
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	88fb      	ldrh	r3, [r7, #6]
 8009bba:	f7fc f89b 	bl	8005cf4 <HAL_DMA_Start_IT>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d009      	beq.n	8009bd8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2210      	movs	r2, #16
 8009bc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2220      	movs	r2, #32
 8009bd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	e020      	b.n	8009c1a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	2240      	movs	r2, #64	@ 0x40
 8009bde:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	3308      	adds	r3, #8
 8009be6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	e853 3f00 	ldrex	r3, [r3]
 8009bee:	613b      	str	r3, [r7, #16]
   return(result);
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	3308      	adds	r3, #8
 8009bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c00:	623a      	str	r2, [r7, #32]
 8009c02:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c04:	69f9      	ldr	r1, [r7, #28]
 8009c06:	6a3a      	ldr	r2, [r7, #32]
 8009c08:	e841 2300 	strex	r3, r2, [r1]
 8009c0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c0e:	69bb      	ldr	r3, [r7, #24]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d1e5      	bne.n	8009be0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009c14:	2300      	movs	r3, #0
 8009c16:	e000      	b.n	8009c1a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009c18:	2302      	movs	r3, #2
  }
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3728      	adds	r7, #40	@ 0x28
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	0800b15b 	.word	0x0800b15b
 8009c28:	0800b1f9 	.word	0x0800b1f9
 8009c2c:	0800b393 	.word	0x0800b393

08009c30 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b08a      	sub	sp, #40	@ 0x28
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	4613      	mov	r3, r2
 8009c3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c44:	2b20      	cmp	r3, #32
 8009c46:	d137      	bne.n	8009cb8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d002      	beq.n	8009c54 <HAL_UART_Receive_DMA+0x24>
 8009c4e:	88fb      	ldrh	r3, [r7, #6]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d101      	bne.n	8009c58 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009c54:	2301      	movs	r3, #1
 8009c56:	e030      	b.n	8009cba <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4a18      	ldr	r2, [pc, #96]	@ (8009cc4 <HAL_UART_Receive_DMA+0x94>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d01f      	beq.n	8009ca8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d018      	beq.n	8009ca8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	e853 3f00 	ldrex	r3, [r3]
 8009c82:	613b      	str	r3, [r7, #16]
   return(result);
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009c8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	461a      	mov	r2, r3
 8009c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c94:	623b      	str	r3, [r7, #32]
 8009c96:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c98:	69f9      	ldr	r1, [r7, #28]
 8009c9a:	6a3a      	ldr	r2, [r7, #32]
 8009c9c:	e841 2300 	strex	r3, r2, [r1]
 8009ca0:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ca2:	69bb      	ldr	r3, [r7, #24]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d1e6      	bne.n	8009c76 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009ca8:	88fb      	ldrh	r3, [r7, #6]
 8009caa:	461a      	mov	r2, r3
 8009cac:	68b9      	ldr	r1, [r7, #8]
 8009cae:	68f8      	ldr	r0, [r7, #12]
 8009cb0:	f001 f906 	bl	800aec0 <UART_Start_Receive_DMA>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	e000      	b.n	8009cba <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009cb8:	2302      	movs	r3, #2
  }
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3728      	adds	r7, #40	@ 0x28
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	40008000 	.word	0x40008000

08009cc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b0ba      	sub	sp, #232	@ 0xe8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	69db      	ldr	r3, [r3, #28]
 8009cd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	689b      	ldr	r3, [r3, #8]
 8009cea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009cee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009cf2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009cf6:	4013      	ands	r3, r2
 8009cf8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009cfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d11b      	bne.n	8009d3c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d08:	f003 0320 	and.w	r3, r3, #32
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d015      	beq.n	8009d3c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d14:	f003 0320 	and.w	r3, r3, #32
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d105      	bne.n	8009d28 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009d1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d009      	beq.n	8009d3c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	f000 82f3 	beq.w	800a318 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	4798      	blx	r3
      }
      return;
 8009d3a:	e2ed      	b.n	800a318 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009d3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	f000 8129 	beq.w	8009f98 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009d46:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009d4a:	4b90      	ldr	r3, [pc, #576]	@ (8009f8c <HAL_UART_IRQHandler+0x2c4>)
 8009d4c:	4013      	ands	r3, r2
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d106      	bne.n	8009d60 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009d52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009d56:	4b8e      	ldr	r3, [pc, #568]	@ (8009f90 <HAL_UART_IRQHandler+0x2c8>)
 8009d58:	4013      	ands	r3, r2
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	f000 811c 	beq.w	8009f98 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d64:	f003 0301 	and.w	r3, r3, #1
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d011      	beq.n	8009d90 <HAL_UART_IRQHandler+0xc8>
 8009d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d00b      	beq.n	8009d90 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d86:	f043 0201 	orr.w	r2, r3, #1
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d94:	f003 0302 	and.w	r3, r3, #2
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d011      	beq.n	8009dc0 <HAL_UART_IRQHandler+0xf8>
 8009d9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009da0:	f003 0301 	and.w	r3, r3, #1
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d00b      	beq.n	8009dc0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2202      	movs	r2, #2
 8009dae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009db6:	f043 0204 	orr.w	r2, r3, #4
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dc4:	f003 0304 	and.w	r3, r3, #4
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d011      	beq.n	8009df0 <HAL_UART_IRQHandler+0x128>
 8009dcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009dd0:	f003 0301 	and.w	r3, r3, #1
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d00b      	beq.n	8009df0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2204      	movs	r2, #4
 8009dde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009de6:	f043 0202 	orr.w	r2, r3, #2
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009df4:	f003 0308 	and.w	r3, r3, #8
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d017      	beq.n	8009e2c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e00:	f003 0320 	and.w	r3, r3, #32
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d105      	bne.n	8009e14 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009e08:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009e0c:	4b5f      	ldr	r3, [pc, #380]	@ (8009f8c <HAL_UART_IRQHandler+0x2c4>)
 8009e0e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d00b      	beq.n	8009e2c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2208      	movs	r2, #8
 8009e1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e22:	f043 0208 	orr.w	r2, r3, #8
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d012      	beq.n	8009e5e <HAL_UART_IRQHandler+0x196>
 8009e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00c      	beq.n	8009e5e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009e4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e54:	f043 0220 	orr.w	r2, r3, #32
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	f000 8259 	beq.w	800a31c <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e6e:	f003 0320 	and.w	r3, r3, #32
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d013      	beq.n	8009e9e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009e76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e7a:	f003 0320 	and.w	r3, r3, #32
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d105      	bne.n	8009e8e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009e82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d007      	beq.n	8009e9e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d003      	beq.n	8009e9e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ea4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	689b      	ldr	r3, [r3, #8]
 8009eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009eb2:	2b40      	cmp	r3, #64	@ 0x40
 8009eb4:	d005      	beq.n	8009ec2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009eb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009eba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d058      	beq.n	8009f74 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f001 f8e3 	bl	800b08e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	689b      	ldr	r3, [r3, #8]
 8009ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ed2:	2b40      	cmp	r3, #64	@ 0x40
 8009ed4:	d148      	bne.n	8009f68 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	3308      	adds	r3, #8
 8009edc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009ee4:	e853 3f00 	ldrex	r3, [r3]
 8009ee8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009eec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009ef0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ef4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	3308      	adds	r3, #8
 8009efe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009f02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009f06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009f0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009f12:	e841 2300 	strex	r3, r2, [r1]
 8009f16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009f1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d1d9      	bne.n	8009ed6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d017      	beq.n	8009f5c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f32:	4a18      	ldr	r2, [pc, #96]	@ (8009f94 <HAL_UART_IRQHandler+0x2cc>)
 8009f34:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f7fb ffad 	bl	8005e9c <HAL_DMA_Abort_IT>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d01f      	beq.n	8009f88 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009f56:	4610      	mov	r0, r2
 8009f58:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f5a:	e015      	b.n	8009f88 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f66:	e00f      	b.n	8009f88 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f72:	e009      	b.n	8009f88 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2200      	movs	r2, #0
 8009f82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009f86:	e1c9      	b.n	800a31c <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f88:	bf00      	nop
    return;
 8009f8a:	e1c7      	b.n	800a31c <HAL_UART_IRQHandler+0x654>
 8009f8c:	10000001 	.word	0x10000001
 8009f90:	04000120 	.word	0x04000120
 8009f94:	0800b417 	.word	0x0800b417

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	f040 8157 	bne.w	800a250 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fa6:	f003 0310 	and.w	r3, r3, #16
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	f000 8150 	beq.w	800a250 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fb4:	f003 0310 	and.w	r3, r3, #16
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	f000 8149 	beq.w	800a250 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	2210      	movs	r2, #16
 8009fc4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	689b      	ldr	r3, [r3, #8]
 8009fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fd0:	2b40      	cmp	r3, #64	@ 0x40
 8009fd2:	f040 80bd 	bne.w	800a150 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009fe4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	f000 8199 	beq.w	800a320 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009ff4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	f080 8191 	bcs.w	800a320 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a004:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f003 0320 	and.w	r3, r3, #32
 800a016:	2b00      	cmp	r3, #0
 800a018:	f040 8087 	bne.w	800a12a <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a024:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a028:	e853 3f00 	ldrex	r3, [r3]
 800a02c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a030:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a034:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a038:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	461a      	mov	r2, r3
 800a042:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a046:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a04a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a04e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a052:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a056:	e841 2300 	strex	r3, r2, [r1]
 800a05a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a05e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a062:	2b00      	cmp	r3, #0
 800a064:	d1da      	bne.n	800a01c <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	3308      	adds	r3, #8
 800a06c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a06e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a070:	e853 3f00 	ldrex	r3, [r3]
 800a074:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a076:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a078:	f023 0301 	bic.w	r3, r3, #1
 800a07c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	3308      	adds	r3, #8
 800a086:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a08a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a08e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a090:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a092:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a096:	e841 2300 	strex	r3, r2, [r1]
 800a09a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a09c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d1e1      	bne.n	800a066 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	3308      	adds	r3, #8
 800a0a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a0ac:	e853 3f00 	ldrex	r3, [r3]
 800a0b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a0b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a0b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a0b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	3308      	adds	r3, #8
 800a0c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a0c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a0c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a0cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a0ce:	e841 2300 	strex	r3, r2, [r1]
 800a0d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a0d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d1e3      	bne.n	800a0a2 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2220      	movs	r2, #32
 800a0de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0f0:	e853 3f00 	ldrex	r3, [r3]
 800a0f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a0f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0f8:	f023 0310 	bic.w	r3, r3, #16
 800a0fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	461a      	mov	r2, r3
 800a106:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a10a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a10c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a10e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a110:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a112:	e841 2300 	strex	r3, r2, [r1]
 800a116:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a118:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d1e4      	bne.n	800a0e8 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a124:	4618      	mov	r0, r3
 800a126:	f7fb fe60 	bl	8005dea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2202      	movs	r2, #2
 800a12e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800a13c:	687a      	ldr	r2, [r7, #4]
 800a13e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800a142:	b292      	uxth	r2, r2
 800a144:	1a8a      	subs	r2, r1, r2
 800a146:	b292      	uxth	r2, r2
 800a148:	4611      	mov	r1, r2
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a14e:	e0e7      	b.n	800a320 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	1ad3      	subs	r3, r2, r3
 800a160:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	f000 80d9 	beq.w	800a324 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 800a172:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a176:	2b00      	cmp	r3, #0
 800a178:	f000 80d4 	beq.w	800a324 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a184:	e853 3f00 	ldrex	r3, [r3]
 800a188:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a18a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a18c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a190:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	461a      	mov	r2, r3
 800a19a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a19e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a1a0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a1a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a1a6:	e841 2300 	strex	r3, r2, [r1]
 800a1aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a1ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d1e4      	bne.n	800a17c <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	3308      	adds	r3, #8
 800a1b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1bc:	e853 3f00 	ldrex	r3, [r3]
 800a1c0:	623b      	str	r3, [r7, #32]
   return(result);
 800a1c2:	6a3b      	ldr	r3, [r7, #32]
 800a1c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a1c8:	f023 0301 	bic.w	r3, r3, #1
 800a1cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	3308      	adds	r3, #8
 800a1d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a1da:	633a      	str	r2, [r7, #48]	@ 0x30
 800a1dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a1e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1e2:	e841 2300 	strex	r3, r2, [r1]
 800a1e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a1e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d1e1      	bne.n	800a1b2 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2220      	movs	r2, #32
 800a1f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2200      	movs	r2, #0
 800a200:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	e853 3f00 	ldrex	r3, [r3]
 800a20e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f023 0310 	bic.w	r3, r3, #16
 800a216:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	461a      	mov	r2, r3
 800a220:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a224:	61fb      	str	r3, [r7, #28]
 800a226:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a228:	69b9      	ldr	r1, [r7, #24]
 800a22a:	69fa      	ldr	r2, [r7, #28]
 800a22c:	e841 2300 	strex	r3, r2, [r1]
 800a230:	617b      	str	r3, [r7, #20]
   return(result);
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d1e4      	bne.n	800a202 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2202      	movs	r2, #2
 800a23c:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a244:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800a248:	4611      	mov	r1, r2
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a24e:	e069      	b.n	800a324 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a254:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d010      	beq.n	800a27e <HAL_UART_IRQHandler+0x5b6>
 800a25c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a260:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a264:	2b00      	cmp	r3, #0
 800a266:	d00a      	beq.n	800a27e <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a270:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a27c:	e055      	b.n	800a32a <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a27e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a286:	2b00      	cmp	r3, #0
 800a288:	d014      	beq.n	800a2b4 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a28a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a28e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a292:	2b00      	cmp	r3, #0
 800a294:	d105      	bne.n	800a2a2 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a296:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a29a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d008      	beq.n	800a2b4 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d03e      	beq.n	800a328 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	4798      	blx	r3
    }
    return;
 800a2b2:	e039      	b.n	800a328 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a2b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d009      	beq.n	800a2d4 <HAL_UART_IRQHandler+0x60c>
 800a2c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d003      	beq.n	800a2d4 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f001 f8ba 	bl	800b446 <UART_EndTransmit_IT>
    return;
 800a2d2:	e02a      	b.n	800a32a <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a2d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d00b      	beq.n	800a2f8 <HAL_UART_IRQHandler+0x630>
 800a2e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2e4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d005      	beq.n	800a2f8 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a2f6:	e018      	b.n	800a32a <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a2f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a300:	2b00      	cmp	r3, #0
 800a302:	d012      	beq.n	800a32a <HAL_UART_IRQHandler+0x662>
 800a304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a308:	2b00      	cmp	r3, #0
 800a30a:	da0e      	bge.n	800a32a <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a316:	e008      	b.n	800a32a <HAL_UART_IRQHandler+0x662>
      return;
 800a318:	bf00      	nop
 800a31a:	e006      	b.n	800a32a <HAL_UART_IRQHandler+0x662>
    return;
 800a31c:	bf00      	nop
 800a31e:	e004      	b.n	800a32a <HAL_UART_IRQHandler+0x662>
      return;
 800a320:	bf00      	nop
 800a322:	e002      	b.n	800a32a <HAL_UART_IRQHandler+0x662>
      return;
 800a324:	bf00      	nop
 800a326:	e000      	b.n	800a32a <HAL_UART_IRQHandler+0x662>
    return;
 800a328:	bf00      	nop
  }
}
 800a32a:	37e8      	adds	r7, #232	@ 0xe8
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a330:	b480      	push	{r7}
 800a332:	b083      	sub	sp, #12
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a338:	bf00      	nop
 800a33a:	370c      	adds	r7, #12
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr

0800a344 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a344:	b480      	push	{r7}
 800a346:	b083      	sub	sp, #12
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a34c:	bf00      	nop
 800a34e:	370c      	adds	r7, #12
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr

0800a358 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a358:	b480      	push	{r7}
 800a35a:	b083      	sub	sp, #12
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a360:	bf00      	nop
 800a362:	370c      	adds	r7, #12
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b083      	sub	sp, #12
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a374:	bf00      	nop
 800a376:	370c      	adds	r7, #12
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a388:	bf00      	nop
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800a39c:	bf00      	nop
 800a39e:	370c      	adds	r7, #12
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800a3b0:	bf00      	nop
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800a3c4:	bf00      	nop
 800a3c6:	370c      	adds	r7, #12
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr

0800a3d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	460b      	mov	r3, r1
 800a3da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a3dc:	bf00      	nop
 800a3de:	370c      	adds	r7, #12
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr

0800a3e8 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b083      	sub	sp, #12
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	4a09      	ldr	r2, [pc, #36]	@ (800a41c <HAL_UART_ReceiverTimeout_Config+0x34>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d009      	beq.n	800a410 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	695b      	ldr	r3, [r3, #20]
 800a402:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	683a      	ldr	r2, [r7, #0]
 800a40c:	430a      	orrs	r2, r1
 800a40e:	615a      	str	r2, [r3, #20]
  }
}
 800a410:	bf00      	nop
 800a412:	370c      	adds	r7, #12
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr
 800a41c:	40008000 	.word	0x40008000

0800a420 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800a420:	b480      	push	{r7}
 800a422:	b083      	sub	sp, #12
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a18      	ldr	r2, [pc, #96]	@ (800a490 <HAL_UART_EnableReceiverTimeout+0x70>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d027      	beq.n	800a482 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a438:	2b20      	cmp	r3, #32
 800a43a:	d120      	bne.n	800a47e <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a442:	2b01      	cmp	r3, #1
 800a444:	d101      	bne.n	800a44a <HAL_UART_EnableReceiverTimeout+0x2a>
 800a446:	2302      	movs	r3, #2
 800a448:	e01c      	b.n	800a484 <HAL_UART_EnableReceiverTimeout+0x64>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2201      	movs	r2, #1
 800a44e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2224      	movs	r2, #36	@ 0x24
 800a456:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	685a      	ldr	r2, [r3, #4]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800a468:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2220      	movs	r2, #32
 800a46e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2200      	movs	r2, #0
 800a476:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800a47a:	2300      	movs	r3, #0
 800a47c:	e002      	b.n	800a484 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800a47e:	2302      	movs	r3, #2
 800a480:	e000      	b.n	800a484 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800a482:	2301      	movs	r3, #1
  }
}
 800a484:	4618      	mov	r0, r3
 800a486:	370c      	adds	r7, #12
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr
 800a490:	40008000 	.word	0x40008000

0800a494 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800a494:	b480      	push	{r7}
 800a496:	b083      	sub	sp, #12
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	370c      	adds	r7, #12
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr
	...

0800a4b0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	4a1a      	ldr	r2, [pc, #104]	@ (800a524 <UART_InitCallbacksToDefault+0x74>)
 800a4bc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	4a19      	ldr	r2, [pc, #100]	@ (800a528 <UART_InitCallbacksToDefault+0x78>)
 800a4c4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	4a18      	ldr	r2, [pc, #96]	@ (800a52c <UART_InitCallbacksToDefault+0x7c>)
 800a4cc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	4a17      	ldr	r2, [pc, #92]	@ (800a530 <UART_InitCallbacksToDefault+0x80>)
 800a4d4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	4a16      	ldr	r2, [pc, #88]	@ (800a534 <UART_InitCallbacksToDefault+0x84>)
 800a4dc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	4a15      	ldr	r2, [pc, #84]	@ (800a538 <UART_InitCallbacksToDefault+0x88>)
 800a4e4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	4a14      	ldr	r2, [pc, #80]	@ (800a53c <UART_InitCallbacksToDefault+0x8c>)
 800a4ec:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	4a13      	ldr	r2, [pc, #76]	@ (800a540 <UART_InitCallbacksToDefault+0x90>)
 800a4f4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	4a12      	ldr	r2, [pc, #72]	@ (800a544 <UART_InitCallbacksToDefault+0x94>)
 800a4fc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	4a11      	ldr	r2, [pc, #68]	@ (800a548 <UART_InitCallbacksToDefault+0x98>)
 800a504:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	4a10      	ldr	r2, [pc, #64]	@ (800a54c <UART_InitCallbacksToDefault+0x9c>)
 800a50c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	4a0f      	ldr	r2, [pc, #60]	@ (800a550 <UART_InitCallbacksToDefault+0xa0>)
 800a514:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800a518:	bf00      	nop
 800a51a:	370c      	adds	r7, #12
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr
 800a524:	0800a345 	.word	0x0800a345
 800a528:	0800a331 	.word	0x0800a331
 800a52c:	0800a36d 	.word	0x0800a36d
 800a530:	0800a359 	.word	0x0800a359
 800a534:	0800a381 	.word	0x0800a381
 800a538:	0800a395 	.word	0x0800a395
 800a53c:	0800a3a9 	.word	0x0800a3a9
 800a540:	0800a3bd 	.word	0x0800a3bd
 800a544:	0800b4a1 	.word	0x0800b4a1
 800a548:	0800b4b5 	.word	0x0800b4b5
 800a54c:	0800b4c9 	.word	0x0800b4c9
 800a550:	0800a3d1 	.word	0x0800a3d1

0800a554 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a558:	b08c      	sub	sp, #48	@ 0x30
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a55e:	2300      	movs	r3, #0
 800a560:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	689a      	ldr	r2, [r3, #8]
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	691b      	ldr	r3, [r3, #16]
 800a56c:	431a      	orrs	r2, r3
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	695b      	ldr	r3, [r3, #20]
 800a572:	431a      	orrs	r2, r3
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	69db      	ldr	r3, [r3, #28]
 800a578:	4313      	orrs	r3, r2
 800a57a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	681a      	ldr	r2, [r3, #0]
 800a582:	4baa      	ldr	r3, [pc, #680]	@ (800a82c <UART_SetConfig+0x2d8>)
 800a584:	4013      	ands	r3, r2
 800a586:	697a      	ldr	r2, [r7, #20]
 800a588:	6812      	ldr	r2, [r2, #0]
 800a58a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a58c:	430b      	orrs	r3, r1
 800a58e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	68da      	ldr	r2, [r3, #12]
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	430a      	orrs	r2, r1
 800a5a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	699b      	ldr	r3, [r3, #24]
 800a5aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a9f      	ldr	r2, [pc, #636]	@ (800a830 <UART_SetConfig+0x2dc>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d004      	beq.n	800a5c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	6a1b      	ldr	r3, [r3, #32]
 800a5ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	689b      	ldr	r3, [r3, #8]
 800a5c6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a5ca:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a5ce:	697a      	ldr	r2, [r7, #20]
 800a5d0:	6812      	ldr	r2, [r2, #0]
 800a5d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a5d4:	430b      	orrs	r3, r1
 800a5d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a5d8:	697b      	ldr	r3, [r7, #20]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5de:	f023 010f 	bic.w	r1, r3, #15
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	430a      	orrs	r2, r1
 800a5ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a90      	ldr	r2, [pc, #576]	@ (800a834 <UART_SetConfig+0x2e0>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d125      	bne.n	800a644 <UART_SetConfig+0xf0>
 800a5f8:	4b8f      	ldr	r3, [pc, #572]	@ (800a838 <UART_SetConfig+0x2e4>)
 800a5fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5fe:	f003 0303 	and.w	r3, r3, #3
 800a602:	2b03      	cmp	r3, #3
 800a604:	d81a      	bhi.n	800a63c <UART_SetConfig+0xe8>
 800a606:	a201      	add	r2, pc, #4	@ (adr r2, 800a60c <UART_SetConfig+0xb8>)
 800a608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a60c:	0800a61d 	.word	0x0800a61d
 800a610:	0800a62d 	.word	0x0800a62d
 800a614:	0800a625 	.word	0x0800a625
 800a618:	0800a635 	.word	0x0800a635
 800a61c:	2301      	movs	r3, #1
 800a61e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a622:	e116      	b.n	800a852 <UART_SetConfig+0x2fe>
 800a624:	2302      	movs	r3, #2
 800a626:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a62a:	e112      	b.n	800a852 <UART_SetConfig+0x2fe>
 800a62c:	2304      	movs	r3, #4
 800a62e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a632:	e10e      	b.n	800a852 <UART_SetConfig+0x2fe>
 800a634:	2308      	movs	r3, #8
 800a636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a63a:	e10a      	b.n	800a852 <UART_SetConfig+0x2fe>
 800a63c:	2310      	movs	r3, #16
 800a63e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a642:	e106      	b.n	800a852 <UART_SetConfig+0x2fe>
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a7c      	ldr	r2, [pc, #496]	@ (800a83c <UART_SetConfig+0x2e8>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d138      	bne.n	800a6c0 <UART_SetConfig+0x16c>
 800a64e:	4b7a      	ldr	r3, [pc, #488]	@ (800a838 <UART_SetConfig+0x2e4>)
 800a650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a654:	f003 030c 	and.w	r3, r3, #12
 800a658:	2b0c      	cmp	r3, #12
 800a65a:	d82d      	bhi.n	800a6b8 <UART_SetConfig+0x164>
 800a65c:	a201      	add	r2, pc, #4	@ (adr r2, 800a664 <UART_SetConfig+0x110>)
 800a65e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a662:	bf00      	nop
 800a664:	0800a699 	.word	0x0800a699
 800a668:	0800a6b9 	.word	0x0800a6b9
 800a66c:	0800a6b9 	.word	0x0800a6b9
 800a670:	0800a6b9 	.word	0x0800a6b9
 800a674:	0800a6a9 	.word	0x0800a6a9
 800a678:	0800a6b9 	.word	0x0800a6b9
 800a67c:	0800a6b9 	.word	0x0800a6b9
 800a680:	0800a6b9 	.word	0x0800a6b9
 800a684:	0800a6a1 	.word	0x0800a6a1
 800a688:	0800a6b9 	.word	0x0800a6b9
 800a68c:	0800a6b9 	.word	0x0800a6b9
 800a690:	0800a6b9 	.word	0x0800a6b9
 800a694:	0800a6b1 	.word	0x0800a6b1
 800a698:	2300      	movs	r3, #0
 800a69a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a69e:	e0d8      	b.n	800a852 <UART_SetConfig+0x2fe>
 800a6a0:	2302      	movs	r3, #2
 800a6a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6a6:	e0d4      	b.n	800a852 <UART_SetConfig+0x2fe>
 800a6a8:	2304      	movs	r3, #4
 800a6aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6ae:	e0d0      	b.n	800a852 <UART_SetConfig+0x2fe>
 800a6b0:	2308      	movs	r3, #8
 800a6b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6b6:	e0cc      	b.n	800a852 <UART_SetConfig+0x2fe>
 800a6b8:	2310      	movs	r3, #16
 800a6ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6be:	e0c8      	b.n	800a852 <UART_SetConfig+0x2fe>
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	4a5e      	ldr	r2, [pc, #376]	@ (800a840 <UART_SetConfig+0x2ec>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d125      	bne.n	800a716 <UART_SetConfig+0x1c2>
 800a6ca:	4b5b      	ldr	r3, [pc, #364]	@ (800a838 <UART_SetConfig+0x2e4>)
 800a6cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a6d4:	2b30      	cmp	r3, #48	@ 0x30
 800a6d6:	d016      	beq.n	800a706 <UART_SetConfig+0x1b2>
 800a6d8:	2b30      	cmp	r3, #48	@ 0x30
 800a6da:	d818      	bhi.n	800a70e <UART_SetConfig+0x1ba>
 800a6dc:	2b20      	cmp	r3, #32
 800a6de:	d00a      	beq.n	800a6f6 <UART_SetConfig+0x1a2>
 800a6e0:	2b20      	cmp	r3, #32
 800a6e2:	d814      	bhi.n	800a70e <UART_SetConfig+0x1ba>
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d002      	beq.n	800a6ee <UART_SetConfig+0x19a>
 800a6e8:	2b10      	cmp	r3, #16
 800a6ea:	d008      	beq.n	800a6fe <UART_SetConfig+0x1aa>
 800a6ec:	e00f      	b.n	800a70e <UART_SetConfig+0x1ba>
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6f4:	e0ad      	b.n	800a852 <UART_SetConfig+0x2fe>
 800a6f6:	2302      	movs	r3, #2
 800a6f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6fc:	e0a9      	b.n	800a852 <UART_SetConfig+0x2fe>
 800a6fe:	2304      	movs	r3, #4
 800a700:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a704:	e0a5      	b.n	800a852 <UART_SetConfig+0x2fe>
 800a706:	2308      	movs	r3, #8
 800a708:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a70c:	e0a1      	b.n	800a852 <UART_SetConfig+0x2fe>
 800a70e:	2310      	movs	r3, #16
 800a710:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a714:	e09d      	b.n	800a852 <UART_SetConfig+0x2fe>
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a4a      	ldr	r2, [pc, #296]	@ (800a844 <UART_SetConfig+0x2f0>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d125      	bne.n	800a76c <UART_SetConfig+0x218>
 800a720:	4b45      	ldr	r3, [pc, #276]	@ (800a838 <UART_SetConfig+0x2e4>)
 800a722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a726:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a72a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a72c:	d016      	beq.n	800a75c <UART_SetConfig+0x208>
 800a72e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a730:	d818      	bhi.n	800a764 <UART_SetConfig+0x210>
 800a732:	2b80      	cmp	r3, #128	@ 0x80
 800a734:	d00a      	beq.n	800a74c <UART_SetConfig+0x1f8>
 800a736:	2b80      	cmp	r3, #128	@ 0x80
 800a738:	d814      	bhi.n	800a764 <UART_SetConfig+0x210>
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d002      	beq.n	800a744 <UART_SetConfig+0x1f0>
 800a73e:	2b40      	cmp	r3, #64	@ 0x40
 800a740:	d008      	beq.n	800a754 <UART_SetConfig+0x200>
 800a742:	e00f      	b.n	800a764 <UART_SetConfig+0x210>
 800a744:	2300      	movs	r3, #0
 800a746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a74a:	e082      	b.n	800a852 <UART_SetConfig+0x2fe>
 800a74c:	2302      	movs	r3, #2
 800a74e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a752:	e07e      	b.n	800a852 <UART_SetConfig+0x2fe>
 800a754:	2304      	movs	r3, #4
 800a756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a75a:	e07a      	b.n	800a852 <UART_SetConfig+0x2fe>
 800a75c:	2308      	movs	r3, #8
 800a75e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a762:	e076      	b.n	800a852 <UART_SetConfig+0x2fe>
 800a764:	2310      	movs	r3, #16
 800a766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a76a:	e072      	b.n	800a852 <UART_SetConfig+0x2fe>
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a35      	ldr	r2, [pc, #212]	@ (800a848 <UART_SetConfig+0x2f4>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d12a      	bne.n	800a7cc <UART_SetConfig+0x278>
 800a776:	4b30      	ldr	r3, [pc, #192]	@ (800a838 <UART_SetConfig+0x2e4>)
 800a778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a77c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a780:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a784:	d01a      	beq.n	800a7bc <UART_SetConfig+0x268>
 800a786:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a78a:	d81b      	bhi.n	800a7c4 <UART_SetConfig+0x270>
 800a78c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a790:	d00c      	beq.n	800a7ac <UART_SetConfig+0x258>
 800a792:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a796:	d815      	bhi.n	800a7c4 <UART_SetConfig+0x270>
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d003      	beq.n	800a7a4 <UART_SetConfig+0x250>
 800a79c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7a0:	d008      	beq.n	800a7b4 <UART_SetConfig+0x260>
 800a7a2:	e00f      	b.n	800a7c4 <UART_SetConfig+0x270>
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7aa:	e052      	b.n	800a852 <UART_SetConfig+0x2fe>
 800a7ac:	2302      	movs	r3, #2
 800a7ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7b2:	e04e      	b.n	800a852 <UART_SetConfig+0x2fe>
 800a7b4:	2304      	movs	r3, #4
 800a7b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7ba:	e04a      	b.n	800a852 <UART_SetConfig+0x2fe>
 800a7bc:	2308      	movs	r3, #8
 800a7be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7c2:	e046      	b.n	800a852 <UART_SetConfig+0x2fe>
 800a7c4:	2310      	movs	r3, #16
 800a7c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7ca:	e042      	b.n	800a852 <UART_SetConfig+0x2fe>
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a17      	ldr	r2, [pc, #92]	@ (800a830 <UART_SetConfig+0x2dc>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d13a      	bne.n	800a84c <UART_SetConfig+0x2f8>
 800a7d6:	4b18      	ldr	r3, [pc, #96]	@ (800a838 <UART_SetConfig+0x2e4>)
 800a7d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a7e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a7e4:	d01a      	beq.n	800a81c <UART_SetConfig+0x2c8>
 800a7e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a7ea:	d81b      	bhi.n	800a824 <UART_SetConfig+0x2d0>
 800a7ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a7f0:	d00c      	beq.n	800a80c <UART_SetConfig+0x2b8>
 800a7f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a7f6:	d815      	bhi.n	800a824 <UART_SetConfig+0x2d0>
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d003      	beq.n	800a804 <UART_SetConfig+0x2b0>
 800a7fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a800:	d008      	beq.n	800a814 <UART_SetConfig+0x2c0>
 800a802:	e00f      	b.n	800a824 <UART_SetConfig+0x2d0>
 800a804:	2300      	movs	r3, #0
 800a806:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a80a:	e022      	b.n	800a852 <UART_SetConfig+0x2fe>
 800a80c:	2302      	movs	r3, #2
 800a80e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a812:	e01e      	b.n	800a852 <UART_SetConfig+0x2fe>
 800a814:	2304      	movs	r3, #4
 800a816:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a81a:	e01a      	b.n	800a852 <UART_SetConfig+0x2fe>
 800a81c:	2308      	movs	r3, #8
 800a81e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a822:	e016      	b.n	800a852 <UART_SetConfig+0x2fe>
 800a824:	2310      	movs	r3, #16
 800a826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a82a:	e012      	b.n	800a852 <UART_SetConfig+0x2fe>
 800a82c:	cfff69f3 	.word	0xcfff69f3
 800a830:	40008000 	.word	0x40008000
 800a834:	40013800 	.word	0x40013800
 800a838:	40021000 	.word	0x40021000
 800a83c:	40004400 	.word	0x40004400
 800a840:	40004800 	.word	0x40004800
 800a844:	40004c00 	.word	0x40004c00
 800a848:	40005000 	.word	0x40005000
 800a84c:	2310      	movs	r3, #16
 800a84e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4aae      	ldr	r2, [pc, #696]	@ (800ab10 <UART_SetConfig+0x5bc>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	f040 8097 	bne.w	800a98c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a85e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a862:	2b08      	cmp	r3, #8
 800a864:	d823      	bhi.n	800a8ae <UART_SetConfig+0x35a>
 800a866:	a201      	add	r2, pc, #4	@ (adr r2, 800a86c <UART_SetConfig+0x318>)
 800a868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a86c:	0800a891 	.word	0x0800a891
 800a870:	0800a8af 	.word	0x0800a8af
 800a874:	0800a899 	.word	0x0800a899
 800a878:	0800a8af 	.word	0x0800a8af
 800a87c:	0800a89f 	.word	0x0800a89f
 800a880:	0800a8af 	.word	0x0800a8af
 800a884:	0800a8af 	.word	0x0800a8af
 800a888:	0800a8af 	.word	0x0800a8af
 800a88c:	0800a8a7 	.word	0x0800a8a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a890:	f7fc fc00 	bl	8007094 <HAL_RCC_GetPCLK1Freq>
 800a894:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a896:	e010      	b.n	800a8ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a898:	4b9e      	ldr	r3, [pc, #632]	@ (800ab14 <UART_SetConfig+0x5c0>)
 800a89a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a89c:	e00d      	b.n	800a8ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a89e:	f7fc fb8b 	bl	8006fb8 <HAL_RCC_GetSysClockFreq>
 800a8a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a8a4:	e009      	b.n	800a8ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a8aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a8ac:	e005      	b.n	800a8ba <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a8b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	f000 8130 	beq.w	800ab22 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8c6:	4a94      	ldr	r2, [pc, #592]	@ (800ab18 <UART_SetConfig+0x5c4>)
 800a8c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	685a      	ldr	r2, [r3, #4]
 800a8da:	4613      	mov	r3, r2
 800a8dc:	005b      	lsls	r3, r3, #1
 800a8de:	4413      	add	r3, r2
 800a8e0:	69ba      	ldr	r2, [r7, #24]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d305      	bcc.n	800a8f2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	685b      	ldr	r3, [r3, #4]
 800a8ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a8ec:	69ba      	ldr	r2, [r7, #24]
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d903      	bls.n	800a8fa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a8f8:	e113      	b.n	800ab22 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	60bb      	str	r3, [r7, #8]
 800a900:	60fa      	str	r2, [r7, #12]
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a906:	4a84      	ldr	r2, [pc, #528]	@ (800ab18 <UART_SetConfig+0x5c4>)
 800a908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	2200      	movs	r2, #0
 800a910:	603b      	str	r3, [r7, #0]
 800a912:	607a      	str	r2, [r7, #4]
 800a914:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a918:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a91c:	f7f6 fa66 	bl	8000dec <__aeabi_uldivmod>
 800a920:	4602      	mov	r2, r0
 800a922:	460b      	mov	r3, r1
 800a924:	4610      	mov	r0, r2
 800a926:	4619      	mov	r1, r3
 800a928:	f04f 0200 	mov.w	r2, #0
 800a92c:	f04f 0300 	mov.w	r3, #0
 800a930:	020b      	lsls	r3, r1, #8
 800a932:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a936:	0202      	lsls	r2, r0, #8
 800a938:	6979      	ldr	r1, [r7, #20]
 800a93a:	6849      	ldr	r1, [r1, #4]
 800a93c:	0849      	lsrs	r1, r1, #1
 800a93e:	2000      	movs	r0, #0
 800a940:	460c      	mov	r4, r1
 800a942:	4605      	mov	r5, r0
 800a944:	eb12 0804 	adds.w	r8, r2, r4
 800a948:	eb43 0905 	adc.w	r9, r3, r5
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	2200      	movs	r2, #0
 800a952:	469a      	mov	sl, r3
 800a954:	4693      	mov	fp, r2
 800a956:	4652      	mov	r2, sl
 800a958:	465b      	mov	r3, fp
 800a95a:	4640      	mov	r0, r8
 800a95c:	4649      	mov	r1, r9
 800a95e:	f7f6 fa45 	bl	8000dec <__aeabi_uldivmod>
 800a962:	4602      	mov	r2, r0
 800a964:	460b      	mov	r3, r1
 800a966:	4613      	mov	r3, r2
 800a968:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a96a:	6a3b      	ldr	r3, [r7, #32]
 800a96c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a970:	d308      	bcc.n	800a984 <UART_SetConfig+0x430>
 800a972:	6a3b      	ldr	r3, [r7, #32]
 800a974:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a978:	d204      	bcs.n	800a984 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	6a3a      	ldr	r2, [r7, #32]
 800a980:	60da      	str	r2, [r3, #12]
 800a982:	e0ce      	b.n	800ab22 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a984:	2301      	movs	r3, #1
 800a986:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a98a:	e0ca      	b.n	800ab22 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	69db      	ldr	r3, [r3, #28]
 800a990:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a994:	d166      	bne.n	800aa64 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a996:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a99a:	2b08      	cmp	r3, #8
 800a99c:	d827      	bhi.n	800a9ee <UART_SetConfig+0x49a>
 800a99e:	a201      	add	r2, pc, #4	@ (adr r2, 800a9a4 <UART_SetConfig+0x450>)
 800a9a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9a4:	0800a9c9 	.word	0x0800a9c9
 800a9a8:	0800a9d1 	.word	0x0800a9d1
 800a9ac:	0800a9d9 	.word	0x0800a9d9
 800a9b0:	0800a9ef 	.word	0x0800a9ef
 800a9b4:	0800a9df 	.word	0x0800a9df
 800a9b8:	0800a9ef 	.word	0x0800a9ef
 800a9bc:	0800a9ef 	.word	0x0800a9ef
 800a9c0:	0800a9ef 	.word	0x0800a9ef
 800a9c4:	0800a9e7 	.word	0x0800a9e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9c8:	f7fc fb64 	bl	8007094 <HAL_RCC_GetPCLK1Freq>
 800a9cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a9ce:	e014      	b.n	800a9fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a9d0:	f7fc fb76 	bl	80070c0 <HAL_RCC_GetPCLK2Freq>
 800a9d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a9d6:	e010      	b.n	800a9fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a9d8:	4b4e      	ldr	r3, [pc, #312]	@ (800ab14 <UART_SetConfig+0x5c0>)
 800a9da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a9dc:	e00d      	b.n	800a9fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a9de:	f7fc faeb 	bl	8006fb8 <HAL_RCC_GetSysClockFreq>
 800a9e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a9e4:	e009      	b.n	800a9fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a9e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a9ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a9ec:	e005      	b.n	800a9fa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a9f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a9fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	f000 8090 	beq.w	800ab22 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa06:	4a44      	ldr	r2, [pc, #272]	@ (800ab18 <UART_SetConfig+0x5c4>)
 800aa08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa10:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa14:	005a      	lsls	r2, r3, #1
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	085b      	lsrs	r3, r3, #1
 800aa1c:	441a      	add	r2, r3
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa28:	6a3b      	ldr	r3, [r7, #32]
 800aa2a:	2b0f      	cmp	r3, #15
 800aa2c:	d916      	bls.n	800aa5c <UART_SetConfig+0x508>
 800aa2e:	6a3b      	ldr	r3, [r7, #32]
 800aa30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa34:	d212      	bcs.n	800aa5c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aa36:	6a3b      	ldr	r3, [r7, #32]
 800aa38:	b29b      	uxth	r3, r3
 800aa3a:	f023 030f 	bic.w	r3, r3, #15
 800aa3e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aa40:	6a3b      	ldr	r3, [r7, #32]
 800aa42:	085b      	lsrs	r3, r3, #1
 800aa44:	b29b      	uxth	r3, r3
 800aa46:	f003 0307 	and.w	r3, r3, #7
 800aa4a:	b29a      	uxth	r2, r3
 800aa4c:	8bfb      	ldrh	r3, [r7, #30]
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	8bfa      	ldrh	r2, [r7, #30]
 800aa58:	60da      	str	r2, [r3, #12]
 800aa5a:	e062      	b.n	800ab22 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800aa62:	e05e      	b.n	800ab22 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aa64:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aa68:	2b08      	cmp	r3, #8
 800aa6a:	d828      	bhi.n	800aabe <UART_SetConfig+0x56a>
 800aa6c:	a201      	add	r2, pc, #4	@ (adr r2, 800aa74 <UART_SetConfig+0x520>)
 800aa6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa72:	bf00      	nop
 800aa74:	0800aa99 	.word	0x0800aa99
 800aa78:	0800aaa1 	.word	0x0800aaa1
 800aa7c:	0800aaa9 	.word	0x0800aaa9
 800aa80:	0800aabf 	.word	0x0800aabf
 800aa84:	0800aaaf 	.word	0x0800aaaf
 800aa88:	0800aabf 	.word	0x0800aabf
 800aa8c:	0800aabf 	.word	0x0800aabf
 800aa90:	0800aabf 	.word	0x0800aabf
 800aa94:	0800aab7 	.word	0x0800aab7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa98:	f7fc fafc 	bl	8007094 <HAL_RCC_GetPCLK1Freq>
 800aa9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aa9e:	e014      	b.n	800aaca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aaa0:	f7fc fb0e 	bl	80070c0 <HAL_RCC_GetPCLK2Freq>
 800aaa4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aaa6:	e010      	b.n	800aaca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aaa8:	4b1a      	ldr	r3, [pc, #104]	@ (800ab14 <UART_SetConfig+0x5c0>)
 800aaaa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aaac:	e00d      	b.n	800aaca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aaae:	f7fc fa83 	bl	8006fb8 <HAL_RCC_GetSysClockFreq>
 800aab2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aab4:	e009      	b.n	800aaca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aab6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aaba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aabc:	e005      	b.n	800aaca <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800aabe:	2300      	movs	r3, #0
 800aac0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800aac2:	2301      	movs	r3, #1
 800aac4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800aac8:	bf00      	nop
    }

    if (pclk != 0U)
 800aaca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d028      	beq.n	800ab22 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aad4:	4a10      	ldr	r2, [pc, #64]	@ (800ab18 <UART_SetConfig+0x5c4>)
 800aad6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aada:	461a      	mov	r2, r3
 800aadc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aade:	fbb3 f2f2 	udiv	r2, r3, r2
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	085b      	lsrs	r3, r3, #1
 800aae8:	441a      	add	r2, r3
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	fbb2 f3f3 	udiv	r3, r2, r3
 800aaf2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aaf4:	6a3b      	ldr	r3, [r7, #32]
 800aaf6:	2b0f      	cmp	r3, #15
 800aaf8:	d910      	bls.n	800ab1c <UART_SetConfig+0x5c8>
 800aafa:	6a3b      	ldr	r3, [r7, #32]
 800aafc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab00:	d20c      	bcs.n	800ab1c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ab02:	6a3b      	ldr	r3, [r7, #32]
 800ab04:	b29a      	uxth	r2, r3
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	60da      	str	r2, [r3, #12]
 800ab0c:	e009      	b.n	800ab22 <UART_SetConfig+0x5ce>
 800ab0e:	bf00      	nop
 800ab10:	40008000 	.word	0x40008000
 800ab14:	00f42400 	.word	0x00f42400
 800ab18:	0800b9b8 	.word	0x0800b9b8
      }
      else
      {
        ret = HAL_ERROR;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	2201      	movs	r2, #1
 800ab26:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	2200      	movs	r2, #0
 800ab36:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ab3e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3730      	adds	r7, #48	@ 0x30
 800ab46:	46bd      	mov	sp, r7
 800ab48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ab4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b083      	sub	sp, #12
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab58:	f003 0308 	and.w	r3, r3, #8
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d00a      	beq.n	800ab76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	685b      	ldr	r3, [r3, #4]
 800ab66:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	430a      	orrs	r2, r1
 800ab74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab7a:	f003 0301 	and.w	r3, r3, #1
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d00a      	beq.n	800ab98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	685b      	ldr	r3, [r3, #4]
 800ab88:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	430a      	orrs	r2, r1
 800ab96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab9c:	f003 0302 	and.w	r3, r3, #2
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d00a      	beq.n	800abba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	430a      	orrs	r2, r1
 800abb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abbe:	f003 0304 	and.w	r3, r3, #4
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d00a      	beq.n	800abdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	430a      	orrs	r2, r1
 800abda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abe0:	f003 0310 	and.w	r3, r3, #16
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d00a      	beq.n	800abfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	689b      	ldr	r3, [r3, #8]
 800abee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	430a      	orrs	r2, r1
 800abfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac02:	f003 0320 	and.w	r3, r3, #32
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d00a      	beq.n	800ac20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	689b      	ldr	r3, [r3, #8]
 800ac10:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	430a      	orrs	r2, r1
 800ac1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d01a      	beq.n	800ac62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	430a      	orrs	r2, r1
 800ac40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac4a:	d10a      	bne.n	800ac62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	430a      	orrs	r2, r1
 800ac60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d00a      	beq.n	800ac84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	430a      	orrs	r2, r1
 800ac82:	605a      	str	r2, [r3, #4]
  }
}
 800ac84:	bf00      	nop
 800ac86:	370c      	adds	r7, #12
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr

0800ac90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b098      	sub	sp, #96	@ 0x60
 800ac94:	af02      	add	r7, sp, #8
 800ac96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aca0:	f7f9 fd64 	bl	800476c <HAL_GetTick>
 800aca4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f003 0308 	and.w	r3, r3, #8
 800acb0:	2b08      	cmp	r3, #8
 800acb2:	d12f      	bne.n	800ad14 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800acb4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800acb8:	9300      	str	r3, [sp, #0]
 800acba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800acbc:	2200      	movs	r2, #0
 800acbe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 f88e 	bl	800ade4 <UART_WaitOnFlagUntilTimeout>
 800acc8:	4603      	mov	r3, r0
 800acca:	2b00      	cmp	r3, #0
 800accc:	d022      	beq.n	800ad14 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acd6:	e853 3f00 	ldrex	r3, [r3]
 800acda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800acdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ace2:	653b      	str	r3, [r7, #80]	@ 0x50
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	461a      	mov	r2, r3
 800acea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800acec:	647b      	str	r3, [r7, #68]	@ 0x44
 800acee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acf0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800acf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800acf4:	e841 2300 	strex	r3, r2, [r1]
 800acf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800acfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d1e6      	bne.n	800acce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2220      	movs	r2, #32
 800ad04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad10:	2303      	movs	r3, #3
 800ad12:	e063      	b.n	800addc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f003 0304 	and.w	r3, r3, #4
 800ad1e:	2b04      	cmp	r3, #4
 800ad20:	d149      	bne.n	800adb6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad22:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ad26:	9300      	str	r3, [sp, #0]
 800ad28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 f857 	bl	800ade4 <UART_WaitOnFlagUntilTimeout>
 800ad36:	4603      	mov	r3, r0
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d03c      	beq.n	800adb6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad44:	e853 3f00 	ldrex	r3, [r3]
 800ad48:	623b      	str	r3, [r7, #32]
   return(result);
 800ad4a:	6a3b      	ldr	r3, [r7, #32]
 800ad4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ad50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	461a      	mov	r2, r3
 800ad58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad5a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad62:	e841 2300 	strex	r3, r2, [r1]
 800ad66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ad68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d1e6      	bne.n	800ad3c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	3308      	adds	r3, #8
 800ad74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	e853 3f00 	ldrex	r3, [r3]
 800ad7c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	f023 0301 	bic.w	r3, r3, #1
 800ad84:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	3308      	adds	r3, #8
 800ad8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad8e:	61fa      	str	r2, [r7, #28]
 800ad90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad92:	69b9      	ldr	r1, [r7, #24]
 800ad94:	69fa      	ldr	r2, [r7, #28]
 800ad96:	e841 2300 	strex	r3, r2, [r1]
 800ad9a:	617b      	str	r3, [r7, #20]
   return(result);
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d1e5      	bne.n	800ad6e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2220      	movs	r2, #32
 800ada6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2200      	movs	r2, #0
 800adae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800adb2:	2303      	movs	r3, #3
 800adb4:	e012      	b.n	800addc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2220      	movs	r2, #32
 800adba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2220      	movs	r2, #32
 800adc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2200      	movs	r2, #0
 800adca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2200      	movs	r2, #0
 800add0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2200      	movs	r2, #0
 800add6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800adda:	2300      	movs	r3, #0
}
 800addc:	4618      	mov	r0, r3
 800adde:	3758      	adds	r7, #88	@ 0x58
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b084      	sub	sp, #16
 800ade8:	af00      	add	r7, sp, #0
 800adea:	60f8      	str	r0, [r7, #12]
 800adec:	60b9      	str	r1, [r7, #8]
 800adee:	603b      	str	r3, [r7, #0]
 800adf0:	4613      	mov	r3, r2
 800adf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800adf4:	e04f      	b.n	800ae96 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800adf6:	69bb      	ldr	r3, [r7, #24]
 800adf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adfc:	d04b      	beq.n	800ae96 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800adfe:	f7f9 fcb5 	bl	800476c <HAL_GetTick>
 800ae02:	4602      	mov	r2, r0
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	1ad3      	subs	r3, r2, r3
 800ae08:	69ba      	ldr	r2, [r7, #24]
 800ae0a:	429a      	cmp	r2, r3
 800ae0c:	d302      	bcc.n	800ae14 <UART_WaitOnFlagUntilTimeout+0x30>
 800ae0e:	69bb      	ldr	r3, [r7, #24]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d101      	bne.n	800ae18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ae14:	2303      	movs	r3, #3
 800ae16:	e04e      	b.n	800aeb6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f003 0304 	and.w	r3, r3, #4
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d037      	beq.n	800ae96 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	2b80      	cmp	r3, #128	@ 0x80
 800ae2a:	d034      	beq.n	800ae96 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	2b40      	cmp	r3, #64	@ 0x40
 800ae30:	d031      	beq.n	800ae96 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	69db      	ldr	r3, [r3, #28]
 800ae38:	f003 0308 	and.w	r3, r3, #8
 800ae3c:	2b08      	cmp	r3, #8
 800ae3e:	d110      	bne.n	800ae62 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	2208      	movs	r2, #8
 800ae46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ae48:	68f8      	ldr	r0, [r7, #12]
 800ae4a:	f000 f920 	bl	800b08e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2208      	movs	r2, #8
 800ae52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ae5e:	2301      	movs	r3, #1
 800ae60:	e029      	b.n	800aeb6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	69db      	ldr	r3, [r3, #28]
 800ae68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ae6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae70:	d111      	bne.n	800ae96 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ae7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ae7c:	68f8      	ldr	r0, [r7, #12]
 800ae7e:	f000 f906 	bl	800b08e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2220      	movs	r2, #32
 800ae86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ae92:	2303      	movs	r3, #3
 800ae94:	e00f      	b.n	800aeb6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	69da      	ldr	r2, [r3, #28]
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	4013      	ands	r3, r2
 800aea0:	68ba      	ldr	r2, [r7, #8]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	bf0c      	ite	eq
 800aea6:	2301      	moveq	r3, #1
 800aea8:	2300      	movne	r3, #0
 800aeaa:	b2db      	uxtb	r3, r3
 800aeac:	461a      	mov	r2, r3
 800aeae:	79fb      	ldrb	r3, [r7, #7]
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d0a0      	beq.n	800adf6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aeb4:	2300      	movs	r3, #0
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3710      	adds	r7, #16
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
	...

0800aec0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b096      	sub	sp, #88	@ 0x58
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	60f8      	str	r0, [r7, #12]
 800aec8:	60b9      	str	r1, [r7, #8]
 800aeca:	4613      	mov	r3, r2
 800aecc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	68ba      	ldr	r2, [r7, #8]
 800aed2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	88fa      	ldrh	r2, [r7, #6]
 800aed8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2200      	movs	r2, #0
 800aee0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2222      	movs	r2, #34	@ 0x22
 800aee8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d02d      	beq.n	800af52 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aefc:	4a40      	ldr	r2, [pc, #256]	@ (800b000 <UART_Start_Receive_DMA+0x140>)
 800aefe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af06:	4a3f      	ldr	r2, [pc, #252]	@ (800b004 <UART_Start_Receive_DMA+0x144>)
 800af08:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af10:	4a3d      	ldr	r2, [pc, #244]	@ (800b008 <UART_Start_Receive_DMA+0x148>)
 800af12:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af1a:	2200      	movs	r2, #0
 800af1c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	3324      	adds	r3, #36	@ 0x24
 800af2a:	4619      	mov	r1, r3
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af30:	461a      	mov	r2, r3
 800af32:	88fb      	ldrh	r3, [r7, #6]
 800af34:	f7fa fede 	bl	8005cf4 <HAL_DMA_Start_IT>
 800af38:	4603      	mov	r3, r0
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d009      	beq.n	800af52 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2210      	movs	r2, #16
 800af42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	2220      	movs	r2, #32
 800af4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800af4e:	2301      	movs	r3, #1
 800af50:	e051      	b.n	800aff6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	691b      	ldr	r3, [r3, #16]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d018      	beq.n	800af8c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af62:	e853 3f00 	ldrex	r3, [r3]
 800af66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800af68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800af6e:	657b      	str	r3, [r7, #84]	@ 0x54
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	461a      	mov	r2, r3
 800af76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af78:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af7a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af7c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800af7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af80:	e841 2300 	strex	r3, r2, [r1]
 800af84:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800af86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d1e6      	bne.n	800af5a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	3308      	adds	r3, #8
 800af92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af96:	e853 3f00 	ldrex	r3, [r3]
 800af9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800af9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af9e:	f043 0301 	orr.w	r3, r3, #1
 800afa2:	653b      	str	r3, [r7, #80]	@ 0x50
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	3308      	adds	r3, #8
 800afaa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800afac:	637a      	str	r2, [r7, #52]	@ 0x34
 800afae:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afb0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800afb2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800afb4:	e841 2300 	strex	r3, r2, [r1]
 800afb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800afba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d1e5      	bne.n	800af8c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	3308      	adds	r3, #8
 800afc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	e853 3f00 	ldrex	r3, [r3]
 800afce:	613b      	str	r3, [r7, #16]
   return(result);
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	3308      	adds	r3, #8
 800afde:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800afe0:	623a      	str	r2, [r7, #32]
 800afe2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afe4:	69f9      	ldr	r1, [r7, #28]
 800afe6:	6a3a      	ldr	r2, [r7, #32]
 800afe8:	e841 2300 	strex	r3, r2, [r1]
 800afec:	61bb      	str	r3, [r7, #24]
   return(result);
 800afee:	69bb      	ldr	r3, [r7, #24]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d1e5      	bne.n	800afc0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800aff4:	2300      	movs	r3, #0
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3758      	adds	r7, #88	@ 0x58
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	0800b219 	.word	0x0800b219
 800b004:	0800b34d 	.word	0x0800b34d
 800b008:	0800b393 	.word	0x0800b393

0800b00c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b08f      	sub	sp, #60	@ 0x3c
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b01a:	6a3b      	ldr	r3, [r7, #32]
 800b01c:	e853 3f00 	ldrex	r3, [r3]
 800b020:	61fb      	str	r3, [r7, #28]
   return(result);
 800b022:	69fb      	ldr	r3, [r7, #28]
 800b024:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b028:	637b      	str	r3, [r7, #52]	@ 0x34
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	461a      	mov	r2, r3
 800b030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b032:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b034:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b036:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b038:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b03a:	e841 2300 	strex	r3, r2, [r1]
 800b03e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b042:	2b00      	cmp	r3, #0
 800b044:	d1e6      	bne.n	800b014 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	3308      	adds	r3, #8
 800b04c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	e853 3f00 	ldrex	r3, [r3]
 800b054:	60bb      	str	r3, [r7, #8]
   return(result);
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b05c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	3308      	adds	r3, #8
 800b064:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b066:	61ba      	str	r2, [r7, #24]
 800b068:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b06a:	6979      	ldr	r1, [r7, #20]
 800b06c:	69ba      	ldr	r2, [r7, #24]
 800b06e:	e841 2300 	strex	r3, r2, [r1]
 800b072:	613b      	str	r3, [r7, #16]
   return(result);
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d1e5      	bne.n	800b046 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2220      	movs	r2, #32
 800b07e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b082:	bf00      	nop
 800b084:	373c      	adds	r7, #60	@ 0x3c
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr

0800b08e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b08e:	b480      	push	{r7}
 800b090:	b095      	sub	sp, #84	@ 0x54
 800b092:	af00      	add	r7, sp, #0
 800b094:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b09c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b09e:	e853 3f00 	ldrex	r3, [r3]
 800b0a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b0a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b0aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	461a      	mov	r2, r3
 800b0b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0b4:	643b      	str	r3, [r7, #64]	@ 0x40
 800b0b6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b0ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b0bc:	e841 2300 	strex	r3, r2, [r1]
 800b0c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b0c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d1e6      	bne.n	800b096 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	3308      	adds	r3, #8
 800b0ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d0:	6a3b      	ldr	r3, [r7, #32]
 800b0d2:	e853 3f00 	ldrex	r3, [r3]
 800b0d6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0d8:	69fb      	ldr	r3, [r7, #28]
 800b0da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b0de:	f023 0301 	bic.w	r3, r3, #1
 800b0e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	3308      	adds	r3, #8
 800b0ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b0ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b0ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b0f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b0f4:	e841 2300 	strex	r3, r2, [r1]
 800b0f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d1e3      	bne.n	800b0c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b104:	2b01      	cmp	r3, #1
 800b106:	d118      	bne.n	800b13a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	e853 3f00 	ldrex	r3, [r3]
 800b114:	60bb      	str	r3, [r7, #8]
   return(result);
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	f023 0310 	bic.w	r3, r3, #16
 800b11c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	461a      	mov	r2, r3
 800b124:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b126:	61bb      	str	r3, [r7, #24]
 800b128:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b12a:	6979      	ldr	r1, [r7, #20]
 800b12c:	69ba      	ldr	r2, [r7, #24]
 800b12e:	e841 2300 	strex	r3, r2, [r1]
 800b132:	613b      	str	r3, [r7, #16]
   return(result);
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d1e6      	bne.n	800b108 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2220      	movs	r2, #32
 800b13e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2200      	movs	r2, #0
 800b146:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2200      	movs	r2, #0
 800b14c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b14e:	bf00      	nop
 800b150:	3754      	adds	r7, #84	@ 0x54
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr

0800b15a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b090      	sub	sp, #64	@ 0x40
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b166:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f003 0320 	and.w	r3, r3, #32
 800b172:	2b00      	cmp	r3, #0
 800b174:	d137      	bne.n	800b1e6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b176:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b178:	2200      	movs	r2, #0
 800b17a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b17e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	3308      	adds	r3, #8
 800b184:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b188:	e853 3f00 	ldrex	r3, [r3]
 800b18c:	623b      	str	r3, [r7, #32]
   return(result);
 800b18e:	6a3b      	ldr	r3, [r7, #32]
 800b190:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b194:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	3308      	adds	r3, #8
 800b19c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b19e:	633a      	str	r2, [r7, #48]	@ 0x30
 800b1a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b1a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1a6:	e841 2300 	strex	r3, r2, [r1]
 800b1aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b1ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d1e5      	bne.n	800b17e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b1b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	e853 3f00 	ldrex	r3, [r3]
 800b1be:	60fb      	str	r3, [r7, #12]
   return(result);
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1d0:	61fb      	str	r3, [r7, #28]
 800b1d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d4:	69b9      	ldr	r1, [r7, #24]
 800b1d6:	69fa      	ldr	r2, [r7, #28]
 800b1d8:	e841 2300 	strex	r3, r2, [r1]
 800b1dc:	617b      	str	r3, [r7, #20]
   return(result);
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d1e6      	bne.n	800b1b2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b1e4:	e004      	b.n	800b1f0 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800b1e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b1ec:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b1ee:	4798      	blx	r3
}
 800b1f0:	bf00      	nop
 800b1f2:	3740      	adds	r7, #64	@ 0x40
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b084      	sub	sp, #16
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b204:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b20c:	68f8      	ldr	r0, [r7, #12]
 800b20e:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b210:	bf00      	nop
 800b212:	3710      	adds	r7, #16
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}

0800b218 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b09c      	sub	sp, #112	@ 0x70
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b224:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f003 0320 	and.w	r3, r3, #32
 800b230:	2b00      	cmp	r3, #0
 800b232:	d171      	bne.n	800b318 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b234:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b236:	2200      	movs	r2, #0
 800b238:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b23c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b242:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b244:	e853 3f00 	ldrex	r3, [r3]
 800b248:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b24a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b24c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b250:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b252:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	461a      	mov	r2, r3
 800b258:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b25a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b25c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b25e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b260:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b262:	e841 2300 	strex	r3, r2, [r1]
 800b266:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b268:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d1e6      	bne.n	800b23c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b26e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	3308      	adds	r3, #8
 800b274:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b278:	e853 3f00 	ldrex	r3, [r3]
 800b27c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b27e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b280:	f023 0301 	bic.w	r3, r3, #1
 800b284:	667b      	str	r3, [r7, #100]	@ 0x64
 800b286:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	3308      	adds	r3, #8
 800b28c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b28e:	647a      	str	r2, [r7, #68]	@ 0x44
 800b290:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b292:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b294:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b296:	e841 2300 	strex	r3, r2, [r1]
 800b29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b29c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d1e5      	bne.n	800b26e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	3308      	adds	r3, #8
 800b2a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ac:	e853 3f00 	ldrex	r3, [r3]
 800b2b0:	623b      	str	r3, [r7, #32]
   return(result);
 800b2b2:	6a3b      	ldr	r3, [r7, #32]
 800b2b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b2b8:	663b      	str	r3, [r7, #96]	@ 0x60
 800b2ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	3308      	adds	r3, #8
 800b2c0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b2c2:	633a      	str	r2, [r7, #48]	@ 0x30
 800b2c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b2c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2ca:	e841 2300 	strex	r3, r2, [r1]
 800b2ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b2d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d1e5      	bne.n	800b2a2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b2d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2d8:	2220      	movs	r2, #32
 800b2da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2e2:	2b01      	cmp	r3, #1
 800b2e4:	d118      	bne.n	800b318 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	e853 3f00 	ldrex	r3, [r3]
 800b2f2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f023 0310 	bic.w	r3, r3, #16
 800b2fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b2fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	461a      	mov	r2, r3
 800b302:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b304:	61fb      	str	r3, [r7, #28]
 800b306:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b308:	69b9      	ldr	r1, [r7, #24]
 800b30a:	69fa      	ldr	r2, [r7, #28]
 800b30c:	e841 2300 	strex	r3, r2, [r1]
 800b310:	617b      	str	r3, [r7, #20]
   return(result);
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d1e6      	bne.n	800b2e6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b318:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b31a:	2200      	movs	r2, #0
 800b31c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b31e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b320:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b322:	2b01      	cmp	r3, #1
 800b324:	d109      	bne.n	800b33a <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800b326:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b328:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b32c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b32e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b332:	4611      	mov	r1, r2
 800b334:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b336:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b338:	e004      	b.n	800b344 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800b33a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b33c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b340:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b342:	4798      	blx	r3
}
 800b344:	bf00      	nop
 800b346:	3770      	adds	r7, #112	@ 0x70
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}

0800b34c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b358:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2201      	movs	r2, #1
 800b35e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b364:	2b01      	cmp	r3, #1
 800b366:	d10b      	bne.n	800b380 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b36e:	68fa      	ldr	r2, [r7, #12]
 800b370:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b374:	0852      	lsrs	r2, r2, #1
 800b376:	b292      	uxth	r2, r2
 800b378:	4611      	mov	r1, r2
 800b37a:	68f8      	ldr	r0, [r7, #12]
 800b37c:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b37e:	e004      	b.n	800b38a <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b386:	68f8      	ldr	r0, [r7, #12]
 800b388:	4798      	blx	r3
}
 800b38a:	bf00      	nop
 800b38c:	3710      	adds	r7, #16
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}

0800b392 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b392:	b580      	push	{r7, lr}
 800b394:	b086      	sub	sp, #24
 800b396:	af00      	add	r7, sp, #0
 800b398:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b39e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3a6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b3ae:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	689b      	ldr	r3, [r3, #8]
 800b3b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3ba:	2b80      	cmp	r3, #128	@ 0x80
 800b3bc:	d109      	bne.n	800b3d2 <UART_DMAError+0x40>
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	2b21      	cmp	r3, #33	@ 0x21
 800b3c2:	d106      	bne.n	800b3d2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b3cc:	6978      	ldr	r0, [r7, #20]
 800b3ce:	f7ff fe1d 	bl	800b00c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	689b      	ldr	r3, [r3, #8]
 800b3d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3dc:	2b40      	cmp	r3, #64	@ 0x40
 800b3de:	d109      	bne.n	800b3f4 <UART_DMAError+0x62>
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2b22      	cmp	r3, #34	@ 0x22
 800b3e4:	d106      	bne.n	800b3f4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b3ee:	6978      	ldr	r0, [r7, #20]
 800b3f0:	f7ff fe4d 	bl	800b08e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b3fa:	f043 0210 	orr.w	r2, r3, #16
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b40a:	6978      	ldr	r0, [r7, #20]
 800b40c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b40e:	bf00      	nop
 800b410:	3718      	adds	r7, #24
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}

0800b416 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b416:	b580      	push	{r7, lr}
 800b418:	b084      	sub	sp, #16
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b422:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2200      	movs	r2, #0
 800b428:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	2200      	movs	r2, #0
 800b430:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b43a:	68f8      	ldr	r0, [r7, #12]
 800b43c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b43e:	bf00      	nop
 800b440:	3710      	adds	r7, #16
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}

0800b446 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b446:	b580      	push	{r7, lr}
 800b448:	b088      	sub	sp, #32
 800b44a:	af00      	add	r7, sp, #0
 800b44c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	e853 3f00 	ldrex	r3, [r3]
 800b45a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b462:	61fb      	str	r3, [r7, #28]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	461a      	mov	r2, r3
 800b46a:	69fb      	ldr	r3, [r7, #28]
 800b46c:	61bb      	str	r3, [r7, #24]
 800b46e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b470:	6979      	ldr	r1, [r7, #20]
 800b472:	69ba      	ldr	r2, [r7, #24]
 800b474:	e841 2300 	strex	r3, r2, [r1]
 800b478:	613b      	str	r3, [r7, #16]
   return(result);
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d1e6      	bne.n	800b44e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2220      	movs	r2, #32
 800b484:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2200      	movs	r2, #0
 800b48c:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b498:	bf00      	nop
 800b49a:	3720      	adds	r7, #32
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b083      	sub	sp, #12
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b4a8:	bf00      	nop
 800b4aa:	370c      	adds	r7, #12
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr

0800b4b4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b083      	sub	sp, #12
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b4bc:	bf00      	nop
 800b4be:	370c      	adds	r7, #12
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr

0800b4c8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b083      	sub	sp, #12
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b4d0:	bf00      	nop
 800b4d2:	370c      	adds	r7, #12
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr

0800b4dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b085      	sub	sp, #20
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b4ea:	2b01      	cmp	r3, #1
 800b4ec:	d101      	bne.n	800b4f2 <HAL_UARTEx_DisableFifoMode+0x16>
 800b4ee:	2302      	movs	r3, #2
 800b4f0:	e027      	b.n	800b542 <HAL_UARTEx_DisableFifoMode+0x66>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2201      	movs	r2, #1
 800b4f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2224      	movs	r2, #36	@ 0x24
 800b4fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	681a      	ldr	r2, [r3, #0]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f022 0201 	bic.w	r2, r2, #1
 800b518:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b520:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2200      	movs	r2, #0
 800b526:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	68fa      	ldr	r2, [r7, #12]
 800b52e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2220      	movs	r2, #32
 800b534:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2200      	movs	r2, #0
 800b53c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b540:	2300      	movs	r3, #0
}
 800b542:	4618      	mov	r0, r3
 800b544:	3714      	adds	r7, #20
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr

0800b54e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b54e:	b580      	push	{r7, lr}
 800b550:	b084      	sub	sp, #16
 800b552:	af00      	add	r7, sp, #0
 800b554:	6078      	str	r0, [r7, #4]
 800b556:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b55e:	2b01      	cmp	r3, #1
 800b560:	d101      	bne.n	800b566 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b562:	2302      	movs	r3, #2
 800b564:	e02d      	b.n	800b5c2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2201      	movs	r2, #1
 800b56a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2224      	movs	r2, #36	@ 0x24
 800b572:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	681a      	ldr	r2, [r3, #0]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f022 0201 	bic.w	r2, r2, #1
 800b58c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	689b      	ldr	r3, [r3, #8]
 800b594:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	683a      	ldr	r2, [r7, #0]
 800b59e:	430a      	orrs	r2, r1
 800b5a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f000 f850 	bl	800b648 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	68fa      	ldr	r2, [r7, #12]
 800b5ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2220      	movs	r2, #32
 800b5b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b5c0:	2300      	movs	r3, #0
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3710      	adds	r7, #16
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}

0800b5ca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b5ca:	b580      	push	{r7, lr}
 800b5cc:	b084      	sub	sp, #16
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6078      	str	r0, [r7, #4]
 800b5d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b5da:	2b01      	cmp	r3, #1
 800b5dc:	d101      	bne.n	800b5e2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b5de:	2302      	movs	r3, #2
 800b5e0:	e02d      	b.n	800b63e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2224      	movs	r2, #36	@ 0x24
 800b5ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	681a      	ldr	r2, [r3, #0]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f022 0201 	bic.w	r2, r2, #1
 800b608:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	689b      	ldr	r3, [r3, #8]
 800b610:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	683a      	ldr	r2, [r7, #0]
 800b61a:	430a      	orrs	r2, r1
 800b61c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f000 f812 	bl	800b648 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	68fa      	ldr	r2, [r7, #12]
 800b62a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2220      	movs	r2, #32
 800b630:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2200      	movs	r2, #0
 800b638:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b63c:	2300      	movs	r3, #0
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3710      	adds	r7, #16
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}
	...

0800b648 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b648:	b480      	push	{r7}
 800b64a:	b085      	sub	sp, #20
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b654:	2b00      	cmp	r3, #0
 800b656:	d108      	bne.n	800b66a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2201      	movs	r2, #1
 800b65c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2201      	movs	r2, #1
 800b664:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b668:	e031      	b.n	800b6ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b66a:	2308      	movs	r3, #8
 800b66c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b66e:	2308      	movs	r3, #8
 800b670:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	689b      	ldr	r3, [r3, #8]
 800b678:	0e5b      	lsrs	r3, r3, #25
 800b67a:	b2db      	uxtb	r3, r3
 800b67c:	f003 0307 	and.w	r3, r3, #7
 800b680:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	689b      	ldr	r3, [r3, #8]
 800b688:	0f5b      	lsrs	r3, r3, #29
 800b68a:	b2db      	uxtb	r3, r3
 800b68c:	f003 0307 	and.w	r3, r3, #7
 800b690:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b692:	7bbb      	ldrb	r3, [r7, #14]
 800b694:	7b3a      	ldrb	r2, [r7, #12]
 800b696:	4911      	ldr	r1, [pc, #68]	@ (800b6dc <UARTEx_SetNbDataToProcess+0x94>)
 800b698:	5c8a      	ldrb	r2, [r1, r2]
 800b69a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b69e:	7b3a      	ldrb	r2, [r7, #12]
 800b6a0:	490f      	ldr	r1, [pc, #60]	@ (800b6e0 <UARTEx_SetNbDataToProcess+0x98>)
 800b6a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b6a4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b6a8:	b29a      	uxth	r2, r3
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b6b0:	7bfb      	ldrb	r3, [r7, #15]
 800b6b2:	7b7a      	ldrb	r2, [r7, #13]
 800b6b4:	4909      	ldr	r1, [pc, #36]	@ (800b6dc <UARTEx_SetNbDataToProcess+0x94>)
 800b6b6:	5c8a      	ldrb	r2, [r1, r2]
 800b6b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b6bc:	7b7a      	ldrb	r2, [r7, #13]
 800b6be:	4908      	ldr	r1, [pc, #32]	@ (800b6e0 <UARTEx_SetNbDataToProcess+0x98>)
 800b6c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b6c2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b6c6:	b29a      	uxth	r2, r3
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b6ce:	bf00      	nop
 800b6d0:	3714      	adds	r7, #20
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d8:	4770      	bx	lr
 800b6da:	bf00      	nop
 800b6dc:	0800b9d0 	.word	0x0800b9d0
 800b6e0:	0800b9d8 	.word	0x0800b9d8

0800b6e4 <memset>:
 800b6e4:	4402      	add	r2, r0
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d100      	bne.n	800b6ee <memset+0xa>
 800b6ec:	4770      	bx	lr
 800b6ee:	f803 1b01 	strb.w	r1, [r3], #1
 800b6f2:	e7f9      	b.n	800b6e8 <memset+0x4>

0800b6f4 <__errno>:
 800b6f4:	4b01      	ldr	r3, [pc, #4]	@ (800b6fc <__errno+0x8>)
 800b6f6:	6818      	ldr	r0, [r3, #0]
 800b6f8:	4770      	bx	lr
 800b6fa:	bf00      	nop
 800b6fc:	2000024c 	.word	0x2000024c

0800b700 <__libc_init_array>:
 800b700:	b570      	push	{r4, r5, r6, lr}
 800b702:	4d0d      	ldr	r5, [pc, #52]	@ (800b738 <__libc_init_array+0x38>)
 800b704:	4c0d      	ldr	r4, [pc, #52]	@ (800b73c <__libc_init_array+0x3c>)
 800b706:	1b64      	subs	r4, r4, r5
 800b708:	10a4      	asrs	r4, r4, #2
 800b70a:	2600      	movs	r6, #0
 800b70c:	42a6      	cmp	r6, r4
 800b70e:	d109      	bne.n	800b724 <__libc_init_array+0x24>
 800b710:	4d0b      	ldr	r5, [pc, #44]	@ (800b740 <__libc_init_array+0x40>)
 800b712:	4c0c      	ldr	r4, [pc, #48]	@ (800b744 <__libc_init_array+0x44>)
 800b714:	f000 f92c 	bl	800b970 <_init>
 800b718:	1b64      	subs	r4, r4, r5
 800b71a:	10a4      	asrs	r4, r4, #2
 800b71c:	2600      	movs	r6, #0
 800b71e:	42a6      	cmp	r6, r4
 800b720:	d105      	bne.n	800b72e <__libc_init_array+0x2e>
 800b722:	bd70      	pop	{r4, r5, r6, pc}
 800b724:	f855 3b04 	ldr.w	r3, [r5], #4
 800b728:	4798      	blx	r3
 800b72a:	3601      	adds	r6, #1
 800b72c:	e7ee      	b.n	800b70c <__libc_init_array+0xc>
 800b72e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b732:	4798      	blx	r3
 800b734:	3601      	adds	r6, #1
 800b736:	e7f2      	b.n	800b71e <__libc_init_array+0x1e>
 800b738:	0800b9e8 	.word	0x0800b9e8
 800b73c:	0800b9e8 	.word	0x0800b9e8
 800b740:	0800b9e8 	.word	0x0800b9e8
 800b744:	0800b9ec 	.word	0x0800b9ec

0800b748 <memcpy>:
 800b748:	440a      	add	r2, r1
 800b74a:	4291      	cmp	r1, r2
 800b74c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b750:	d100      	bne.n	800b754 <memcpy+0xc>
 800b752:	4770      	bx	lr
 800b754:	b510      	push	{r4, lr}
 800b756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b75a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b75e:	4291      	cmp	r1, r2
 800b760:	d1f9      	bne.n	800b756 <memcpy+0xe>
 800b762:	bd10      	pop	{r4, pc}

0800b764 <sqrt>:
 800b764:	b538      	push	{r3, r4, r5, lr}
 800b766:	ed2d 8b02 	vpush	{d8}
 800b76a:	ec55 4b10 	vmov	r4, r5, d0
 800b76e:	f000 f825 	bl	800b7bc <__ieee754_sqrt>
 800b772:	4622      	mov	r2, r4
 800b774:	462b      	mov	r3, r5
 800b776:	4620      	mov	r0, r4
 800b778:	4629      	mov	r1, r5
 800b77a:	eeb0 8a40 	vmov.f32	s16, s0
 800b77e:	eef0 8a60 	vmov.f32	s17, s1
 800b782:	f7f5 f99f 	bl	8000ac4 <__aeabi_dcmpun>
 800b786:	b990      	cbnz	r0, 800b7ae <sqrt+0x4a>
 800b788:	2200      	movs	r2, #0
 800b78a:	2300      	movs	r3, #0
 800b78c:	4620      	mov	r0, r4
 800b78e:	4629      	mov	r1, r5
 800b790:	f7f5 f970 	bl	8000a74 <__aeabi_dcmplt>
 800b794:	b158      	cbz	r0, 800b7ae <sqrt+0x4a>
 800b796:	f7ff ffad 	bl	800b6f4 <__errno>
 800b79a:	2321      	movs	r3, #33	@ 0x21
 800b79c:	6003      	str	r3, [r0, #0]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	4610      	mov	r0, r2
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	f7f5 f81d 	bl	80007e4 <__aeabi_ddiv>
 800b7aa:	ec41 0b18 	vmov	d8, r0, r1
 800b7ae:	eeb0 0a48 	vmov.f32	s0, s16
 800b7b2:	eef0 0a68 	vmov.f32	s1, s17
 800b7b6:	ecbd 8b02 	vpop	{d8}
 800b7ba:	bd38      	pop	{r3, r4, r5, pc}

0800b7bc <__ieee754_sqrt>:
 800b7bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7c0:	4a68      	ldr	r2, [pc, #416]	@ (800b964 <__ieee754_sqrt+0x1a8>)
 800b7c2:	ec55 4b10 	vmov	r4, r5, d0
 800b7c6:	43aa      	bics	r2, r5
 800b7c8:	462b      	mov	r3, r5
 800b7ca:	4621      	mov	r1, r4
 800b7cc:	d110      	bne.n	800b7f0 <__ieee754_sqrt+0x34>
 800b7ce:	4622      	mov	r2, r4
 800b7d0:	4620      	mov	r0, r4
 800b7d2:	4629      	mov	r1, r5
 800b7d4:	f7f4 fedc 	bl	8000590 <__aeabi_dmul>
 800b7d8:	4602      	mov	r2, r0
 800b7da:	460b      	mov	r3, r1
 800b7dc:	4620      	mov	r0, r4
 800b7de:	4629      	mov	r1, r5
 800b7e0:	f7f4 fd20 	bl	8000224 <__adddf3>
 800b7e4:	4604      	mov	r4, r0
 800b7e6:	460d      	mov	r5, r1
 800b7e8:	ec45 4b10 	vmov	d0, r4, r5
 800b7ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7f0:	2d00      	cmp	r5, #0
 800b7f2:	dc0e      	bgt.n	800b812 <__ieee754_sqrt+0x56>
 800b7f4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800b7f8:	4322      	orrs	r2, r4
 800b7fa:	d0f5      	beq.n	800b7e8 <__ieee754_sqrt+0x2c>
 800b7fc:	b19d      	cbz	r5, 800b826 <__ieee754_sqrt+0x6a>
 800b7fe:	4622      	mov	r2, r4
 800b800:	4620      	mov	r0, r4
 800b802:	4629      	mov	r1, r5
 800b804:	f7f4 fd0c 	bl	8000220 <__aeabi_dsub>
 800b808:	4602      	mov	r2, r0
 800b80a:	460b      	mov	r3, r1
 800b80c:	f7f4 ffea 	bl	80007e4 <__aeabi_ddiv>
 800b810:	e7e8      	b.n	800b7e4 <__ieee754_sqrt+0x28>
 800b812:	152a      	asrs	r2, r5, #20
 800b814:	d115      	bne.n	800b842 <__ieee754_sqrt+0x86>
 800b816:	2000      	movs	r0, #0
 800b818:	e009      	b.n	800b82e <__ieee754_sqrt+0x72>
 800b81a:	0acb      	lsrs	r3, r1, #11
 800b81c:	3a15      	subs	r2, #21
 800b81e:	0549      	lsls	r1, r1, #21
 800b820:	2b00      	cmp	r3, #0
 800b822:	d0fa      	beq.n	800b81a <__ieee754_sqrt+0x5e>
 800b824:	e7f7      	b.n	800b816 <__ieee754_sqrt+0x5a>
 800b826:	462a      	mov	r2, r5
 800b828:	e7fa      	b.n	800b820 <__ieee754_sqrt+0x64>
 800b82a:	005b      	lsls	r3, r3, #1
 800b82c:	3001      	adds	r0, #1
 800b82e:	02dc      	lsls	r4, r3, #11
 800b830:	d5fb      	bpl.n	800b82a <__ieee754_sqrt+0x6e>
 800b832:	1e44      	subs	r4, r0, #1
 800b834:	1b12      	subs	r2, r2, r4
 800b836:	f1c0 0420 	rsb	r4, r0, #32
 800b83a:	fa21 f404 	lsr.w	r4, r1, r4
 800b83e:	4323      	orrs	r3, r4
 800b840:	4081      	lsls	r1, r0
 800b842:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b846:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800b84a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b84e:	07d2      	lsls	r2, r2, #31
 800b850:	bf5c      	itt	pl
 800b852:	005b      	lslpl	r3, r3, #1
 800b854:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800b858:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b85c:	bf58      	it	pl
 800b85e:	0049      	lslpl	r1, r1, #1
 800b860:	2600      	movs	r6, #0
 800b862:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800b866:	106d      	asrs	r5, r5, #1
 800b868:	0049      	lsls	r1, r1, #1
 800b86a:	2016      	movs	r0, #22
 800b86c:	4632      	mov	r2, r6
 800b86e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800b872:	1917      	adds	r7, r2, r4
 800b874:	429f      	cmp	r7, r3
 800b876:	bfde      	ittt	le
 800b878:	193a      	addle	r2, r7, r4
 800b87a:	1bdb      	suble	r3, r3, r7
 800b87c:	1936      	addle	r6, r6, r4
 800b87e:	0fcf      	lsrs	r7, r1, #31
 800b880:	3801      	subs	r0, #1
 800b882:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800b886:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b88a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b88e:	d1f0      	bne.n	800b872 <__ieee754_sqrt+0xb6>
 800b890:	4604      	mov	r4, r0
 800b892:	2720      	movs	r7, #32
 800b894:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800b898:	429a      	cmp	r2, r3
 800b89a:	eb00 0e0c 	add.w	lr, r0, ip
 800b89e:	db02      	blt.n	800b8a6 <__ieee754_sqrt+0xea>
 800b8a0:	d113      	bne.n	800b8ca <__ieee754_sqrt+0x10e>
 800b8a2:	458e      	cmp	lr, r1
 800b8a4:	d811      	bhi.n	800b8ca <__ieee754_sqrt+0x10e>
 800b8a6:	f1be 0f00 	cmp.w	lr, #0
 800b8aa:	eb0e 000c 	add.w	r0, lr, ip
 800b8ae:	da42      	bge.n	800b936 <__ieee754_sqrt+0x17a>
 800b8b0:	2800      	cmp	r0, #0
 800b8b2:	db40      	blt.n	800b936 <__ieee754_sqrt+0x17a>
 800b8b4:	f102 0801 	add.w	r8, r2, #1
 800b8b8:	1a9b      	subs	r3, r3, r2
 800b8ba:	458e      	cmp	lr, r1
 800b8bc:	bf88      	it	hi
 800b8be:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b8c2:	eba1 010e 	sub.w	r1, r1, lr
 800b8c6:	4464      	add	r4, ip
 800b8c8:	4642      	mov	r2, r8
 800b8ca:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800b8ce:	3f01      	subs	r7, #1
 800b8d0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800b8d4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b8d8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b8dc:	d1dc      	bne.n	800b898 <__ieee754_sqrt+0xdc>
 800b8de:	4319      	orrs	r1, r3
 800b8e0:	d01b      	beq.n	800b91a <__ieee754_sqrt+0x15e>
 800b8e2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800b968 <__ieee754_sqrt+0x1ac>
 800b8e6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800b96c <__ieee754_sqrt+0x1b0>
 800b8ea:	e9da 0100 	ldrd	r0, r1, [sl]
 800b8ee:	e9db 2300 	ldrd	r2, r3, [fp]
 800b8f2:	f7f4 fc95 	bl	8000220 <__aeabi_dsub>
 800b8f6:	e9da 8900 	ldrd	r8, r9, [sl]
 800b8fa:	4602      	mov	r2, r0
 800b8fc:	460b      	mov	r3, r1
 800b8fe:	4640      	mov	r0, r8
 800b900:	4649      	mov	r1, r9
 800b902:	f7f5 f8c1 	bl	8000a88 <__aeabi_dcmple>
 800b906:	b140      	cbz	r0, 800b91a <__ieee754_sqrt+0x15e>
 800b908:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b90c:	e9da 0100 	ldrd	r0, r1, [sl]
 800b910:	e9db 2300 	ldrd	r2, r3, [fp]
 800b914:	d111      	bne.n	800b93a <__ieee754_sqrt+0x17e>
 800b916:	3601      	adds	r6, #1
 800b918:	463c      	mov	r4, r7
 800b91a:	1072      	asrs	r2, r6, #1
 800b91c:	0863      	lsrs	r3, r4, #1
 800b91e:	07f1      	lsls	r1, r6, #31
 800b920:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800b924:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800b928:	bf48      	it	mi
 800b92a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800b92e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800b932:	4618      	mov	r0, r3
 800b934:	e756      	b.n	800b7e4 <__ieee754_sqrt+0x28>
 800b936:	4690      	mov	r8, r2
 800b938:	e7be      	b.n	800b8b8 <__ieee754_sqrt+0xfc>
 800b93a:	f7f4 fc73 	bl	8000224 <__adddf3>
 800b93e:	e9da 8900 	ldrd	r8, r9, [sl]
 800b942:	4602      	mov	r2, r0
 800b944:	460b      	mov	r3, r1
 800b946:	4640      	mov	r0, r8
 800b948:	4649      	mov	r1, r9
 800b94a:	f7f5 f893 	bl	8000a74 <__aeabi_dcmplt>
 800b94e:	b120      	cbz	r0, 800b95a <__ieee754_sqrt+0x19e>
 800b950:	1ca0      	adds	r0, r4, #2
 800b952:	bf08      	it	eq
 800b954:	3601      	addeq	r6, #1
 800b956:	3402      	adds	r4, #2
 800b958:	e7df      	b.n	800b91a <__ieee754_sqrt+0x15e>
 800b95a:	1c63      	adds	r3, r4, #1
 800b95c:	f023 0401 	bic.w	r4, r3, #1
 800b960:	e7db      	b.n	800b91a <__ieee754_sqrt+0x15e>
 800b962:	bf00      	nop
 800b964:	7ff00000 	.word	0x7ff00000
 800b968:	200002a8 	.word	0x200002a8
 800b96c:	200002a0 	.word	0x200002a0

0800b970 <_init>:
 800b970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b972:	bf00      	nop
 800b974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b976:	bc08      	pop	{r3}
 800b978:	469e      	mov	lr, r3
 800b97a:	4770      	bx	lr

0800b97c <_fini>:
 800b97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b97e:	bf00      	nop
 800b980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b982:	bc08      	pop	{r3}
 800b984:	469e      	mov	lr, r3
 800b986:	4770      	bx	lr
