
Studio_G15.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc14  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800bdec  0800bdec  0000cdec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be44  0800be44  0000d278  2**0
                  CONTENTS
  4 .ARM          00000008  0800be44  0800be44  0000ce44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be4c  0800be4c  0000d278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be4c  0800be4c  0000ce4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800be50  0800be50  0000ce50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000278  20000000  0800be54  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010dc  20000278  0800c0cc  0000d278  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001354  0800c0cc  0000d354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d278  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f316  00000000  00000000  0000d2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c64  00000000  00000000  0002c5be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001700  00000000  00000000  00030228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011ed  00000000  00000000  00031928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a1ee  00000000  00000000  00032b15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dc4c  00000000  00000000  0005cd03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115420  00000000  00000000  0007a94f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018fd6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006604  00000000  00000000  0018fdb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001963b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000278 	.word	0x20000278
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800bdd4 	.word	0x0800bdd4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000027c 	.word	0x2000027c
 8000214:	0800bdd4 	.word	0x0800bdd4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_frsub>:
 8000bd0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bd4:	e002      	b.n	8000bdc <__addsf3>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fsub>:
 8000bd8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bdc <__addsf3>:
 8000bdc:	0042      	lsls	r2, r0, #1
 8000bde:	bf1f      	itttt	ne
 8000be0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be4:	ea92 0f03 	teqne	r2, r3
 8000be8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf0:	d06a      	beq.n	8000cc8 <__addsf3+0xec>
 8000bf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bfa:	bfc1      	itttt	gt
 8000bfc:	18d2      	addgt	r2, r2, r3
 8000bfe:	4041      	eorgt	r1, r0
 8000c00:	4048      	eorgt	r0, r1
 8000c02:	4041      	eorgt	r1, r0
 8000c04:	bfb8      	it	lt
 8000c06:	425b      	neglt	r3, r3
 8000c08:	2b19      	cmp	r3, #25
 8000c0a:	bf88      	it	hi
 8000c0c:	4770      	bxhi	lr
 8000c0e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c16:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c1a:	bf18      	it	ne
 8000c1c:	4240      	negne	r0, r0
 8000c1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c22:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c26:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4249      	negne	r1, r1
 8000c2e:	ea92 0f03 	teq	r2, r3
 8000c32:	d03f      	beq.n	8000cb4 <__addsf3+0xd8>
 8000c34:	f1a2 0201 	sub.w	r2, r2, #1
 8000c38:	fa41 fc03 	asr.w	ip, r1, r3
 8000c3c:	eb10 000c 	adds.w	r0, r0, ip
 8000c40:	f1c3 0320 	rsb	r3, r3, #32
 8000c44:	fa01 f103 	lsl.w	r1, r1, r3
 8000c48:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c4c:	d502      	bpl.n	8000c54 <__addsf3+0x78>
 8000c4e:	4249      	negs	r1, r1
 8000c50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c58:	d313      	bcc.n	8000c82 <__addsf3+0xa6>
 8000c5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c5e:	d306      	bcc.n	8000c6e <__addsf3+0x92>
 8000c60:	0840      	lsrs	r0, r0, #1
 8000c62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c66:	f102 0201 	add.w	r2, r2, #1
 8000c6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c6c:	d251      	bcs.n	8000d12 <__addsf3+0x136>
 8000c6e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c76:	bf08      	it	eq
 8000c78:	f020 0001 	biceq.w	r0, r0, #1
 8000c7c:	ea40 0003 	orr.w	r0, r0, r3
 8000c80:	4770      	bx	lr
 8000c82:	0049      	lsls	r1, r1, #1
 8000c84:	eb40 0000 	adc.w	r0, r0, r0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c90:	d2ed      	bcs.n	8000c6e <__addsf3+0x92>
 8000c92:	fab0 fc80 	clz	ip, r0
 8000c96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ca2:	bfaa      	itet	ge
 8000ca4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca8:	4252      	neglt	r2, r2
 8000caa:	4318      	orrge	r0, r3
 8000cac:	bfbc      	itt	lt
 8000cae:	40d0      	lsrlt	r0, r2
 8000cb0:	4318      	orrlt	r0, r3
 8000cb2:	4770      	bx	lr
 8000cb4:	f092 0f00 	teq	r2, #0
 8000cb8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cbc:	bf06      	itte	eq
 8000cbe:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cc2:	3201      	addeq	r2, #1
 8000cc4:	3b01      	subne	r3, #1
 8000cc6:	e7b5      	b.n	8000c34 <__addsf3+0x58>
 8000cc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ccc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd0:	bf18      	it	ne
 8000cd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd6:	d021      	beq.n	8000d1c <__addsf3+0x140>
 8000cd8:	ea92 0f03 	teq	r2, r3
 8000cdc:	d004      	beq.n	8000ce8 <__addsf3+0x10c>
 8000cde:	f092 0f00 	teq	r2, #0
 8000ce2:	bf08      	it	eq
 8000ce4:	4608      	moveq	r0, r1
 8000ce6:	4770      	bx	lr
 8000ce8:	ea90 0f01 	teq	r0, r1
 8000cec:	bf1c      	itt	ne
 8000cee:	2000      	movne	r0, #0
 8000cf0:	4770      	bxne	lr
 8000cf2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cf6:	d104      	bne.n	8000d02 <__addsf3+0x126>
 8000cf8:	0040      	lsls	r0, r0, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d00:	4770      	bx	lr
 8000d02:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d06:	bf3c      	itt	cc
 8000d08:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d0c:	4770      	bxcc	lr
 8000d0e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d12:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d1a:	4770      	bx	lr
 8000d1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d20:	bf16      	itet	ne
 8000d22:	4608      	movne	r0, r1
 8000d24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d28:	4601      	movne	r1, r0
 8000d2a:	0242      	lsls	r2, r0, #9
 8000d2c:	bf06      	itte	eq
 8000d2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d32:	ea90 0f01 	teqeq	r0, r1
 8000d36:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_ui2f>:
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e004      	b.n	8000d4c <__aeabi_i2f+0x8>
 8000d42:	bf00      	nop

08000d44 <__aeabi_i2f>:
 8000d44:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d48:	bf48      	it	mi
 8000d4a:	4240      	negmi	r0, r0
 8000d4c:	ea5f 0c00 	movs.w	ip, r0
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d58:	4601      	mov	r1, r0
 8000d5a:	f04f 0000 	mov.w	r0, #0
 8000d5e:	e01c      	b.n	8000d9a <__aeabi_l2f+0x2a>

08000d60 <__aeabi_ul2f>:
 8000d60:	ea50 0201 	orrs.w	r2, r0, r1
 8000d64:	bf08      	it	eq
 8000d66:	4770      	bxeq	lr
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e00a      	b.n	8000d84 <__aeabi_l2f+0x14>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_l2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d7c:	d502      	bpl.n	8000d84 <__aeabi_l2f+0x14>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	ea5f 0c01 	movs.w	ip, r1
 8000d88:	bf02      	ittt	eq
 8000d8a:	4684      	moveq	ip, r0
 8000d8c:	4601      	moveq	r1, r0
 8000d8e:	2000      	moveq	r0, #0
 8000d90:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d94:	bf08      	it	eq
 8000d96:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d9a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d9e:	fabc f28c 	clz	r2, ip
 8000da2:	3a08      	subs	r2, #8
 8000da4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da8:	db10      	blt.n	8000dcc <__aeabi_l2f+0x5c>
 8000daa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dae:	4463      	add	r3, ip
 8000db0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db4:	f1c2 0220 	rsb	r2, r2, #32
 8000db8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000dbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc0:	eb43 0002 	adc.w	r0, r3, r2
 8000dc4:	bf08      	it	eq
 8000dc6:	f020 0001 	biceq.w	r0, r0, #1
 8000dca:	4770      	bx	lr
 8000dcc:	f102 0220 	add.w	r2, r2, #32
 8000dd0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ddc:	fa21 f202 	lsr.w	r2, r1, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dea:	4770      	bx	lr

08000dec <__aeabi_uldivmod>:
 8000dec:	b953      	cbnz	r3, 8000e04 <__aeabi_uldivmod+0x18>
 8000dee:	b94a      	cbnz	r2, 8000e04 <__aeabi_uldivmod+0x18>
 8000df0:	2900      	cmp	r1, #0
 8000df2:	bf08      	it	eq
 8000df4:	2800      	cmpeq	r0, #0
 8000df6:	bf1c      	itt	ne
 8000df8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000e00:	f000 b96a 	b.w	80010d8 <__aeabi_idiv0>
 8000e04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e0c:	f000 f806 	bl	8000e1c <__udivmoddi4>
 8000e10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e18:	b004      	add	sp, #16
 8000e1a:	4770      	bx	lr

08000e1c <__udivmoddi4>:
 8000e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e20:	9d08      	ldr	r5, [sp, #32]
 8000e22:	460c      	mov	r4, r1
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d14e      	bne.n	8000ec6 <__udivmoddi4+0xaa>
 8000e28:	4694      	mov	ip, r2
 8000e2a:	458c      	cmp	ip, r1
 8000e2c:	4686      	mov	lr, r0
 8000e2e:	fab2 f282 	clz	r2, r2
 8000e32:	d962      	bls.n	8000efa <__udivmoddi4+0xde>
 8000e34:	b14a      	cbz	r2, 8000e4a <__udivmoddi4+0x2e>
 8000e36:	f1c2 0320 	rsb	r3, r2, #32
 8000e3a:	4091      	lsls	r1, r2
 8000e3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000e40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e44:	4319      	orrs	r1, r3
 8000e46:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4e:	fa1f f68c 	uxth.w	r6, ip
 8000e52:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000e5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e62:	fb04 f106 	mul.w	r1, r4, r6
 8000e66:	4299      	cmp	r1, r3
 8000e68:	d90a      	bls.n	8000e80 <__udivmoddi4+0x64>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e72:	f080 8112 	bcs.w	800109a <__udivmoddi4+0x27e>
 8000e76:	4299      	cmp	r1, r3
 8000e78:	f240 810f 	bls.w	800109a <__udivmoddi4+0x27e>
 8000e7c:	3c02      	subs	r4, #2
 8000e7e:	4463      	add	r3, ip
 8000e80:	1a59      	subs	r1, r3, r1
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e8a:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e92:	fb00 f606 	mul.w	r6, r0, r6
 8000e96:	429e      	cmp	r6, r3
 8000e98:	d90a      	bls.n	8000eb0 <__udivmoddi4+0x94>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea2:	f080 80fc 	bcs.w	800109e <__udivmoddi4+0x282>
 8000ea6:	429e      	cmp	r6, r3
 8000ea8:	f240 80f9 	bls.w	800109e <__udivmoddi4+0x282>
 8000eac:	4463      	add	r3, ip
 8000eae:	3802      	subs	r0, #2
 8000eb0:	1b9b      	subs	r3, r3, r6
 8000eb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	b11d      	cbz	r5, 8000ec2 <__udivmoddi4+0xa6>
 8000eba:	40d3      	lsrs	r3, r2
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	e9c5 3200 	strd	r3, r2, [r5]
 8000ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d905      	bls.n	8000ed6 <__udivmoddi4+0xba>
 8000eca:	b10d      	cbz	r5, 8000ed0 <__udivmoddi4+0xb4>
 8000ecc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	e7f5      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8000ed6:	fab3 f183 	clz	r1, r3
 8000eda:	2900      	cmp	r1, #0
 8000edc:	d146      	bne.n	8000f6c <__udivmoddi4+0x150>
 8000ede:	42a3      	cmp	r3, r4
 8000ee0:	d302      	bcc.n	8000ee8 <__udivmoddi4+0xcc>
 8000ee2:	4290      	cmp	r0, r2
 8000ee4:	f0c0 80f0 	bcc.w	80010c8 <__udivmoddi4+0x2ac>
 8000ee8:	1a86      	subs	r6, r0, r2
 8000eea:	eb64 0303 	sbc.w	r3, r4, r3
 8000eee:	2001      	movs	r0, #1
 8000ef0:	2d00      	cmp	r5, #0
 8000ef2:	d0e6      	beq.n	8000ec2 <__udivmoddi4+0xa6>
 8000ef4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ef8:	e7e3      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8000efa:	2a00      	cmp	r2, #0
 8000efc:	f040 8090 	bne.w	8001020 <__udivmoddi4+0x204>
 8000f00:	eba1 040c 	sub.w	r4, r1, ip
 8000f04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f08:	fa1f f78c 	uxth.w	r7, ip
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f16:	fb08 4416 	mls	r4, r8, r6, r4
 8000f1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f1e:	fb07 f006 	mul.w	r0, r7, r6
 8000f22:	4298      	cmp	r0, r3
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x11c>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x11a>
 8000f30:	4298      	cmp	r0, r3
 8000f32:	f200 80cd 	bhi.w	80010d0 <__udivmoddi4+0x2b4>
 8000f36:	4626      	mov	r6, r4
 8000f38:	1a1c      	subs	r4, r3, r0
 8000f3a:	fa1f f38e 	uxth.w	r3, lr
 8000f3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f42:	fb08 4410 	mls	r4, r8, r0, r4
 8000f46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f4a:	fb00 f707 	mul.w	r7, r0, r7
 8000f4e:	429f      	cmp	r7, r3
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x148>
 8000f52:	eb1c 0303 	adds.w	r3, ip, r3
 8000f56:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f5a:	d202      	bcs.n	8000f62 <__udivmoddi4+0x146>
 8000f5c:	429f      	cmp	r7, r3
 8000f5e:	f200 80b0 	bhi.w	80010c2 <__udivmoddi4+0x2a6>
 8000f62:	4620      	mov	r0, r4
 8000f64:	1bdb      	subs	r3, r3, r7
 8000f66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f6a:	e7a5      	b.n	8000eb8 <__udivmoddi4+0x9c>
 8000f6c:	f1c1 0620 	rsb	r6, r1, #32
 8000f70:	408b      	lsls	r3, r1
 8000f72:	fa22 f706 	lsr.w	r7, r2, r6
 8000f76:	431f      	orrs	r7, r3
 8000f78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000f80:	ea43 030c 	orr.w	r3, r3, ip
 8000f84:	40f4      	lsrs	r4, r6
 8000f86:	fa00 f801 	lsl.w	r8, r0, r1
 8000f8a:	0c38      	lsrs	r0, r7, #16
 8000f8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f90:	fbb4 fef0 	udiv	lr, r4, r0
 8000f94:	fa1f fc87 	uxth.w	ip, r7
 8000f98:	fb00 441e 	mls	r4, r0, lr, r4
 8000f9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fa0:	fb0e f90c 	mul.w	r9, lr, ip
 8000fa4:	45a1      	cmp	r9, r4
 8000fa6:	fa02 f201 	lsl.w	r2, r2, r1
 8000faa:	d90a      	bls.n	8000fc2 <__udivmoddi4+0x1a6>
 8000fac:	193c      	adds	r4, r7, r4
 8000fae:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000fb2:	f080 8084 	bcs.w	80010be <__udivmoddi4+0x2a2>
 8000fb6:	45a1      	cmp	r9, r4
 8000fb8:	f240 8081 	bls.w	80010be <__udivmoddi4+0x2a2>
 8000fbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fc0:	443c      	add	r4, r7
 8000fc2:	eba4 0409 	sub.w	r4, r4, r9
 8000fc6:	fa1f f983 	uxth.w	r9, r3
 8000fca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000fce:	fb00 4413 	mls	r4, r0, r3, r4
 8000fd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fda:	45a4      	cmp	ip, r4
 8000fdc:	d907      	bls.n	8000fee <__udivmoddi4+0x1d2>
 8000fde:	193c      	adds	r4, r7, r4
 8000fe0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fe4:	d267      	bcs.n	80010b6 <__udivmoddi4+0x29a>
 8000fe6:	45a4      	cmp	ip, r4
 8000fe8:	d965      	bls.n	80010b6 <__udivmoddi4+0x29a>
 8000fea:	3b02      	subs	r3, #2
 8000fec:	443c      	add	r4, r7
 8000fee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ff2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ff6:	eba4 040c 	sub.w	r4, r4, ip
 8000ffa:	429c      	cmp	r4, r3
 8000ffc:	46ce      	mov	lr, r9
 8000ffe:	469c      	mov	ip, r3
 8001000:	d351      	bcc.n	80010a6 <__udivmoddi4+0x28a>
 8001002:	d04e      	beq.n	80010a2 <__udivmoddi4+0x286>
 8001004:	b155      	cbz	r5, 800101c <__udivmoddi4+0x200>
 8001006:	ebb8 030e 	subs.w	r3, r8, lr
 800100a:	eb64 040c 	sbc.w	r4, r4, ip
 800100e:	fa04 f606 	lsl.w	r6, r4, r6
 8001012:	40cb      	lsrs	r3, r1
 8001014:	431e      	orrs	r6, r3
 8001016:	40cc      	lsrs	r4, r1
 8001018:	e9c5 6400 	strd	r6, r4, [r5]
 800101c:	2100      	movs	r1, #0
 800101e:	e750      	b.n	8000ec2 <__udivmoddi4+0xa6>
 8001020:	f1c2 0320 	rsb	r3, r2, #32
 8001024:	fa20 f103 	lsr.w	r1, r0, r3
 8001028:	fa0c fc02 	lsl.w	ip, ip, r2
 800102c:	fa24 f303 	lsr.w	r3, r4, r3
 8001030:	4094      	lsls	r4, r2
 8001032:	430c      	orrs	r4, r1
 8001034:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001038:	fa00 fe02 	lsl.w	lr, r0, r2
 800103c:	fa1f f78c 	uxth.w	r7, ip
 8001040:	fbb3 f0f8 	udiv	r0, r3, r8
 8001044:	fb08 3110 	mls	r1, r8, r0, r3
 8001048:	0c23      	lsrs	r3, r4, #16
 800104a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800104e:	fb00 f107 	mul.w	r1, r0, r7
 8001052:	4299      	cmp	r1, r3
 8001054:	d908      	bls.n	8001068 <__udivmoddi4+0x24c>
 8001056:	eb1c 0303 	adds.w	r3, ip, r3
 800105a:	f100 36ff 	add.w	r6, r0, #4294967295
 800105e:	d22c      	bcs.n	80010ba <__udivmoddi4+0x29e>
 8001060:	4299      	cmp	r1, r3
 8001062:	d92a      	bls.n	80010ba <__udivmoddi4+0x29e>
 8001064:	3802      	subs	r0, #2
 8001066:	4463      	add	r3, ip
 8001068:	1a5b      	subs	r3, r3, r1
 800106a:	b2a4      	uxth	r4, r4
 800106c:	fbb3 f1f8 	udiv	r1, r3, r8
 8001070:	fb08 3311 	mls	r3, r8, r1, r3
 8001074:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001078:	fb01 f307 	mul.w	r3, r1, r7
 800107c:	42a3      	cmp	r3, r4
 800107e:	d908      	bls.n	8001092 <__udivmoddi4+0x276>
 8001080:	eb1c 0404 	adds.w	r4, ip, r4
 8001084:	f101 36ff 	add.w	r6, r1, #4294967295
 8001088:	d213      	bcs.n	80010b2 <__udivmoddi4+0x296>
 800108a:	42a3      	cmp	r3, r4
 800108c:	d911      	bls.n	80010b2 <__udivmoddi4+0x296>
 800108e:	3902      	subs	r1, #2
 8001090:	4464      	add	r4, ip
 8001092:	1ae4      	subs	r4, r4, r3
 8001094:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001098:	e739      	b.n	8000f0e <__udivmoddi4+0xf2>
 800109a:	4604      	mov	r4, r0
 800109c:	e6f0      	b.n	8000e80 <__udivmoddi4+0x64>
 800109e:	4608      	mov	r0, r1
 80010a0:	e706      	b.n	8000eb0 <__udivmoddi4+0x94>
 80010a2:	45c8      	cmp	r8, r9
 80010a4:	d2ae      	bcs.n	8001004 <__udivmoddi4+0x1e8>
 80010a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80010aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80010ae:	3801      	subs	r0, #1
 80010b0:	e7a8      	b.n	8001004 <__udivmoddi4+0x1e8>
 80010b2:	4631      	mov	r1, r6
 80010b4:	e7ed      	b.n	8001092 <__udivmoddi4+0x276>
 80010b6:	4603      	mov	r3, r0
 80010b8:	e799      	b.n	8000fee <__udivmoddi4+0x1d2>
 80010ba:	4630      	mov	r0, r6
 80010bc:	e7d4      	b.n	8001068 <__udivmoddi4+0x24c>
 80010be:	46d6      	mov	lr, sl
 80010c0:	e77f      	b.n	8000fc2 <__udivmoddi4+0x1a6>
 80010c2:	4463      	add	r3, ip
 80010c4:	3802      	subs	r0, #2
 80010c6:	e74d      	b.n	8000f64 <__udivmoddi4+0x148>
 80010c8:	4606      	mov	r6, r0
 80010ca:	4623      	mov	r3, r4
 80010cc:	4608      	mov	r0, r1
 80010ce:	e70f      	b.n	8000ef0 <__udivmoddi4+0xd4>
 80010d0:	3e02      	subs	r6, #2
 80010d2:	4463      	add	r3, ip
 80010d4:	e730      	b.n	8000f38 <__udivmoddi4+0x11c>
 80010d6:	bf00      	nop

080010d8 <__aeabi_idiv0>:
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop

080010dc <easyCase>:
uint32_t initDelay = 0;
uint32_t vacuumPlace = 0;

//-------------------------------------------Function Code-------------------------------------------------------//

void easyCase(){
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
	base.Base_case = registerFrame[0x01].U16;
 80010e0:	4b09      	ldr	r3, [pc, #36]	@ (8001108 <easyCase+0x2c>)
 80010e2:	885a      	ldrh	r2, [r3, #2]
 80010e4:	4b09      	ldr	r3, [pc, #36]	@ (800110c <easyCase+0x30>)
 80010e6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
	base.Vacuum_case = registerFrame[0x02].U16;
 80010ea:	4b07      	ldr	r3, [pc, #28]	@ (8001108 <easyCase+0x2c>)
 80010ec:	889a      	ldrh	r2, [r3, #4]
 80010ee:	4b07      	ldr	r3, [pc, #28]	@ (800110c <easyCase+0x30>)
 80010f0:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
	base.Gripper_case = registerFrame[0x03].U16;
 80010f4:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <easyCase+0x2c>)
 80010f6:	88da      	ldrh	r2, [r3, #6]
 80010f8:	4b04      	ldr	r3, [pc, #16]	@ (800110c <easyCase+0x30>)
 80010fa:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
}
 80010fe:	bf00      	nop
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	20001078 	.word	0x20001078
 800110c:	20000af8 	.word	0x20000af8

08001110 <Heartbeat>:

void Heartbeat(){
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
	registerFrame[0x00].U16 = 22881;
 8001114:	4b04      	ldr	r3, [pc, #16]	@ (8001128 <Heartbeat+0x18>)
 8001116:	f645 1261 	movw	r2, #22881	@ 0x5961
 800111a:	801a      	strh	r2, [r3, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20001078 	.word	0x20001078

0800112c <Routine>:

void Routine(){
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
	if(registerFrame[0x00].U16 == 18537)
 8001130:	4b29      	ldr	r3, [pc, #164]	@ (80011d8 <Routine+0xac>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	f644 0269 	movw	r2, #18537	@ 0x4869
 8001138:	4293      	cmp	r3, r2
 800113a:	d14a      	bne.n	80011d2 <Routine+0xa6>
	{
		//Gripper 0x04 not sure!?!?
		registerFrame[0x04].U16 = base.ReedStatus;   					//Gripper status 0b0010 = 0000 0000 0000 0010
 800113c:	4b27      	ldr	r3, [pc, #156]	@ (80011dc <Routine+0xb0>)
 800113e:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 8001142:	4b25      	ldr	r3, [pc, #148]	@ (80011d8 <Routine+0xac>)
 8001144:	811a      	strh	r2, [r3, #8]
		registerFrame[0x10].U16 = base.BaseStatus;							//Z-axis status 0010 = 1
 8001146:	4b25      	ldr	r3, [pc, #148]	@ (80011dc <Routine+0xb0>)
 8001148:	881a      	ldrh	r2, [r3, #0]
 800114a:	4b23      	ldr	r3, [pc, #140]	@ (80011d8 <Routine+0xac>)
 800114c:	841a      	strh	r2, [r3, #32]
		registerFrame[0x11].U16 = AMT.Linear_Position			*10;	//Z-axis position
 800114e:	4b24      	ldr	r3, [pc, #144]	@ (80011e0 <Routine+0xb4>)
 8001150:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001154:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001158:	ee67 7a87 	vmul.f32	s15, s15, s14
 800115c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001160:	ee17 3a90 	vmov	r3, s15
 8001164:	b29a      	uxth	r2, r3
 8001166:	4b1c      	ldr	r3, [pc, #112]	@ (80011d8 <Routine+0xac>)
 8001168:	845a      	strh	r2, [r3, #34]	@ 0x22
		registerFrame[0x12].U16 = fabs(AMT.Linear_Velocity)		*10;	//Z-axis speed
 800116a:	4b1d      	ldr	r3, [pc, #116]	@ (80011e0 <Routine+0xb4>)
 800116c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001170:	eef0 7ae7 	vabs.f32	s15, s15
 8001174:	ee17 0a90 	vmov	r0, s15
 8001178:	f7ff f9b2 	bl	80004e0 <__aeabi_f2d>
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	4b18      	ldr	r3, [pc, #96]	@ (80011e4 <Routine+0xb8>)
 8001182:	f7ff fa05 	bl	8000590 <__aeabi_dmul>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f7ff fcaf 	bl	8000af0 <__aeabi_d2uiz>
 8001192:	4603      	mov	r3, r0
 8001194:	b29a      	uxth	r2, r3
 8001196:	4b10      	ldr	r3, [pc, #64]	@ (80011d8 <Routine+0xac>)
 8001198:	849a      	strh	r2, [r3, #36]	@ 0x24
		registerFrame[0x13].U16 = fabs(AMT.Linear_Acceleration)	*10;	//Z-axis acceleration
 800119a:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <Routine+0xb4>)
 800119c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80011a0:	eef0 7ae7 	vabs.f32	s15, s15
 80011a4:	ee17 0a90 	vmov	r0, s15
 80011a8:	f7ff f99a 	bl	80004e0 <__aeabi_f2d>
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <Routine+0xb8>)
 80011b2:	f7ff f9ed 	bl	8000590 <__aeabi_dmul>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4610      	mov	r0, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	f7ff fc97 	bl	8000af0 <__aeabi_d2uiz>
 80011c2:	4603      	mov	r3, r0
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	4b04      	ldr	r3, [pc, #16]	@ (80011d8 <Routine+0xac>)
 80011c8:	84da      	strh	r2, [r3, #38]	@ 0x26
		registerFrame[0x40].U16 = 4								*10;	//X-axis position
 80011ca:	4b03      	ldr	r3, [pc, #12]	@ (80011d8 <Routine+0xac>)
 80011cc:	2228      	movs	r2, #40	@ 0x28
 80011ce:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
	}
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20001078 	.word	0x20001078
 80011dc:	20000af8 	.word	0x20000af8
 80011e0:	200009f0 	.word	0x200009f0
 80011e4:	40240000 	.word	0x40240000

080011e8 <Vacuum>:

void Vacuum(){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	if(registerFrame[0x02].U16 == 0b0000){
 80011ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001218 <Vacuum+0x30>)
 80011ee:	889b      	ldrh	r3, [r3, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d105      	bne.n	8001200 <Vacuum+0x18>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, RESET);			// Vacuum off
 80011f4:	2200      	movs	r2, #0
 80011f6:	2120      	movs	r1, #32
 80011f8:	4808      	ldr	r0, [pc, #32]	@ (800121c <Vacuum+0x34>)
 80011fa:	f005 fbd1 	bl	80069a0 <HAL_GPIO_WritePin>
	else if(registerFrame[0x02].U16 == 0b0001){
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, SET);			// Vacuum on


	}
}
 80011fe:	e008      	b.n	8001212 <Vacuum+0x2a>
	else if(registerFrame[0x02].U16 == 0b0001){
 8001200:	4b05      	ldr	r3, [pc, #20]	@ (8001218 <Vacuum+0x30>)
 8001202:	889b      	ldrh	r3, [r3, #4]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d104      	bne.n	8001212 <Vacuum+0x2a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, SET);			// Vacuum on
 8001208:	2201      	movs	r2, #1
 800120a:	2120      	movs	r1, #32
 800120c:	4803      	ldr	r0, [pc, #12]	@ (800121c <Vacuum+0x34>)
 800120e:	f005 fbc7 	bl	80069a0 <HAL_GPIO_WritePin>
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20001078 	.word	0x20001078
 800121c:	48000800 	.word	0x48000800

08001220 <GripperMovement>:

void GripperMovement(){
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	if(registerFrame[0x03].U16 == 0b0000){
 8001224:	4b14      	ldr	r3, [pc, #80]	@ (8001278 <GripperMovement+0x58>)
 8001226:	88db      	ldrh	r3, [r3, #6]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d10f      	bne.n	800124c <GripperMovement+0x2c>
		base.Gripper = 0;			//Gripper Movement: Backward
 800122c:	4b13      	ldr	r3, [pc, #76]	@ (800127c <GripperMovement+0x5c>)
 800122e:	2200      	movs	r2, #0
 8001230:	82da      	strh	r2, [r3, #22]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, SET);			// Backward
 8001232:	2201      	movs	r2, #1
 8001234:	2110      	movs	r1, #16
 8001236:	4812      	ldr	r0, [pc, #72]	@ (8001280 <GripperMovement+0x60>)
 8001238:	f005 fbb2 	bl	80069a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001242:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001246:	f005 fbab 	bl	80069a0 <HAL_GPIO_WritePin>
	else if(registerFrame[0x03].U16 == 0b0001){
		base.Gripper = 1;			//Gripper Movement: Forward
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);			//Forward
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
	}
}
 800124a:	e012      	b.n	8001272 <GripperMovement+0x52>
	else if(registerFrame[0x03].U16 == 0b0001){
 800124c:	4b0a      	ldr	r3, [pc, #40]	@ (8001278 <GripperMovement+0x58>)
 800124e:	88db      	ldrh	r3, [r3, #6]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d10e      	bne.n	8001272 <GripperMovement+0x52>
		base.Gripper = 1;			//Gripper Movement: Forward
 8001254:	4b09      	ldr	r3, [pc, #36]	@ (800127c <GripperMovement+0x5c>)
 8001256:	2201      	movs	r2, #1
 8001258:	82da      	strh	r2, [r3, #22]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);			//Forward
 800125a:	2200      	movs	r2, #0
 800125c:	2110      	movs	r1, #16
 800125e:	4808      	ldr	r0, [pc, #32]	@ (8001280 <GripperMovement+0x60>)
 8001260:	f005 fb9e 	bl	80069a0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 8001264:	2201      	movs	r2, #1
 8001266:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800126a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800126e:	f005 fb97 	bl	80069a0 <HAL_GPIO_WritePin>
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20001078 	.word	0x20001078
 800127c:	20000af8 	.word	0x20000af8
 8001280:	48000800 	.word	0x48000800

08001284 <SetShelves>:



void SetShelves(){
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
	base.ShelveMode = 1;
 8001288:	4b40      	ldr	r3, [pc, #256]	@ (800138c <SetShelves+0x108>)
 800128a:	2201      	movs	r2, #1
 800128c:	831a      	strh	r2, [r3, #24]
	PS2X_Reader();
 800128e:	f001 fe89 	bl	8002fa4 <PS2X_Reader>
	if(ps2.ps2RX[0] == 74){
 8001292:	4b3f      	ldr	r3, [pc, #252]	@ (8001390 <SetShelves+0x10c>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b4a      	cmp	r3, #74	@ 0x4a
 8001298:	d102      	bne.n	80012a0 <SetShelves+0x1c>
		ps2.stop = 1;
 800129a:	4b3d      	ldr	r3, [pc, #244]	@ (8001390 <SetShelves+0x10c>)
 800129c:	2201      	movs	r2, #1
 800129e:	671a      	str	r2, [r3, #112]	@ 0x70
	}
	if (ps2.stop == 1 && ps2.ps2RX[0] == 75){
 80012a0:	4b3b      	ldr	r3, [pc, #236]	@ (8001390 <SetShelves+0x10c>)
 80012a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d10b      	bne.n	80012c0 <SetShelves+0x3c>
 80012a8:	4b39      	ldr	r3, [pc, #228]	@ (8001390 <SetShelves+0x10c>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b4b      	cmp	r3, #75	@ 0x4b
 80012ae:	d107      	bne.n	80012c0 <SetShelves+0x3c>
		ps2.stop = 0;
 80012b0:	4b37      	ldr	r3, [pc, #220]	@ (8001390 <SetShelves+0x10c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	671a      	str	r2, [r3, #112]	@ 0x70
		base.MotorHome = 150;
 80012b6:	4b35      	ldr	r3, [pc, #212]	@ (800138c <SetShelves+0x108>)
 80012b8:	2296      	movs	r2, #150	@ 0x96
 80012ba:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80012be:	e005      	b.n	80012cc <SetShelves+0x48>
	}
		  else if(ps2.stop == 0){
 80012c0:	4b33      	ldr	r3, [pc, #204]	@ (8001390 <SetShelves+0x10c>)
 80012c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d101      	bne.n	80012cc <SetShelves+0x48>
			  PS2X_Reader();
 80012c8:	f001 fe6c 	bl	8002fa4 <PS2X_Reader>
	  	  }
	if (base.ShelveMode == 0)
 80012cc:	4b2f      	ldr	r3, [pc, #188]	@ (800138c <SetShelves+0x108>)
 80012ce:	8b1b      	ldrh	r3, [r3, #24]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d158      	bne.n	8001386 <SetShelves+0x102>
	{
		registerFrame[0x23].U16 = base.Shelve[0] *10; 	//Position Shelve 1
 80012d4:	4b2d      	ldr	r3, [pc, #180]	@ (800138c <SetShelves+0x108>)
 80012d6:	edd3 7a07 	vldr	s15, [r3, #28]
 80012da:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80012de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012e6:	ee17 3a90 	vmov	r3, s15
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	4b29      	ldr	r3, [pc, #164]	@ (8001394 <SetShelves+0x110>)
 80012ee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
		registerFrame[0x24].U16 = base.Shelve[1] *10;
 80012f2:	4b26      	ldr	r3, [pc, #152]	@ (800138c <SetShelves+0x108>)
 80012f4:	edd3 7a08 	vldr	s15, [r3, #32]
 80012f8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80012fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001300:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001304:	ee17 3a90 	vmov	r3, s15
 8001308:	b29a      	uxth	r2, r3
 800130a:	4b22      	ldr	r3, [pc, #136]	@ (8001394 <SetShelves+0x110>)
 800130c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
		registerFrame[0x25].U16 = base.Shelve[2] *10;
 8001310:	4b1e      	ldr	r3, [pc, #120]	@ (800138c <SetShelves+0x108>)
 8001312:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001316:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800131a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800131e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001322:	ee17 3a90 	vmov	r3, s15
 8001326:	b29a      	uxth	r2, r3
 8001328:	4b1a      	ldr	r3, [pc, #104]	@ (8001394 <SetShelves+0x110>)
 800132a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
		registerFrame[0x26].U16 = base.Shelve[3] *10;
 800132e:	4b17      	ldr	r3, [pc, #92]	@ (800138c <SetShelves+0x108>)
 8001330:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001334:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001338:	ee67 7a87 	vmul.f32	s15, s15, s14
 800133c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001340:	ee17 3a90 	vmov	r3, s15
 8001344:	b29a      	uxth	r2, r3
 8001346:	4b13      	ldr	r3, [pc, #76]	@ (8001394 <SetShelves+0x110>)
 8001348:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
		registerFrame[0x27].U16 = base.Shelve[4] *10;
 800134c:	4b0f      	ldr	r3, [pc, #60]	@ (800138c <SetShelves+0x108>)
 800134e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001352:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001356:	ee67 7a87 	vmul.f32	s15, s15, s14
 800135a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800135e:	ee17 3a90 	vmov	r3, s15
 8001362:	b29a      	uxth	r2, r3
 8001364:	4b0b      	ldr	r3, [pc, #44]	@ (8001394 <SetShelves+0x110>)
 8001366:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

		//finish
		base.BaseStatus = 0;
 800136a:	4b08      	ldr	r3, [pc, #32]	@ (800138c <SetShelves+0x108>)
 800136c:	2200      	movs	r2, #0
 800136e:	801a      	strh	r2, [r3, #0]
		registerFrame[0x01].U16 = 0;
 8001370:	4b08      	ldr	r3, [pc, #32]	@ (8001394 <SetShelves+0x110>)
 8001372:	2200      	movs	r2, #0
 8001374:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = base.BaseStatus;
 8001376:	4b05      	ldr	r3, [pc, #20]	@ (800138c <SetShelves+0x108>)
 8001378:	881a      	ldrh	r2, [r3, #0]
 800137a:	4b06      	ldr	r3, [pc, #24]	@ (8001394 <SetShelves+0x110>)
 800137c:	841a      	strh	r2, [r3, #32]
		base.Base_case = 0;
 800137e:	4b03      	ldr	r3, [pc, #12]	@ (800138c <SetShelves+0x108>)
 8001380:	2200      	movs	r2, #0
 8001382:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
	}
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000af8 	.word	0x20000af8
 8001390:	20000a40 	.word	0x20000a40
 8001394:	20001078 	.word	0x20001078

08001398 <RunPoint>:

void RunPoint(){
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	base.GoalPoint = (registerFrame[0x30].U16)/10; //Get Goal point from BaseSytem(Point Mode) that we pick/write After pressing Run Button
 800139c:	4b3e      	ldr	r3, [pc, #248]	@ (8001498 <RunPoint+0x100>)
 800139e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80013a2:	4a3e      	ldr	r2, [pc, #248]	@ (800149c <RunPoint+0x104>)
 80013a4:	fba2 2303 	umull	r2, r3, r2, r3
 80013a8:	08db      	lsrs	r3, r3, #3
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	ee07 3a90 	vmov	s15, r3
 80013b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b4:	4b3a      	ldr	r3, [pc, #232]	@ (80014a0 <RunPoint+0x108>)
 80013b6:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	elapsedTime += 0.0002;
 80013ba:	4b3a      	ldr	r3, [pc, #232]	@ (80014a4 <RunPoint+0x10c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff f88e 	bl	80004e0 <__aeabi_f2d>
 80013c4:	a330      	add	r3, pc, #192	@ (adr r3, 8001488 <RunPoint+0xf0>)
 80013c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ca:	f7fe ff2b 	bl	8000224 <__adddf3>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	f7ff fbab 	bl	8000b30 <__aeabi_d2f>
 80013da:	4603      	mov	r3, r0
 80013dc:	4a31      	ldr	r2, [pc, #196]	@ (80014a4 <RunPoint+0x10c>)
 80013de:	6013      	str	r3, [r2, #0]
	Traject(&Traj, temp_pos, base.GoalPoint);
 80013e0:	4b31      	ldr	r3, [pc, #196]	@ (80014a8 <RunPoint+0x110>)
 80013e2:	edd3 7a00 	vldr	s15, [r3]
 80013e6:	4b2e      	ldr	r3, [pc, #184]	@ (80014a0 <RunPoint+0x108>)
 80013e8:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80013ec:	eef0 0a47 	vmov.f32	s1, s14
 80013f0:	eeb0 0a67 	vmov.f32	s0, s15
 80013f4:	482d      	ldr	r0, [pc, #180]	@ (80014ac <RunPoint+0x114>)
 80013f6:	f001 ff51 	bl	800329c <Traject>
	PID_controller_cascade(&PID_pos, &PID_velo, &AMT, Traj.currentPosition);
 80013fa:	4b2c      	ldr	r3, [pc, #176]	@ (80014ac <RunPoint+0x114>)
 80013fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8001400:	eeb0 0a67 	vmov.f32	s0, s15
 8001404:	4a2a      	ldr	r2, [pc, #168]	@ (80014b0 <RunPoint+0x118>)
 8001406:	492b      	ldr	r1, [pc, #172]	@ (80014b4 <RunPoint+0x11c>)
 8001408:	482b      	ldr	r0, [pc, #172]	@ (80014b8 <RunPoint+0x120>)
 800140a:	f001 fdaf 	bl	8002f6c <PID_controller_cascade>
	base.MotorHome = PID_velo.out;
 800140e:	4b29      	ldr	r3, [pc, #164]	@ (80014b4 <RunPoint+0x11c>)
 8001410:	edd3 7a06 	vldr	s15, [r3, #24]
 8001414:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001418:	ee17 3a90 	vmov	r3, s15
 800141c:	b21a      	sxth	r2, r3
 800141e:	4b20      	ldr	r3, [pc, #128]	@ (80014a0 <RunPoint+0x108>)
 8001420:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

	// Error must less than 0.1 mm
	if(fabs(AMT.Linear_Position - base.GoalPoint) <= 0.1){
 8001424:	4b22      	ldr	r3, [pc, #136]	@ (80014b0 <RunPoint+0x118>)
 8001426:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800142a:	4b1d      	ldr	r3, [pc, #116]	@ (80014a0 <RunPoint+0x108>)
 800142c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001430:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001434:	eef0 7ae7 	vabs.f32	s15, s15
 8001438:	ee17 0a90 	vmov	r0, s15
 800143c:	f7ff f850 	bl	80004e0 <__aeabi_f2d>
 8001440:	a313      	add	r3, pc, #76	@ (adr r3, 8001490 <RunPoint+0xf8>)
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	f7ff fb1f 	bl	8000a88 <__aeabi_dcmple>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d100      	bne.n	8001452 <RunPoint+0xba>
		temp_pos = base.GoalPoint;
		base.BaseStatus = 0;
		registerFrame[0x01].U16 = 0;
		registerFrame[0x10].U16 = base.BaseStatus;
	}
}
 8001450:	e015      	b.n	800147e <RunPoint+0xe6>
		elapsedTime = 0;
 8001452:	4b14      	ldr	r3, [pc, #80]	@ (80014a4 <RunPoint+0x10c>)
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
		Traj.currentPosition = base.GoalPoint;
 800145a:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <RunPoint+0x108>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	4a13      	ldr	r2, [pc, #76]	@ (80014ac <RunPoint+0x114>)
 8001460:	6093      	str	r3, [r2, #8]
		temp_pos = base.GoalPoint;
 8001462:	4b0f      	ldr	r3, [pc, #60]	@ (80014a0 <RunPoint+0x108>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	4a10      	ldr	r2, [pc, #64]	@ (80014a8 <RunPoint+0x110>)
 8001468:	6013      	str	r3, [r2, #0]
		base.BaseStatus = 0;
 800146a:	4b0d      	ldr	r3, [pc, #52]	@ (80014a0 <RunPoint+0x108>)
 800146c:	2200      	movs	r2, #0
 800146e:	801a      	strh	r2, [r3, #0]
		registerFrame[0x01].U16 = 0;
 8001470:	4b09      	ldr	r3, [pc, #36]	@ (8001498 <RunPoint+0x100>)
 8001472:	2200      	movs	r2, #0
 8001474:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = base.BaseStatus;
 8001476:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <RunPoint+0x108>)
 8001478:	881a      	ldrh	r2, [r3, #0]
 800147a:	4b07      	ldr	r3, [pc, #28]	@ (8001498 <RunPoint+0x100>)
 800147c:	841a      	strh	r2, [r3, #32]
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	f3af 8000 	nop.w
 8001488:	eb1c432d 	.word	0xeb1c432d
 800148c:	3f2a36e2 	.word	0x3f2a36e2
 8001490:	9999999a 	.word	0x9999999a
 8001494:	3fb99999 	.word	0x3fb99999
 8001498:	20001078 	.word	0x20001078
 800149c:	cccccccd 	.word	0xcccccccd
 80014a0:	20000af8 	.word	0x20000af8
 80014a4:	20001208 	.word	0x20001208
 80014a8:	20000298 	.word	0x20000298
 80014ac:	200009dc 	.word	0x200009dc
 80014b0:	200009f0 	.word	0x200009f0
 80014b4:	20000adc 	.word	0x20000adc
 80014b8:	20000ac0 	.word	0x20000ac0
 80014bc:	00000000 	.word	0x00000000

080014c0 <SetHome>:

void SetHome() {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
	if(temp_home == 0){
 80014c4:	4b48      	ldr	r3, [pc, #288]	@ (80015e8 <SetHome+0x128>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d132      	bne.n	8001532 <SetHome+0x72>
		elapsedTime += 0.0002;
 80014cc:	4b47      	ldr	r3, [pc, #284]	@ (80015ec <SetHome+0x12c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff f805 	bl	80004e0 <__aeabi_f2d>
 80014d6:	a342      	add	r3, pc, #264	@ (adr r3, 80015e0 <SetHome+0x120>)
 80014d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014dc:	f7fe fea2 	bl	8000224 <__adddf3>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4610      	mov	r0, r2
 80014e6:	4619      	mov	r1, r3
 80014e8:	f7ff fb22 	bl	8000b30 <__aeabi_d2f>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4a3f      	ldr	r2, [pc, #252]	@ (80015ec <SetHome+0x12c>)
 80014f0:	6013      	str	r3, [r2, #0]
		Traject(&Traj, temp_pos, 612); // Update trajectory
 80014f2:	4b3f      	ldr	r3, [pc, #252]	@ (80015f0 <SetHome+0x130>)
 80014f4:	edd3 7a00 	vldr	s15, [r3]
 80014f8:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 80015f4 <SetHome+0x134>
 80014fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001500:	483d      	ldr	r0, [pc, #244]	@ (80015f8 <SetHome+0x138>)
 8001502:	f001 fecb 	bl	800329c <Traject>
		PID_controller_cascade(&PID_pos, &PID_velo, &AMT, Traj.currentPosition); // Apply PID control
 8001506:	4b3c      	ldr	r3, [pc, #240]	@ (80015f8 <SetHome+0x138>)
 8001508:	edd3 7a02 	vldr	s15, [r3, #8]
 800150c:	eeb0 0a67 	vmov.f32	s0, s15
 8001510:	4a3a      	ldr	r2, [pc, #232]	@ (80015fc <SetHome+0x13c>)
 8001512:	493b      	ldr	r1, [pc, #236]	@ (8001600 <SetHome+0x140>)
 8001514:	483b      	ldr	r0, [pc, #236]	@ (8001604 <SetHome+0x144>)
 8001516:	f001 fd29 	bl	8002f6c <PID_controller_cascade>
		base.MotorHome = PID_velo.out;
 800151a:	4b39      	ldr	r3, [pc, #228]	@ (8001600 <SetHome+0x140>)
 800151c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001520:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001524:	ee17 3a90 	vmov	r3, s15
 8001528:	b21a      	sxth	r2, r3
 800152a:	4b37      	ldr	r3, [pc, #220]	@ (8001608 <SetHome+0x148>)
 800152c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8001530:	e035      	b.n	800159e <SetHome+0xde>
	}
	else if(temp_home != 0){
 8001532:	4b2d      	ldr	r3, [pc, #180]	@ (80015e8 <SetHome+0x128>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d031      	beq.n	800159e <SetHome+0xde>
		elapsedTime += 0.0002;
 800153a:	4b2c      	ldr	r3, [pc, #176]	@ (80015ec <SetHome+0x12c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7fe ffce 	bl	80004e0 <__aeabi_f2d>
 8001544:	a326      	add	r3, pc, #152	@ (adr r3, 80015e0 <SetHome+0x120>)
 8001546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154a:	f7fe fe6b 	bl	8000224 <__adddf3>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4610      	mov	r0, r2
 8001554:	4619      	mov	r1, r3
 8001556:	f7ff faeb 	bl	8000b30 <__aeabi_d2f>
 800155a:	4603      	mov	r3, r0
 800155c:	4a23      	ldr	r2, [pc, #140]	@ (80015ec <SetHome+0x12c>)
 800155e:	6013      	str	r3, [r2, #0]
		Traject(&Traj, temp_pos, 600); // Update trajectory
 8001560:	4b23      	ldr	r3, [pc, #140]	@ (80015f0 <SetHome+0x130>)
 8001562:	edd3 7a00 	vldr	s15, [r3]
 8001566:	eddf 0a29 	vldr	s1, [pc, #164]	@ 800160c <SetHome+0x14c>
 800156a:	eeb0 0a67 	vmov.f32	s0, s15
 800156e:	4822      	ldr	r0, [pc, #136]	@ (80015f8 <SetHome+0x138>)
 8001570:	f001 fe94 	bl	800329c <Traject>
		PID_controller_cascade(&PID_pos, &PID_velo, &AMT, Traj.currentPosition); // Apply PID control
 8001574:	4b20      	ldr	r3, [pc, #128]	@ (80015f8 <SetHome+0x138>)
 8001576:	edd3 7a02 	vldr	s15, [r3, #8]
 800157a:	eeb0 0a67 	vmov.f32	s0, s15
 800157e:	4a1f      	ldr	r2, [pc, #124]	@ (80015fc <SetHome+0x13c>)
 8001580:	491f      	ldr	r1, [pc, #124]	@ (8001600 <SetHome+0x140>)
 8001582:	4820      	ldr	r0, [pc, #128]	@ (8001604 <SetHome+0x144>)
 8001584:	f001 fcf2 	bl	8002f6c <PID_controller_cascade>
		base.MotorHome = PID_velo.out;
 8001588:	4b1d      	ldr	r3, [pc, #116]	@ (8001600 <SetHome+0x140>)
 800158a:	edd3 7a06 	vldr	s15, [r3, #24]
 800158e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001592:	ee17 3a90 	vmov	r3, s15
 8001596:	b21a      	sxth	r2, r3
 8001598:	4b1b      	ldr	r3, [pc, #108]	@ (8001608 <SetHome+0x148>)
 800159a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
	}


    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET) { // Top photo limit was triggered
 800159e:	2140      	movs	r1, #64	@ 0x40
 80015a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015a4:	f005 f9e4 	bl	8006970 <HAL_GPIO_ReadPin>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d116      	bne.n	80015dc <SetHome+0x11c>
        AMT_encoder_reset(&AMT); // Reset encoder to zero or the desired home position
 80015ae:	4813      	ldr	r0, [pc, #76]	@ (80015fc <SetHome+0x13c>)
 80015b0:	f000 fd58 	bl	8002064 <AMT_encoder_reset>
        elapsedTime = 0;
 80015b4:	4b0d      	ldr	r3, [pc, #52]	@ (80015ec <SetHome+0x12c>)
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
        Traj.currentPosition = 600;
 80015bc:	4b0e      	ldr	r3, [pc, #56]	@ (80015f8 <SetHome+0x138>)
 80015be:	4a14      	ldr	r2, [pc, #80]	@ (8001610 <SetHome+0x150>)
 80015c0:	609a      	str	r2, [r3, #8]
        base.BaseStatus = 0; // Update the base status
 80015c2:	4b11      	ldr	r3, [pc, #68]	@ (8001608 <SetHome+0x148>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	801a      	strh	r2, [r3, #0]
        registerFrame[0x01].U16 = 0;
 80015c8:	4b12      	ldr	r3, [pc, #72]	@ (8001614 <SetHome+0x154>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	805a      	strh	r2, [r3, #2]
        registerFrame[0x10].U16 = base.BaseStatus;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001608 <SetHome+0x148>)
 80015d0:	881a      	ldrh	r2, [r3, #0]
 80015d2:	4b10      	ldr	r3, [pc, #64]	@ (8001614 <SetHome+0x154>)
 80015d4:	841a      	strh	r2, [r3, #32]
        temp_home = 1;
 80015d6:	4b04      	ldr	r3, [pc, #16]	@ (80015e8 <SetHome+0x128>)
 80015d8:	2201      	movs	r2, #1
 80015da:	601a      	str	r2, [r3, #0]
    }
}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	eb1c432d 	.word	0xeb1c432d
 80015e4:	3f2a36e2 	.word	0x3f2a36e2
 80015e8:	200002a0 	.word	0x200002a0
 80015ec:	20001208 	.word	0x20001208
 80015f0:	20000298 	.word	0x20000298
 80015f4:	44190000 	.word	0x44190000
 80015f8:	200009dc 	.word	0x200009dc
 80015fc:	200009f0 	.word	0x200009f0
 8001600:	20000adc 	.word	0x20000adc
 8001604:	20000ac0 	.word	0x20000ac0
 8001608:	20000af8 	.word	0x20000af8
 800160c:	44160000 	.word	0x44160000
 8001610:	44160000 	.word	0x44160000
 8001614:	20001078 	.word	0x20001078

08001618 <RunJog>:

void RunJog() {
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
    // Define Pick shelf
    base.Pick[4] = registerFrame[0x21].U16 % 10;
 800161e:	4bb7      	ldr	r3, [pc, #732]	@ (80018fc <RunJog+0x2e4>)
 8001620:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 8001624:	4bb6      	ldr	r3, [pc, #728]	@ (8001900 <RunJog+0x2e8>)
 8001626:	fba3 1302 	umull	r1, r3, r3, r2
 800162a:	08d9      	lsrs	r1, r3, #3
 800162c:	460b      	mov	r3, r1
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	440b      	add	r3, r1
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	b29a      	uxth	r2, r3
 8001638:	4bb2      	ldr	r3, [pc, #712]	@ (8001904 <RunJog+0x2ec>)
 800163a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    base.Pick[3] = ((registerFrame[0x21].U16 - base.Pick[4]) % 100) / 10;
 800163e:	4baf      	ldr	r3, [pc, #700]	@ (80018fc <RunJog+0x2e4>)
 8001640:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001644:	461a      	mov	r2, r3
 8001646:	4baf      	ldr	r3, [pc, #700]	@ (8001904 <RunJog+0x2ec>)
 8001648:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800164c:	1ad2      	subs	r2, r2, r3
 800164e:	4bae      	ldr	r3, [pc, #696]	@ (8001908 <RunJog+0x2f0>)
 8001650:	fb83 1302 	smull	r1, r3, r3, r2
 8001654:	1159      	asrs	r1, r3, #5
 8001656:	17d3      	asrs	r3, r2, #31
 8001658:	1acb      	subs	r3, r1, r3
 800165a:	2164      	movs	r1, #100	@ 0x64
 800165c:	fb01 f303 	mul.w	r3, r1, r3
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	4aaa      	ldr	r2, [pc, #680]	@ (800190c <RunJog+0x2f4>)
 8001664:	fb82 1203 	smull	r1, r2, r2, r3
 8001668:	1092      	asrs	r2, r2, #2
 800166a:	17db      	asrs	r3, r3, #31
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	b29a      	uxth	r2, r3
 8001670:	4ba4      	ldr	r3, [pc, #656]	@ (8001904 <RunJog+0x2ec>)
 8001672:	87da      	strh	r2, [r3, #62]	@ 0x3e
    base.Pick[2] = ((registerFrame[0x21].U16 % 1000) - ((base.Pick[3] * 10) + base.Pick[4])) / 100;
 8001674:	4ba1      	ldr	r3, [pc, #644]	@ (80018fc <RunJog+0x2e4>)
 8001676:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 800167a:	4aa5      	ldr	r2, [pc, #660]	@ (8001910 <RunJog+0x2f8>)
 800167c:	fba2 1203 	umull	r1, r2, r2, r3
 8001680:	0992      	lsrs	r2, r2, #6
 8001682:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001686:	fb01 f202 	mul.w	r2, r1, r2
 800168a:	1a9b      	subs	r3, r3, r2
 800168c:	b29b      	uxth	r3, r3
 800168e:	4619      	mov	r1, r3
 8001690:	4b9c      	ldr	r3, [pc, #624]	@ (8001904 <RunJog+0x2ec>)
 8001692:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001694:	461a      	mov	r2, r3
 8001696:	4613      	mov	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4413      	add	r3, r2
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	461a      	mov	r2, r3
 80016a0:	4b98      	ldr	r3, [pc, #608]	@ (8001904 <RunJog+0x2ec>)
 80016a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80016a6:	4413      	add	r3, r2
 80016a8:	1acb      	subs	r3, r1, r3
 80016aa:	4a97      	ldr	r2, [pc, #604]	@ (8001908 <RunJog+0x2f0>)
 80016ac:	fb82 1203 	smull	r1, r2, r2, r3
 80016b0:	1152      	asrs	r2, r2, #5
 80016b2:	17db      	asrs	r3, r3, #31
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	4b92      	ldr	r3, [pc, #584]	@ (8001904 <RunJog+0x2ec>)
 80016ba:	879a      	strh	r2, [r3, #60]	@ 0x3c
    base.Pick[1] = ((registerFrame[0x21].U16 % 10000) - (((base.Pick[2] * 100) + (base.Pick[3] * 10) + base.Pick[4]))) / 1000;
 80016bc:	4b8f      	ldr	r3, [pc, #572]	@ (80018fc <RunJog+0x2e4>)
 80016be:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80016c2:	4a94      	ldr	r2, [pc, #592]	@ (8001914 <RunJog+0x2fc>)
 80016c4:	fba2 1203 	umull	r1, r2, r2, r3
 80016c8:	0b52      	lsrs	r2, r2, #13
 80016ca:	f242 7110 	movw	r1, #10000	@ 0x2710
 80016ce:	fb01 f202 	mul.w	r2, r1, r2
 80016d2:	1a9b      	subs	r3, r3, r2
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	4b8a      	ldr	r3, [pc, #552]	@ (8001904 <RunJog+0x2ec>)
 80016da:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80016dc:	461a      	mov	r2, r3
 80016de:	2364      	movs	r3, #100	@ 0x64
 80016e0:	fb03 f202 	mul.w	r2, r3, r2
 80016e4:	4b87      	ldr	r3, [pc, #540]	@ (8001904 <RunJog+0x2ec>)
 80016e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80016e8:	4619      	mov	r1, r3
 80016ea:	460b      	mov	r3, r1
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	440b      	add	r3, r1
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	4413      	add	r3, r2
 80016f4:	4a83      	ldr	r2, [pc, #524]	@ (8001904 <RunJog+0x2ec>)
 80016f6:	f8b2 2040 	ldrh.w	r2, [r2, #64]	@ 0x40
 80016fa:	4413      	add	r3, r2
 80016fc:	1ac3      	subs	r3, r0, r3
 80016fe:	4a84      	ldr	r2, [pc, #528]	@ (8001910 <RunJog+0x2f8>)
 8001700:	fb82 1203 	smull	r1, r2, r2, r3
 8001704:	1192      	asrs	r2, r2, #6
 8001706:	17db      	asrs	r3, r3, #31
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	b29a      	uxth	r2, r3
 800170c:	4b7d      	ldr	r3, [pc, #500]	@ (8001904 <RunJog+0x2ec>)
 800170e:	875a      	strh	r2, [r3, #58]	@ 0x3a
    base.Pick[0] = (registerFrame[0x21].U16 - ((base.Pick[1] * 1000 + base.Pick[2] * 100 + base.Pick[3] * 10 + base.Pick[4]))) / 10000;
 8001710:	4b7a      	ldr	r3, [pc, #488]	@ (80018fc <RunJog+0x2e4>)
 8001712:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001716:	4618      	mov	r0, r3
 8001718:	4b7a      	ldr	r3, [pc, #488]	@ (8001904 <RunJog+0x2ec>)
 800171a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 800171c:	461a      	mov	r2, r3
 800171e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001722:	fb03 f202 	mul.w	r2, r3, r2
 8001726:	4b77      	ldr	r3, [pc, #476]	@ (8001904 <RunJog+0x2ec>)
 8001728:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800172a:	4619      	mov	r1, r3
 800172c:	2364      	movs	r3, #100	@ 0x64
 800172e:	fb01 f303 	mul.w	r3, r1, r3
 8001732:	441a      	add	r2, r3
 8001734:	4b73      	ldr	r3, [pc, #460]	@ (8001904 <RunJog+0x2ec>)
 8001736:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001738:	4619      	mov	r1, r3
 800173a:	460b      	mov	r3, r1
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	440b      	add	r3, r1
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	4413      	add	r3, r2
 8001744:	4a6f      	ldr	r2, [pc, #444]	@ (8001904 <RunJog+0x2ec>)
 8001746:	f8b2 2040 	ldrh.w	r2, [r2, #64]	@ 0x40
 800174a:	4413      	add	r3, r2
 800174c:	1ac3      	subs	r3, r0, r3
 800174e:	4a72      	ldr	r2, [pc, #456]	@ (8001918 <RunJog+0x300>)
 8001750:	fb82 1203 	smull	r1, r2, r2, r3
 8001754:	1312      	asrs	r2, r2, #12
 8001756:	17db      	asrs	r3, r3, #31
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	b29a      	uxth	r2, r3
 800175c:	4b69      	ldr	r3, [pc, #420]	@ (8001904 <RunJog+0x2ec>)
 800175e:	871a      	strh	r2, [r3, #56]	@ 0x38

    // Define Place shelf
    base.Place[4] = registerFrame[0x22].U16 % 10;
 8001760:	4b66      	ldr	r3, [pc, #408]	@ (80018fc <RunJog+0x2e4>)
 8001762:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8001766:	4b66      	ldr	r3, [pc, #408]	@ (8001900 <RunJog+0x2e8>)
 8001768:	fba3 1302 	umull	r1, r3, r3, r2
 800176c:	08d9      	lsrs	r1, r3, #3
 800176e:	460b      	mov	r3, r1
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	440b      	add	r3, r1
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	b29a      	uxth	r2, r3
 800177a:	4b62      	ldr	r3, [pc, #392]	@ (8001904 <RunJog+0x2ec>)
 800177c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    base.Place[3] = ((registerFrame[0x22].U16 - base.Place[4]) % 100) / 10;
 8001780:	4b5e      	ldr	r3, [pc, #376]	@ (80018fc <RunJog+0x2e4>)
 8001782:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001786:	461a      	mov	r2, r3
 8001788:	4b5e      	ldr	r3, [pc, #376]	@ (8001904 <RunJog+0x2ec>)
 800178a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800178e:	1ad2      	subs	r2, r2, r3
 8001790:	4b5d      	ldr	r3, [pc, #372]	@ (8001908 <RunJog+0x2f0>)
 8001792:	fb83 1302 	smull	r1, r3, r3, r2
 8001796:	1159      	asrs	r1, r3, #5
 8001798:	17d3      	asrs	r3, r2, #31
 800179a:	1acb      	subs	r3, r1, r3
 800179c:	2164      	movs	r1, #100	@ 0x64
 800179e:	fb01 f303 	mul.w	r3, r1, r3
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	4a59      	ldr	r2, [pc, #356]	@ (800190c <RunJog+0x2f4>)
 80017a6:	fb82 1203 	smull	r1, r2, r2, r3
 80017aa:	1092      	asrs	r2, r2, #2
 80017ac:	17db      	asrs	r3, r3, #31
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	4b54      	ldr	r3, [pc, #336]	@ (8001904 <RunJog+0x2ec>)
 80017b4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    base.Place[2] = ((registerFrame[0x22].U16 % 1000) - ((base.Place[3] * 10) + base.Place[4])) / 100;
 80017b8:	4b50      	ldr	r3, [pc, #320]	@ (80018fc <RunJog+0x2e4>)
 80017ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80017be:	4a54      	ldr	r2, [pc, #336]	@ (8001910 <RunJog+0x2f8>)
 80017c0:	fba2 1203 	umull	r1, r2, r2, r3
 80017c4:	0992      	lsrs	r2, r2, #6
 80017c6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80017ca:	fb01 f202 	mul.w	r2, r1, r2
 80017ce:	1a9b      	subs	r3, r3, r2
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	4619      	mov	r1, r3
 80017d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001904 <RunJog+0x2ec>)
 80017d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80017da:	461a      	mov	r2, r3
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	461a      	mov	r2, r3
 80017e6:	4b47      	ldr	r3, [pc, #284]	@ (8001904 <RunJog+0x2ec>)
 80017e8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80017ec:	4413      	add	r3, r2
 80017ee:	1acb      	subs	r3, r1, r3
 80017f0:	4a45      	ldr	r2, [pc, #276]	@ (8001908 <RunJog+0x2f0>)
 80017f2:	fb82 1203 	smull	r1, r2, r2, r3
 80017f6:	1152      	asrs	r2, r2, #5
 80017f8:	17db      	asrs	r3, r3, #31
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	4b41      	ldr	r3, [pc, #260]	@ (8001904 <RunJog+0x2ec>)
 8001800:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    base.Place[1] = ((registerFrame[0x22].U16 % 10000) - (((base.Place[2] * 100) + (base.Place[3] * 10) + base.Place[4]))) / 1000;
 8001804:	4b3d      	ldr	r3, [pc, #244]	@ (80018fc <RunJog+0x2e4>)
 8001806:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800180a:	4a42      	ldr	r2, [pc, #264]	@ (8001914 <RunJog+0x2fc>)
 800180c:	fba2 1203 	umull	r1, r2, r2, r3
 8001810:	0b52      	lsrs	r2, r2, #13
 8001812:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001816:	fb01 f202 	mul.w	r2, r1, r2
 800181a:	1a9b      	subs	r3, r3, r2
 800181c:	b29b      	uxth	r3, r3
 800181e:	4618      	mov	r0, r3
 8001820:	4b38      	ldr	r3, [pc, #224]	@ (8001904 <RunJog+0x2ec>)
 8001822:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001826:	461a      	mov	r2, r3
 8001828:	2364      	movs	r3, #100	@ 0x64
 800182a:	fb03 f202 	mul.w	r2, r3, r2
 800182e:	4b35      	ldr	r3, [pc, #212]	@ (8001904 <RunJog+0x2ec>)
 8001830:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001834:	4619      	mov	r1, r3
 8001836:	460b      	mov	r3, r1
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	440b      	add	r3, r1
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	4413      	add	r3, r2
 8001840:	4a30      	ldr	r2, [pc, #192]	@ (8001904 <RunJog+0x2ec>)
 8001842:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 8001846:	4413      	add	r3, r2
 8001848:	1ac3      	subs	r3, r0, r3
 800184a:	4a31      	ldr	r2, [pc, #196]	@ (8001910 <RunJog+0x2f8>)
 800184c:	fb82 1203 	smull	r1, r2, r2, r3
 8001850:	1192      	asrs	r2, r2, #6
 8001852:	17db      	asrs	r3, r3, #31
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	b29a      	uxth	r2, r3
 8001858:	4b2a      	ldr	r3, [pc, #168]	@ (8001904 <RunJog+0x2ec>)
 800185a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    base.Place[0] = (registerFrame[0x22].U16 - ((base.Place[1] * 1000 + base.Place[2] * 100 + base.Place[3] * 10 + base.Place[4]))) / 10000;
 800185e:	4b27      	ldr	r3, [pc, #156]	@ (80018fc <RunJog+0x2e4>)
 8001860:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001864:	4618      	mov	r0, r3
 8001866:	4b27      	ldr	r3, [pc, #156]	@ (8001904 <RunJog+0x2ec>)
 8001868:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800186c:	461a      	mov	r2, r3
 800186e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001872:	fb03 f202 	mul.w	r2, r3, r2
 8001876:	4b23      	ldr	r3, [pc, #140]	@ (8001904 <RunJog+0x2ec>)
 8001878:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800187c:	4619      	mov	r1, r3
 800187e:	2364      	movs	r3, #100	@ 0x64
 8001880:	fb01 f303 	mul.w	r3, r1, r3
 8001884:	441a      	add	r2, r3
 8001886:	4b1f      	ldr	r3, [pc, #124]	@ (8001904 <RunJog+0x2ec>)
 8001888:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800188c:	4619      	mov	r1, r3
 800188e:	460b      	mov	r3, r1
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	440b      	add	r3, r1
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	4413      	add	r3, r2
 8001898:	4a1a      	ldr	r2, [pc, #104]	@ (8001904 <RunJog+0x2ec>)
 800189a:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 800189e:	4413      	add	r3, r2
 80018a0:	1ac3      	subs	r3, r0, r3
 80018a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001918 <RunJog+0x300>)
 80018a4:	fb82 1203 	smull	r1, r2, r2, r3
 80018a8:	1312      	asrs	r2, r2, #12
 80018aa:	17db      	asrs	r3, r3, #31
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	4b14      	ldr	r3, [pc, #80]	@ (8001904 <RunJog+0x2ec>)
 80018b2:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

    // Manage the jog operation using a state machine
	if(base.Vacuum == 0){
 80018b6:	4b13      	ldr	r3, [pc, #76]	@ (8001904 <RunJog+0x2ec>)
 80018b8:	8a9b      	ldrh	r3, [r3, #20]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d104      	bne.n	80018c8 <RunJog+0x2b0>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, RESET);			// Vacuum off
 80018be:	2200      	movs	r2, #0
 80018c0:	2120      	movs	r1, #32
 80018c2:	4816      	ldr	r0, [pc, #88]	@ (800191c <RunJog+0x304>)
 80018c4:	f005 f86c 	bl	80069a0 <HAL_GPIO_WritePin>
	}
	if(base.Vacuum == 1){
 80018c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001904 <RunJog+0x2ec>)
 80018ca:	8a9b      	ldrh	r3, [r3, #20]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d104      	bne.n	80018da <RunJog+0x2c2>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, SET);			// Vacuum on
 80018d0:	2201      	movs	r2, #1
 80018d2:	2120      	movs	r1, #32
 80018d4:	4811      	ldr	r0, [pc, #68]	@ (800191c <RunJog+0x304>)
 80018d6:	f005 f863 	bl	80069a0 <HAL_GPIO_WritePin>
	}
    switch (internalState) {
 80018da:	4b11      	ldr	r3, [pc, #68]	@ (8001920 <RunJog+0x308>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b03      	cmp	r3, #3
 80018e0:	f200 821c 	bhi.w	8001d1c <RunJog+0x704>
 80018e4:	a201      	add	r2, pc, #4	@ (adr r2, 80018ec <RunJog+0x2d4>)
 80018e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ea:	bf00      	nop
 80018ec:	08001925 	.word	0x08001925
 80018f0:	08001add 	.word	0x08001add
 80018f4:	08001aff 	.word	0x08001aff
 80018f8:	08001ceb 	.word	0x08001ceb
 80018fc:	20001078 	.word	0x20001078
 8001900:	cccccccd 	.word	0xcccccccd
 8001904:	20000af8 	.word	0x20000af8
 8001908:	51eb851f 	.word	0x51eb851f
 800190c:	66666667 	.word	0x66666667
 8001910:	10624dd3 	.word	0x10624dd3
 8001914:	d1b71759 	.word	0xd1b71759
 8001918:	68db8bad 	.word	0x68db8bad
 800191c:	48000800 	.word	0x48000800
 8001920:	200002a4 	.word	0x200002a4
        case STATE_CASE_4:
            if (fuCount == 5) {
 8001924:	4baa      	ldr	r3, [pc, #680]	@ (8001bd0 <RunJog+0x5b8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b05      	cmp	r3, #5
 800192a:	d11c      	bne.n	8001966 <RunJog+0x34e>
                base.BaseStatus = 0;
 800192c:	4ba9      	ldr	r3, [pc, #676]	@ (8001bd4 <RunJog+0x5bc>)
 800192e:	2200      	movs	r2, #0
 8001930:	801a      	strh	r2, [r3, #0]
                registerFrame[0x01].U16 = base.BaseStatus;
 8001932:	4ba8      	ldr	r3, [pc, #672]	@ (8001bd4 <RunJog+0x5bc>)
 8001934:	881a      	ldrh	r2, [r3, #0]
 8001936:	4ba8      	ldr	r3, [pc, #672]	@ (8001bd8 <RunJog+0x5c0>)
 8001938:	805a      	strh	r2, [r3, #2]
                registerFrame[0x10].U16 = 0;
 800193a:	4ba7      	ldr	r3, [pc, #668]	@ (8001bd8 <RunJog+0x5c0>)
 800193c:	2200      	movs	r2, #0
 800193e:	841a      	strh	r2, [r3, #32]
                base.MotorHome = 150;
 8001940:	4ba4      	ldr	r3, [pc, #656]	@ (8001bd4 <RunJog+0x5bc>)
 8001942:	2296      	movs	r2, #150	@ 0x96
 8001944:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
                internalState = STATE_DELAY_AFTER_4;
 8001948:	4ba4      	ldr	r3, [pc, #656]	@ (8001bdc <RunJog+0x5c4>)
 800194a:	2201      	movs	r2, #1
 800194c:	701a      	strb	r2, [r3, #0]
                delayStartTime = HAL_GetTick(); // Record the start time for delay
 800194e:	f003 f93f 	bl	8004bd0 <HAL_GetTick>
 8001952:	4603      	mov	r3, r0
 8001954:	4aa2      	ldr	r2, [pc, #648]	@ (8001be0 <RunJog+0x5c8>)
 8001956:	6013      	str	r3, [r2, #0]
                fuCount = 0;
 8001958:	4b9d      	ldr	r3, [pc, #628]	@ (8001bd0 <RunJog+0x5b8>)
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
                base.Vacuum = 0;
 800195e:	4b9d      	ldr	r3, [pc, #628]	@ (8001bd4 <RunJog+0x5bc>)
 8001960:	2200      	movs	r2, #0
 8001962:	829a      	strh	r2, [r3, #20]
                break;
 8001964:	e1da      	b.n	8001d1c <RunJog+0x704>
            }

            // Calculate the target position for picking
            float pickTarget = base.Shelve[base.Pick[fuCount] - 1] + 4	;
 8001966:	4b9a      	ldr	r3, [pc, #616]	@ (8001bd0 <RunJog+0x5b8>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a9a      	ldr	r2, [pc, #616]	@ (8001bd4 <RunJog+0x5bc>)
 800196c:	331c      	adds	r3, #28
 800196e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001972:	3b01      	subs	r3, #1
 8001974:	4a97      	ldr	r2, [pc, #604]	@ (8001bd4 <RunJog+0x5bc>)
 8001976:	3306      	adds	r3, #6
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	3304      	adds	r3, #4
 800197e:	edd3 7a00 	vldr	s15, [r3]
 8001982:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001986:	ee77 7a87 	vadd.f32	s15, s15, s14
 800198a:	edc7 7a00 	vstr	s15, [r7]
            elapsedTime += 0.0002;
 800198e:	4b95      	ldr	r3, [pc, #596]	@ (8001be4 <RunJog+0x5cc>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fda4 	bl	80004e0 <__aeabi_f2d>
 8001998:	a38b      	add	r3, pc, #556	@ (adr r3, 8001bc8 <RunJog+0x5b0>)
 800199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199e:	f7fe fc41 	bl	8000224 <__adddf3>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4610      	mov	r0, r2
 80019a8:	4619      	mov	r1, r3
 80019aa:	f7ff f8c1 	bl	8000b30 <__aeabi_d2f>
 80019ae:	4603      	mov	r3, r0
 80019b0:	4a8c      	ldr	r2, [pc, #560]	@ (8001be4 <RunJog+0x5cc>)
 80019b2:	6013      	str	r3, [r2, #0]
            Traject(&Traj, temp_pos, pickTarget); // Update trajectory
 80019b4:	4b8c      	ldr	r3, [pc, #560]	@ (8001be8 <RunJog+0x5d0>)
 80019b6:	edd3 7a00 	vldr	s15, [r3]
 80019ba:	edd7 0a00 	vldr	s1, [r7]
 80019be:	eeb0 0a67 	vmov.f32	s0, s15
 80019c2:	488a      	ldr	r0, [pc, #552]	@ (8001bec <RunJog+0x5d4>)
 80019c4:	f001 fc6a 	bl	800329c <Traject>
            PID_controller_cascade(&PID_pos, &PID_velo, &AMT, Traj.currentPosition); // Apply PID control
 80019c8:	4b88      	ldr	r3, [pc, #544]	@ (8001bec <RunJog+0x5d4>)
 80019ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80019ce:	eeb0 0a67 	vmov.f32	s0, s15
 80019d2:	4a87      	ldr	r2, [pc, #540]	@ (8001bf0 <RunJog+0x5d8>)
 80019d4:	4987      	ldr	r1, [pc, #540]	@ (8001bf4 <RunJog+0x5dc>)
 80019d6:	4888      	ldr	r0, [pc, #544]	@ (8001bf8 <RunJog+0x5e0>)
 80019d8:	f001 fac8 	bl	8002f6c <PID_controller_cascade>
            base.MotorHome = PID_velo.out;
 80019dc:	4b85      	ldr	r3, [pc, #532]	@ (8001bf4 <RunJog+0x5dc>)
 80019de:	edd3 7a06 	vldr	s15, [r3, #24]
 80019e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019e6:	ee17 3a90 	vmov	r3, s15
 80019ea:	b21a      	sxth	r2, r3
 80019ec:	4b79      	ldr	r3, [pc, #484]	@ (8001bd4 <RunJog+0x5bc>)
 80019ee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
            // Check if the position is close enough to the target
            if (fabs(AMT.Linear_Position - pickTarget) < 1) {
 80019f2:	4b7f      	ldr	r3, [pc, #508]	@ (8001bf0 <RunJog+0x5d8>)
 80019f4:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 80019f8:	edd7 7a00 	vldr	s15, [r7]
 80019fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a00:	eef0 7ae7 	vabs.f32	s15, s15
 8001a04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001a08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a10:	d400      	bmi.n	8001a14 <RunJog+0x3fc>
                    internalState = STATE_CASE_8; // Move to next state
                    initDelay = 0;
                    temp_cnt = 0;
                }
            }
            break;
 8001a12:	e17c      	b.n	8001d0e <RunJog+0x6f6>
            	base.Vacuum = 1;
 8001a14:	4b6f      	ldr	r3, [pc, #444]	@ (8001bd4 <RunJog+0x5bc>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	829a      	strh	r2, [r3, #20]
            	if(temp_cnt != 1){
 8001a1a:	4b78      	ldr	r3, [pc, #480]	@ (8001bfc <RunJog+0x5e4>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d00b      	beq.n	8001a3a <RunJog+0x422>
            		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2110      	movs	r1, #16
 8001a26:	4876      	ldr	r0, [pc, #472]	@ (8001c00 <RunJog+0x5e8>)
 8001a28:	f004 ffba 	bl	80069a0 <HAL_GPIO_WritePin>
            		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a36:	f004 ffb3 	bl	80069a0 <HAL_GPIO_WritePin>
                if (temp_cnt == 0 && base.ReedStatus == 1) {
 8001a3a:	4b70      	ldr	r3, [pc, #448]	@ (8001bfc <RunJog+0x5e4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d128      	bne.n	8001a94 <RunJog+0x47c>
 8001a42:	4b64      	ldr	r3, [pc, #400]	@ (8001bd4 <RunJog+0x5bc>)
 8001a44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d123      	bne.n	8001a94 <RunJog+0x47c>
                    if (initDelay == 0){
 8001a4c:	4b6d      	ldr	r3, [pc, #436]	@ (8001c04 <RunJog+0x5ec>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d107      	bne.n	8001a64 <RunJog+0x44c>
                    	pushDelay = HAL_GetTick();
 8001a54:	f003 f8bc 	bl	8004bd0 <HAL_GetTick>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	4a6b      	ldr	r2, [pc, #428]	@ (8001c08 <RunJog+0x5f0>)
 8001a5c:	6013      	str	r3, [r2, #0]
                    	initDelay = 1;
 8001a5e:	4b69      	ldr	r3, [pc, #420]	@ (8001c04 <RunJog+0x5ec>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	601a      	str	r2, [r3, #0]
					if (HAL_GetTick() - pushDelay >= 250){
 8001a64:	f003 f8b4 	bl	8004bd0 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	4b67      	ldr	r3, [pc, #412]	@ (8001c08 <RunJog+0x5f0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2bf9      	cmp	r3, #249	@ 0xf9
 8001a72:	d932      	bls.n	8001ada <RunJog+0x4c2>
	            		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, SET);			// Backward
 8001a74:	2201      	movs	r2, #1
 8001a76:	2110      	movs	r1, #16
 8001a78:	4861      	ldr	r0, [pc, #388]	@ (8001c00 <RunJog+0x5e8>)
 8001a7a:	f004 ff91 	bl	80069a0 <HAL_GPIO_WritePin>
	            		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a88:	f004 ff8a 	bl	80069a0 <HAL_GPIO_WritePin>
	            		temp_cnt = 1;
 8001a8c:	4b5b      	ldr	r3, [pc, #364]	@ (8001bfc <RunJog+0x5e4>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	601a      	str	r2, [r3, #0]
					if (HAL_GetTick() - pushDelay >= 250){
 8001a92:	e022      	b.n	8001ada <RunJog+0x4c2>
                } else if (temp_cnt == 1 && base.ReedStatus == 2) {
 8001a94:	4b59      	ldr	r3, [pc, #356]	@ (8001bfc <RunJog+0x5e4>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	f040 8138 	bne.w	8001d0e <RunJog+0x6f6>
 8001a9e:	4b4d      	ldr	r3, [pc, #308]	@ (8001bd4 <RunJog+0x5bc>)
 8001aa0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	f040 8132 	bne.w	8001d0e <RunJog+0x6f6>
                    elapsedTime = 0;
 8001aaa:	4b4e      	ldr	r3, [pc, #312]	@ (8001be4 <RunJog+0x5cc>)
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
                    temp_pos = AMT.Linear_Position;
 8001ab2:	4b4f      	ldr	r3, [pc, #316]	@ (8001bf0 <RunJog+0x5d8>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab6:	4a4c      	ldr	r2, [pc, #304]	@ (8001be8 <RunJog+0x5d0>)
 8001ab8:	6013      	str	r3, [r2, #0]
                    base.runJogMode = 1;
 8001aba:	4b46      	ldr	r3, [pc, #280]	@ (8001bd4 <RunJog+0x5bc>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	635a      	str	r2, [r3, #52]	@ 0x34
                    Traj.currentPosition = pickTarget;
 8001ac0:	4a4a      	ldr	r2, [pc, #296]	@ (8001bec <RunJog+0x5d4>)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	6093      	str	r3, [r2, #8]
                    internalState = STATE_CASE_8; // Move to next state
 8001ac6:	4b45      	ldr	r3, [pc, #276]	@ (8001bdc <RunJog+0x5c4>)
 8001ac8:	2202      	movs	r2, #2
 8001aca:	701a      	strb	r2, [r3, #0]
                    initDelay = 0;
 8001acc:	4b4d      	ldr	r3, [pc, #308]	@ (8001c04 <RunJog+0x5ec>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
                    temp_cnt = 0;
 8001ad2:	4b4a      	ldr	r3, [pc, #296]	@ (8001bfc <RunJog+0x5e4>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
            break;
 8001ad8:	e119      	b.n	8001d0e <RunJog+0x6f6>
 8001ada:	e118      	b.n	8001d0e <RunJog+0x6f6>

        case STATE_DELAY_AFTER_4:
        	temp_cnt = 0;
 8001adc:	4b47      	ldr	r3, [pc, #284]	@ (8001bfc <RunJog+0x5e4>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
            if (HAL_GetTick() - delayStartTime >= 500) { // Delay of 1 second
 8001ae2:	f003 f875 	bl	8004bd0 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	4b3d      	ldr	r3, [pc, #244]	@ (8001be0 <RunJog+0x5c8>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001af2:	f0c0 810e 	bcc.w	8001d12 <RunJog+0x6fa>
                internalState = STATE_CASE_4; // Return to pick state after delay
 8001af6:	4b39      	ldr	r3, [pc, #228]	@ (8001bdc <RunJog+0x5c4>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001afc:	e109      	b.n	8001d12 <RunJog+0x6fa>

        case STATE_CASE_8:
            // Calculate the target position for placing
            float placeTarget = base.Shelve[base.Place[fuCount] - 1] + 10;
 8001afe:	4b34      	ldr	r3, [pc, #208]	@ (8001bd0 <RunJog+0x5b8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a34      	ldr	r2, [pc, #208]	@ (8001bd4 <RunJog+0x5bc>)
 8001b04:	3320      	adds	r3, #32
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	4413      	add	r3, r2
 8001b0a:	885b      	ldrh	r3, [r3, #2]
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	4a31      	ldr	r2, [pc, #196]	@ (8001bd4 <RunJog+0x5bc>)
 8001b10:	3306      	adds	r3, #6
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	3304      	adds	r3, #4
 8001b18:	edd3 7a00 	vldr	s15, [r3]
 8001b1c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001b20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b24:	edc7 7a01 	vstr	s15, [r7, #4]
            elapsedTime += 0.0002;
 8001b28:	4b2e      	ldr	r3, [pc, #184]	@ (8001be4 <RunJog+0x5cc>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fcd7 	bl	80004e0 <__aeabi_f2d>
 8001b32:	a325      	add	r3, pc, #148	@ (adr r3, 8001bc8 <RunJog+0x5b0>)
 8001b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b38:	f7fe fb74 	bl	8000224 <__adddf3>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4610      	mov	r0, r2
 8001b42:	4619      	mov	r1, r3
 8001b44:	f7fe fff4 	bl	8000b30 <__aeabi_d2f>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	4a26      	ldr	r2, [pc, #152]	@ (8001be4 <RunJog+0x5cc>)
 8001b4c:	6013      	str	r3, [r2, #0]
            Traject(&Traj, temp_pos, placeTarget); // Update trajectory
 8001b4e:	4b26      	ldr	r3, [pc, #152]	@ (8001be8 <RunJog+0x5d0>)
 8001b50:	edd3 7a00 	vldr	s15, [r3]
 8001b54:	edd7 0a01 	vldr	s1, [r7, #4]
 8001b58:	eeb0 0a67 	vmov.f32	s0, s15
 8001b5c:	4823      	ldr	r0, [pc, #140]	@ (8001bec <RunJog+0x5d4>)
 8001b5e:	f001 fb9d 	bl	800329c <Traject>
            PID_controller_cascade(&PID_pos, &PID_velo, &AMT, Traj.currentPosition); // Apply PID control
 8001b62:	4b22      	ldr	r3, [pc, #136]	@ (8001bec <RunJog+0x5d4>)
 8001b64:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b68:	eeb0 0a67 	vmov.f32	s0, s15
 8001b6c:	4a20      	ldr	r2, [pc, #128]	@ (8001bf0 <RunJog+0x5d8>)
 8001b6e:	4921      	ldr	r1, [pc, #132]	@ (8001bf4 <RunJog+0x5dc>)
 8001b70:	4821      	ldr	r0, [pc, #132]	@ (8001bf8 <RunJog+0x5e0>)
 8001b72:	f001 f9fb 	bl	8002f6c <PID_controller_cascade>
            base.MotorHome = PID_velo.out;
 8001b76:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf4 <RunJog+0x5dc>)
 8001b78:	edd3 7a06 	vldr	s15, [r3, #24]
 8001b7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b80:	ee17 3a90 	vmov	r3, s15
 8001b84:	b21a      	sxth	r2, r3
 8001b86:	4b13      	ldr	r3, [pc, #76]	@ (8001bd4 <RunJog+0x5bc>)
 8001b88:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
            if(vacuumPlace == 0){
 8001b8c:	4b1f      	ldr	r3, [pc, #124]	@ (8001c0c <RunJog+0x5f4>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d103      	bne.n	8001b9c <RunJog+0x584>
            	base.Vacuum = 1;
 8001b94:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd4 <RunJog+0x5bc>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	829a      	strh	r2, [r3, #20]
 8001b9a:	e002      	b.n	8001ba2 <RunJog+0x58a>
            }
            else{base.Vacuum = 0;}
 8001b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd4 <RunJog+0x5bc>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	829a      	strh	r2, [r3, #20]
            // Check if the position is close enough to the target
            if (fabs(AMT.Linear_Position - placeTarget) < 1) {
 8001ba2:	4b13      	ldr	r3, [pc, #76]	@ (8001bf0 <RunJog+0x5d8>)
 8001ba4:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8001ba8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bb0:	eef0 7ae7 	vabs.f32	s15, s15
 8001bb4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001bb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc0:	d426      	bmi.n	8001c10 <RunJog+0x5f8>
                   	temp_cnt = 0;
					initDelay = 0;
					vacuumPlace = 0;
                }
            }
            break;
 8001bc2:	e0a8      	b.n	8001d16 <RunJog+0x6fe>
 8001bc4:	f3af 8000 	nop.w
 8001bc8:	eb1c432d 	.word	0xeb1c432d
 8001bcc:	3f2a36e2 	.word	0x3f2a36e2
 8001bd0:	20000294 	.word	0x20000294
 8001bd4:	20000af8 	.word	0x20000af8
 8001bd8:	20001078 	.word	0x20001078
 8001bdc:	200002a4 	.word	0x200002a4
 8001be0:	200002a8 	.word	0x200002a8
 8001be4:	20001208 	.word	0x20001208
 8001be8:	20000298 	.word	0x20000298
 8001bec:	200009dc 	.word	0x200009dc
 8001bf0:	200009f0 	.word	0x200009f0
 8001bf4:	20000adc 	.word	0x20000adc
 8001bf8:	20000ac0 	.word	0x20000ac0
 8001bfc:	2000029c 	.word	0x2000029c
 8001c00:	48000800 	.word	0x48000800
 8001c04:	200002b0 	.word	0x200002b0
 8001c08:	200002ac 	.word	0x200002ac
 8001c0c:	200002b4 	.word	0x200002b4
            	if(temp_cnt != 1){
 8001c10:	4b4e      	ldr	r3, [pc, #312]	@ (8001d4c <RunJog+0x734>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d00b      	beq.n	8001c30 <RunJog+0x618>
            		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2110      	movs	r1, #16
 8001c1c:	484c      	ldr	r0, [pc, #304]	@ (8001d50 <RunJog+0x738>)
 8001c1e:	f004 febf 	bl	80069a0 <HAL_GPIO_WritePin>
            		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 8001c22:	2201      	movs	r2, #1
 8001c24:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c2c:	f004 feb8 	bl	80069a0 <HAL_GPIO_WritePin>
                if (temp_cnt == 0 && base.ReedStatus == 1) {
 8001c30:	4b46      	ldr	r3, [pc, #280]	@ (8001d4c <RunJog+0x734>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d12e      	bne.n	8001c96 <RunJog+0x67e>
 8001c38:	4b46      	ldr	r3, [pc, #280]	@ (8001d54 <RunJog+0x73c>)
 8001c3a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d129      	bne.n	8001c96 <RunJog+0x67e>
                	base.Vacuum = 0;
 8001c42:	4b44      	ldr	r3, [pc, #272]	@ (8001d54 <RunJog+0x73c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	829a      	strh	r2, [r3, #20]
                	vacuumPlace = 1;
 8001c48:	4b43      	ldr	r3, [pc, #268]	@ (8001d58 <RunJog+0x740>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]
                    if (initDelay == 0){
 8001c4e:	4b43      	ldr	r3, [pc, #268]	@ (8001d5c <RunJog+0x744>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d107      	bne.n	8001c66 <RunJog+0x64e>
                    	pushDelay = HAL_GetTick();
 8001c56:	f002 ffbb 	bl	8004bd0 <HAL_GetTick>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	4a40      	ldr	r2, [pc, #256]	@ (8001d60 <RunJog+0x748>)
 8001c5e:	6013      	str	r3, [r2, #0]
                    	initDelay = 1;
 8001c60:	4b3e      	ldr	r3, [pc, #248]	@ (8001d5c <RunJog+0x744>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	601a      	str	r2, [r3, #0]
					if (HAL_GetTick() - pushDelay >= 250){
 8001c66:	f002 ffb3 	bl	8004bd0 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	4b3c      	ldr	r3, [pc, #240]	@ (8001d60 <RunJog+0x748>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2bf9      	cmp	r3, #249	@ 0xf9
 8001c74:	d938      	bls.n	8001ce8 <RunJog+0x6d0>
	            		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, SET);			// Backward
 8001c76:	2201      	movs	r2, #1
 8001c78:	2110      	movs	r1, #16
 8001c7a:	4835      	ldr	r0, [pc, #212]	@ (8001d50 <RunJog+0x738>)
 8001c7c:	f004 fe90 	bl	80069a0 <HAL_GPIO_WritePin>
	            		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 8001c80:	2200      	movs	r2, #0
 8001c82:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c8a:	f004 fe89 	bl	80069a0 <HAL_GPIO_WritePin>
	            		temp_cnt = 1;
 8001c8e:	4b2f      	ldr	r3, [pc, #188]	@ (8001d4c <RunJog+0x734>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	601a      	str	r2, [r3, #0]
					if (HAL_GetTick() - pushDelay >= 250){
 8001c94:	e028      	b.n	8001ce8 <RunJog+0x6d0>
                } else if (temp_cnt == 1 && base.ReedStatus == 2) {
 8001c96:	4b2d      	ldr	r3, [pc, #180]	@ (8001d4c <RunJog+0x734>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d13b      	bne.n	8001d16 <RunJog+0x6fe>
 8001c9e:	4b2d      	ldr	r3, [pc, #180]	@ (8001d54 <RunJog+0x73c>)
 8001ca0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d136      	bne.n	8001d16 <RunJog+0x6fe>
                    elapsedTime = 0;
 8001ca8:	4b2e      	ldr	r3, [pc, #184]	@ (8001d64 <RunJog+0x74c>)
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
                    temp_pos = AMT.Linear_Position;
 8001cb0:	4b2d      	ldr	r3, [pc, #180]	@ (8001d68 <RunJog+0x750>)
 8001cb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb4:	4a2d      	ldr	r2, [pc, #180]	@ (8001d6c <RunJog+0x754>)
 8001cb6:	6013      	str	r3, [r2, #0]
                    base.runJogMode = 0;
 8001cb8:	4b26      	ldr	r3, [pc, #152]	@ (8001d54 <RunJog+0x73c>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	635a      	str	r2, [r3, #52]	@ 0x34
                    fuCount++;
 8001cbe:	4b2c      	ldr	r3, [pc, #176]	@ (8001d70 <RunJog+0x758>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	4a2a      	ldr	r2, [pc, #168]	@ (8001d70 <RunJog+0x758>)
 8001cc6:	6013      	str	r3, [r2, #0]
                    Traj.currentPosition = placeTarget;
 8001cc8:	4a2a      	ldr	r2, [pc, #168]	@ (8001d74 <RunJog+0x75c>)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6093      	str	r3, [r2, #8]
                    internalState = STATE_DELAY_AFTER_8; // Move to next state
 8001cce:	4b2a      	ldr	r3, [pc, #168]	@ (8001d78 <RunJog+0x760>)
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	701a      	strb	r2, [r3, #0]
                   	temp_cnt = 0;
 8001cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d4c <RunJog+0x734>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
					initDelay = 0;
 8001cda:	4b20      	ldr	r3, [pc, #128]	@ (8001d5c <RunJog+0x744>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
					vacuumPlace = 0;
 8001ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d58 <RunJog+0x740>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
            break;
 8001ce6:	e016      	b.n	8001d16 <RunJog+0x6fe>
 8001ce8:	e015      	b.n	8001d16 <RunJog+0x6fe>

        case STATE_DELAY_AFTER_8:
            if (HAL_GetTick() - delayStartTime >= 500) { // Delay of 1 second
 8001cea:	f002 ff71 	bl	8004bd0 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	4b22      	ldr	r3, [pc, #136]	@ (8001d7c <RunJog+0x764>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001cfa:	d30e      	bcc.n	8001d1a <RunJog+0x702>
                internalState = STATE_CASE_4; // Return to pick state after delay
 8001cfc:	4b1e      	ldr	r3, [pc, #120]	@ (8001d78 <RunJog+0x760>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	701a      	strb	r2, [r3, #0]
                pushDelay = HAL_GetTick();
 8001d02:	f002 ff65 	bl	8004bd0 <HAL_GetTick>
 8001d06:	4603      	mov	r3, r0
 8001d08:	4a15      	ldr	r2, [pc, #84]	@ (8001d60 <RunJog+0x748>)
 8001d0a:	6013      	str	r3, [r2, #0]
            }
            break;
 8001d0c:	e005      	b.n	8001d1a <RunJog+0x702>
            break;
 8001d0e:	bf00      	nop
 8001d10:	e004      	b.n	8001d1c <RunJog+0x704>
            break;
 8001d12:	bf00      	nop
 8001d14:	e002      	b.n	8001d1c <RunJog+0x704>
            break;
 8001d16:	bf00      	nop
 8001d18:	e000      	b.n	8001d1c <RunJog+0x704>
            break;
 8001d1a:	bf00      	nop
    }

    // Pick and place 5 times
    if (base.sp == 1) {
 8001d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001d54 <RunJog+0x73c>)
 8001d1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d10d      	bne.n	8001d42 <RunJog+0x72a>
        base.BaseStatus = 0;
 8001d26:	4b0b      	ldr	r3, [pc, #44]	@ (8001d54 <RunJog+0x73c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	801a      	strh	r2, [r3, #0]
        registerFrame[0x01].U16 = base.BaseStatus;
 8001d2c:	4b09      	ldr	r3, [pc, #36]	@ (8001d54 <RunJog+0x73c>)
 8001d2e:	881a      	ldrh	r2, [r3, #0]
 8001d30:	4b13      	ldr	r3, [pc, #76]	@ (8001d80 <RunJog+0x768>)
 8001d32:	805a      	strh	r2, [r3, #2]
        registerFrame[0x10].U16 = 0;
 8001d34:	4b12      	ldr	r3, [pc, #72]	@ (8001d80 <RunJog+0x768>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	841a      	strh	r2, [r3, #32]
        base.sp = 0;
 8001d3a:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <RunJog+0x73c>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    }
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	2000029c 	.word	0x2000029c
 8001d50:	48000800 	.word	0x48000800
 8001d54:	20000af8 	.word	0x20000af8
 8001d58:	200002b4 	.word	0x200002b4
 8001d5c:	200002b0 	.word	0x200002b0
 8001d60:	200002ac 	.word	0x200002ac
 8001d64:	20001208 	.word	0x20001208
 8001d68:	200009f0 	.word	0x200009f0
 8001d6c:	20000298 	.word	0x20000298
 8001d70:	20000294 	.word	0x20000294
 8001d74:	200009dc 	.word	0x200009dc
 8001d78:	200002a4 	.word	0x200002a4
 8001d7c:	200002a8 	.word	0x200002a8
 8001d80:	20001078 	.word	0x20001078

08001d84 <Holding_position>:


void Holding_position()
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
	PID_controller_cascade(&PID_pos, &PID_velo, &AMT, Traj.currentPosition);
 8001d88:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc0 <Holding_position+0x3c>)
 8001d8a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d92:	4a0c      	ldr	r2, [pc, #48]	@ (8001dc4 <Holding_position+0x40>)
 8001d94:	490c      	ldr	r1, [pc, #48]	@ (8001dc8 <Holding_position+0x44>)
 8001d96:	480d      	ldr	r0, [pc, #52]	@ (8001dcc <Holding_position+0x48>)
 8001d98:	f001 f8e8 	bl	8002f6c <PID_controller_cascade>
	base.MotorHome = PID_velo.out;
 8001d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc8 <Holding_position+0x44>)
 8001d9e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001da2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001da6:	ee17 3a90 	vmov	r3, s15
 8001daa:	b21a      	sxth	r2, r3
 8001dac:	4b08      	ldr	r3, [pc, #32]	@ (8001dd0 <Holding_position+0x4c>)
 8001dae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
	temp_pos = AMT.Linear_Position;
 8001db2:	4b04      	ldr	r3, [pc, #16]	@ (8001dc4 <Holding_position+0x40>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001db6:	4a07      	ldr	r2, [pc, #28]	@ (8001dd4 <Holding_position+0x50>)
 8001db8:	6013      	str	r3, [r2, #0]

}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	200009dc 	.word	0x200009dc
 8001dc4:	200009f0 	.word	0x200009f0
 8001dc8:	20000adc 	.word	0x20000adc
 8001dcc:	20000ac0 	.word	0x20000ac0
 8001dd0:	20000af8 	.word	0x20000af8
 8001dd4:	20000298 	.word	0x20000298

08001dd8 <AMT_encoder_init>:
//    return kalman_adc;
//}


void AMT_encoder_init(AMT_Encoder *AMT_data,TIM_HandleTypeDef *Encoder_timer)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
	AMT_data->EncoderTIM = Encoder_timer;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	649a      	str	r2, [r3, #72]	@ 0x48
	HAL_TIM_Encoder_Start(AMT_data->EncoderTIM, TIM_CHANNEL_ALL);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dec:	213c      	movs	r1, #60	@ 0x3c
 8001dee:	4618      	mov	r0, r3
 8001df0:	f006 fb06 	bl	8008400 <HAL_TIM_Encoder_Start>
	AMT_data->Position[QEI_NOW] = 0.0;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
	AMT_data->Position[QEI_PREV] = 0.0;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	605a      	str	r2, [r3, #4]
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <AMT_encoder_update>:
//	AMT_data->TimeStamp[QEI_PREV] = AMT_data->TimeStamp[QEI_NOW];
//	AMT_data->Linear_Velo[QEI_PREV] = AMT_data->Linear_Velo[QEI_NOW];
//}

void AMT_encoder_update(AMT_Encoder *AMT_data, TIM_HandleTypeDef *Encoder_timer, uint64_t current_time)
{
 8001e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e0c:	b08e      	sub	sp, #56	@ 0x38
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6178      	str	r0, [r7, #20]
 8001e12:	6139      	str	r1, [r7, #16]
 8001e14:	e9c7 2302 	strd	r2, r3, [r7, #8]


    // Collect data
    AMT_data->TimeStamp[QEI_NOW] = current_time;
 8001e18:	6979      	ldr	r1, [r7, #20]
 8001e1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e1e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    AMT_data->Position[QEI_NOW] = __HAL_TIM_GET_COUNTER(Encoder_timer);
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	601a      	str	r2, [r3, #0]

    // Position 1 turn calculation
    AMT_data->QEIPostion_1turn = AMT_data->Position[QEI_NOW] % cnt_per_rev;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a83      	ldr	r2, [pc, #524]	@ (8002040 <AMT_encoder_update+0x238>)
 8001e32:	6812      	ldr	r2, [r2, #0]
 8001e34:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e38:	fb01 f202 	mul.w	r2, r1, r2
 8001e3c:	1a9b      	subs	r3, r3, r2
 8001e3e:	461a      	mov	r2, r3
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	631a      	str	r2, [r3, #48]	@ 0x30

    // Calculate dx
    int32_t diffPosition = AMT_data->Position[QEI_NOW] - AMT_data->Position[QEI_PREV];
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	637b      	str	r3, [r7, #52]	@ 0x34

    // Handle wrap-around
    if (diffPosition > 32767)
 8001e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e56:	db04      	blt.n	8001e62 <AMT_encoder_update+0x5a>
        diffPosition -= 65535;
 8001e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e5a:	f5a3 437f 	sub.w	r3, r3, #65280	@ 0xff00
 8001e5e:	3bff      	subs	r3, #255	@ 0xff
 8001e60:	637b      	str	r3, [r7, #52]	@ 0x34
    if (diffPosition < -32767)
 8001e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e64:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8001e68:	dc04      	bgt.n	8001e74 <AMT_encoder_update+0x6c>
        diffPosition += 65535;
 8001e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e6c:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001e70:	33ff      	adds	r3, #255	@ 0xff
 8001e72:	637b      	str	r3, [r7, #52]	@ 0x34

    // Calculate dt
    uint64_t diffTime = AMT_data->TimeStamp[QEI_NOW] - AMT_data->TimeStamp[QEI_PREV];
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001e80:	ebb0 0802 	subs.w	r8, r0, r2
 8001e84:	eb61 0903 	sbc.w	r9, r1, r3
 8001e88:	e9c7 890a 	strd	r8, r9, [r7, #40]	@ 0x28

    // Calculate angular velocity
    float time_seconds = diffTime * one_million_inv;
 8001e8c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001e90:	f7fe ff66 	bl	8000d60 <__aeabi_ul2f>
 8001e94:	ee07 0a10 	vmov	s14, r0
 8001e98:	eddf 7a6a 	vldr	s15, [pc, #424]	@ 8002044 <AMT_encoder_update+0x23c>
 8001e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ea0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    AMT_data->Angular_Velocity = ((diffPosition * 60.0f) * cnt_per_rev_inv / time_seconds); // RPM
 8001ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ea6:	ee07 3a90 	vmov	s15, r3
 8001eaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eae:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8002048 <AMT_encoder_update+0x240>
 8001eb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eb6:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 800204c <AMT_encoder_update+0x244>
 8001eba:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001ebe:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001ec2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

    // Calculate linear position and velocity
    float position_change_mm = (diffPosition * pulley_cir) * cnt_per_rev_inv;
 8001ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ece:	ee07 3a90 	vmov	s15, r3
 8001ed2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ed6:	4b5e      	ldr	r3, [pc, #376]	@ (8002050 <AMT_encoder_update+0x248>)
 8001ed8:	edd3 7a00 	vldr	s15, [r3]
 8001edc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee0:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 800204c <AMT_encoder_update+0x244>
 8001ee4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ee8:	edc7 7a08 	vstr	s15, [r7, #32]
    AMT_data->Linear_Position += position_change_mm; // mm
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8001ef2:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ef6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
    AMT_data->Linear_Velocity = kalman_filter(&filtered_velo,(AMT_data->Angular_Velocity / 60.0f * pulley_cir)); // mm/s
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001f06:	eddf 6a50 	vldr	s13, [pc, #320]	@ 8002048 <AMT_encoder_update+0x240>
 8001f0a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f0e:	4b50      	ldr	r3, [pc, #320]	@ (8002050 <AMT_encoder_update+0x248>)
 8001f10:	edd3 7a00 	vldr	s15, [r3]
 8001f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f18:	ee17 0a90 	vmov	r0, s15
 8001f1c:	f7fe fae0 	bl	80004e0 <__aeabi_f2d>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	ec43 2b10 	vmov	d0, r2, r3
 8001f28:	484a      	ldr	r0, [pc, #296]	@ (8002054 <AMT_encoder_update+0x24c>)
 8001f2a:	f001 fc47 	bl	80037bc <kalman_filter>
 8001f2e:	ec53 2b10 	vmov	r2, r3, d0
 8001f32:	4610      	mov	r0, r2
 8001f34:	4619      	mov	r1, r3
 8001f36:	f7fe fdfb 	bl	8000b30 <__aeabi_d2f>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	63da      	str	r2, [r3, #60]	@ 0x3c
    AMT_data->Linear_Velo[QEI_NOW] = AMT_data->Linear_Velocity; // Update Velo
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	629a      	str	r2, [r3, #40]	@ 0x28
    static uint64_t accel_timestamp = 0;
	AMT_data->Accel_TimeStamp[QEI_NOW] = micros();
 8001f48:	f002 fab0 	bl	80044ac <micros>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	17da      	asrs	r2, r3, #31
 8001f50:	603b      	str	r3, [r7, #0]
 8001f52:	607a      	str	r2, [r7, #4]
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001f5a:	e9c3 1206 	strd	r1, r2, [r3, #24]
	if(AMT_data->Accel_TimeStamp[QEI_NOW] >= accel_timestamp)
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001f64:	4b3c      	ldr	r3, [pc, #240]	@ (8002058 <AMT_encoder_update+0x250>)
 8001f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6a:	4290      	cmp	r0, r2
 8001f6c:	eb71 0303 	sbcs.w	r3, r1, r3
 8001f70:	d353      	bcc.n	800201a <AMT_encoder_update+0x212>
	{
		accel_timestamp = AMT_data->Accel_TimeStamp[QEI_NOW] + 10000;//us
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001f78:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001f7c:	1854      	adds	r4, r2, r1
 8001f7e:	f143 0500 	adc.w	r5, r3, #0
 8001f82:	4b35      	ldr	r3, [pc, #212]	@ (8002058 <AMT_encoder_update+0x250>)
 8001f84:	e9c3 4500 	strd	r4, r5, [r3]
		diffTimeAcc = (AMT_data->Accel_TimeStamp[QEI_NOW] - AMT_data->Accel_TimeStamp[QEI_PREV]) * 0.000001;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001f94:	ebb0 0a02 	subs.w	sl, r0, r2
 8001f98:	eb61 0b03 	sbc.w	fp, r1, r3
 8001f9c:	4650      	mov	r0, sl
 8001f9e:	4659      	mov	r1, fp
 8001fa0:	f7fe fac0 	bl	8000524 <__aeabi_ul2d>
 8001fa4:	a324      	add	r3, pc, #144	@ (adr r3, 8002038 <AMT_encoder_update+0x230>)
 8001fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001faa:	f7fe faf1 	bl	8000590 <__aeabi_dmul>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f7fe fdbb 	bl	8000b30 <__aeabi_d2f>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	4a27      	ldr	r2, [pc, #156]	@ (800205c <AMT_encoder_update+0x254>)
 8001fbe:	6013      	str	r3, [r2, #0]

		double accel = (AMT_data->Linear_Velo[QEI_NOW] - AMT_data->Linear_Velo[QEI_PREV]) / diffTimeAcc;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001fcc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fd0:	4b22      	ldr	r3, [pc, #136]	@ (800205c <AMT_encoder_update+0x254>)
 8001fd2:	edd3 7a00 	vldr	s15, [r3]
 8001fd6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001fda:	ee16 0a90 	vmov	r0, s13
 8001fde:	f7fe fa7f 	bl	80004e0 <__aeabi_f2d>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	e9c7 2306 	strd	r2, r3, [r7, #24]
		AMT_data->Linear_Acceleration = kalman_filter(&filtered_accel, accel);
 8001fea:	ed97 0b06 	vldr	d0, [r7, #24]
 8001fee:	481c      	ldr	r0, [pc, #112]	@ (8002060 <AMT_encoder_update+0x258>)
 8001ff0:	f001 fbe4 	bl	80037bc <kalman_filter>
 8001ff4:	ec53 2b10 	vmov	r2, r3, d0
 8001ff8:	4610      	mov	r0, r2
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	f7fe fd98 	bl	8000b30 <__aeabi_d2f>
 8002000:	4602      	mov	r2, r0
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	639a      	str	r2, [r3, #56]	@ 0x38
		AMT_data->Linear_Velo[QEI_PREV] = AMT_data->Linear_Velo[QEI_NOW];
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	62da      	str	r2, [r3, #44]	@ 0x2c
		AMT_data->Accel_TimeStamp[QEI_PREV] = AMT_data->Accel_TimeStamp[QEI_NOW];
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002014:	6979      	ldr	r1, [r7, #20]
 8002016:	e9c1 2308 	strd	r2, r3, [r1, #32]
	}
    // Store value for next loop
    AMT_data->Position[QEI_PREV] = AMT_data->Position[QEI_NOW];
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	605a      	str	r2, [r3, #4]
    AMT_data->TimeStamp[QEI_PREV] = AMT_data->TimeStamp[QEI_NOW];
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002028:	6979      	ldr	r1, [r7, #20]
 800202a:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 800202e:	bf00      	nop
 8002030:	3738      	adds	r7, #56	@ 0x38
 8002032:	46bd      	mov	sp, r7
 8002034:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002038:	a0b5ed8d 	.word	0xa0b5ed8d
 800203c:	3eb0c6f7 	.word	0x3eb0c6f7
 8002040:	20000000 	.word	0x20000000
 8002044:	358637bd 	.word	0x358637bd
 8002048:	42700000 	.word	0x42700000
 800204c:	39000000 	.word	0x39000000
 8002050:	20000004 	.word	0x20000004
 8002054:	20001030 	.word	0x20001030
 8002058:	200002c0 	.word	0x200002c0
 800205c:	200002b8 	.word	0x200002b8
 8002060:	2000104c 	.word	0x2000104c

08002064 <AMT_encoder_reset>:


void AMT_encoder_reset(AMT_Encoder *AMT_data)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
	AMT_data->Linear_Position = 600;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a04      	ldr	r2, [pc, #16]	@ (8002080 <AMT_encoder_reset+0x1c>)
 8002070:	645a      	str	r2, [r3, #68]	@ 0x44
//	AMT_data->Position[QEI_NOW] = 0;

}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	44160000 	.word	0x44160000

08002084 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8002088:	4b0d      	ldr	r3, [pc, #52]	@ (80020c0 <modbus_1t5_Timeout+0x3c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2201      	movs	r2, #1
 800208e:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8002090:	4b0b      	ldr	r3, [pc, #44]	@ (80020c0 <modbus_1t5_Timeout+0x3c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2200      	movs	r2, #0
 800209a:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 800209c:	4b08      	ldr	r3, [pc, #32]	@ (80020c0 <modbus_1t5_Timeout+0x3c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	4b06      	ldr	r3, [pc, #24]	@ (80020c0 <modbus_1t5_Timeout+0x3c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 0201 	orr.w	r2, r2, #1
 80020b2:	601a      	str	r2, [r3, #0]
}
 80020b4:	bf00      	nop
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	200002c8 	.word	0x200002c8

080020c4 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80020cc:	4b04      	ldr	r3, [pc, #16]	@ (80020e0 <modbus_3t5_Timeout+0x1c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2201      	movs	r2, #1
 80020d2:	755a      	strb	r2, [r3, #21]

}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	200002c8 	.word	0x200002c8

080020e4 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f008 fc03 	bl	800a8f8 <HAL_UART_GetError>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b20      	cmp	r3, #32
 80020f6:	d101      	bne.n	80020fc <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 80020f8:	f7ff ffc4 	bl	8002084 <modbus_1t5_Timeout>

	}
}
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800210e:	4a25      	ldr	r2, [pc, #148]	@ (80021a4 <Modbus_init+0xa0>)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8002114:	4b23      	ldr	r3, [pc, #140]	@ (80021a4 <Modbus_init+0xa0>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	4a21      	ldr	r2, [pc, #132]	@ (80021a8 <Modbus_init+0xa4>)
 8002122:	210e      	movs	r1, #14
 8002124:	4618      	mov	r0, r3
 8002126:	f006 fdf7 	bl	8008d18 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	2110      	movs	r1, #16
 8002130:	4618      	mov	r0, r3
 8002132:	f008 fb8b 	bl	800a84c <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	4618      	mov	r0, r3
 800213c:	f008 fba2 	bl	800a884 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	4a19      	ldr	r2, [pc, #100]	@ (80021ac <Modbus_init+0xa8>)
 8002146:	2104      	movs	r1, #4
 8002148:	4618      	mov	r0, r3
 800214a:	f007 fda1 	bl	8009c90 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 800214e:	4b15      	ldr	r3, [pc, #84]	@ (80021a4 <Modbus_init+0xa0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8002154:	4b13      	ldr	r3, [pc, #76]	@ (80021a4 <Modbus_init+0xa0>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	4b12      	ldr	r3, [pc, #72]	@ (80021a4 <Modbus_init+0xa0>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8002160:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8002164:	4413      	add	r3, r2
 8002166:	3302      	adds	r3, #2
 8002168:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800216c:	4619      	mov	r1, r3
 800216e:	f007 ff91 	bl	800a094 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8002172:	4b0c      	ldr	r3, [pc, #48]	@ (80021a4 <Modbus_init+0xa0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b01      	cmp	r3, #1
 8002180:	d10c      	bne.n	800219c <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8002182:	4b08      	ldr	r3, [pc, #32]	@ (80021a4 <Modbus_init+0xa0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	4618      	mov	r0, r3
 800218a:	f005 fd49 	bl	8007c20 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800218e:	4b05      	ldr	r3, [pc, #20]	@ (80021a4 <Modbus_init+0xa0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	2100      	movs	r1, #0
 8002196:	4618      	mov	r0, r3
 8002198:	f005 fff0 	bl	800817c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	200002c8 	.word	0x200002c8
 80021a8:	080020c5 	.word	0x080020c5
 80021ac:	080020e5 	.word	0x080020e5

080021b0 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 80021bc:	23ff      	movs	r3, #255	@ 0xff
 80021be:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 80021c0:	23ff      	movs	r3, #255	@ 0xff
 80021c2:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 80021c4:	e013      	b.n	80021ee <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	1c5a      	adds	r2, r3, #1
 80021ca:	607a      	str	r2, [r7, #4]
 80021cc:	781a      	ldrb	r2, [r3, #0]
 80021ce:	7bbb      	ldrb	r3, [r7, #14]
 80021d0:	4053      	eors	r3, r2
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 80021d6:	4a0f      	ldr	r2, [pc, #60]	@ (8002214 <CRC16+0x64>)
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	4413      	add	r3, r2
 80021dc:	781a      	ldrb	r2, [r3, #0]
 80021de:	7bfb      	ldrb	r3, [r7, #15]
 80021e0:	4053      	eors	r3, r2
 80021e2:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 80021e4:	4a0c      	ldr	r2, [pc, #48]	@ (8002218 <CRC16+0x68>)
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	4413      	add	r3, r2
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 80021ee:	883b      	ldrh	r3, [r7, #0]
 80021f0:	1e5a      	subs	r2, r3, #1
 80021f2:	803a      	strh	r2, [r7, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1e6      	bne.n	80021c6 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
 80021fa:	021b      	lsls	r3, r3, #8
 80021fc:	b21a      	sxth	r2, r3
 80021fe:	7bbb      	ldrb	r3, [r7, #14]
 8002200:	b21b      	sxth	r3, r3
 8002202:	4313      	orrs	r3, r2
 8002204:	b21b      	sxth	r3, r3
 8002206:	b29b      	uxth	r3, r3
}
 8002208:	4618      	mov	r0, r3
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	20000108 	.word	0x20000108
 8002218:	20000008 	.word	0x20000008

0800221c <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8002222:	4b7e      	ldr	r3, [pc, #504]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	7ddb      	ldrb	r3, [r3, #23]
 8002228:	3b01      	subs	r3, #1
 800222a:	2b03      	cmp	r3, #3
 800222c:	d80a      	bhi.n	8002244 <Modbus_Protocal_Worker+0x28>
 800222e:	a201      	add	r2, pc, #4	@ (adr r2, 8002234 <Modbus_Protocal_Worker+0x18>)
 8002230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002234:	0800224f 	.word	0x0800224f
 8002238:	080023e3 	.word	0x080023e3
 800223c:	080022db 	.word	0x080022db
 8002240:	0800231f 	.word	0x0800231f
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8002244:	4b75      	ldr	r3, [pc, #468]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2201      	movs	r2, #1
 800224a:	75da      	strb	r2, [r3, #23]
		break;
 800224c:	e0e1      	b.n	8002412 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 800224e:	4b73      	ldr	r3, [pc, #460]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8002256:	2b00      	cmp	r3, #0
 8002258:	d006      	beq.n	8002268 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 800225a:	4b70      	ldr	r3, [pc, #448]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2202      	movs	r2, #2
 8002260:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 8002262:	f000 f9cd 	bl	8002600 <Modbus_Emission>
 8002266:	e018      	b.n	800229a <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 8002268:	4b6c      	ldr	r3, [pc, #432]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002272:	4b6a      	ldr	r3, [pc, #424]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800227c:	b29b      	uxth	r3, r3
 800227e:	429a      	cmp	r2, r3
 8002280:	d00b      	beq.n	800229a <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8002282:	4b66      	ldr	r3, [pc, #408]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2200      	movs	r2, #0
 8002288:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800228a:	4b64      	ldr	r3, [pc, #400]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2200      	movs	r2, #0
 8002290:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8002292:	4b62      	ldr	r3, [pc, #392]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2203      	movs	r2, #3
 8002298:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 800229a:	4b60      	ldr	r3, [pc, #384]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022a4:	2b20      	cmp	r3, #32
 80022a6:	f040 80ad 	bne.w	8002404 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80022aa:	4b5c      	ldr	r3, [pc, #368]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 80022b4:	4b59      	ldr	r3, [pc, #356]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80022ba:	4b58      	ldr	r3, [pc, #352]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	4b57      	ldr	r3, [pc, #348]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 80022c6:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80022ca:	4413      	add	r3, r2
 80022cc:	3302      	adds	r3, #2
 80022ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80022d2:	4619      	mov	r1, r3
 80022d4:	f007 fede 	bl	800a094 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 80022d8:	e094      	b.n	8002404 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 80022da:	4b50      	ldr	r3, [pc, #320]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	7d1b      	ldrb	r3, [r3, #20]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 8091 	beq.w	8002408 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80022e6:	4b4d      	ldr	r3, [pc, #308]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	22fe      	movs	r2, #254	@ 0xfe
 80022ec:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 80022ee:	4b4b      	ldr	r3, [pc, #300]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 80022f8:	4b48      	ldr	r3, [pc, #288]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8002308:	4b44      	ldr	r3, [pc, #272]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 800230a:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800230c:	1a8a      	subs	r2, r1, r2
 800230e:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8002310:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8002314:	4b41      	ldr	r3, [pc, #260]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2204      	movs	r2, #4
 800231a:	75da      	strb	r2, [r3, #23]
		}
		break;
 800231c:	e074      	b.n	8002408 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 800231e:	4b3f      	ldr	r3, [pc, #252]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8002326:	f113 0f02 	cmn.w	r3, #2
 800232a:	d150      	bne.n	80023ce <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 800232c:	4b3b      	ldr	r3, [pc, #236]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2200      	movs	r2, #0
 8002332:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8002334:	4b39      	ldr	r3, [pc, #228]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f203 2272 	addw	r2, r3, #626	@ 0x272
 800233c:	4b37      	ldr	r3, [pc, #220]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002344:	3b02      	subs	r3, #2
 8002346:	4619      	mov	r1, r3
 8002348:	4610      	mov	r0, r2
 800234a:	f7ff ff31 	bl	80021b0 <CRC16>
 800234e:	4603      	mov	r3, r0
 8002350:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8002352:	793a      	ldrb	r2, [r7, #4]
 8002354:	4b31      	ldr	r3, [pc, #196]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 8002356:	6819      	ldr	r1, [r3, #0]
 8002358:	4b30      	ldr	r3, [pc, #192]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002360:	3b02      	subs	r3, #2
 8002362:	440b      	add	r3, r1
 8002364:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8002368:	429a      	cmp	r2, r3
 800236a:	d10c      	bne.n	8002386 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 800236c:	797a      	ldrb	r2, [r7, #5]
 800236e:	4b2b      	ldr	r3, [pc, #172]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 8002370:	6819      	ldr	r1, [r3, #0]
 8002372:	4b2a      	ldr	r3, [pc, #168]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800237a:	3b01      	subs	r3, #1
 800237c:	440b      	add	r3, r1
 800237e:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8002382:	429a      	cmp	r2, r3
 8002384:	d004      	beq.n	8002390 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8002386:	4b25      	ldr	r3, [pc, #148]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	22ff      	movs	r2, #255	@ 0xff
 800238c:	759a      	strb	r2, [r3, #22]
				break;
 800238e:	e040      	b.n	8002412 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8002390:	4b22      	ldr	r3, [pc, #136]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8002398:	4b20      	ldr	r3, [pc, #128]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d113      	bne.n	80023ca <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80023a2:	4b1e      	ldr	r3, [pc, #120]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80023aa:	4b1c      	ldr	r3, [pc, #112]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 80023b2:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 80023b4:	4b19      	ldr	r3, [pc, #100]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80023bc:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80023be:	461a      	mov	r2, r3
 80023c0:	f009 fbf4 	bl	800bbac <memcpy>

			//execute command
			Modbus_frame_response();
 80023c4:	f000 f904 	bl	80025d0 <Modbus_frame_response>
 80023c8:	e001      	b.n	80023ce <Modbus_Protocal_Worker+0x1b2>
				break;
 80023ca:	bf00      	nop
					}
		break;


	}
}
 80023cc:	e021      	b.n	8002412 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 80023ce:	4b13      	ldr	r3, [pc, #76]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	7d5b      	ldrb	r3, [r3, #21]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d019      	beq.n	800240c <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 80023d8:	4b10      	ldr	r3, [pc, #64]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2201      	movs	r2, #1
 80023de:	75da      	strb	r2, [r3, #23]
		break;
 80023e0:	e014      	b.n	800240c <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80023e2:	4b0e      	ldr	r3, [pc, #56]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ec:	2b20      	cmp	r3, #32
 80023ee:	d10f      	bne.n	8002410 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 80023f0:	4b0a      	ldr	r3, [pc, #40]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 80023fa:	4b08      	ldr	r3, [pc, #32]	@ (800241c <Modbus_Protocal_Worker+0x200>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2201      	movs	r2, #1
 8002400:	75da      	strb	r2, [r3, #23]
		break;
 8002402:	e005      	b.n	8002410 <Modbus_Protocal_Worker+0x1f4>
		break;
 8002404:	bf00      	nop
 8002406:	e004      	b.n	8002412 <Modbus_Protocal_Worker+0x1f6>
		break;
 8002408:	bf00      	nop
 800240a:	e002      	b.n	8002412 <Modbus_Protocal_Worker+0x1f6>
		break;
 800240c:	bf00      	nop
 800240e:	e000      	b.n	8002412 <Modbus_Protocal_Worker+0x1f6>
		break;
 8002410:	bf00      	nop
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200002c8 	.word	0x200002c8

08002420 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8002426:	4b1d      	ldr	r3, [pc, #116]	@ (800249c <modbusWrite1Register+0x7c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	7e5b      	ldrb	r3, [r3, #25]
 800242c:	021b      	lsls	r3, r3, #8
 800242e:	b29b      	uxth	r3, r3
 8002430:	4a1a      	ldr	r2, [pc, #104]	@ (800249c <modbusWrite1Register+0x7c>)
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	7e92      	ldrb	r2, [r2, #26]
 8002436:	4413      	add	r3, r2
 8002438:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800243a:	88fa      	ldrh	r2, [r7, #6]
 800243c:	4b17      	ldr	r3, [pc, #92]	@ (800249c <modbusWrite1Register+0x7c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	429a      	cmp	r2, r3
 8002444:	d903      	bls.n	800244e <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8002446:	2002      	movs	r0, #2
 8002448:	f000 f8a0 	bl	800258c <ModbusErrorReply>
			 return;
 800244c:	e023      	b.n	8002496 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800244e:	4b13      	ldr	r3, [pc, #76]	@ (800249c <modbusWrite1Register+0x7c>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	4b12      	ldr	r3, [pc, #72]	@ (800249c <modbusWrite1Register+0x7c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6859      	ldr	r1, [r3, #4]
 8002458:	88fb      	ldrh	r3, [r7, #6]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	440b      	add	r3, r1
 800245e:	7ed2      	ldrb	r2, [r2, #27]
 8002460:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8002462:	4b0e      	ldr	r3, [pc, #56]	@ (800249c <modbusWrite1Register+0x7c>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	4b0d      	ldr	r3, [pc, #52]	@ (800249c <modbusWrite1Register+0x7c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6859      	ldr	r1, [r3, #4]
 800246c:	88fb      	ldrh	r3, [r7, #6]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	440b      	add	r3, r1
 8002472:	7f12      	ldrb	r2, [r2, #28]
 8002474:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8002476:	4b09      	ldr	r3, [pc, #36]	@ (800249c <modbusWrite1Register+0x7c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 800247e:	4b07      	ldr	r3, [pc, #28]	@ (800249c <modbusWrite1Register+0x7c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8002484:	2208      	movs	r2, #8
 8002486:	4619      	mov	r1, r3
 8002488:	f009 fb90 	bl	800bbac <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 800248c:	4b03      	ldr	r3, [pc, #12]	@ (800249c <modbusWrite1Register+0x7c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2205      	movs	r2, #5
 8002492:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	200002c8 	.word	0x200002c8

080024a0 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80024a0:	b590      	push	{r4, r7, lr}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80024a6:	4b38      	ldr	r3, [pc, #224]	@ (8002588 <modbusRead1Register+0xe8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	7edb      	ldrb	r3, [r3, #27]
 80024ac:	021b      	lsls	r3, r3, #8
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	4a35      	ldr	r2, [pc, #212]	@ (8002588 <modbusRead1Register+0xe8>)
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	7f12      	ldrb	r2, [r2, #28]
 80024b6:	4413      	add	r3, r2
 80024b8:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 80024ba:	4b33      	ldr	r3, [pc, #204]	@ (8002588 <modbusRead1Register+0xe8>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	7e5b      	ldrb	r3, [r3, #25]
 80024c0:	021b      	lsls	r3, r3, #8
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	4a30      	ldr	r2, [pc, #192]	@ (8002588 <modbusRead1Register+0xe8>)
 80024c6:	6812      	ldr	r2, [r2, #0]
 80024c8:	7e92      	ldrb	r2, [r2, #26]
 80024ca:	4413      	add	r3, r2
 80024cc:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 80024ce:	88fb      	ldrh	r3, [r7, #6]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d002      	beq.n	80024da <modbusRead1Register+0x3a>
 80024d4:	88fb      	ldrh	r3, [r7, #6]
 80024d6:	2b7d      	cmp	r3, #125	@ 0x7d
 80024d8:	d903      	bls.n	80024e2 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80024da:	2003      	movs	r0, #3
 80024dc:	f000 f856 	bl	800258c <ModbusErrorReply>
		 return;
 80024e0:	e04e      	b.n	8002580 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80024e2:	88ba      	ldrh	r2, [r7, #4]
 80024e4:	4b28      	ldr	r3, [pc, #160]	@ (8002588 <modbusRead1Register+0xe8>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d808      	bhi.n	8002500 <modbusRead1Register+0x60>
 80024ee:	88ba      	ldrh	r2, [r7, #4]
 80024f0:	88fb      	ldrh	r3, [r7, #6]
 80024f2:	4413      	add	r3, r2
 80024f4:	461a      	mov	r2, r3
 80024f6:	4b24      	ldr	r3, [pc, #144]	@ (8002588 <modbusRead1Register+0xe8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d903      	bls.n	8002508 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8002500:	2002      	movs	r0, #2
 8002502:	f000 f843 	bl	800258c <ModbusErrorReply>
		 return;
 8002506:	e03b      	b.n	8002580 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8002508:	4b1f      	ldr	r3, [pc, #124]	@ (8002588 <modbusRead1Register+0xe8>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2203      	movs	r2, #3
 800250e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8002512:	88fb      	ldrh	r3, [r7, #6]
 8002514:	b2da      	uxtb	r2, r3
 8002516:	4b1c      	ldr	r3, [pc, #112]	@ (8002588 <modbusRead1Register+0xe8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	0052      	lsls	r2, r2, #1
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8002522:	2400      	movs	r4, #0
 8002524:	e020      	b.n	8002568 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8002526:	4b18      	ldr	r3, [pc, #96]	@ (8002588 <modbusRead1Register+0xe8>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	88bb      	ldrh	r3, [r7, #4]
 800252e:	4423      	add	r3, r4
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	18d1      	adds	r1, r2, r3
 8002534:	4b14      	ldr	r3, [pc, #80]	@ (8002588 <modbusRead1Register+0xe8>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	1c63      	adds	r3, r4, #1
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	7849      	ldrb	r1, [r1, #1]
 800253e:	4413      	add	r3, r2
 8002540:	460a      	mov	r2, r1
 8002542:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8002546:	4b10      	ldr	r3, [pc, #64]	@ (8002588 <modbusRead1Register+0xe8>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	88bb      	ldrh	r3, [r7, #4]
 800254e:	4423      	add	r3, r4
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	18d1      	adds	r1, r2, r3
 8002554:	4b0c      	ldr	r3, [pc, #48]	@ (8002588 <modbusRead1Register+0xe8>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	0063      	lsls	r3, r4, #1
 800255a:	3303      	adds	r3, #3
 800255c:	7809      	ldrb	r1, [r1, #0]
 800255e:	4413      	add	r3, r2
 8002560:	460a      	mov	r2, r1
 8002562:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 8002566:	3401      	adds	r4, #1
 8002568:	88fb      	ldrh	r3, [r7, #6]
 800256a:	429c      	cmp	r4, r3
 800256c:	dbdb      	blt.n	8002526 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800256e:	88fb      	ldrh	r3, [r7, #6]
 8002570:	3301      	adds	r3, #1
 8002572:	b2da      	uxtb	r2, r3
 8002574:	4b04      	ldr	r3, [pc, #16]	@ (8002588 <modbusRead1Register+0xe8>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	0052      	lsls	r2, r2, #1
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	bd90      	pop	{r4, r7, pc}
 8002586:	bf00      	nop
 8002588:	200002c8 	.word	0x200002c8

0800258c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8002596:	4b0d      	ldr	r3, [pc, #52]	@ (80025cc <ModbusErrorReply+0x40>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	7e1a      	ldrb	r2, [r3, #24]
 800259c:	4b0b      	ldr	r3, [pc, #44]	@ (80025cc <ModbusErrorReply+0x40>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 80025aa:	4b08      	ldr	r3, [pc, #32]	@ (80025cc <ModbusErrorReply+0x40>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	79fa      	ldrb	r2, [r7, #7]
 80025b0:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 80025b4:	4b05      	ldr	r3, [pc, #20]	@ (80025cc <ModbusErrorReply+0x40>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2202      	movs	r2, #2
 80025ba:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	200002c8 	.word	0x200002c8

080025d0 <Modbus_frame_response>:

void Modbus_frame_response()
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 80025d4:	4b09      	ldr	r3, [pc, #36]	@ (80025fc <Modbus_frame_response+0x2c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	7e1b      	ldrb	r3, [r3, #24]
 80025da:	2b03      	cmp	r3, #3
 80025dc:	d004      	beq.n	80025e8 <Modbus_frame_response+0x18>
 80025de:	2b06      	cmp	r3, #6
 80025e0:	d105      	bne.n	80025ee <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80025e2:	f7ff ff1d 	bl	8002420 <modbusWrite1Register>
		break;
 80025e6:	e006      	b.n	80025f6 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80025e8:	f7ff ff5a 	bl	80024a0 <modbusRead1Register>
		break;
 80025ec:	e003      	b.n	80025f6 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80025ee:	2001      	movs	r0, #1
 80025f0:	f7ff ffcc 	bl	800258c <ModbusErrorReply>
		break;
 80025f4:	bf00      	nop

	}
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	200002c8 	.word	0x200002c8

08002600 <Modbus_Emission>:

void Modbus_Emission()
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002606:	4b38      	ldr	r3, [pc, #224]	@ (80026e8 <Modbus_Emission+0xe8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002610:	2b20      	cmp	r3, #32
 8002612:	d15d      	bne.n	80026d0 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8002614:	4b34      	ldr	r3, [pc, #208]	@ (80026e8 <Modbus_Emission+0xe8>)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	4b33      	ldr	r3, [pc, #204]	@ (80026e8 <Modbus_Emission+0xe8>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	7812      	ldrb	r2, [r2, #0]
 800261e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8002622:	4b31      	ldr	r3, [pc, #196]	@ (80026e8 <Modbus_Emission+0xe8>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 800262a:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 800262c:	4b2e      	ldr	r3, [pc, #184]	@ (80026e8 <Modbus_Emission+0xe8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8002634:	4b2c      	ldr	r3, [pc, #176]	@ (80026e8 <Modbus_Emission+0xe8>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 800263c:	461a      	mov	r2, r3
 800263e:	f009 fab5 	bl	800bbac <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8002642:	4b29      	ldr	r3, [pc, #164]	@ (80026e8 <Modbus_Emission+0xe8>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 800264a:	461a      	mov	r2, r3
 800264c:	4b26      	ldr	r3, [pc, #152]	@ (80026e8 <Modbus_Emission+0xe8>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	3203      	adds	r2, #3
 8002652:	b292      	uxth	r2, r2
 8002654:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8002658:	4b23      	ldr	r3, [pc, #140]	@ (80026e8 <Modbus_Emission+0xe8>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8002660:	4b21      	ldr	r3, [pc, #132]	@ (80026e8 <Modbus_Emission+0xe8>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8002668:	3b02      	subs	r3, #2
 800266a:	4619      	mov	r1, r3
 800266c:	4610      	mov	r0, r2
 800266e:	f7ff fd9f 	bl	80021b0 <CRC16>
 8002672:	4603      	mov	r3, r0
 8002674:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8002676:	4b1c      	ldr	r3, [pc, #112]	@ (80026e8 <Modbus_Emission+0xe8>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	4b1b      	ldr	r3, [pc, #108]	@ (80026e8 <Modbus_Emission+0xe8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8002682:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8002684:	7939      	ldrb	r1, [r7, #4]
 8002686:	4413      	add	r3, r2
 8002688:	460a      	mov	r2, r1
 800268a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 800268e:	4b16      	ldr	r3, [pc, #88]	@ (80026e8 <Modbus_Emission+0xe8>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	4b15      	ldr	r3, [pc, #84]	@ (80026e8 <Modbus_Emission+0xe8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800269a:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 800269c:	7979      	ldrb	r1, [r7, #5]
 800269e:	4413      	add	r3, r2
 80026a0:	460a      	mov	r2, r1
 80026a2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80026a6:	4b10      	ldr	r3, [pc, #64]	@ (80026e8 <Modbus_Emission+0xe8>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026b0:	2b20      	cmp	r3, #32
 80026b2:	d10d      	bne.n	80026d0 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 80026b4:	4b0c      	ldr	r3, [pc, #48]	@ (80026e8 <Modbus_Emission+0xe8>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 80026ba:	4b0b      	ldr	r3, [pc, #44]	@ (80026e8 <Modbus_Emission+0xe8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 80026c2:	4b09      	ldr	r3, [pc, #36]	@ (80026e8 <Modbus_Emission+0xe8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 80026c6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80026ca:	461a      	mov	r2, r3
 80026cc:	f007 fc62 	bl	8009f94 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 80026d0:	4b05      	ldr	r3, [pc, #20]	@ (80026e8 <Modbus_Emission+0xe8>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2200      	movs	r2, #0
 80026d6:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80026d8:	4b03      	ldr	r3, [pc, #12]	@ (80026e8 <Modbus_Emission+0xe8>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2200      	movs	r2, #0
 80026de:	755a      	strb	r2, [r3, #21]

}
 80026e0:	bf00      	nop
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	200002c8 	.word	0x200002c8

080026ec <MOTOR_init>:
#include "math.h"

//-------------------------------------------Function Code-------------------------------------------------------//

void MOTOR_init(MOTOR* MT,TIM_HandleTypeDef* htimx,uint16_t timd_chx,uint16_t timp_chx)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	4611      	mov	r1, r2
 80026f8:	461a      	mov	r2, r3
 80026fa:	460b      	mov	r3, r1
 80026fc:	80fb      	strh	r3, [r7, #6]
 80026fe:	4613      	mov	r3, r2
 8002700:	80bb      	strh	r3, [r7, #4]
	MT->htimx = htimx;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	601a      	str	r2, [r3, #0]
	MT->timd_chx = timd_chx;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	88fa      	ldrh	r2, [r7, #6]
 800270c:	809a      	strh	r2, [r3, #4]
	MT->timp_chx = timp_chx;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	88ba      	ldrh	r2, [r7, #4]
 8002712:	80da      	strh	r2, [r3, #6]
	HAL_TIM_PWM_Start_IT(htimx, timp_chx);		// PWM
 8002714:	88bb      	ldrh	r3, [r7, #4]
 8002716:	4619      	mov	r1, r3
 8002718:	68b8      	ldr	r0, [r7, #8]
 800271a:	f005 fb67 	bl	8007dec <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(htimx, timd_chx);		// Direction
 800271e:	88fb      	ldrh	r3, [r7, #6]
 8002720:	4619      	mov	r1, r3
 8002722:	68b8      	ldr	r0, [r7, #8]
 8002724:	f005 fb62 	bl	8007dec <HAL_TIM_PWM_Start_IT>

}
 8002728:	bf00      	nop
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <MOTOR_set_duty>:

void MOTOR_set_duty(MOTOR* MT, float percent_duty)
{
 8002730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002734:	b089      	sub	sp, #36	@ 0x24
 8002736:	af00      	add	r7, sp, #0
 8002738:	61f8      	str	r0, [r7, #28]
 800273a:	ed87 0a06 	vstr	s0, [r7, #24]
    if (MT == NULL || MT->htimx == NULL) {
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 8263 	beq.w	8002c0c <MOTOR_set_duty+0x4dc>
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 825e 	beq.w	8002c0c <MOTOR_set_duty+0x4dc>
        return;
    }
    if(percent_duty*42.499 >= 42499) percent_duty = 42499;
 8002750:	69b8      	ldr	r0, [r7, #24]
 8002752:	f7fd fec5 	bl	80004e0 <__aeabi_f2d>
 8002756:	a394      	add	r3, pc, #592	@ (adr r3, 80029a8 <MOTOR_set_duty+0x278>)
 8002758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275c:	f7fd ff18 	bl	8000590 <__aeabi_dmul>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4610      	mov	r0, r2
 8002766:	4619      	mov	r1, r3
 8002768:	a395      	add	r3, pc, #596	@ (adr r3, 80029c0 <MOTOR_set_duty+0x290>)
 800276a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276e:	f7fe f995 	bl	8000a9c <__aeabi_dcmpge>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <MOTOR_set_duty+0x4c>
 8002778:	4b8f      	ldr	r3, [pc, #572]	@ (80029b8 <MOTOR_set_duty+0x288>)
 800277a:	61bb      	str	r3, [r7, #24]
    if(percent_duty*42.499 <= -42499) percent_duty = -42499;
 800277c:	69b8      	ldr	r0, [r7, #24]
 800277e:	f7fd feaf 	bl	80004e0 <__aeabi_f2d>
 8002782:	a389      	add	r3, pc, #548	@ (adr r3, 80029a8 <MOTOR_set_duty+0x278>)
 8002784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002788:	f7fd ff02 	bl	8000590 <__aeabi_dmul>
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	4610      	mov	r0, r2
 8002792:	4619      	mov	r1, r3
 8002794:	a386      	add	r3, pc, #536	@ (adr r3, 80029b0 <MOTOR_set_duty+0x280>)
 8002796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279a:	f7fe f975 	bl	8000a88 <__aeabi_dcmple>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <MOTOR_set_duty+0x78>
 80027a4:	4b85      	ldr	r3, [pc, #532]	@ (80029bc <MOTOR_set_duty+0x28c>)
 80027a6:	61bb      	str	r3, [r7, #24]

    if (percent_duty == 0) {
 80027a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80027ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80027b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027b4:	d16e      	bne.n	8002894 <MOTOR_set_duty+0x164>
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timd_chx, 0);
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	889b      	ldrh	r3, [r3, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d105      	bne.n	80027ca <MOTOR_set_duty+0x9a>
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2200      	movs	r2, #0
 80027c6:	635a      	str	r2, [r3, #52]	@ 0x34
 80027c8:	e02c      	b.n	8002824 <MOTOR_set_duty+0xf4>
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	889b      	ldrh	r3, [r3, #4]
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	d105      	bne.n	80027de <MOTOR_set_duty+0xae>
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	2300      	movs	r3, #0
 80027da:	6393      	str	r3, [r2, #56]	@ 0x38
 80027dc:	e022      	b.n	8002824 <MOTOR_set_duty+0xf4>
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	889b      	ldrh	r3, [r3, #4]
 80027e2:	2b08      	cmp	r3, #8
 80027e4:	d105      	bne.n	80027f2 <MOTOR_set_duty+0xc2>
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	2300      	movs	r3, #0
 80027ee:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80027f0:	e018      	b.n	8002824 <MOTOR_set_duty+0xf4>
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	889b      	ldrh	r3, [r3, #4]
 80027f6:	2b0c      	cmp	r3, #12
 80027f8:	d105      	bne.n	8002806 <MOTOR_set_duty+0xd6>
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	2300      	movs	r3, #0
 8002802:	6413      	str	r3, [r2, #64]	@ 0x40
 8002804:	e00e      	b.n	8002824 <MOTOR_set_duty+0xf4>
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	889b      	ldrh	r3, [r3, #4]
 800280a:	2b10      	cmp	r3, #16
 800280c:	d105      	bne.n	800281a <MOTOR_set_duty+0xea>
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	2300      	movs	r3, #0
 8002816:	6493      	str	r3, [r2, #72]	@ 0x48
 8002818:	e004      	b.n	8002824 <MOTOR_set_duty+0xf4>
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	2300      	movs	r3, #0
 8002822:	64d3      	str	r3, [r2, #76]	@ 0x4c
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timp_chx, 0);
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	88db      	ldrh	r3, [r3, #6]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d105      	bne.n	8002838 <MOTOR_set_duty+0x108>
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2200      	movs	r2, #0
 8002834:	635a      	str	r2, [r3, #52]	@ 0x34
 8002836:	e1ea      	b.n	8002c0e <MOTOR_set_duty+0x4de>
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	88db      	ldrh	r3, [r3, #6]
 800283c:	2b04      	cmp	r3, #4
 800283e:	d105      	bne.n	800284c <MOTOR_set_duty+0x11c>
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	2300      	movs	r3, #0
 8002848:	6393      	str	r3, [r2, #56]	@ 0x38
 800284a:	e1e0      	b.n	8002c0e <MOTOR_set_duty+0x4de>
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	88db      	ldrh	r3, [r3, #6]
 8002850:	2b08      	cmp	r3, #8
 8002852:	d105      	bne.n	8002860 <MOTOR_set_duty+0x130>
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	2300      	movs	r3, #0
 800285c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800285e:	e1d6      	b.n	8002c0e <MOTOR_set_duty+0x4de>
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	88db      	ldrh	r3, [r3, #6]
 8002864:	2b0c      	cmp	r3, #12
 8002866:	d105      	bne.n	8002874 <MOTOR_set_duty+0x144>
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	2300      	movs	r3, #0
 8002870:	6413      	str	r3, [r2, #64]	@ 0x40
 8002872:	e1cc      	b.n	8002c0e <MOTOR_set_duty+0x4de>
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	88db      	ldrh	r3, [r3, #6]
 8002878:	2b10      	cmp	r3, #16
 800287a:	d105      	bne.n	8002888 <MOTOR_set_duty+0x158>
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	2300      	movs	r3, #0
 8002884:	6493      	str	r3, [r2, #72]	@ 0x48
 8002886:	e1c2      	b.n	8002c0e <MOTOR_set_duty+0x4de>
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	2300      	movs	r3, #0
 8002890:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002892:	e1bc      	b.n	8002c0e <MOTOR_set_duty+0x4de>
    } else if (percent_duty > 0) {
 8002894:	edd7 7a06 	vldr	s15, [r7, #24]
 8002898:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800289c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a0:	f340 80d6 	ble.w	8002a50 <MOTOR_set_duty+0x320>
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timd_chx, 0);
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	889b      	ldrh	r3, [r3, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d105      	bne.n	80028b8 <MOTOR_set_duty+0x188>
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2200      	movs	r2, #0
 80028b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80028b6:	e02c      	b.n	8002912 <MOTOR_set_duty+0x1e2>
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	889b      	ldrh	r3, [r3, #4]
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d105      	bne.n	80028cc <MOTOR_set_duty+0x19c>
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	2300      	movs	r3, #0
 80028c8:	6393      	str	r3, [r2, #56]	@ 0x38
 80028ca:	e022      	b.n	8002912 <MOTOR_set_duty+0x1e2>
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	889b      	ldrh	r3, [r3, #4]
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	d105      	bne.n	80028e0 <MOTOR_set_duty+0x1b0>
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	2300      	movs	r3, #0
 80028dc:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80028de:	e018      	b.n	8002912 <MOTOR_set_duty+0x1e2>
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	889b      	ldrh	r3, [r3, #4]
 80028e4:	2b0c      	cmp	r3, #12
 80028e6:	d105      	bne.n	80028f4 <MOTOR_set_duty+0x1c4>
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	2300      	movs	r3, #0
 80028f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80028f2:	e00e      	b.n	8002912 <MOTOR_set_duty+0x1e2>
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	889b      	ldrh	r3, [r3, #4]
 80028f8:	2b10      	cmp	r3, #16
 80028fa:	d105      	bne.n	8002908 <MOTOR_set_duty+0x1d8>
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	2300      	movs	r3, #0
 8002904:	6493      	str	r3, [r2, #72]	@ 0x48
 8002906:	e004      	b.n	8002912 <MOTOR_set_duty+0x1e2>
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	2300      	movs	r3, #0
 8002910:	64d3      	str	r3, [r2, #76]	@ 0x4c
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timp_chx, (uint32_t)(percent_duty*42.499));
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	88db      	ldrh	r3, [r3, #6]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d113      	bne.n	8002942 <MOTOR_set_duty+0x212>
 800291a:	69b8      	ldr	r0, [r7, #24]
 800291c:	f7fd fde0 	bl	80004e0 <__aeabi_f2d>
 8002920:	a321      	add	r3, pc, #132	@ (adr r3, 80029a8 <MOTOR_set_duty+0x278>)
 8002922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002926:	f7fd fe33 	bl	8000590 <__aeabi_dmul>
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	4610      	mov	r0, r2
 8002930:	4619      	mov	r1, r3
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681c      	ldr	r4, [r3, #0]
 8002938:	f7fe f8da 	bl	8000af0 <__aeabi_d2uiz>
 800293c:	4603      	mov	r3, r0
 800293e:	6363      	str	r3, [r4, #52]	@ 0x34
 8002940:	e165      	b.n	8002c0e <MOTOR_set_duty+0x4de>
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	88db      	ldrh	r3, [r3, #6]
 8002946:	2b04      	cmp	r3, #4
 8002948:	d113      	bne.n	8002972 <MOTOR_set_duty+0x242>
 800294a:	69b8      	ldr	r0, [r7, #24]
 800294c:	f7fd fdc8 	bl	80004e0 <__aeabi_f2d>
 8002950:	a315      	add	r3, pc, #84	@ (adr r3, 80029a8 <MOTOR_set_duty+0x278>)
 8002952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002956:	f7fd fe1b 	bl	8000590 <__aeabi_dmul>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	4610      	mov	r0, r2
 8002960:	4619      	mov	r1, r3
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681c      	ldr	r4, [r3, #0]
 8002968:	f7fe f8c2 	bl	8000af0 <__aeabi_d2uiz>
 800296c:	4603      	mov	r3, r0
 800296e:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002970:	e14d      	b.n	8002c0e <MOTOR_set_duty+0x4de>
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	88db      	ldrh	r3, [r3, #6]
 8002976:	2b08      	cmp	r3, #8
 8002978:	d126      	bne.n	80029c8 <MOTOR_set_duty+0x298>
 800297a:	69b8      	ldr	r0, [r7, #24]
 800297c:	f7fd fdb0 	bl	80004e0 <__aeabi_f2d>
 8002980:	a309      	add	r3, pc, #36	@ (adr r3, 80029a8 <MOTOR_set_duty+0x278>)
 8002982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002986:	f7fd fe03 	bl	8000590 <__aeabi_dmul>
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	4610      	mov	r0, r2
 8002990:	4619      	mov	r1, r3
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681c      	ldr	r4, [r3, #0]
 8002998:	f7fe f8aa 	bl	8000af0 <__aeabi_d2uiz>
 800299c:	4603      	mov	r3, r0
 800299e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80029a0:	e135      	b.n	8002c0e <MOTOR_set_duty+0x4de>
 80029a2:	bf00      	nop
 80029a4:	f3af 8000 	nop.w
 80029a8:	3b645a1d 	.word	0x3b645a1d
 80029ac:	40453fdf 	.word	0x40453fdf
 80029b0:	00000000 	.word	0x00000000
 80029b4:	c0e4c060 	.word	0xc0e4c060
 80029b8:	47260300 	.word	0x47260300
 80029bc:	c7260300 	.word	0xc7260300
 80029c0:	00000000 	.word	0x00000000
 80029c4:	40e4c060 	.word	0x40e4c060
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	88db      	ldrh	r3, [r3, #6]
 80029cc:	2b0c      	cmp	r3, #12
 80029ce:	d113      	bne.n	80029f8 <MOTOR_set_duty+0x2c8>
 80029d0:	69b8      	ldr	r0, [r7, #24]
 80029d2:	f7fd fd85 	bl	80004e0 <__aeabi_f2d>
 80029d6:	a390      	add	r3, pc, #576	@ (adr r3, 8002c18 <MOTOR_set_duty+0x4e8>)
 80029d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029dc:	f7fd fdd8 	bl	8000590 <__aeabi_dmul>
 80029e0:	4602      	mov	r2, r0
 80029e2:	460b      	mov	r3, r1
 80029e4:	4610      	mov	r0, r2
 80029e6:	4619      	mov	r1, r3
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681c      	ldr	r4, [r3, #0]
 80029ee:	f7fe f87f 	bl	8000af0 <__aeabi_d2uiz>
 80029f2:	4603      	mov	r3, r0
 80029f4:	6423      	str	r3, [r4, #64]	@ 0x40
 80029f6:	e10a      	b.n	8002c0e <MOTOR_set_duty+0x4de>
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	88db      	ldrh	r3, [r3, #6]
 80029fc:	2b10      	cmp	r3, #16
 80029fe:	d113      	bne.n	8002a28 <MOTOR_set_duty+0x2f8>
 8002a00:	69b8      	ldr	r0, [r7, #24]
 8002a02:	f7fd fd6d 	bl	80004e0 <__aeabi_f2d>
 8002a06:	a384      	add	r3, pc, #528	@ (adr r3, 8002c18 <MOTOR_set_duty+0x4e8>)
 8002a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0c:	f7fd fdc0 	bl	8000590 <__aeabi_dmul>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4610      	mov	r0, r2
 8002a16:	4619      	mov	r1, r3
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681c      	ldr	r4, [r3, #0]
 8002a1e:	f7fe f867 	bl	8000af0 <__aeabi_d2uiz>
 8002a22:	4603      	mov	r3, r0
 8002a24:	64a3      	str	r3, [r4, #72]	@ 0x48
 8002a26:	e0f2      	b.n	8002c0e <MOTOR_set_duty+0x4de>
 8002a28:	69b8      	ldr	r0, [r7, #24]
 8002a2a:	f7fd fd59 	bl	80004e0 <__aeabi_f2d>
 8002a2e:	a37a      	add	r3, pc, #488	@ (adr r3, 8002c18 <MOTOR_set_duty+0x4e8>)
 8002a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a34:	f7fd fdac 	bl	8000590 <__aeabi_dmul>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	4619      	mov	r1, r3
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681c      	ldr	r4, [r3, #0]
 8002a46:	f7fe f853 	bl	8000af0 <__aeabi_d2uiz>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8002a4e:	e0de      	b.n	8002c0e <MOTOR_set_duty+0x4de>
    } else {
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timd_chx, 42499);
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	889b      	ldrh	r3, [r3, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d106      	bne.n	8002a66 <MOTOR_set_duty+0x336>
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f24a 6203 	movw	r2, #42499	@ 0xa603
 8002a62:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a64:	e031      	b.n	8002aca <MOTOR_set_duty+0x39a>
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	889b      	ldrh	r3, [r3, #4]
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d106      	bne.n	8002a7c <MOTOR_set_duty+0x34c>
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	f24a 6303 	movw	r3, #42499	@ 0xa603
 8002a78:	6393      	str	r3, [r2, #56]	@ 0x38
 8002a7a:	e026      	b.n	8002aca <MOTOR_set_duty+0x39a>
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	889b      	ldrh	r3, [r3, #4]
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d106      	bne.n	8002a92 <MOTOR_set_duty+0x362>
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	f24a 6303 	movw	r3, #42499	@ 0xa603
 8002a8e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002a90:	e01b      	b.n	8002aca <MOTOR_set_duty+0x39a>
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	889b      	ldrh	r3, [r3, #4]
 8002a96:	2b0c      	cmp	r3, #12
 8002a98:	d106      	bne.n	8002aa8 <MOTOR_set_duty+0x378>
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	f24a 6303 	movw	r3, #42499	@ 0xa603
 8002aa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aa6:	e010      	b.n	8002aca <MOTOR_set_duty+0x39a>
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	889b      	ldrh	r3, [r3, #4]
 8002aac:	2b10      	cmp	r3, #16
 8002aae:	d106      	bne.n	8002abe <MOTOR_set_duty+0x38e>
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	f24a 6303 	movw	r3, #42499	@ 0xa603
 8002aba:	6493      	str	r3, [r2, #72]	@ 0x48
 8002abc:	e005      	b.n	8002aca <MOTOR_set_duty+0x39a>
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	f24a 6303 	movw	r3, #42499	@ 0xa603
 8002ac8:	64d3      	str	r3, [r2, #76]	@ 0x4c
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timp_chx, (uint32_t)fabs((percent_duty*42.499)));
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	88db      	ldrh	r3, [r3, #6]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d117      	bne.n	8002b02 <MOTOR_set_duty+0x3d2>
 8002ad2:	69b8      	ldr	r0, [r7, #24]
 8002ad4:	f7fd fd04 	bl	80004e0 <__aeabi_f2d>
 8002ad8:	a34f      	add	r3, pc, #316	@ (adr r3, 8002c18 <MOTOR_set_duty+0x4e8>)
 8002ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ade:	f7fd fd57 	bl	8000590 <__aeabi_dmul>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	613a      	str	r2, [r7, #16]
 8002ae8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002aec:	617b      	str	r3, [r7, #20]
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681c      	ldr	r4, [r3, #0]
 8002af4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002af8:	f7fd fffa 	bl	8000af0 <__aeabi_d2uiz>
 8002afc:	4603      	mov	r3, r0
 8002afe:	6363      	str	r3, [r4, #52]	@ 0x34
 8002b00:	e085      	b.n	8002c0e <MOTOR_set_duty+0x4de>
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	88db      	ldrh	r3, [r3, #6]
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d117      	bne.n	8002b3a <MOTOR_set_duty+0x40a>
 8002b0a:	69b8      	ldr	r0, [r7, #24]
 8002b0c:	f7fd fce8 	bl	80004e0 <__aeabi_f2d>
 8002b10:	a341      	add	r3, pc, #260	@ (adr r3, 8002c18 <MOTOR_set_duty+0x4e8>)
 8002b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b16:	f7fd fd3b 	bl	8000590 <__aeabi_dmul>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	60ba      	str	r2, [r7, #8]
 8002b20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681c      	ldr	r4, [r3, #0]
 8002b2c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b30:	f7fd ffde 	bl	8000af0 <__aeabi_d2uiz>
 8002b34:	4603      	mov	r3, r0
 8002b36:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002b38:	e069      	b.n	8002c0e <MOTOR_set_duty+0x4de>
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	88db      	ldrh	r3, [r3, #6]
 8002b3e:	2b08      	cmp	r3, #8
 8002b40:	d117      	bne.n	8002b72 <MOTOR_set_duty+0x442>
 8002b42:	69b8      	ldr	r0, [r7, #24]
 8002b44:	f7fd fccc 	bl	80004e0 <__aeabi_f2d>
 8002b48:	a333      	add	r3, pc, #204	@ (adr r3, 8002c18 <MOTOR_set_duty+0x4e8>)
 8002b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4e:	f7fd fd1f 	bl	8000590 <__aeabi_dmul>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	603a      	str	r2, [r7, #0]
 8002b58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b5c:	607b      	str	r3, [r7, #4]
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681c      	ldr	r4, [r3, #0]
 8002b64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b68:	f7fd ffc2 	bl	8000af0 <__aeabi_d2uiz>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8002b70:	e04d      	b.n	8002c0e <MOTOR_set_duty+0x4de>
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	88db      	ldrh	r3, [r3, #6]
 8002b76:	2b0c      	cmp	r3, #12
 8002b78:	d116      	bne.n	8002ba8 <MOTOR_set_duty+0x478>
 8002b7a:	69b8      	ldr	r0, [r7, #24]
 8002b7c:	f7fd fcb0 	bl	80004e0 <__aeabi_f2d>
 8002b80:	a325      	add	r3, pc, #148	@ (adr r3, 8002c18 <MOTOR_set_duty+0x4e8>)
 8002b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b86:	f7fd fd03 	bl	8000590 <__aeabi_dmul>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	4615      	mov	r5, r2
 8002b90:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681c      	ldr	r4, [r3, #0]
 8002b9a:	4628      	mov	r0, r5
 8002b9c:	4631      	mov	r1, r6
 8002b9e:	f7fd ffa7 	bl	8000af0 <__aeabi_d2uiz>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	6423      	str	r3, [r4, #64]	@ 0x40
 8002ba6:	e032      	b.n	8002c0e <MOTOR_set_duty+0x4de>
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	88db      	ldrh	r3, [r3, #6]
 8002bac:	2b10      	cmp	r3, #16
 8002bae:	d116      	bne.n	8002bde <MOTOR_set_duty+0x4ae>
 8002bb0:	69b8      	ldr	r0, [r7, #24]
 8002bb2:	f7fd fc95 	bl	80004e0 <__aeabi_f2d>
 8002bb6:	a318      	add	r3, pc, #96	@ (adr r3, 8002c18 <MOTOR_set_duty+0x4e8>)
 8002bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bbc:	f7fd fce8 	bl	8000590 <__aeabi_dmul>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4692      	mov	sl, r2
 8002bc6:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681c      	ldr	r4, [r3, #0]
 8002bd0:	4650      	mov	r0, sl
 8002bd2:	4659      	mov	r1, fp
 8002bd4:	f7fd ff8c 	bl	8000af0 <__aeabi_d2uiz>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	64a3      	str	r3, [r4, #72]	@ 0x48
 8002bdc:	e017      	b.n	8002c0e <MOTOR_set_duty+0x4de>
 8002bde:	69b8      	ldr	r0, [r7, #24]
 8002be0:	f7fd fc7e 	bl	80004e0 <__aeabi_f2d>
 8002be4:	a30c      	add	r3, pc, #48	@ (adr r3, 8002c18 <MOTOR_set_duty+0x4e8>)
 8002be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bea:	f7fd fcd1 	bl	8000590 <__aeabi_dmul>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4690      	mov	r8, r2
 8002bf4:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681c      	ldr	r4, [r3, #0]
 8002bfe:	4640      	mov	r0, r8
 8002c00:	4649      	mov	r1, r9
 8002c02:	f7fd ff75 	bl	8000af0 <__aeabi_d2uiz>
 8002c06:	4603      	mov	r3, r0
 8002c08:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8002c0a:	e000      	b.n	8002c0e <MOTOR_set_duty+0x4de>
        return;
 8002c0c:	bf00      	nop
    }
}
 8002c0e:	3724      	adds	r7, #36	@ 0x24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c16:	bf00      	nop
 8002c18:	3b645a1d 	.word	0x3b645a1d
 8002c1c:	40453fdf 	.word	0x40453fdf

08002c20 <PID_controller_init>:
float boundary = 0.05;

//-------------------------------------------Function Code-------------------------------------------------------//

void PID_controller_init(PID_struct* PID,float UP_Kp, float UP_Ki, float UP_Kd)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	ed87 0a02 	vstr	s0, [r7, #8]
 8002c2c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002c30:	ed87 1a00 	vstr	s2, [r7]
 PID->Kp = UP_Kp;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	601a      	str	r2, [r3, #0]
 PID->Ki = UP_Ki;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	605a      	str	r2, [r3, #4]
 PID->Kd = UP_Kd;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	609a      	str	r2, [r3, #8]

 PID->Error[n] = 0;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f04f 0200 	mov.w	r2, #0
 8002c4c:	60da      	str	r2, [r3, #12]
 PID->Error[n_1] = 0;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	611a      	str	r2, [r3, #16]
 PID->Error[n_2] = 0;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	615a      	str	r2, [r3, #20]
 PID->out = 0;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f04f 0200 	mov.w	r2, #0
 8002c64:	619a      	str	r2, [r3, #24]
}
 8002c66:	bf00      	nop
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
	...

08002c74 <PID_controller_calculate_pos>:
void PID_controller_calculate_pos(PID_struct* PID,AMT_Encoder* Feedback, float setpoint)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	ed87 0a01 	vstr	s0, [r7, #4]
 // Output velocity in boundary of 550mm/s
 PID->Error[n] = setpoint - Feedback->Linear_Position;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8002c88:	ed97 7a01 	vldr	s14, [r7, #4]
 8002c8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	edc3 7a03 	vstr	s15, [r3, #12]
 if (!((PID->out >= 550 && PID->Error[n] > 0) || (PID->out <= -550 && PID->Error[n] < 0))) {
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c9c:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8002dd8 <PID_controller_calculate_pos+0x164>
 8002ca0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca8:	bfac      	ite	ge
 8002caa:	2301      	movge	r3, #1
 8002cac:	2300      	movlt	r3, #0
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	f083 0301 	eor.w	r3, r3, #1
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10f      	bne.n	8002cda <PID_controller_calculate_pos+0x66>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	edd3 7a03 	vldr	s15, [r3, #12]
 8002cc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc8:	bfcc      	ite	gt
 8002cca:	2301      	movgt	r3, #1
 8002ccc:	2300      	movle	r3, #0
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	f083 0301 	eor.w	r3, r3, #1
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d056      	beq.n	8002d88 <PID_controller_calculate_pos+0x114>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ce0:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8002ddc <PID_controller_calculate_pos+0x168>
 8002ce4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cec:	bf94      	ite	ls
 8002cee:	2301      	movls	r3, #1
 8002cf0:	2300      	movhi	r3, #0
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	f083 0301 	eor.w	r3, r3, #1
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10f      	bne.n	8002d1e <PID_controller_calculate_pos+0xaa>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d0c:	bf4c      	ite	mi
 8002d0e:	2301      	movmi	r3, #1
 8002d10:	2300      	movpl	r3, #0
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	f083 0301 	eor.w	r3, r3, #1
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d034      	beq.n	8002d88 <PID_controller_calculate_pos+0x114>
     PID->out += ((PID->Kp + PID->Ki + PID->Kd) * PID->Error[n])
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	ed93 7a06 	vldr	s14, [r3, #24]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	edd3 6a00 	vldr	s13, [r3]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d30:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d3a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d44:	ee66 6aa7 	vmul.f32	s13, s13, s15
                      - ((PID->Kp + (2 * PID->Kd)) * PID->Error[n_1])
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	ed93 6a00 	vldr	s12, [r3]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d54:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002d58:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d62:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002d66:	ee76 6ae7 	vsub.f32	s13, s13, s15
                      + (PID->Kd * PID->Error[n_2]);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	ed93 6a02 	vldr	s12, [r3, #8]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	edd3 7a05 	vldr	s15, [r3, #20]
 8002d76:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
     PID->out += ((PID->Kp + PID->Ki + PID->Kd) * PID->Error[n])
 8002d7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	edc3 7a06 	vstr	s15, [r3, #24]
 }
 if(PID->out > 550){
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	edd3 7a06 	vldr	s15, [r3, #24]
 8002d8e:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002dd8 <PID_controller_calculate_pos+0x164>
 8002d92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9a:	dd02      	ble.n	8002da2 <PID_controller_calculate_pos+0x12e>
	 PID->out = 550;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4a10      	ldr	r2, [pc, #64]	@ (8002de0 <PID_controller_calculate_pos+0x16c>)
 8002da0:	619a      	str	r2, [r3, #24]
 }
 if(PID->out < -550){
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	edd3 7a06 	vldr	s15, [r3, #24]
 8002da8:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8002ddc <PID_controller_calculate_pos+0x168>
 8002dac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db4:	d502      	bpl.n	8002dbc <PID_controller_calculate_pos+0x148>
	 PID->out = -550;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	4a0a      	ldr	r2, [pc, #40]	@ (8002de4 <PID_controller_calculate_pos+0x170>)
 8002dba:	619a      	str	r2, [r3, #24]
 }
 PID->Error[n_2] = PID->Error[n_1];
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	691a      	ldr	r2, [r3, #16]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	615a      	str	r2, [r3, #20]
 PID->Error[n_1] = PID->Error[n];
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	611a      	str	r2, [r3, #16]
}
 8002dcc:	bf00      	nop
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	44098000 	.word	0x44098000
 8002ddc:	c4098000 	.word	0xc4098000
 8002de0:	44098000 	.word	0x44098000
 8002de4:	c4098000 	.word	0xc4098000

08002de8 <PID_controller_calculate_velo>:

void PID_controller_calculate_velo(PID_struct* PID,AMT_Encoder* Feedback, float setpoint)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	ed87 0a01 	vstr	s0, [r7, #4]
 // Output pwm to drive the motor
 PID->Error[n] = setpoint - Feedback->Linear_Velocity + Traj.currentVelocity;
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002dfc:	ed97 7a01 	vldr	s14, [r7, #4]
 8002e00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e04:	4b54      	ldr	r3, [pc, #336]	@ (8002f58 <PID_controller_calculate_velo+0x170>)
 8002e06:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	edc3 7a03 	vstr	s15, [r3, #12]
 if (!((PID->out >= 1000 && PID->Error[n] > 0) || (PID->out <= -1000 && PID->Error[n] < 0))) {
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e1a:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8002f5c <PID_controller_calculate_velo+0x174>
 8002e1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e26:	bfac      	ite	ge
 8002e28:	2301      	movge	r3, #1
 8002e2a:	2300      	movlt	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	f083 0301 	eor.w	r3, r3, #1
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10f      	bne.n	8002e58 <PID_controller_calculate_velo+0x70>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e46:	bfcc      	ite	gt
 8002e48:	2301      	movgt	r3, #1
 8002e4a:	2300      	movle	r3, #0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	f083 0301 	eor.w	r3, r3, #1
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d056      	beq.n	8002f06 <PID_controller_calculate_velo+0x11e>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e5e:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8002f60 <PID_controller_calculate_velo+0x178>
 8002e62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e6a:	bf94      	ite	ls
 8002e6c:	2301      	movls	r3, #1
 8002e6e:	2300      	movhi	r3, #0
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	f083 0301 	eor.w	r3, r3, #1
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10f      	bne.n	8002e9c <PID_controller_calculate_velo+0xb4>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e8a:	bf4c      	ite	mi
 8002e8c:	2301      	movmi	r3, #1
 8002e8e:	2300      	movpl	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	f083 0301 	eor.w	r3, r3, #1
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d034      	beq.n	8002f06 <PID_controller_calculate_velo+0x11e>
     PID->out += ((PID->Kp + PID->Ki + PID->Kd) * PID->Error[n])
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	ed93 7a06 	vldr	s14, [r3, #24]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	edd3 6a00 	vldr	s13, [r3]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	edd3 7a01 	vldr	s15, [r3, #4]
 8002eae:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	edd3 7a02 	vldr	s15, [r3, #8]
 8002eb8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ec2:	ee66 6aa7 	vmul.f32	s13, s13, s15
                      - ((PID->Kp + (2 * PID->Kd)) * PID->Error[n_1])
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	ed93 6a00 	vldr	s12, [r3]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ed2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002ed6:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ee0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002ee4:	ee76 6ae7 	vsub.f32	s13, s13, s15
                      + (PID->Kd * PID->Error[n_2]);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	ed93 6a02 	vldr	s12, [r3, #8]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	edd3 7a05 	vldr	s15, [r3, #20]
 8002ef4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002ef8:	ee76 7aa7 	vadd.f32	s15, s13, s15
     PID->out += ((PID->Kp + PID->Ki + PID->Kd) * PID->Error[n])
 8002efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	edc3 7a06 	vstr	s15, [r3, #24]
 }
 if(PID->out > 1000){
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	edd3 7a06 	vldr	s15, [r3, #24]
 8002f0c:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8002f5c <PID_controller_calculate_velo+0x174>
 8002f10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f18:	dd02      	ble.n	8002f20 <PID_controller_calculate_velo+0x138>
	 PID->out = 1000;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	4a11      	ldr	r2, [pc, #68]	@ (8002f64 <PID_controller_calculate_velo+0x17c>)
 8002f1e:	619a      	str	r2, [r3, #24]
 }
 if(PID->out < -1000){
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	edd3 7a06 	vldr	s15, [r3, #24]
 8002f26:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002f60 <PID_controller_calculate_velo+0x178>
 8002f2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f32:	d502      	bpl.n	8002f3a <PID_controller_calculate_velo+0x152>
	 PID->out = -1000;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4a0c      	ldr	r2, [pc, #48]	@ (8002f68 <PID_controller_calculate_velo+0x180>)
 8002f38:	619a      	str	r2, [r3, #24]
 }
 PID->Error[n_2] = PID->Error[n_1];
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	691a      	ldr	r2, [r3, #16]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	615a      	str	r2, [r3, #20]
 PID->Error[n_1] = PID->Error[n];
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	611a      	str	r2, [r3, #16]
}
 8002f4a:	bf00      	nop
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	200009dc 	.word	0x200009dc
 8002f5c:	447a0000 	.word	0x447a0000
 8002f60:	c47a0000 	.word	0xc47a0000
 8002f64:	447a0000 	.word	0x447a0000
 8002f68:	c47a0000 	.word	0xc47a0000

08002f6c <PID_controller_cascade>:

void PID_controller_cascade(PID_struct* PID_pos, PID_struct* PID_vel, AMT_Encoder* QEI, float setpoint)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
 8002f78:	ed87 0a00 	vstr	s0, [r7]
	PID_controller_calculate_pos(PID_pos, QEI , setpoint);
 8002f7c:	ed97 0a00 	vldr	s0, [r7]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f7ff fe76 	bl	8002c74 <PID_controller_calculate_pos>
	PID_controller_calculate_velo(PID_vel, QEI, ((PID_pos->out)));
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	edd3 7a06 	vldr	s15, [r3, #24]
 8002f8e:	eeb0 0a67 	vmov.f32	s0, s15
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	68b8      	ldr	r0, [r7, #8]
 8002f96:	f7ff ff27 	bl	8002de8 <PID_controller_calculate_velo>
//	PID_controller_calculate_velo(PID_vel, QEI, Traj.currentVelocity);
}
 8002f9a:	bf00      	nop
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
	...

08002fa4 <PS2X_Reader>:
    PS2->PIDPos = 0;
    PS2->on = 0;
}

void PS2X_Reader()
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
	// Keys Map
	static uint32_t timestamp = 0;
	if (timestamp < HAL_GetTick())
 8002faa:	f001 fe11 	bl	8004bd0 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	4b53      	ldr	r3, [pc, #332]	@ (8003100 <PS2X_Reader+0x15c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d908      	bls.n	8002fca <PS2X_Reader+0x26>
	{
		timestamp = HAL_GetTick() + 25;
 8002fb8:	f001 fe0a 	bl	8004bd0 <HAL_GetTick>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	3319      	adds	r3, #25
 8002fc0:	4a4f      	ldr	r2, [pc, #316]	@ (8003100 <PS2X_Reader+0x15c>)
 8002fc2:	6013      	str	r3, [r2, #0]
		ps2.ps2RX[0] = 0;
 8002fc4:	4b4f      	ldr	r3, [pc, #316]	@ (8003104 <PS2X_Reader+0x160>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	701a      	strb	r2, [r3, #0]
	}

	// Clear previous state
	for (int i = 0; i < 6; i++)
 8002fca:	2300      	movs	r3, #0
 8002fcc:	607b      	str	r3, [r7, #4]
 8002fce:	e00e      	b.n	8002fee <PS2X_Reader+0x4a>
	{
		ps2.l[i] = 0;
 8002fd0:	4a4c      	ldr	r2, [pc, #304]	@ (8003104 <PS2X_Reader+0x160>)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	3314      	adds	r3, #20
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		ps2.r[i] = 0;
 8002fdc:	4a49      	ldr	r2, [pc, #292]	@ (8003104 <PS2X_Reader+0x160>)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	330e      	adds	r3, #14
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 6; i++)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3301      	adds	r3, #1
 8002fec:	607b      	str	r3, [r7, #4]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b05      	cmp	r3, #5
 8002ff2:	dded      	ble.n	8002fd0 <PS2X_Reader+0x2c>
	}

	// Set current state
	if (ps2.ps2RX[0] >= 65 && ps2.ps2RX[0] <= 70) {
 8002ff4:	4b43      	ldr	r3, [pc, #268]	@ (8003104 <PS2X_Reader+0x160>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b40      	cmp	r3, #64	@ 0x40
 8002ffa:	d90b      	bls.n	8003014 <PS2X_Reader+0x70>
 8002ffc:	4b41      	ldr	r3, [pc, #260]	@ (8003104 <PS2X_Reader+0x160>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b46      	cmp	r3, #70	@ 0x46
 8003002:	d807      	bhi.n	8003014 <PS2X_Reader+0x70>
		ps2.l[ps2.ps2RX[0] - 65] = 1;
 8003004:	4b3f      	ldr	r3, [pc, #252]	@ (8003104 <PS2X_Reader+0x160>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	3b41      	subs	r3, #65	@ 0x41
 800300a:	4a3e      	ldr	r2, [pc, #248]	@ (8003104 <PS2X_Reader+0x160>)
 800300c:	3314      	adds	r3, #20
 800300e:	2101      	movs	r1, #1
 8003010:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	if (ps2.ps2RX[0] >= 73 && ps2.ps2RX[0] <= 78) {
 8003014:	4b3b      	ldr	r3, [pc, #236]	@ (8003104 <PS2X_Reader+0x160>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b48      	cmp	r3, #72	@ 0x48
 800301a:	d90b      	bls.n	8003034 <PS2X_Reader+0x90>
 800301c:	4b39      	ldr	r3, [pc, #228]	@ (8003104 <PS2X_Reader+0x160>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b4e      	cmp	r3, #78	@ 0x4e
 8003022:	d807      	bhi.n	8003034 <PS2X_Reader+0x90>
		ps2.r[ps2.ps2RX[0] - 73] = 1;
 8003024:	4b37      	ldr	r3, [pc, #220]	@ (8003104 <PS2X_Reader+0x160>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	3b49      	subs	r3, #73	@ 0x49
 800302a:	4a36      	ldr	r2, [pc, #216]	@ (8003104 <PS2X_Reader+0x160>)
 800302c:	330e      	adds	r3, #14
 800302e:	2101      	movs	r1, #1
 8003030:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}

    if (ps2.ps2RX[0] == 69) 		// Press L4 to switch to use Joy stick
 8003034:	4b33      	ldr	r3, [pc, #204]	@ (8003104 <PS2X_Reader+0x160>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b45      	cmp	r3, #69	@ 0x45
 800303a:	d105      	bne.n	8003048 <PS2X_Reader+0xa4>
    {
        ps2.mode = 1;
 800303c:	4b31      	ldr	r3, [pc, #196]	@ (8003104 <PS2X_Reader+0x160>)
 800303e:	2201      	movs	r2, #1
 8003040:	66da      	str	r2, [r3, #108]	@ 0x6c
        ps2.on = 0;
 8003042:	4b30      	ldr	r3, [pc, #192]	@ (8003104 <PS2X_Reader+0x160>)
 8003044:	2200      	movs	r2, #0
 8003046:	67da      	str	r2, [r3, #124]	@ 0x7c
    }
    if (ps2.ps2RX[0] == 70)		// Press L5 to switch to use Button
 8003048:	4b2e      	ldr	r3, [pc, #184]	@ (8003104 <PS2X_Reader+0x160>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b46      	cmp	r3, #70	@ 0x46
 800304e:	d10d      	bne.n	800306c <PS2X_Reader+0xc8>
    {
        ps2.mode = 2;
 8003050:	4b2c      	ldr	r3, [pc, #176]	@ (8003104 <PS2X_Reader+0x160>)
 8003052:	2202      	movs	r2, #2
 8003054:	66da      	str	r2, [r3, #108]	@ 0x6c
        PID_velo.out = 0;
 8003056:	4b2c      	ldr	r3, [pc, #176]	@ (8003108 <PS2X_Reader+0x164>)
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	619a      	str	r2, [r3, #24]
        ps2.on = 1;
 800305e:	4b29      	ldr	r3, [pc, #164]	@ (8003104 <PS2X_Reader+0x160>)
 8003060:	2201      	movs	r2, #1
 8003062:	67da      	str	r2, [r3, #124]	@ 0x7c
        ps2.PIDPos = AMT.Linear_Position;
 8003064:	4b29      	ldr	r3, [pc, #164]	@ (800310c <PS2X_Reader+0x168>)
 8003066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003068:	4a26      	ldr	r2, [pc, #152]	@ (8003104 <PS2X_Reader+0x160>)
 800306a:	6793      	str	r3, [r2, #120]	@ 0x78
    }

    // Mode Joy stick
    if (ps2.mode == 1)
 800306c:	4b25      	ldr	r3, [pc, #148]	@ (8003104 <PS2X_Reader+0x160>)
 800306e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003070:	2b01      	cmp	r3, #1
 8003072:	d124      	bne.n	80030be <PS2X_Reader+0x11a>
    {
        static uint32_t debounce_time = 0;
        uint32_t current_time = HAL_GetTick();
 8003074:	f001 fdac 	bl	8004bd0 <HAL_GetTick>
 8003078:	6038      	str	r0, [r7, #0]
        if (current_time > debounce_time)
 800307a:	4b25      	ldr	r3, [pc, #148]	@ (8003110 <PS2X_Reader+0x16c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	429a      	cmp	r2, r3
 8003082:	d938      	bls.n	80030f6 <PS2X_Reader+0x152>
        {
            if (ps2.l[0] == 1)
 8003084:	4b1f      	ldr	r3, [pc, #124]	@ (8003104 <PS2X_Reader+0x160>)
 8003086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003088:	2b01      	cmp	r3, #1
 800308a:	d108      	bne.n	800309e <PS2X_Reader+0xfa>
            {
                // Increase ps2.PIDPos
            	ps2.pwmOut = 350;
 800308c:	4b1d      	ldr	r3, [pc, #116]	@ (8003104 <PS2X_Reader+0x160>)
 800308e:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8003092:	669a      	str	r2, [r3, #104]	@ 0x68
				debounce_time = current_time + 250; // Debounce delay of 250ms
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	33fa      	adds	r3, #250	@ 0xfa
 8003098:	4a1d      	ldr	r2, [pc, #116]	@ (8003110 <PS2X_Reader+0x16c>)
 800309a:	6013      	str	r3, [r2, #0]
        }

        handle_shelve_mode();
        handle_PIDPos_adjustment();
    }
}
 800309c:	e02b      	b.n	80030f6 <PS2X_Reader+0x152>
            else if (ps2.l[1] == 1)
 800309e:	4b19      	ldr	r3, [pc, #100]	@ (8003104 <PS2X_Reader+0x160>)
 80030a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d107      	bne.n	80030b6 <PS2X_Reader+0x112>
            	ps2.pwmOut = 0;
 80030a6:	4b17      	ldr	r3, [pc, #92]	@ (8003104 <PS2X_Reader+0x160>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	669a      	str	r2, [r3, #104]	@ 0x68
				debounce_time = current_time + 250; // Debounce delay of 250ms
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	33fa      	adds	r3, #250	@ 0xfa
 80030b0:	4a17      	ldr	r2, [pc, #92]	@ (8003110 <PS2X_Reader+0x16c>)
 80030b2:	6013      	str	r3, [r2, #0]
}
 80030b4:	e01f      	b.n	80030f6 <PS2X_Reader+0x152>
            else{ps2.pwmOut = 200;}
 80030b6:	4b13      	ldr	r3, [pc, #76]	@ (8003104 <PS2X_Reader+0x160>)
 80030b8:	22c8      	movs	r2, #200	@ 0xc8
 80030ba:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80030bc:	e01b      	b.n	80030f6 <PS2X_Reader+0x152>
    else if (ps2.mode == 2)
 80030be:	4b11      	ldr	r3, [pc, #68]	@ (8003104 <PS2X_Reader+0x160>)
 80030c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d117      	bne.n	80030f6 <PS2X_Reader+0x152>
        ps2.on = 1;
 80030c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003104 <PS2X_Reader+0x160>)
 80030c8:	2201      	movs	r2, #1
 80030ca:	67da      	str	r2, [r3, #124]	@ 0x7c
        ps2.ps2Y = 0;
 80030cc:	4b0d      	ldr	r3, [pc, #52]	@ (8003104 <PS2X_Reader+0x160>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	61da      	str	r2, [r3, #28]
        if (ps2.ps2RX[0] == 67) {
 80030d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003104 <PS2X_Reader+0x160>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b43      	cmp	r3, #67	@ 0x43
 80030d8:	d102      	bne.n	80030e0 <PS2X_Reader+0x13c>
            ps2.l[2] = 1;
 80030da:	4b0a      	ldr	r3, [pc, #40]	@ (8003104 <PS2X_Reader+0x160>)
 80030dc:	2201      	movs	r2, #1
 80030de:	659a      	str	r2, [r3, #88]	@ 0x58
        if (ps2.ps2RX[0] == 68) {
 80030e0:	4b08      	ldr	r3, [pc, #32]	@ (8003104 <PS2X_Reader+0x160>)
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	2b44      	cmp	r3, #68	@ 0x44
 80030e6:	d102      	bne.n	80030ee <PS2X_Reader+0x14a>
            ps2.l[3] = 1;
 80030e8:	4b06      	ldr	r3, [pc, #24]	@ (8003104 <PS2X_Reader+0x160>)
 80030ea:	2201      	movs	r2, #1
 80030ec:	65da      	str	r2, [r3, #92]	@ 0x5c
        handle_shelve_mode();
 80030ee:	f000 f811 	bl	8003114 <handle_shelve_mode>
        handle_PIDPos_adjustment();
 80030f2:	f000 f87b 	bl	80031ec <handle_PIDPos_adjustment>
}
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	200002d0 	.word	0x200002d0
 8003104:	20000a40 	.word	0x20000a40
 8003108:	20000adc 	.word	0x20000adc
 800310c:	200009f0 	.word	0x200009f0
 8003110:	200002d4 	.word	0x200002d4

08003114 <handle_shelve_mode>:

void handle_shelve_mode()
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
    static uint32_t debounce_time = 0;
    uint32_t current_time = HAL_GetTick();
 800311a:	f001 fd59 	bl	8004bd0 <HAL_GetTick>
 800311e:	6078      	str	r0, [r7, #4]
    if (base.ShelveMode == 1)
 8003120:	4b2b      	ldr	r3, [pc, #172]	@ (80031d0 <handle_shelve_mode+0xbc>)
 8003122:	8b1b      	ldrh	r3, [r3, #24]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d14e      	bne.n	80031c6 <handle_shelve_mode+0xb2>
    {
        if (ps2.ps2RX[0] == 76 && current_time > debounce_time)
 8003128:	4b2a      	ldr	r3, [pc, #168]	@ (80031d4 <handle_shelve_mode+0xc0>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b4c      	cmp	r3, #76	@ 0x4c
 800312e:	d118      	bne.n	8003162 <handle_shelve_mode+0x4e>
 8003130:	4b29      	ldr	r3, [pc, #164]	@ (80031d8 <handle_shelve_mode+0xc4>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	429a      	cmp	r2, r3
 8003138:	d913      	bls.n	8003162 <handle_shelve_mode+0x4e>
        {
            // Press Select to save shelve
            base.Shelve[count] = AMT.Linear_Position;
 800313a:	4b28      	ldr	r3, [pc, #160]	@ (80031dc <handle_shelve_mode+0xc8>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a28      	ldr	r2, [pc, #160]	@ (80031e0 <handle_shelve_mode+0xcc>)
 8003140:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003142:	4923      	ldr	r1, [pc, #140]	@ (80031d0 <handle_shelve_mode+0xbc>)
 8003144:	3306      	adds	r3, #6
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	3304      	adds	r3, #4
 800314c:	601a      	str	r2, [r3, #0]
            count += 1;
 800314e:	4b23      	ldr	r3, [pc, #140]	@ (80031dc <handle_shelve_mode+0xc8>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	3301      	adds	r3, #1
 8003154:	4a21      	ldr	r2, [pc, #132]	@ (80031dc <handle_shelve_mode+0xc8>)
 8003156:	6013      	str	r3, [r2, #0]
            debounce_time = current_time + 250; // Debounce delay of 250ms
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	33fa      	adds	r3, #250	@ 0xfa
 800315c:	4a1e      	ldr	r2, [pc, #120]	@ (80031d8 <handle_shelve_mode+0xc4>)
 800315e:	6013      	str	r3, [r2, #0]
 8003160:	e031      	b.n	80031c6 <handle_shelve_mode+0xb2>
        }
        else if (ps2.ps2RX[0] == 73 && current_time > debounce_time)
 8003162:	4b1c      	ldr	r3, [pc, #112]	@ (80031d4 <handle_shelve_mode+0xc0>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b49      	cmp	r3, #73	@ 0x49
 8003168:	d119      	bne.n	800319e <handle_shelve_mode+0x8a>
 800316a:	4b1b      	ldr	r3, [pc, #108]	@ (80031d8 <handle_shelve_mode+0xc4>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	429a      	cmp	r2, r3
 8003172:	d914      	bls.n	800319e <handle_shelve_mode+0x8a>
        {
            // Press Triangle to delete old array
            base.Shelve[count - 1] = 0;
 8003174:	4b19      	ldr	r3, [pc, #100]	@ (80031dc <handle_shelve_mode+0xc8>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	3b01      	subs	r3, #1
 800317a:	4a15      	ldr	r2, [pc, #84]	@ (80031d0 <handle_shelve_mode+0xbc>)
 800317c:	3306      	adds	r3, #6
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	3304      	adds	r3, #4
 8003184:	f04f 0200 	mov.w	r2, #0
 8003188:	601a      	str	r2, [r3, #0]
            count -= 1;
 800318a:	4b14      	ldr	r3, [pc, #80]	@ (80031dc <handle_shelve_mode+0xc8>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	3b01      	subs	r3, #1
 8003190:	4a12      	ldr	r2, [pc, #72]	@ (80031dc <handle_shelve_mode+0xc8>)
 8003192:	6013      	str	r3, [r2, #0]
            debounce_time = current_time + 250; // Debounce delay of 250ms
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	33fa      	adds	r3, #250	@ 0xfa
 8003198:	4a0f      	ldr	r2, [pc, #60]	@ (80031d8 <handle_shelve_mode+0xc4>)
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	e013      	b.n	80031c6 <handle_shelve_mode+0xb2>
        }
        else if (ps2.ps2RX[0] == 72 && base.ShelveMode == 1)
 800319e:	4b0d      	ldr	r3, [pc, #52]	@ (80031d4 <handle_shelve_mode+0xc0>)
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	2b48      	cmp	r3, #72	@ 0x48
 80031a4:	d10f      	bne.n	80031c6 <handle_shelve_mode+0xb2>
 80031a6:	4b0a      	ldr	r3, [pc, #40]	@ (80031d0 <handle_shelve_mode+0xbc>)
 80031a8:	8b1b      	ldrh	r3, [r3, #24]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d10b      	bne.n	80031c6 <handle_shelve_mode+0xb2>
        {
            // Press Start to finish set shelves and send data to basesystem
            base.ShelveMode = 0;
 80031ae:	4b08      	ldr	r3, [pc, #32]	@ (80031d0 <handle_shelve_mode+0xbc>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	831a      	strh	r2, [r3, #24]
            Traj.currentPosition = AMT.Linear_Position;
 80031b4:	4b0a      	ldr	r3, [pc, #40]	@ (80031e0 <handle_shelve_mode+0xcc>)
 80031b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b8:	4a0a      	ldr	r2, [pc, #40]	@ (80031e4 <handle_shelve_mode+0xd0>)
 80031ba:	6093      	str	r3, [r2, #8]
            temp_pos = AMT.Linear_Position;
 80031bc:	4b08      	ldr	r3, [pc, #32]	@ (80031e0 <handle_shelve_mode+0xcc>)
 80031be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c0:	4a09      	ldr	r2, [pc, #36]	@ (80031e8 <handle_shelve_mode+0xd4>)
 80031c2:	6013      	str	r3, [r2, #0]

        }
    }
}
 80031c4:	e7ff      	b.n	80031c6 <handle_shelve_mode+0xb2>
 80031c6:	bf00      	nop
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20000af8 	.word	0x20000af8
 80031d4:	20000a40 	.word	0x20000a40
 80031d8:	200002d8 	.word	0x200002d8
 80031dc:	200002cc 	.word	0x200002cc
 80031e0:	200009f0 	.word	0x200009f0
 80031e4:	200009dc 	.word	0x200009dc
 80031e8:	20000298 	.word	0x20000298

080031ec <handle_PIDPos_adjustment>:

void handle_PIDPos_adjustment()
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
    static uint32_t debounce_time = 0;
    uint32_t current_time = HAL_GetTick();
 80031f2:	f001 fced 	bl	8004bd0 <HAL_GetTick>
 80031f6:	6078      	str	r0, [r7, #4]

    if (current_time > debounce_time)
 80031f8:	4b16      	ldr	r3, [pc, #88]	@ (8003254 <handle_PIDPos_adjustment+0x68>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d924      	bls.n	800324c <handle_PIDPos_adjustment+0x60>
    {
        if (ps2.l[2] == 1)
 8003202:	4b15      	ldr	r3, [pc, #84]	@ (8003258 <handle_PIDPos_adjustment+0x6c>)
 8003204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003206:	2b01      	cmp	r3, #1
 8003208:	d10e      	bne.n	8003228 <handle_PIDPos_adjustment+0x3c>
        {
            // Increase ps2.PIDPos
            ps2.PIDPos += 0.5;
 800320a:	4b13      	ldr	r3, [pc, #76]	@ (8003258 <handle_PIDPos_adjustment+0x6c>)
 800320c:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 8003210:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003214:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003218:	4b0f      	ldr	r3, [pc, #60]	@ (8003258 <handle_PIDPos_adjustment+0x6c>)
 800321a:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
            debounce_time = current_time + 250; // Debounce delay of 250ms
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	33fa      	adds	r3, #250	@ 0xfa
 8003222:	4a0c      	ldr	r2, [pc, #48]	@ (8003254 <handle_PIDPos_adjustment+0x68>)
 8003224:	6013      	str	r3, [r2, #0]
            // Decrease ps2.PIDPos
            ps2.PIDPos -= 0.5;
            debounce_time = current_time + 250; // Debounce delay of 250ms
        }
    }
}
 8003226:	e011      	b.n	800324c <handle_PIDPos_adjustment+0x60>
        else if (ps2.l[3] == 1)
 8003228:	4b0b      	ldr	r3, [pc, #44]	@ (8003258 <handle_PIDPos_adjustment+0x6c>)
 800322a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800322c:	2b01      	cmp	r3, #1
 800322e:	d10d      	bne.n	800324c <handle_PIDPos_adjustment+0x60>
            ps2.PIDPos -= 0.5;
 8003230:	4b09      	ldr	r3, [pc, #36]	@ (8003258 <handle_PIDPos_adjustment+0x6c>)
 8003232:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 8003236:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800323a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800323e:	4b06      	ldr	r3, [pc, #24]	@ (8003258 <handle_PIDPos_adjustment+0x6c>)
 8003240:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
            debounce_time = current_time + 250; // Debounce delay of 250ms
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	33fa      	adds	r3, #250	@ 0xfa
 8003248:	4a02      	ldr	r2, [pc, #8]	@ (8003254 <handle_PIDPos_adjustment+0x68>)
 800324a:	6013      	str	r3, [r2, #0]
}
 800324c:	bf00      	nop
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	200002dc 	.word	0x200002dc
 8003258:	20000a40 	.word	0x20000a40

0800325c <Traject_init>:
float Time_dec;

//-------------------------------------------Function Code-------------------------------------------------------//

void Traject_init(Trap_Traj* Traj, float v_max, float a_max)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	ed87 0a02 	vstr	s0, [r7, #8]
 8003268:	edc7 0a01 	vstr	s1, [r7, #4]
	Traj->Velo_max = v_max;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	601a      	str	r2, [r3, #0]
	Traj->Accel_max = a_max;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	605a      	str	r2, [r3, #4]

	Traj->currentAcceleration = 0;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	611a      	str	r2, [r3, #16]
	Traj->currentVelocity = 0;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f04f 0200 	mov.w	r2, #0
 8003286:	60da      	str	r2, [r3, #12]
	Traj->currentPosition = 0;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	609a      	str	r2, [r3, #8]
}
 8003290:	bf00      	nop
 8003292:	3714      	adds	r7, #20
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <Traject>:

void Traject(Trap_Traj* Traj, float Pos_initial, float Pos_final)
{
 800329c:	b5b0      	push	{r4, r5, r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	ed87 0a02 	vstr	s0, [r7, #8]
 80032a8:	edc7 0a01 	vstr	s1, [r7, #4]

	  Distance = Pos_final - Pos_initial;
 80032ac:	ed97 7a01 	vldr	s14, [r7, #4]
 80032b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80032b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032b8:	4bb1      	ldr	r3, [pc, #708]	@ (8003580 <Traject+0x2e4>)
 80032ba:	edc3 7a00 	vstr	s15, [r3]
	  Time_acc = Traj->Velo_max / Traj->Accel_max;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	edd3 6a00 	vldr	s13, [r3]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	ed93 7a01 	vldr	s14, [r3, #4]
 80032ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032ce:	4bad      	ldr	r3, [pc, #692]	@ (8003584 <Traject+0x2e8>)
 80032d0:	edc3 7a00 	vstr	s15, [r3]
	  Time_dec = Time_acc;
 80032d4:	4bab      	ldr	r3, [pc, #684]	@ (8003584 <Traject+0x2e8>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4aab      	ldr	r2, [pc, #684]	@ (8003588 <Traject+0x2ec>)
 80032da:	6013      	str	r3, [r2, #0]


	  if (Distance >0)
 80032dc:	4ba8      	ldr	r3, [pc, #672]	@ (8003580 <Traject+0x2e4>)
 80032de:	edd3 7a00 	vldr	s15, [r3]
 80032e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ea:	dd23      	ble.n	8003334 <Traject+0x98>
			{
		  Acc_max = Traj->Accel_max;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	4aa6      	ldr	r2, [pc, #664]	@ (800358c <Traject+0x2f0>)
 80032f2:	6013      	str	r3, [r2, #0]
		  Vel_max = Traj->Velo_max;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4aa5      	ldr	r2, [pc, #660]	@ (8003590 <Traject+0x2f4>)
 80032fa:	6013      	str	r3, [r2, #0]
		  Distance_Velo_Max = Distance - (Vel_max * Time_acc);
 80032fc:	4ba0      	ldr	r3, [pc, #640]	@ (8003580 <Traject+0x2e4>)
 80032fe:	ed93 7a00 	vldr	s14, [r3]
 8003302:	4ba3      	ldr	r3, [pc, #652]	@ (8003590 <Traject+0x2f4>)
 8003304:	edd3 6a00 	vldr	s13, [r3]
 8003308:	4b9e      	ldr	r3, [pc, #632]	@ (8003584 <Traject+0x2e8>)
 800330a:	edd3 7a00 	vldr	s15, [r3]
 800330e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003312:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003316:	4b9f      	ldr	r3, [pc, #636]	@ (8003594 <Traject+0x2f8>)
 8003318:	edc3 7a00 	vstr	s15, [r3]
		  Time_Velo_const = Distance_Velo_Max / Vel_max;
 800331c:	4b9d      	ldr	r3, [pc, #628]	@ (8003594 <Traject+0x2f8>)
 800331e:	edd3 6a00 	vldr	s13, [r3]
 8003322:	4b9b      	ldr	r3, [pc, #620]	@ (8003590 <Traject+0x2f4>)
 8003324:	ed93 7a00 	vldr	s14, [r3]
 8003328:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800332c:	4b9a      	ldr	r3, [pc, #616]	@ (8003598 <Traject+0x2fc>)
 800332e:	edc3 7a00 	vstr	s15, [r3]
 8003332:	e032      	b.n	800339a <Traject+0xfe>
			}
	  else if(Distance < 0)
 8003334:	4b92      	ldr	r3, [pc, #584]	@ (8003580 <Traject+0x2e4>)
 8003336:	edd3 7a00 	vldr	s15, [r3]
 800333a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800333e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003342:	d52a      	bpl.n	800339a <Traject+0xfe>
	  {
		  Acc_max = -Traj->Accel_max;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	edd3 7a01 	vldr	s15, [r3, #4]
 800334a:	eef1 7a67 	vneg.f32	s15, s15
 800334e:	4b8f      	ldr	r3, [pc, #572]	@ (800358c <Traject+0x2f0>)
 8003350:	edc3 7a00 	vstr	s15, [r3]
		  Vel_max = -Traj->Velo_max;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	edd3 7a00 	vldr	s15, [r3]
 800335a:	eef1 7a67 	vneg.f32	s15, s15
 800335e:	4b8c      	ldr	r3, [pc, #560]	@ (8003590 <Traject+0x2f4>)
 8003360:	edc3 7a00 	vstr	s15, [r3]
		  Distance_Velo_Max = Distance - (Vel_max * Time_acc);
 8003364:	4b86      	ldr	r3, [pc, #536]	@ (8003580 <Traject+0x2e4>)
 8003366:	ed93 7a00 	vldr	s14, [r3]
 800336a:	4b89      	ldr	r3, [pc, #548]	@ (8003590 <Traject+0x2f4>)
 800336c:	edd3 6a00 	vldr	s13, [r3]
 8003370:	4b84      	ldr	r3, [pc, #528]	@ (8003584 <Traject+0x2e8>)
 8003372:	edd3 7a00 	vldr	s15, [r3]
 8003376:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800337a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800337e:	4b85      	ldr	r3, [pc, #532]	@ (8003594 <Traject+0x2f8>)
 8003380:	edc3 7a00 	vstr	s15, [r3]
		  Time_Velo_const = Distance_Velo_Max / Vel_max;
 8003384:	4b83      	ldr	r3, [pc, #524]	@ (8003594 <Traject+0x2f8>)
 8003386:	edd3 6a00 	vldr	s13, [r3]
 800338a:	4b81      	ldr	r3, [pc, #516]	@ (8003590 <Traject+0x2f4>)
 800338c:	ed93 7a00 	vldr	s14, [r3]
 8003390:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003394:	4b80      	ldr	r3, [pc, #512]	@ (8003598 <Traject+0x2fc>)
 8003396:	edc3 7a00 	vstr	s15, [r3]
	}
	// Update trajectory phase
	time_ref1 = Time_acc + Time_Velo_const;
 800339a:	4b7a      	ldr	r3, [pc, #488]	@ (8003584 <Traject+0x2e8>)
 800339c:	ed93 7a00 	vldr	s14, [r3]
 80033a0:	4b7d      	ldr	r3, [pc, #500]	@ (8003598 <Traject+0x2fc>)
 80033a2:	edd3 7a00 	vldr	s15, [r3]
 80033a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033aa:	4b7c      	ldr	r3, [pc, #496]	@ (800359c <Traject+0x300>)
 80033ac:	edc3 7a00 	vstr	s15, [r3]
	time_ref2 = time_ref1 + Time_dec;
 80033b0:	4b7a      	ldr	r3, [pc, #488]	@ (800359c <Traject+0x300>)
 80033b2:	ed93 7a00 	vldr	s14, [r3]
 80033b6:	4b74      	ldr	r3, [pc, #464]	@ (8003588 <Traject+0x2ec>)
 80033b8:	edd3 7a00 	vldr	s15, [r3]
 80033bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033c0:	4b77      	ldr	r3, [pc, #476]	@ (80035a0 <Traject+0x304>)
 80033c2:	edc3 7a00 	vstr	s15, [r3]
	if(Time_Velo_const >0)
 80033c6:	4b74      	ldr	r3, [pc, #464]	@ (8003598 <Traject+0x2fc>)
 80033c8:	edd3 7a00 	vldr	s15, [r3]
 80033cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d4:	f340 80cb 	ble.w	800356e <Traject+0x2d2>
	{
//		Time_acc_under = sqrt(Distance/Acc_max);
		if (elapsedTime < Time_acc)
 80033d8:	4b72      	ldr	r3, [pc, #456]	@ (80035a4 <Traject+0x308>)
 80033da:	ed93 7a00 	vldr	s14, [r3]
 80033de:	4b69      	ldr	r3, [pc, #420]	@ (8003584 <Traject+0x2e8>)
 80033e0:	edd3 7a00 	vldr	s15, [r3]
 80033e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ec:	d52f      	bpl.n	800344e <Traject+0x1b2>
		{
			// Acceleration phase
			Traj->currentAcceleration = Acc_max;
 80033ee:	4b67      	ldr	r3, [pc, #412]	@ (800358c <Traject+0x2f0>)
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	611a      	str	r2, [r3, #16]
			Traj->currentVelocity = Acc_max * elapsedTime;
 80033f6:	4b65      	ldr	r3, [pc, #404]	@ (800358c <Traject+0x2f0>)
 80033f8:	ed93 7a00 	vldr	s14, [r3]
 80033fc:	4b69      	ldr	r3, [pc, #420]	@ (80035a4 <Traject+0x308>)
 80033fe:	edd3 7a00 	vldr	s15, [r3]
 8003402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	edc3 7a03 	vstr	s15, [r3, #12]
			Traj->currentPosition = 0.5f * Acc_max * elapsedTime * elapsedTime + Pos_initial;
 800340c:	4b5f      	ldr	r3, [pc, #380]	@ (800358c <Traject+0x2f0>)
 800340e:	edd3 7a00 	vldr	s15, [r3]
 8003412:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003416:	ee27 7a87 	vmul.f32	s14, s15, s14
 800341a:	4b62      	ldr	r3, [pc, #392]	@ (80035a4 <Traject+0x308>)
 800341c:	edd3 7a00 	vldr	s15, [r3]
 8003420:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003424:	4b5f      	ldr	r3, [pc, #380]	@ (80035a4 <Traject+0x308>)
 8003426:	edd3 7a00 	vldr	s15, [r3]
 800342a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800342e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003432:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	edc3 7a02 	vstr	s15, [r3, #8]
			temp_pos_acc = Traj->currentPosition;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	4a59      	ldr	r2, [pc, #356]	@ (80035a8 <Traject+0x30c>)
 8003442:	6013      	str	r3, [r2, #0]
			temp_pos_const = Traj->currentPosition;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	4a58      	ldr	r2, [pc, #352]	@ (80035ac <Traject+0x310>)
 800344a:	6013      	str	r3, [r2, #0]
 800344c:	e08f      	b.n	800356e <Traject+0x2d2>
		}
		else if (elapsedTime < time_ref1 )
 800344e:	4b55      	ldr	r3, [pc, #340]	@ (80035a4 <Traject+0x308>)
 8003450:	ed93 7a00 	vldr	s14, [r3]
 8003454:	4b51      	ldr	r3, [pc, #324]	@ (800359c <Traject+0x300>)
 8003456:	edd3 7a00 	vldr	s15, [r3]
 800345a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800345e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003462:	d521      	bpl.n	80034a8 <Traject+0x20c>
		{
			// Constant velocity phase
			Traj->currentAcceleration = 0;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f04f 0200 	mov.w	r2, #0
 800346a:	611a      	str	r2, [r3, #16]
			Traj->currentVelocity = Vel_max;
 800346c:	4b48      	ldr	r3, [pc, #288]	@ (8003590 <Traject+0x2f4>)
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	60da      	str	r2, [r3, #12]
			Traj->currentPosition = (Vel_max * (elapsedTime-Time_acc)) + temp_pos_acc;
 8003474:	4b4b      	ldr	r3, [pc, #300]	@ (80035a4 <Traject+0x308>)
 8003476:	ed93 7a00 	vldr	s14, [r3]
 800347a:	4b42      	ldr	r3, [pc, #264]	@ (8003584 <Traject+0x2e8>)
 800347c:	edd3 7a00 	vldr	s15, [r3]
 8003480:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003484:	4b42      	ldr	r3, [pc, #264]	@ (8003590 <Traject+0x2f4>)
 8003486:	edd3 7a00 	vldr	s15, [r3]
 800348a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800348e:	4b46      	ldr	r3, [pc, #280]	@ (80035a8 <Traject+0x30c>)
 8003490:	edd3 7a00 	vldr	s15, [r3]
 8003494:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	edc3 7a02 	vstr	s15, [r3, #8]
			temp_pos_const = Traj->currentPosition;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	4a42      	ldr	r2, [pc, #264]	@ (80035ac <Traject+0x310>)
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	e062      	b.n	800356e <Traject+0x2d2>
		}
		else if (elapsedTime < time_ref2)
 80034a8:	4b3e      	ldr	r3, [pc, #248]	@ (80035a4 <Traject+0x308>)
 80034aa:	ed93 7a00 	vldr	s14, [r3]
 80034ae:	4b3c      	ldr	r3, [pc, #240]	@ (80035a0 <Traject+0x304>)
 80034b0:	edd3 7a00 	vldr	s15, [r3]
 80034b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034bc:	d54f      	bpl.n	800355e <Traject+0x2c2>
		{
			// Deceleration phase
			Traj->currentAcceleration = -Acc_max;
 80034be:	4b33      	ldr	r3, [pc, #204]	@ (800358c <Traject+0x2f0>)
 80034c0:	edd3 7a00 	vldr	s15, [r3]
 80034c4:	eef1 7a67 	vneg.f32	s15, s15
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	edc3 7a04 	vstr	s15, [r3, #16]
			Traj->currentVelocity = -(Acc_max * (elapsedTime-time_ref1)) + Vel_max;
 80034ce:	4b30      	ldr	r3, [pc, #192]	@ (8003590 <Traject+0x2f4>)
 80034d0:	ed93 7a00 	vldr	s14, [r3]
 80034d4:	4b33      	ldr	r3, [pc, #204]	@ (80035a4 <Traject+0x308>)
 80034d6:	edd3 6a00 	vldr	s13, [r3]
 80034da:	4b30      	ldr	r3, [pc, #192]	@ (800359c <Traject+0x300>)
 80034dc:	edd3 7a00 	vldr	s15, [r3]
 80034e0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80034e4:	4b29      	ldr	r3, [pc, #164]	@ (800358c <Traject+0x2f0>)
 80034e6:	edd3 7a00 	vldr	s15, [r3]
 80034ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	edc3 7a03 	vstr	s15, [r3, #12]
			Traj->currentPosition = Traj->currentVelocity*(elapsedTime-time_ref1)+(0.5f*Acc_max*(elapsedTime-time_ref1)*(elapsedTime-time_ref1))+temp_pos_const ;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	ed93 7a03 	vldr	s14, [r3, #12]
 80034fe:	4b29      	ldr	r3, [pc, #164]	@ (80035a4 <Traject+0x308>)
 8003500:	edd3 6a00 	vldr	s13, [r3]
 8003504:	4b25      	ldr	r3, [pc, #148]	@ (800359c <Traject+0x300>)
 8003506:	edd3 7a00 	vldr	s15, [r3]
 800350a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800350e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003512:	4b1e      	ldr	r3, [pc, #120]	@ (800358c <Traject+0x2f0>)
 8003514:	edd3 7a00 	vldr	s15, [r3]
 8003518:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800351c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003520:	4b20      	ldr	r3, [pc, #128]	@ (80035a4 <Traject+0x308>)
 8003522:	ed93 6a00 	vldr	s12, [r3]
 8003526:	4b1d      	ldr	r3, [pc, #116]	@ (800359c <Traject+0x300>)
 8003528:	edd3 7a00 	vldr	s15, [r3]
 800352c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003530:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003534:	4b1b      	ldr	r3, [pc, #108]	@ (80035a4 <Traject+0x308>)
 8003536:	ed93 6a00 	vldr	s12, [r3]
 800353a:	4b18      	ldr	r3, [pc, #96]	@ (800359c <Traject+0x300>)
 800353c:	edd3 7a00 	vldr	s15, [r3]
 8003540:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003544:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003548:	ee37 7a27 	vadd.f32	s14, s14, s15
 800354c:	4b17      	ldr	r3, [pc, #92]	@ (80035ac <Traject+0x310>)
 800354e:	edd3 7a00 	vldr	s15, [r3]
 8003552:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	edc3 7a02 	vstr	s15, [r3, #8]
 800355c:	e007      	b.n	800356e <Traject+0x2d2>
		}
		else {
			// Trajectory complete
			Traj->currentAcceleration = 0.0f;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	611a      	str	r2, [r3, #16]
			Traj->currentVelocity = 0.0f;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	60da      	str	r2, [r3, #12]
//			elapsedTime = 0.0f;
		}
	}
	if (Time_Velo_const <= 0)
 800356e:	4b0a      	ldr	r3, [pc, #40]	@ (8003598 <Traject+0x2fc>)
 8003570:	edd3 7a00 	vldr	s15, [r3]
 8003574:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800357c:	d918      	bls.n	80035b0 <Traject+0x314>

		}


	}
}
 800357e:	e0e4      	b.n	800374a <Traject+0x4ae>
 8003580:	20000308 	.word	0x20000308
 8003584:	2000030c 	.word	0x2000030c
 8003588:	20000310 	.word	0x20000310
 800358c:	200002e0 	.word	0x200002e0
 8003590:	200002e4 	.word	0x200002e4
 8003594:	200002e8 	.word	0x200002e8
 8003598:	200002ec 	.word	0x200002ec
 800359c:	20000300 	.word	0x20000300
 80035a0:	20000304 	.word	0x20000304
 80035a4:	20001208 	.word	0x20001208
 80035a8:	200002f4 	.word	0x200002f4
 80035ac:	200002f8 	.word	0x200002f8
		Time_acc_under = sqrt(fabs(Distance)/fabs(Acc_max));
 80035b0:	4b68      	ldr	r3, [pc, #416]	@ (8003754 <Traject+0x4b8>)
 80035b2:	edd3 7a00 	vldr	s15, [r3]
 80035b6:	eef0 7ae7 	vabs.f32	s15, s15
 80035ba:	ee17 0a90 	vmov	r0, s15
 80035be:	f7fc ff8f 	bl	80004e0 <__aeabi_f2d>
 80035c2:	4604      	mov	r4, r0
 80035c4:	460d      	mov	r5, r1
 80035c6:	4b64      	ldr	r3, [pc, #400]	@ (8003758 <Traject+0x4bc>)
 80035c8:	edd3 7a00 	vldr	s15, [r3]
 80035cc:	eef0 7ae7 	vabs.f32	s15, s15
 80035d0:	ee17 0a90 	vmov	r0, s15
 80035d4:	f7fc ff84 	bl	80004e0 <__aeabi_f2d>
 80035d8:	4602      	mov	r2, r0
 80035da:	460b      	mov	r3, r1
 80035dc:	4620      	mov	r0, r4
 80035de:	4629      	mov	r1, r5
 80035e0:	f7fd f900 	bl	80007e4 <__aeabi_ddiv>
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	ec43 2b17 	vmov	d7, r2, r3
 80035ec:	eeb0 0a47 	vmov.f32	s0, s14
 80035f0:	eef0 0a67 	vmov.f32	s1, s15
 80035f4:	f008 fae8 	bl	800bbc8 <sqrt>
 80035f8:	ec53 2b10 	vmov	r2, r3, d0
 80035fc:	4610      	mov	r0, r2
 80035fe:	4619      	mov	r1, r3
 8003600:	f7fd fa96 	bl	8000b30 <__aeabi_d2f>
 8003604:	4603      	mov	r3, r0
 8003606:	4a55      	ldr	r2, [pc, #340]	@ (800375c <Traject+0x4c0>)
 8003608:	6013      	str	r3, [r2, #0]
		if (elapsedTime < Time_acc_under)
 800360a:	4b55      	ldr	r3, [pc, #340]	@ (8003760 <Traject+0x4c4>)
 800360c:	ed93 7a00 	vldr	s14, [r3]
 8003610:	4b52      	ldr	r3, [pc, #328]	@ (800375c <Traject+0x4c0>)
 8003612:	edd3 7a00 	vldr	s15, [r3]
 8003616:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800361a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800361e:	d52f      	bpl.n	8003680 <Traject+0x3e4>
			Traj->currentAcceleration = Acc_max;
 8003620:	4b4d      	ldr	r3, [pc, #308]	@ (8003758 <Traject+0x4bc>)
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	611a      	str	r2, [r3, #16]
			Traj->currentVelocity = Acc_max * elapsedTime;
 8003628:	4b4b      	ldr	r3, [pc, #300]	@ (8003758 <Traject+0x4bc>)
 800362a:	ed93 7a00 	vldr	s14, [r3]
 800362e:	4b4c      	ldr	r3, [pc, #304]	@ (8003760 <Traject+0x4c4>)
 8003630:	edd3 7a00 	vldr	s15, [r3]
 8003634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	edc3 7a03 	vstr	s15, [r3, #12]
			Traj->currentPosition = Pos_initial + 0.5f * Acc_max * elapsedTime * elapsedTime;
 800363e:	4b46      	ldr	r3, [pc, #280]	@ (8003758 <Traject+0x4bc>)
 8003640:	edd3 7a00 	vldr	s15, [r3]
 8003644:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003648:	ee27 7a87 	vmul.f32	s14, s15, s14
 800364c:	4b44      	ldr	r3, [pc, #272]	@ (8003760 <Traject+0x4c4>)
 800364e:	edd3 7a00 	vldr	s15, [r3]
 8003652:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003656:	4b42      	ldr	r3, [pc, #264]	@ (8003760 <Traject+0x4c4>)
 8003658:	edd3 7a00 	vldr	s15, [r3]
 800365c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003660:	edd7 7a02 	vldr	s15, [r7, #8]
 8003664:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	edc3 7a02 	vstr	s15, [r3, #8]
			temp_pos_acc = Traj->currentPosition;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	4a3c      	ldr	r2, [pc, #240]	@ (8003764 <Traject+0x4c8>)
 8003674:	6013      	str	r3, [r2, #0]
			temp_velo_acc = Traj->currentVelocity;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	4a3b      	ldr	r2, [pc, #236]	@ (8003768 <Traject+0x4cc>)
 800367c:	6013      	str	r3, [r2, #0]
}
 800367e:	e064      	b.n	800374a <Traject+0x4ae>
		else if (elapsedTime < 2*Time_acc_under)
 8003680:	4b36      	ldr	r3, [pc, #216]	@ (800375c <Traject+0x4c0>)
 8003682:	edd3 7a00 	vldr	s15, [r3]
 8003686:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800368a:	4b35      	ldr	r3, [pc, #212]	@ (8003760 <Traject+0x4c4>)
 800368c:	edd3 7a00 	vldr	s15, [r3]
 8003690:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003698:	dd4f      	ble.n	800373a <Traject+0x49e>
			Traj->currentAcceleration = -Acc_max;
 800369a:	4b2f      	ldr	r3, [pc, #188]	@ (8003758 <Traject+0x4bc>)
 800369c:	edd3 7a00 	vldr	s15, [r3]
 80036a0:	eef1 7a67 	vneg.f32	s15, s15
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	edc3 7a04 	vstr	s15, [r3, #16]
			Traj->currentVelocity = temp_velo_acc - Acc_max*(elapsedTime-Time_acc_under);
 80036aa:	4b2f      	ldr	r3, [pc, #188]	@ (8003768 <Traject+0x4cc>)
 80036ac:	ed93 7a00 	vldr	s14, [r3]
 80036b0:	4b2b      	ldr	r3, [pc, #172]	@ (8003760 <Traject+0x4c4>)
 80036b2:	edd3 6a00 	vldr	s13, [r3]
 80036b6:	4b29      	ldr	r3, [pc, #164]	@ (800375c <Traject+0x4c0>)
 80036b8:	edd3 7a00 	vldr	s15, [r3]
 80036bc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80036c0:	4b25      	ldr	r3, [pc, #148]	@ (8003758 <Traject+0x4bc>)
 80036c2:	edd3 7a00 	vldr	s15, [r3]
 80036c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	edc3 7a03 	vstr	s15, [r3, #12]
			Traj->currentPosition = temp_pos_acc + Traj->currentVelocity *(elapsedTime-Time_acc_under)+(0.5f*Acc_max*(elapsedTime-Time_acc_under)*(elapsedTime-Time_acc_under));
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	ed93 7a03 	vldr	s14, [r3, #12]
 80036da:	4b21      	ldr	r3, [pc, #132]	@ (8003760 <Traject+0x4c4>)
 80036dc:	edd3 6a00 	vldr	s13, [r3]
 80036e0:	4b1e      	ldr	r3, [pc, #120]	@ (800375c <Traject+0x4c0>)
 80036e2:	edd3 7a00 	vldr	s15, [r3]
 80036e6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80036ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003764 <Traject+0x4c8>)
 80036f0:	edd3 7a00 	vldr	s15, [r3]
 80036f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036f8:	4b17      	ldr	r3, [pc, #92]	@ (8003758 <Traject+0x4bc>)
 80036fa:	edd3 7a00 	vldr	s15, [r3]
 80036fe:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8003702:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003706:	4b16      	ldr	r3, [pc, #88]	@ (8003760 <Traject+0x4c4>)
 8003708:	ed93 6a00 	vldr	s12, [r3]
 800370c:	4b13      	ldr	r3, [pc, #76]	@ (800375c <Traject+0x4c0>)
 800370e:	edd3 7a00 	vldr	s15, [r3]
 8003712:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003716:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800371a:	4b11      	ldr	r3, [pc, #68]	@ (8003760 <Traject+0x4c4>)
 800371c:	ed93 6a00 	vldr	s12, [r3]
 8003720:	4b0e      	ldr	r3, [pc, #56]	@ (800375c <Traject+0x4c0>)
 8003722:	edd3 7a00 	vldr	s15, [r3]
 8003726:	ee76 7a67 	vsub.f32	s15, s12, s15
 800372a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800372e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8003738:	e007      	b.n	800374a <Traject+0x4ae>
			Traj->currentAcceleration = 0.0f;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f04f 0200 	mov.w	r2, #0
 8003740:	611a      	str	r2, [r3, #16]
			Traj->currentVelocity = 0.0f;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f04f 0200 	mov.w	r2, #0
 8003748:	60da      	str	r2, [r3, #12]
}
 800374a:	bf00      	nop
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bdb0      	pop	{r4, r5, r7, pc}
 8003752:	bf00      	nop
 8003754:	20000308 	.word	0x20000308
 8003758:	200002e0 	.word	0x200002e0
 800375c:	200002f0 	.word	0x200002f0
 8003760:	20001208 	.word	0x20001208
 8003764:	200002f4 	.word	0x200002f4
 8003768:	200002fc 	.word	0x200002fc

0800376c <kalman_filter_init>:
 */
#include "main.h"
#include "Kalman.h"

void kalman_filter_init(KalmanState *state, float Q, float R)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	ed87 0a02 	vstr	s0, [r7, #8]
 8003778:	edc7 0a01 	vstr	s1, [r7, #4]
	state->Q = Q;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	609a      	str	r2, [r3, #8]
	state->R = R;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	60da      	str	r2, [r3, #12]
	state->x_k1_k1 = 0;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
	state->P_k1_k1 = 1;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003796:	605a      	str	r2, [r3, #4]
	state->Kg = 0;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f04f 0200 	mov.w	r2, #0
 800379e:	611a      	str	r2, [r3, #16]
	state->P_k_k1 = 1;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80037a6:	615a      	str	r2, [r3, #20]
	state->kalman_adc_old = 0;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f04f 0200 	mov.w	r2, #0
 80037ae:	619a      	str	r2, [r3, #24]
}
 80037b0:	bf00      	nop
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <kalman_filter>:

double kalman_filter(KalmanState *state, double Accel ) {
 80037bc:	b580      	push	{r7, lr}
 80037be:	b088      	sub	sp, #32
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	ed87 0b00 	vstr	d0, [r7]
    float Z_k = Accel;
 80037c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80037cc:	f7fd f9b0 	bl	8000b30 <__aeabi_d2f>
 80037d0:	4603      	mov	r3, r0
 80037d2:	61fb      	str	r3, [r7, #28]
    float x_k_k1 = state->kalman_adc_old;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	61bb      	str	r3, [r7, #24]
    state->P_k_k1 = state->P_k1_k1 + state->Q;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	ed93 7a01 	vldr	s14, [r3, #4]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80037e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	edc3 7a05 	vstr	s15, [r3, #20]

    state->Kg = state->P_k_k1 / (state->P_k_k1 + state->R);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	edd3 6a05 	vldr	s13, [r3, #20]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	ed93 7a05 	vldr	s14, [r3, #20]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8003802:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003806:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	edc3 7a04 	vstr	s15, [r3, #16]
    float kalman_adc = x_k_k1 + state->Kg * (Z_k - state->kalman_adc_old);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	ed93 7a04 	vldr	s14, [r3, #16]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	edd3 7a06 	vldr	s15, [r3, #24]
 800381c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003820:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003828:	ed97 7a06 	vldr	s14, [r7, #24]
 800382c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003830:	edc7 7a05 	vstr	s15, [r7, #20]
    state->P_k1_k1 = (1 - state->Kg) * state->P_k_k1;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	edd3 7a04 	vldr	s15, [r3, #16]
 800383a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800383e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	edd3 7a05 	vldr	s15, [r3, #20]
 8003848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	edc3 7a01 	vstr	s15, [r3, #4]

    state->kalman_adc_old = kalman_adc;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	619a      	str	r2, [r3, #24]
    return kalman_adc;
 8003858:	6978      	ldr	r0, [r7, #20]
 800385a:	f7fc fe41 	bl	80004e0 <__aeabi_f2d>
 800385e:	4602      	mov	r2, r0
 8003860:	460b      	mov	r3, r1
 8003862:	ec43 2b17 	vmov	d7, r2, r3
}
 8003866:	eeb0 0a47 	vmov.f32	s0, s14
 800386a:	eef0 0a67 	vmov.f32	s1, s15
 800386e:	3720      	adds	r7, #32
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003874:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003878:	b086      	sub	sp, #24
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800387c:	f001 f943 	bl	8004b06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003880:	f000 f8ee 	bl	8003a60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003884:	f000 fc20 	bl	80040c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003888:	f000 fbec 	bl	8004064 <MX_DMA_Init>
  MX_TIM2_Init();
 800388c:	f000 f9ac 	bl	8003be8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003890:	f000 f9fe 	bl	8003c90 <MX_TIM3_Init>
  MX_TIM5_Init();
 8003894:	f000 facc 	bl	8003e30 <MX_TIM5_Init>
  MX_UART4_Init();
 8003898:	f000 fb48 	bl	8003f2c <MX_UART4_Init>
  MX_TIM4_Init();
 800389c:	f000 fa7a 	bl	8003d94 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80038a0:	f000 fb92 	bl	8003fc8 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80038a4:	f000 fb12 	bl	8003ecc <MX_TIM16_Init>
  MX_ADC1_Init();
 80038a8:	f000 f926 	bl	8003af8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);								// AMT Encoder
 80038ac:	4850      	ldr	r0, [pc, #320]	@ (80039f0 <main+0x17c>)
 80038ae:	f004 f947 	bl	8007b40 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);								// Motor Output compare
 80038b2:	4850      	ldr	r0, [pc, #320]	@ (80039f4 <main+0x180>)
 80038b4:	f004 f944 	bl	8007b40 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim4);							// System Clock control
 80038b8:	484f      	ldr	r0, [pc, #316]	@ (80039f8 <main+0x184>)
 80038ba:	f004 f9b1 	bl	8007c20 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);							// Microsecond Function
 80038be:	484f      	ldr	r0, [pc, #316]	@ (80039fc <main+0x188>)
 80038c0:	f004 f9ae 	bl	8007c20 <HAL_TIM_Base_Start_IT>
  // Velocity 450 mm/s
//  float PID_pos_K[3] = {17 ,0.002, 0.0001};
//  float PID_velo_K[3] = {9 ,0.00002, 0.0};

  // Initialize ASRS
  AMT_encoder_init(&AMT, &htim2);
 80038c4:	494a      	ldr	r1, [pc, #296]	@ (80039f0 <main+0x17c>)
 80038c6:	484e      	ldr	r0, [pc, #312]	@ (8003a00 <main+0x18c>)
 80038c8:	f7fe fa86 	bl	8001dd8 <AMT_encoder_init>
  MOTOR_init(&MT, &htim3,TIM_CHANNEL_2, TIM_CHANNEL_1);
 80038cc:	2300      	movs	r3, #0
 80038ce:	2204      	movs	r2, #4
 80038d0:	4948      	ldr	r1, [pc, #288]	@ (80039f4 <main+0x180>)
 80038d2:	484c      	ldr	r0, [pc, #304]	@ (8003a04 <main+0x190>)
 80038d4:	f7fe ff0a 	bl	80026ec <MOTOR_init>
  hmodbus.huart = &huart2;
 80038d8:	4b4b      	ldr	r3, [pc, #300]	@ (8003a08 <main+0x194>)
 80038da:	4a4c      	ldr	r2, [pc, #304]	@ (8003a0c <main+0x198>)
 80038dc:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 80038de:	4b4a      	ldr	r3, [pc, #296]	@ (8003a08 <main+0x194>)
 80038e0:	4a4b      	ldr	r2, [pc, #300]	@ (8003a10 <main+0x19c>)
 80038e2:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80038e4:	4b48      	ldr	r3, [pc, #288]	@ (8003a08 <main+0x194>)
 80038e6:	2215      	movs	r2, #21
 80038e8:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 80038ea:	4b47      	ldr	r3, [pc, #284]	@ (8003a08 <main+0x194>)
 80038ec:	22c8      	movs	r2, #200	@ 0xc8
 80038ee:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 80038f0:	4948      	ldr	r1, [pc, #288]	@ (8003a14 <main+0x1a0>)
 80038f2:	4845      	ldr	r0, [pc, #276]	@ (8003a08 <main+0x194>)
 80038f4:	f7fe fc06 	bl	8002104 <Modbus_init>
  //--------------------------Initialize Controller Parameter------------------------------------//
  // System Max Velocity and Max Acceleration
  Traject_init(&Traj, 800 , 800);
 80038f8:	eddf 0a47 	vldr	s1, [pc, #284]	@ 8003a18 <main+0x1a4>
 80038fc:	ed9f 0a46 	vldr	s0, [pc, #280]	@ 8003a18 <main+0x1a4>
 8003900:	4846      	ldr	r0, [pc, #280]	@ (8003a1c <main+0x1a8>)
 8003902:	f7ff fcab 	bl	800325c <Traject_init>
  // Constant P I D for Position & Velocity Control
//  float PID_pos_K[3] = {12 ,0.002, 0.001};
//  float PID_velo_K[3] = {7.0 ,0.0022, 0.0001};
    float PID_pos_K[3] = {5 ,0.0000001, 0.000001};
 8003906:	4a46      	ldr	r2, [pc, #280]	@ (8003a20 <main+0x1ac>)
 8003908:	f107 030c 	add.w	r3, r7, #12
 800390c:	ca07      	ldmia	r2, {r0, r1, r2}
 800390e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    float PID_velo_K[3] = {7.0 ,0.0022, 0.0001};
 8003912:	4a44      	ldr	r2, [pc, #272]	@ (8003a24 <main+0x1b0>)
 8003914:	463b      	mov	r3, r7
 8003916:	ca07      	ldmia	r2, {r0, r1, r2}
 8003918:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  // Constant Q R for Kalman Filter in Velocity and Acceleration
  kalman_filter_init(&filtered_velo, 0.0005,0.6);
 800391c:	eddf 0a42 	vldr	s1, [pc, #264]	@ 8003a28 <main+0x1b4>
 8003920:	ed9f 0a42 	vldr	s0, [pc, #264]	@ 8003a2c <main+0x1b8>
 8003924:	4842      	ldr	r0, [pc, #264]	@ (8003a30 <main+0x1bc>)
 8003926:	f7ff ff21 	bl	800376c <kalman_filter_init>
  kalman_filter_init(&filtered_accel, 0.002,0.2);
 800392a:	eddf 0a42 	vldr	s1, [pc, #264]	@ 8003a34 <main+0x1c0>
 800392e:	ed9f 0a42 	vldr	s0, [pc, #264]	@ 8003a38 <main+0x1c4>
 8003932:	4842      	ldr	r0, [pc, #264]	@ (8003a3c <main+0x1c8>)
 8003934:	f7ff ff1a 	bl	800376c <kalman_filter_init>
  PID_controller_init(&PID_pos,PID_pos_K[0],PID_pos_K[1],PID_pos_K[2]);
 8003938:	edd7 7a03 	vldr	s15, [r7, #12]
 800393c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003940:	edd7 6a05 	vldr	s13, [r7, #20]
 8003944:	eeb0 1a66 	vmov.f32	s2, s13
 8003948:	eef0 0a47 	vmov.f32	s1, s14
 800394c:	eeb0 0a67 	vmov.f32	s0, s15
 8003950:	483b      	ldr	r0, [pc, #236]	@ (8003a40 <main+0x1cc>)
 8003952:	f7ff f965 	bl	8002c20 <PID_controller_init>
  PID_controller_init(&PID_velo,PID_velo_K[0],PID_velo_K[1],PID_velo_K[3]);
 8003956:	edd7 7a00 	vldr	s15, [r7]
 800395a:	ed97 7a01 	vldr	s14, [r7, #4]
 800395e:	edd7 6a03 	vldr	s13, [r7, #12]
 8003962:	eeb0 1a66 	vmov.f32	s2, s13
 8003966:	eef0 0a47 	vmov.f32	s1, s14
 800396a:	eeb0 0a67 	vmov.f32	s0, s15
 800396e:	4835      	ldr	r0, [pc, #212]	@ (8003a44 <main+0x1d0>)
 8003970:	f7ff f956 	bl	8002c20 <PID_controller_init>

    /* USER CODE BEGIN 3 */

	  // Feedback to base system 5 Hz
	  static uint64_t timestamps =0;
	  if(HAL_GetTick() > timestamps && emer == 0 ){
 8003974:	f001 f92c 	bl	8004bd0 <HAL_GetTick>
 8003978:	4603      	mov	r3, r0
 800397a:	2200      	movs	r2, #0
 800397c:	461c      	mov	r4, r3
 800397e:	4615      	mov	r5, r2
 8003980:	4b31      	ldr	r3, [pc, #196]	@ (8003a48 <main+0x1d4>)
 8003982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003986:	42a2      	cmp	r2, r4
 8003988:	41ab      	sbcs	r3, r5
 800398a:	d20f      	bcs.n	80039ac <main+0x138>
 800398c:	4b2f      	ldr	r3, [pc, #188]	@ (8003a4c <main+0x1d8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10b      	bne.n	80039ac <main+0x138>
		  timestamps =HAL_GetTick() + 100;		//ms
 8003994:	f001 f91c 	bl	8004bd0 <HAL_GetTick>
 8003998:	4603      	mov	r3, r0
 800399a:	3364      	adds	r3, #100	@ 0x64
 800399c:	2200      	movs	r2, #0
 800399e:	4698      	mov	r8, r3
 80039a0:	4691      	mov	r9, r2
 80039a2:	4b29      	ldr	r3, [pc, #164]	@ (8003a48 <main+0x1d4>)
 80039a4:	e9c3 8900 	strd	r8, r9, [r3]
	  	  Heartbeat();
 80039a8:	f7fd fbb2 	bl	8001110 <Heartbeat>
	  }

	  // Feedback Status
	  Vacuum();
 80039ac:	f7fd fc1c 	bl	80011e8 <Vacuum>
	  GripperMovement();
 80039b0:	f7fd fc36 	bl	8001220 <GripperMovement>
	  Modbus_Protocal_Worker();
 80039b4:	f7fe fc32 	bl	800221c <Modbus_Protocal_Worker>
	  Routine();
 80039b8:	f7fd fbb8 	bl	800112c <Routine>

	  //Ps2
	  HAL_UART_Receive(&huart4,ps2.ps2RX, 10 ,10);
 80039bc:	230a      	movs	r3, #10
 80039be:	220a      	movs	r2, #10
 80039c0:	4923      	ldr	r1, [pc, #140]	@ (8003a50 <main+0x1dc>)
 80039c2:	4824      	ldr	r0, [pc, #144]	@ (8003a54 <main+0x1e0>)
 80039c4:	f006 fa1e 	bl	8009e04 <HAL_UART_Receive>

	  if (base.BaseStatus == 1){
 80039c8:	4b23      	ldr	r3, [pc, #140]	@ (8003a58 <main+0x1e4>)
 80039ca:	881b      	ldrh	r3, [r3, #0]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <main+0x160>
		  SetShelves();
 80039d0:	f7fd fc58 	bl	8001284 <SetShelves>
	  }

	  // Emergency Button was triggered
	  emer = (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_SET) ? 1 : emer;
 80039d4:	2180      	movs	r1, #128	@ 0x80
 80039d6:	4821      	ldr	r0, [pc, #132]	@ (8003a5c <main+0x1e8>)
 80039d8:	f002 ffca 	bl	8006970 <HAL_GPIO_ReadPin>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d002      	beq.n	80039e8 <main+0x174>
 80039e2:	4b1a      	ldr	r3, [pc, #104]	@ (8003a4c <main+0x1d8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	e000      	b.n	80039ea <main+0x176>
 80039e8:	2301      	movs	r3, #1
 80039ea:	4a18      	ldr	r2, [pc, #96]	@ (8003a4c <main+0x1d8>)
 80039ec:	6013      	str	r3, [r2, #0]
  {
 80039ee:	e7c1      	b.n	8003974 <main+0x100>
 80039f0:	20000380 	.word	0x20000380
 80039f4:	2000044c 	.word	0x2000044c
 80039f8:	20000518 	.word	0x20000518
 80039fc:	200005e4 	.word	0x200005e4
 8003a00:	200009f0 	.word	0x200009f0
 8003a04:	200009d4 	.word	0x200009d4
 8003a08:	20000b58 	.word	0x20000b58
 8003a0c:	20000848 	.word	0x20000848
 8003a10:	200006b0 	.word	0x200006b0
 8003a14:	20001078 	.word	0x20001078
 8003a18:	44480000 	.word	0x44480000
 8003a1c:	200009dc 	.word	0x200009dc
 8003a20:	0800bdec 	.word	0x0800bdec
 8003a24:	0800bdf8 	.word	0x0800bdf8
 8003a28:	3f19999a 	.word	0x3f19999a
 8003a2c:	3a03126f 	.word	0x3a03126f
 8003a30:	20001030 	.word	0x20001030
 8003a34:	3e4ccccd 	.word	0x3e4ccccd
 8003a38:	3b03126f 	.word	0x3b03126f
 8003a3c:	2000104c 	.word	0x2000104c
 8003a40:	20000ac0 	.word	0x20000ac0
 8003a44:	20000adc 	.word	0x20000adc
 8003a48:	20001210 	.word	0x20001210
 8003a4c:	20001068 	.word	0x20001068
 8003a50:	20000a40 	.word	0x20000a40
 8003a54:	2000077c 	.word	0x2000077c
 8003a58:	20000af8 	.word	0x20000af8
 8003a5c:	48000800 	.word	0x48000800

08003a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b094      	sub	sp, #80	@ 0x50
 8003a64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a66:	f107 0318 	add.w	r3, r7, #24
 8003a6a:	2238      	movs	r2, #56	@ 0x38
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f008 f86a 	bl	800bb48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a74:	1d3b      	adds	r3, r7, #4
 8003a76:	2200      	movs	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	605a      	str	r2, [r3, #4]
 8003a7c:	609a      	str	r2, [r3, #8]
 8003a7e:	60da      	str	r2, [r3, #12]
 8003a80:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003a82:	2000      	movs	r0, #0
 8003a84:	f002 ffc8 	bl	8006a18 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003a88:	2302      	movs	r3, #2
 8003a8a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a90:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a92:	2340      	movs	r3, #64	@ 0x40
 8003a94:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a96:	2302      	movs	r3, #2
 8003a98:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003a9e:	2304      	movs	r3, #4
 8003aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003aa2:	2355      	movs	r3, #85	@ 0x55
 8003aa4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003aaa:	2302      	movs	r3, #2
 8003aac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003aae:	2302      	movs	r3, #2
 8003ab0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ab2:	f107 0318 	add.w	r3, r7, #24
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f003 f862 	bl	8006b80 <HAL_RCC_OscConfig>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8003ac2:	f000 fd0d 	bl	80044e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ac6:	230f      	movs	r3, #15
 8003ac8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003aca:	2303      	movs	r3, #3
 8003acc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003ada:	1d3b      	adds	r3, r7, #4
 8003adc:	2104      	movs	r1, #4
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f003 fb60 	bl	80071a4 <HAL_RCC_ClockConfig>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8003aea:	f000 fcf9 	bl	80044e0 <Error_Handler>
  }
}
 8003aee:	bf00      	nop
 8003af0:	3750      	adds	r7, #80	@ 0x50
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b08c      	sub	sp, #48	@ 0x30
 8003afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8003afe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b02:	2200      	movs	r2, #0
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	605a      	str	r2, [r3, #4]
 8003b08:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003b0a:	1d3b      	adds	r3, r7, #4
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	2100      	movs	r1, #0
 8003b10:	4618      	mov	r0, r3
 8003b12:	f008 f819 	bl	800bb48 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003b16:	4b32      	ldr	r3, [pc, #200]	@ (8003be0 <MX_ADC1_Init+0xe8>)
 8003b18:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8003b1c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003b1e:	4b30      	ldr	r3, [pc, #192]	@ (8003be0 <MX_ADC1_Init+0xe8>)
 8003b20:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003b24:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003b26:	4b2e      	ldr	r3, [pc, #184]	@ (8003be0 <MX_ADC1_Init+0xe8>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003b2c:	4b2c      	ldr	r3, [pc, #176]	@ (8003be0 <MX_ADC1_Init+0xe8>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8003b32:	4b2b      	ldr	r3, [pc, #172]	@ (8003be0 <MX_ADC1_Init+0xe8>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003b38:	4b29      	ldr	r3, [pc, #164]	@ (8003be0 <MX_ADC1_Init+0xe8>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003b3e:	4b28      	ldr	r3, [pc, #160]	@ (8003be0 <MX_ADC1_Init+0xe8>)
 8003b40:	2204      	movs	r2, #4
 8003b42:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003b44:	4b26      	ldr	r3, [pc, #152]	@ (8003be0 <MX_ADC1_Init+0xe8>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003b4a:	4b25      	ldr	r3, [pc, #148]	@ (8003be0 <MX_ADC1_Init+0xe8>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8003b50:	4b23      	ldr	r3, [pc, #140]	@ (8003be0 <MX_ADC1_Init+0xe8>)
 8003b52:	2201      	movs	r2, #1
 8003b54:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003b56:	4b22      	ldr	r3, [pc, #136]	@ (8003be0 <MX_ADC1_Init+0xe8>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003b5e:	4b20      	ldr	r3, [pc, #128]	@ (8003be0 <MX_ADC1_Init+0xe8>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003b64:	4b1e      	ldr	r3, [pc, #120]	@ (8003be0 <MX_ADC1_Init+0xe8>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8003be0 <MX_ADC1_Init+0xe8>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003b72:	4b1b      	ldr	r3, [pc, #108]	@ (8003be0 <MX_ADC1_Init+0xe8>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8003b78:	4b19      	ldr	r3, [pc, #100]	@ (8003be0 <MX_ADC1_Init+0xe8>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003b80:	4817      	ldr	r0, [pc, #92]	@ (8003be0 <MX_ADC1_Init+0xe8>)
 8003b82:	f001 fa07 	bl	8004f94 <HAL_ADC_Init>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8003b8c:	f000 fca8 	bl	80044e0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003b90:	2300      	movs	r3, #0
 8003b92:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003b94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4811      	ldr	r0, [pc, #68]	@ (8003be0 <MX_ADC1_Init+0xe8>)
 8003b9c:	f002 f81c 	bl	8005bd8 <HAL_ADCEx_MultiModeConfigChannel>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8003ba6:	f000 fc9b 	bl	80044e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003baa:	4b0e      	ldr	r3, [pc, #56]	@ (8003be4 <MX_ADC1_Init+0xec>)
 8003bac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003bae:	2306      	movs	r3, #6
 8003bb0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003bb6:	237f      	movs	r3, #127	@ 0x7f
 8003bb8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003bba:	2304      	movs	r3, #4
 8003bbc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003bc2:	1d3b      	adds	r3, r7, #4
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4806      	ldr	r0, [pc, #24]	@ (8003be0 <MX_ADC1_Init+0xe8>)
 8003bc8:	f001 fba0 	bl	800530c <HAL_ADC_ConfigChannel>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8003bd2:	f000 fc85 	bl	80044e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003bd6:	bf00      	nop
 8003bd8:	3730      	adds	r7, #48	@ 0x30
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	20000314 	.word	0x20000314
 8003be4:	19200040 	.word	0x19200040

08003be8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08c      	sub	sp, #48	@ 0x30
 8003bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003bee:	f107 030c 	add.w	r3, r7, #12
 8003bf2:	2224      	movs	r2, #36	@ 0x24
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f007 ffa6 	bl	800bb48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bfc:	463b      	mov	r3, r7
 8003bfe:	2200      	movs	r2, #0
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	605a      	str	r2, [r3, #4]
 8003c04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003c06:	4b21      	ldr	r3, [pc, #132]	@ (8003c8c <MX_TIM2_Init+0xa4>)
 8003c08:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003c0c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003c0e:	4b1f      	ldr	r3, [pc, #124]	@ (8003c8c <MX_TIM2_Init+0xa4>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c14:	4b1d      	ldr	r3, [pc, #116]	@ (8003c8c <MX_TIM2_Init+0xa4>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65534;
 8003c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8003c8c <MX_TIM2_Init+0xa4>)
 8003c1c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003c20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c22:	4b1a      	ldr	r3, [pc, #104]	@ (8003c8c <MX_TIM2_Init+0xa4>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c28:	4b18      	ldr	r3, [pc, #96]	@ (8003c8c <MX_TIM2_Init+0xa4>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003c32:	2300      	movs	r3, #0
 8003c34:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003c36:	2301      	movs	r3, #1
 8003c38:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 3;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003c42:	2300      	movs	r3, #0
 8003c44:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003c46:	2301      	movs	r3, #1
 8003c48:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 3;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003c52:	f107 030c 	add.w	r3, r7, #12
 8003c56:	4619      	mov	r1, r3
 8003c58:	480c      	ldr	r0, [pc, #48]	@ (8003c8c <MX_TIM2_Init+0xa4>)
 8003c5a:	f004 fb1d 	bl	8008298 <HAL_TIM_Encoder_Init>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8003c64:	f000 fc3c 	bl	80044e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c70:	463b      	mov	r3, r7
 8003c72:	4619      	mov	r1, r3
 8003c74:	4805      	ldr	r0, [pc, #20]	@ (8003c8c <MX_TIM2_Init+0xa4>)
 8003c76:	f005 fec5 	bl	8009a04 <HAL_TIMEx_MasterConfigSynchronization>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8003c80:	f000 fc2e 	bl	80044e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003c84:	bf00      	nop
 8003c86:	3730      	adds	r7, #48	@ 0x30
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	20000380 	.word	0x20000380

08003c90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08e      	sub	sp, #56	@ 0x38
 8003c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	605a      	str	r2, [r3, #4]
 8003ca0:	609a      	str	r2, [r3, #8]
 8003ca2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ca4:	f107 031c 	add.w	r3, r7, #28
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	605a      	str	r2, [r3, #4]
 8003cae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003cb0:	463b      	mov	r3, r7
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	605a      	str	r2, [r3, #4]
 8003cb8:	609a      	str	r2, [r3, #8]
 8003cba:	60da      	str	r2, [r3, #12]
 8003cbc:	611a      	str	r2, [r3, #16]
 8003cbe:	615a      	str	r2, [r3, #20]
 8003cc0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003cc2:	4b32      	ldr	r3, [pc, #200]	@ (8003d8c <MX_TIM3_Init+0xfc>)
 8003cc4:	4a32      	ldr	r2, [pc, #200]	@ (8003d90 <MX_TIM3_Init+0x100>)
 8003cc6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8003cc8:	4b30      	ldr	r3, [pc, #192]	@ (8003d8c <MX_TIM3_Init+0xfc>)
 8003cca:	2201      	movs	r2, #1
 8003ccc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cce:	4b2f      	ldr	r3, [pc, #188]	@ (8003d8c <MX_TIM3_Init+0xfc>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 42499;
 8003cd4:	4b2d      	ldr	r3, [pc, #180]	@ (8003d8c <MX_TIM3_Init+0xfc>)
 8003cd6:	f24a 6203 	movw	r2, #42499	@ 0xa603
 8003cda:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cdc:	4b2b      	ldr	r3, [pc, #172]	@ (8003d8c <MX_TIM3_Init+0xfc>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ce2:	4b2a      	ldr	r3, [pc, #168]	@ (8003d8c <MX_TIM3_Init+0xfc>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003ce8:	4828      	ldr	r0, [pc, #160]	@ (8003d8c <MX_TIM3_Init+0xfc>)
 8003cea:	f003 fec5 	bl	8007a78 <HAL_TIM_Base_Init>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003cf4:	f000 fbf4 	bl	80044e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cf8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003cfe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003d02:	4619      	mov	r1, r3
 8003d04:	4821      	ldr	r0, [pc, #132]	@ (8003d8c <MX_TIM3_Init+0xfc>)
 8003d06:	f004 fe97 	bl	8008a38 <HAL_TIM_ConfigClockSource>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003d10:	f000 fbe6 	bl	80044e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003d14:	481d      	ldr	r0, [pc, #116]	@ (8003d8c <MX_TIM3_Init+0xfc>)
 8003d16:	f003 fffb 	bl	8007d10 <HAL_TIM_PWM_Init>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003d20:	f000 fbde 	bl	80044e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d24:	2300      	movs	r3, #0
 8003d26:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003d2c:	f107 031c 	add.w	r3, r7, #28
 8003d30:	4619      	mov	r1, r3
 8003d32:	4816      	ldr	r0, [pc, #88]	@ (8003d8c <MX_TIM3_Init+0xfc>)
 8003d34:	f005 fe66 	bl	8009a04 <HAL_TIMEx_MasterConfigSynchronization>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003d3e:	f000 fbcf 	bl	80044e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d42:	2360      	movs	r3, #96	@ 0x60
 8003d44:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003d46:	2300      	movs	r3, #0
 8003d48:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d52:	463b      	mov	r3, r7
 8003d54:	2200      	movs	r2, #0
 8003d56:	4619      	mov	r1, r3
 8003d58:	480c      	ldr	r0, [pc, #48]	@ (8003d8c <MX_TIM3_Init+0xfc>)
 8003d5a:	f004 fd59 	bl	8008810 <HAL_TIM_PWM_ConfigChannel>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003d64:	f000 fbbc 	bl	80044e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003d68:	463b      	mov	r3, r7
 8003d6a:	2204      	movs	r2, #4
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4807      	ldr	r0, [pc, #28]	@ (8003d8c <MX_TIM3_Init+0xfc>)
 8003d70:	f004 fd4e 	bl	8008810 <HAL_TIM_PWM_ConfigChannel>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8003d7a:	f000 fbb1 	bl	80044e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003d7e:	4803      	ldr	r0, [pc, #12]	@ (8003d8c <MX_TIM3_Init+0xfc>)
 8003d80:	f000 fcde 	bl	8004740 <HAL_TIM_MspPostInit>

}
 8003d84:	bf00      	nop
 8003d86:	3738      	adds	r7, #56	@ 0x38
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	2000044c 	.word	0x2000044c
 8003d90:	40000400 	.word	0x40000400

08003d94 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b088      	sub	sp, #32
 8003d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d9a:	f107 0310 	add.w	r3, r7, #16
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	605a      	str	r2, [r3, #4]
 8003da4:	609a      	str	r2, [r3, #8]
 8003da6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003da8:	1d3b      	adds	r3, r7, #4
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	605a      	str	r2, [r3, #4]
 8003db0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003db2:	4b1d      	ldr	r3, [pc, #116]	@ (8003e28 <MX_TIM4_Init+0x94>)
 8003db4:	4a1d      	ldr	r2, [pc, #116]	@ (8003e2c <MX_TIM4_Init+0x98>)
 8003db6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8003db8:	4b1b      	ldr	r3, [pc, #108]	@ (8003e28 <MX_TIM4_Init+0x94>)
 8003dba:	22a9      	movs	r2, #169	@ 0xa9
 8003dbc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8003e28 <MX_TIM4_Init+0x94>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50;
 8003dc4:	4b18      	ldr	r3, [pc, #96]	@ (8003e28 <MX_TIM4_Init+0x94>)
 8003dc6:	2232      	movs	r2, #50	@ 0x32
 8003dc8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dca:	4b17      	ldr	r3, [pc, #92]	@ (8003e28 <MX_TIM4_Init+0x94>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dd0:	4b15      	ldr	r3, [pc, #84]	@ (8003e28 <MX_TIM4_Init+0x94>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003dd6:	4814      	ldr	r0, [pc, #80]	@ (8003e28 <MX_TIM4_Init+0x94>)
 8003dd8:	f003 fe4e 	bl	8007a78 <HAL_TIM_Base_Init>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8003de2:	f000 fb7d 	bl	80044e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003de6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003dea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003dec:	f107 0310 	add.w	r3, r7, #16
 8003df0:	4619      	mov	r1, r3
 8003df2:	480d      	ldr	r0, [pc, #52]	@ (8003e28 <MX_TIM4_Init+0x94>)
 8003df4:	f004 fe20 	bl	8008a38 <HAL_TIM_ConfigClockSource>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8003dfe:	f000 fb6f 	bl	80044e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e02:	2300      	movs	r3, #0
 8003e04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e06:	2300      	movs	r3, #0
 8003e08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003e0a:	1d3b      	adds	r3, r7, #4
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4806      	ldr	r0, [pc, #24]	@ (8003e28 <MX_TIM4_Init+0x94>)
 8003e10:	f005 fdf8 	bl	8009a04 <HAL_TIMEx_MasterConfigSynchronization>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8003e1a:	f000 fb61 	bl	80044e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003e1e:	bf00      	nop
 8003e20:	3720      	adds	r7, #32
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	20000518 	.word	0x20000518
 8003e2c:	40000800 	.word	0x40000800

08003e30 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b088      	sub	sp, #32
 8003e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e36:	f107 0310 	add.w	r3, r7, #16
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	605a      	str	r2, [r3, #4]
 8003e40:	609a      	str	r2, [r3, #8]
 8003e42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e44:	1d3b      	adds	r3, r7, #4
 8003e46:	2200      	movs	r2, #0
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	605a      	str	r2, [r3, #4]
 8003e4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ec4 <MX_TIM5_Init+0x94>)
 8003e50:	4a1d      	ldr	r2, [pc, #116]	@ (8003ec8 <MX_TIM5_Init+0x98>)
 8003e52:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8003e54:	4b1b      	ldr	r3, [pc, #108]	@ (8003ec4 <MX_TIM5_Init+0x94>)
 8003e56:	22a9      	movs	r2, #169	@ 0xa9
 8003e58:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ec4 <MX_TIM5_Init+0x94>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003e60:	4b18      	ldr	r3, [pc, #96]	@ (8003ec4 <MX_TIM5_Init+0x94>)
 8003e62:	f04f 32ff 	mov.w	r2, #4294967295
 8003e66:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e68:	4b16      	ldr	r3, [pc, #88]	@ (8003ec4 <MX_TIM5_Init+0x94>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e6e:	4b15      	ldr	r3, [pc, #84]	@ (8003ec4 <MX_TIM5_Init+0x94>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003e74:	4813      	ldr	r0, [pc, #76]	@ (8003ec4 <MX_TIM5_Init+0x94>)
 8003e76:	f003 fdff 	bl	8007a78 <HAL_TIM_Base_Init>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003e80:	f000 fb2e 	bl	80044e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003e8a:	f107 0310 	add.w	r3, r7, #16
 8003e8e:	4619      	mov	r1, r3
 8003e90:	480c      	ldr	r0, [pc, #48]	@ (8003ec4 <MX_TIM5_Init+0x94>)
 8003e92:	f004 fdd1 	bl	8008a38 <HAL_TIM_ConfigClockSource>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003e9c:	f000 fb20 	bl	80044e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003ea8:	1d3b      	adds	r3, r7, #4
 8003eaa:	4619      	mov	r1, r3
 8003eac:	4805      	ldr	r0, [pc, #20]	@ (8003ec4 <MX_TIM5_Init+0x94>)
 8003eae:	f005 fda9 	bl	8009a04 <HAL_TIMEx_MasterConfigSynchronization>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003eb8:	f000 fb12 	bl	80044e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003ebc:	bf00      	nop
 8003ebe:	3720      	adds	r7, #32
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	200005e4 	.word	0x200005e4
 8003ec8:	40000c00 	.word	0x40000c00

08003ecc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003ed0:	4b14      	ldr	r3, [pc, #80]	@ (8003f24 <MX_TIM16_Init+0x58>)
 8003ed2:	4a15      	ldr	r2, [pc, #84]	@ (8003f28 <MX_TIM16_Init+0x5c>)
 8003ed4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8003ed6:	4b13      	ldr	r3, [pc, #76]	@ (8003f24 <MX_TIM16_Init+0x58>)
 8003ed8:	22a9      	movs	r2, #169	@ 0xa9
 8003eda:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003edc:	4b11      	ldr	r3, [pc, #68]	@ (8003f24 <MX_TIM16_Init+0x58>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8003ee2:	4b10      	ldr	r3, [pc, #64]	@ (8003f24 <MX_TIM16_Init+0x58>)
 8003ee4:	f240 4279 	movw	r2, #1145	@ 0x479
 8003ee8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003eea:	4b0e      	ldr	r3, [pc, #56]	@ (8003f24 <MX_TIM16_Init+0x58>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8003f24 <MX_TIM16_Init+0x58>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8003f24 <MX_TIM16_Init+0x58>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003efc:	4809      	ldr	r0, [pc, #36]	@ (8003f24 <MX_TIM16_Init+0x58>)
 8003efe:	f003 fdbb 	bl	8007a78 <HAL_TIM_Base_Init>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8003f08:	f000 faea 	bl	80044e0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8003f0c:	2108      	movs	r1, #8
 8003f0e:	4805      	ldr	r0, [pc, #20]	@ (8003f24 <MX_TIM16_Init+0x58>)
 8003f10:	f004 f8cc 	bl	80080ac <HAL_TIM_OnePulse_Init>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8003f1a:	f000 fae1 	bl	80044e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003f1e:	bf00      	nop
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	200006b0 	.word	0x200006b0
 8003f28:	40014400 	.word	0x40014400

08003f2c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003f30:	4b23      	ldr	r3, [pc, #140]	@ (8003fc0 <MX_UART4_Init+0x94>)
 8003f32:	4a24      	ldr	r2, [pc, #144]	@ (8003fc4 <MX_UART4_Init+0x98>)
 8003f34:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003f36:	4b22      	ldr	r3, [pc, #136]	@ (8003fc0 <MX_UART4_Init+0x94>)
 8003f38:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003f3c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003f3e:	4b20      	ldr	r3, [pc, #128]	@ (8003fc0 <MX_UART4_Init+0x94>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003f44:	4b1e      	ldr	r3, [pc, #120]	@ (8003fc0 <MX_UART4_Init+0x94>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8003fc0 <MX_UART4_Init+0x94>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003f50:	4b1b      	ldr	r3, [pc, #108]	@ (8003fc0 <MX_UART4_Init+0x94>)
 8003f52:	220c      	movs	r2, #12
 8003f54:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f56:	4b1a      	ldr	r3, [pc, #104]	@ (8003fc0 <MX_UART4_Init+0x94>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f5c:	4b18      	ldr	r3, [pc, #96]	@ (8003fc0 <MX_UART4_Init+0x94>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 8003f62:	4b17      	ldr	r3, [pc, #92]	@ (8003fc0 <MX_UART4_Init+0x94>)
 8003f64:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f68:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003f6a:	4b15      	ldr	r3, [pc, #84]	@ (8003fc0 <MX_UART4_Init+0x94>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f70:	4b13      	ldr	r3, [pc, #76]	@ (8003fc0 <MX_UART4_Init+0x94>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003f76:	4812      	ldr	r0, [pc, #72]	@ (8003fc0 <MX_UART4_Init+0x94>)
 8003f78:	f005 fe2a 	bl	8009bd0 <HAL_UART_Init>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <MX_UART4_Init+0x5a>
  {
    Error_Handler();
 8003f82:	f000 faad 	bl	80044e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f86:	2100      	movs	r1, #0
 8003f88:	480d      	ldr	r0, [pc, #52]	@ (8003fc0 <MX_UART4_Init+0x94>)
 8003f8a:	f007 fd12 	bl	800b9b2 <HAL_UARTEx_SetTxFifoThreshold>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <MX_UART4_Init+0x6c>
  {
    Error_Handler();
 8003f94:	f000 faa4 	bl	80044e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8003f98:	f04f 6120 	mov.w	r1, #167772160	@ 0xa000000
 8003f9c:	4808      	ldr	r0, [pc, #32]	@ (8003fc0 <MX_UART4_Init+0x94>)
 8003f9e:	f007 fd46 	bl	800ba2e <HAL_UARTEx_SetRxFifoThreshold>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <MX_UART4_Init+0x80>
  {
    Error_Handler();
 8003fa8:	f000 fa9a 	bl	80044e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003fac:	4804      	ldr	r0, [pc, #16]	@ (8003fc0 <MX_UART4_Init+0x94>)
 8003fae:	f007 fcc7 	bl	800b940 <HAL_UARTEx_DisableFifoMode>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <MX_UART4_Init+0x90>
  {
    Error_Handler();
 8003fb8:	f000 fa92 	bl	80044e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003fbc:	bf00      	nop
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	2000077c 	.word	0x2000077c
 8003fc4:	40004c00 	.word	0x40004c00

08003fc8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003fcc:	4b23      	ldr	r3, [pc, #140]	@ (800405c <MX_USART2_UART_Init+0x94>)
 8003fce:	4a24      	ldr	r2, [pc, #144]	@ (8004060 <MX_USART2_UART_Init+0x98>)
 8003fd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8003fd2:	4b22      	ldr	r3, [pc, #136]	@ (800405c <MX_USART2_UART_Init+0x94>)
 8003fd4:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8003fd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8003fda:	4b20      	ldr	r3, [pc, #128]	@ (800405c <MX_USART2_UART_Init+0x94>)
 8003fdc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003fe0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003fe2:	4b1e      	ldr	r3, [pc, #120]	@ (800405c <MX_USART2_UART_Init+0x94>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8003fe8:	4b1c      	ldr	r3, [pc, #112]	@ (800405c <MX_USART2_UART_Init+0x94>)
 8003fea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003fee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800405c <MX_USART2_UART_Init+0x94>)
 8003ff2:	220c      	movs	r2, #12
 8003ff4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ff6:	4b19      	ldr	r3, [pc, #100]	@ (800405c <MX_USART2_UART_Init+0x94>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ffc:	4b17      	ldr	r3, [pc, #92]	@ (800405c <MX_USART2_UART_Init+0x94>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004002:	4b16      	ldr	r3, [pc, #88]	@ (800405c <MX_USART2_UART_Init+0x94>)
 8004004:	2200      	movs	r2, #0
 8004006:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004008:	4b14      	ldr	r3, [pc, #80]	@ (800405c <MX_USART2_UART_Init+0x94>)
 800400a:	2200      	movs	r2, #0
 800400c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800400e:	4b13      	ldr	r3, [pc, #76]	@ (800405c <MX_USART2_UART_Init+0x94>)
 8004010:	2200      	movs	r2, #0
 8004012:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004014:	4811      	ldr	r0, [pc, #68]	@ (800405c <MX_USART2_UART_Init+0x94>)
 8004016:	f005 fddb 	bl	8009bd0 <HAL_UART_Init>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8004020:	f000 fa5e 	bl	80044e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004024:	2100      	movs	r1, #0
 8004026:	480d      	ldr	r0, [pc, #52]	@ (800405c <MX_USART2_UART_Init+0x94>)
 8004028:	f007 fcc3 	bl	800b9b2 <HAL_UARTEx_SetTxFifoThreshold>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8004032:	f000 fa55 	bl	80044e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004036:	2100      	movs	r1, #0
 8004038:	4808      	ldr	r0, [pc, #32]	@ (800405c <MX_USART2_UART_Init+0x94>)
 800403a:	f007 fcf8 	bl	800ba2e <HAL_UARTEx_SetRxFifoThreshold>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8004044:	f000 fa4c 	bl	80044e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004048:	4804      	ldr	r0, [pc, #16]	@ (800405c <MX_USART2_UART_Init+0x94>)
 800404a:	f007 fc79 	bl	800b940 <HAL_UARTEx_DisableFifoMode>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8004054:	f000 fa44 	bl	80044e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004058:	bf00      	nop
 800405a:	bd80      	pop	{r7, pc}
 800405c:	20000848 	.word	0x20000848
 8004060:	40004400 	.word	0x40004400

08004064 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800406a:	4b16      	ldr	r3, [pc, #88]	@ (80040c4 <MX_DMA_Init+0x60>)
 800406c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800406e:	4a15      	ldr	r2, [pc, #84]	@ (80040c4 <MX_DMA_Init+0x60>)
 8004070:	f043 0304 	orr.w	r3, r3, #4
 8004074:	6493      	str	r3, [r2, #72]	@ 0x48
 8004076:	4b13      	ldr	r3, [pc, #76]	@ (80040c4 <MX_DMA_Init+0x60>)
 8004078:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800407a:	f003 0304 	and.w	r3, r3, #4
 800407e:	607b      	str	r3, [r7, #4]
 8004080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004082:	4b10      	ldr	r3, [pc, #64]	@ (80040c4 <MX_DMA_Init+0x60>)
 8004084:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004086:	4a0f      	ldr	r2, [pc, #60]	@ (80040c4 <MX_DMA_Init+0x60>)
 8004088:	f043 0301 	orr.w	r3, r3, #1
 800408c:	6493      	str	r3, [r2, #72]	@ 0x48
 800408e:	4b0d      	ldr	r3, [pc, #52]	@ (80040c4 <MX_DMA_Init+0x60>)
 8004090:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	603b      	str	r3, [r7, #0]
 8004098:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800409a:	2200      	movs	r2, #0
 800409c:	2100      	movs	r1, #0
 800409e:	200b      	movs	r0, #11
 80040a0:	f001 ff7d 	bl	8005f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80040a4:	200b      	movs	r0, #11
 80040a6:	f001 ff94 	bl	8005fd2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80040aa:	2200      	movs	r2, #0
 80040ac:	2100      	movs	r1, #0
 80040ae:	200c      	movs	r0, #12
 80040b0:	f001 ff75 	bl	8005f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80040b4:	200c      	movs	r0, #12
 80040b6:	f001 ff8c 	bl	8005fd2 <HAL_NVIC_EnableIRQ>

}
 80040ba:	bf00      	nop
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	40021000 	.word	0x40021000

080040c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b08a      	sub	sp, #40	@ 0x28
 80040cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040ce:	f107 0314 	add.w	r3, r7, #20
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	605a      	str	r2, [r3, #4]
 80040d8:	609a      	str	r2, [r3, #8]
 80040da:	60da      	str	r2, [r3, #12]
 80040dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040de:	4b4c      	ldr	r3, [pc, #304]	@ (8004210 <MX_GPIO_Init+0x148>)
 80040e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040e2:	4a4b      	ldr	r2, [pc, #300]	@ (8004210 <MX_GPIO_Init+0x148>)
 80040e4:	f043 0304 	orr.w	r3, r3, #4
 80040e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040ea:	4b49      	ldr	r3, [pc, #292]	@ (8004210 <MX_GPIO_Init+0x148>)
 80040ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040ee:	f003 0304 	and.w	r3, r3, #4
 80040f2:	613b      	str	r3, [r7, #16]
 80040f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80040f6:	4b46      	ldr	r3, [pc, #280]	@ (8004210 <MX_GPIO_Init+0x148>)
 80040f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040fa:	4a45      	ldr	r2, [pc, #276]	@ (8004210 <MX_GPIO_Init+0x148>)
 80040fc:	f043 0320 	orr.w	r3, r3, #32
 8004100:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004102:	4b43      	ldr	r3, [pc, #268]	@ (8004210 <MX_GPIO_Init+0x148>)
 8004104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004106:	f003 0320 	and.w	r3, r3, #32
 800410a:	60fb      	str	r3, [r7, #12]
 800410c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800410e:	4b40      	ldr	r3, [pc, #256]	@ (8004210 <MX_GPIO_Init+0x148>)
 8004110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004112:	4a3f      	ldr	r2, [pc, #252]	@ (8004210 <MX_GPIO_Init+0x148>)
 8004114:	f043 0301 	orr.w	r3, r3, #1
 8004118:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800411a:	4b3d      	ldr	r3, [pc, #244]	@ (8004210 <MX_GPIO_Init+0x148>)
 800411c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	60bb      	str	r3, [r7, #8]
 8004124:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004126:	4b3a      	ldr	r3, [pc, #232]	@ (8004210 <MX_GPIO_Init+0x148>)
 8004128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800412a:	4a39      	ldr	r2, [pc, #228]	@ (8004210 <MX_GPIO_Init+0x148>)
 800412c:	f043 0302 	orr.w	r3, r3, #2
 8004130:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004132:	4b37      	ldr	r3, [pc, #220]	@ (8004210 <MX_GPIO_Init+0x148>)
 8004134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	607b      	str	r3, [r7, #4]
 800413c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Push_solenoid_Pin, GPIO_PIN_RESET);
 800413e:	2200      	movs	r2, #0
 8004140:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8004144:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004148:	f002 fc2a 	bl	80069a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Pull_solenoid_Pin|Suck_solenoid_Pin, GPIO_PIN_RESET);
 800414c:	2200      	movs	r2, #0
 800414e:	2130      	movs	r1, #48	@ 0x30
 8004150:	4830      	ldr	r0, [pc, #192]	@ (8004214 <MX_GPIO_Init+0x14c>)
 8004152:	f002 fc25 	bl	80069a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004156:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800415a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800415c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004160:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004162:	2300      	movs	r3, #0
 8004164:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004166:	f107 0314 	add.w	r3, r7, #20
 800416a:	4619      	mov	r1, r3
 800416c:	4829      	ldr	r0, [pc, #164]	@ (8004214 <MX_GPIO_Init+0x14c>)
 800416e:	f002 fa7d 	bl	800666c <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Base_Pin Limit_Top_Pin Reed_pull_Pin */
  GPIO_InitStruct.Pin = Limit_Base_Pin|Limit_Top_Pin|Reed_pull_Pin;
 8004172:	23d0      	movs	r3, #208	@ 0xd0
 8004174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004176:	2300      	movs	r3, #0
 8004178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800417a:	2302      	movs	r3, #2
 800417c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800417e:	f107 0314 	add.w	r3, r7, #20
 8004182:	4619      	mov	r1, r3
 8004184:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004188:	f002 fa70 	bl	800666c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Push_solenoid_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Push_solenoid_Pin;
 800418c:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8004190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004192:	2301      	movs	r3, #1
 8004194:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004196:	2300      	movs	r3, #0
 8004198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800419a:	2300      	movs	r3, #0
 800419c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800419e:	f107 0314 	add.w	r3, r7, #20
 80041a2:	4619      	mov	r1, r3
 80041a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80041a8:	f002 fa60 	bl	800666c <HAL_GPIO_Init>

  /*Configure GPIO pins : Pull_solenoid_Pin Suck_solenoid_Pin */
  GPIO_InitStruct.Pin = Pull_solenoid_Pin|Suck_solenoid_Pin;
 80041ac:	2330      	movs	r3, #48	@ 0x30
 80041ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041b0:	2301      	movs	r3, #1
 80041b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b4:	2300      	movs	r3, #0
 80041b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041b8:	2300      	movs	r3, #0
 80041ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041bc:	f107 0314 	add.w	r3, r7, #20
 80041c0:	4619      	mov	r1, r3
 80041c2:	4814      	ldr	r0, [pc, #80]	@ (8004214 <MX_GPIO_Init+0x14c>)
 80041c4:	f002 fa52 	bl	800666c <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Signal_Pin */
  GPIO_InitStruct.Pin = Emergency_Signal_Pin;
 80041c8:	2380      	movs	r3, #128	@ 0x80
 80041ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041cc:	2300      	movs	r3, #0
 80041ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80041d0:	2302      	movs	r3, #2
 80041d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_Signal_GPIO_Port, &GPIO_InitStruct);
 80041d4:	f107 0314 	add.w	r3, r7, #20
 80041d8:	4619      	mov	r1, r3
 80041da:	480e      	ldr	r0, [pc, #56]	@ (8004214 <MX_GPIO_Init+0x14c>)
 80041dc:	f002 fa46 	bl	800666c <HAL_GPIO_Init>

  /*Configure GPIO pin : Reed_push_Pin */
  GPIO_InitStruct.Pin = Reed_push_Pin;
 80041e0:	2340      	movs	r3, #64	@ 0x40
 80041e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041e4:	2300      	movs	r3, #0
 80041e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80041e8:	2302      	movs	r3, #2
 80041ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Reed_push_GPIO_Port, &GPIO_InitStruct);
 80041ec:	f107 0314 	add.w	r3, r7, #20
 80041f0:	4619      	mov	r1, r3
 80041f2:	4809      	ldr	r0, [pc, #36]	@ (8004218 <MX_GPIO_Init+0x150>)
 80041f4:	f002 fa3a 	bl	800666c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80041f8:	2200      	movs	r2, #0
 80041fa:	2100      	movs	r1, #0
 80041fc:	2028      	movs	r0, #40	@ 0x28
 80041fe:	f001 fece 	bl	8005f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004202:	2028      	movs	r0, #40	@ 0x28
 8004204:	f001 fee5 	bl	8005fd2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004208:	bf00      	nop
 800420a:	3728      	adds	r7, #40	@ 0x28
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40021000 	.word	0x40021000
 8004214:	48000800 	.word	0x48000800
 8004218:	48000400 	.word	0x48000400

0800421c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */
volatile uint32_t interrupt_counter = 0;			// Interurupt counter

// Timer Interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
 800421c:	b5b0      	push	{r4, r5, r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
		// Timer 5 Interrupt for Micros()
		if(htim == &htim5){_micros += UINT32_MAX;}
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a8f      	ldr	r2, [pc, #572]	@ (8004464 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d108      	bne.n	800423e <HAL_TIM_PeriodElapsedCallback+0x22>
 800422c:	4b8e      	ldr	r3, [pc, #568]	@ (8004468 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800422e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004232:	1e54      	subs	r4, r2, #1
 8004234:	f143 0500 	adc.w	r5, r3, #0
 8004238:	4b8b      	ldr	r3, [pc, #556]	@ (8004468 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800423a:	e9c3 4500 	strd	r4, r5, [r3]

		// Timer 4 Interrupt for System Clock
		if(htim == &htim4){
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a8a      	ldr	r2, [pc, #552]	@ (800446c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8004242:	4293      	cmp	r3, r2
 8004244:	f040 8109 	bne.w	800445a <HAL_TIM_PeriodElapsedCallback+0x23e>

			interrupt_counter++;
 8004248:	4b89      	ldr	r3, [pc, #548]	@ (8004470 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3301      	adds	r3, #1
 800424e:	4a88      	ldr	r2, [pc, #544]	@ (8004470 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8004250:	6013      	str	r3, [r2, #0]

			// For 5 KHz
			//---------------- Check Case & PID & Trajectory ----------------//
			if(interrupt_counter % 4 == 0 && emer == 0){
 8004252:	4b87      	ldr	r3, [pc, #540]	@ (8004470 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	2b00      	cmp	r3, #0
 800425c:	f040 809f 	bne.w	800439e <HAL_TIM_PeriodElapsedCallback+0x182>
 8004260:	4b84      	ldr	r3, [pc, #528]	@ (8004474 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	f040 809a 	bne.w	800439e <HAL_TIM_PeriodElapsedCallback+0x182>

				// Check Case From Base System
				easyCase();
 800426a:	f7fc ff37 	bl	80010dc <easyCase>
				switch(base.Base_case){
 800426e:	4b82      	ldr	r3, [pc, #520]	@ (8004478 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8004270:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 8004274:	3b01      	subs	r3, #1
 8004276:	2b07      	cmp	r3, #7
 8004278:	d835      	bhi.n	80042e6 <HAL_TIM_PeriodElapsedCallback+0xca>
 800427a:	a201      	add	r2, pc, #4	@ (adr r2, 8004280 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800427c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004280:	080042a1 	.word	0x080042a1
 8004284:	080042a9 	.word	0x080042a9
 8004288:	080042e7 	.word	0x080042e7
 800428c:	080042b5 	.word	0x080042b5
 8004290:	080042e7 	.word	0x080042e7
 8004294:	080042e7 	.word	0x080042e7
 8004298:	080042e7 	.word	0x080042e7
 800429c:	080042db 	.word	0x080042db
					case 1:
						base.BaseStatus = 1;
 80042a0:	4b75      	ldr	r3, [pc, #468]	@ (8004478 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80042a2:	2201      	movs	r2, #1
 80042a4:	801a      	strh	r2, [r3, #0]
						break;
 80042a6:	e023      	b.n	80042f0 <HAL_TIM_PeriodElapsedCallback+0xd4>
					case 2:
						base.BaseStatus = 2;
 80042a8:	4b73      	ldr	r3, [pc, #460]	@ (8004478 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80042aa:	2202      	movs	r2, #2
 80042ac:	801a      	strh	r2, [r3, #0]
						SetHome();
 80042ae:	f7fd f907 	bl	80014c0 <SetHome>
						break;
 80042b2:	e01d      	b.n	80042f0 <HAL_TIM_PeriodElapsedCallback+0xd4>
					case 4:
						base.BaseStatus = (base.runJogMode == 0) ? 4 : ((base.runJogMode == 1) ? 8 : base.BaseStatus);
 80042b4:	4b70      	ldr	r3, [pc, #448]	@ (8004478 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80042b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d008      	beq.n	80042ce <HAL_TIM_PeriodElapsedCallback+0xb2>
 80042bc:	4b6e      	ldr	r3, [pc, #440]	@ (8004478 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80042be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d002      	beq.n	80042ca <HAL_TIM_PeriodElapsedCallback+0xae>
 80042c4:	4b6c      	ldr	r3, [pc, #432]	@ (8004478 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80042c6:	881b      	ldrh	r3, [r3, #0]
 80042c8:	e002      	b.n	80042d0 <HAL_TIM_PeriodElapsedCallback+0xb4>
 80042ca:	2308      	movs	r3, #8
 80042cc:	e000      	b.n	80042d0 <HAL_TIM_PeriodElapsedCallback+0xb4>
 80042ce:	2304      	movs	r3, #4
 80042d0:	4a69      	ldr	r2, [pc, #420]	@ (8004478 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80042d2:	8013      	strh	r3, [r2, #0]
						RunJog();
 80042d4:	f7fd f9a0 	bl	8001618 <RunJog>
						break;
 80042d8:	e00a      	b.n	80042f0 <HAL_TIM_PeriodElapsedCallback+0xd4>
					case 8:
						base.BaseStatus = 16;
 80042da:	4b67      	ldr	r3, [pc, #412]	@ (8004478 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80042dc:	2210      	movs	r2, #16
 80042de:	801a      	strh	r2, [r3, #0]
						RunPoint();
 80042e0:	f7fd f85a 	bl	8001398 <RunPoint>
						break;
 80042e4:	e004      	b.n	80042f0 <HAL_TIM_PeriodElapsedCallback+0xd4>
					default :
						base.BaseStatus = 0;
 80042e6:	4b64      	ldr	r3, [pc, #400]	@ (8004478 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	801a      	strh	r2, [r3, #0]
						Holding_position();
 80042ec:	f7fd fd4a 	bl	8001d84 <Holding_position>
				}

				// Reed Switch Status
				int pinCombination = (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) | HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 80042f0:	2140      	movs	r1, #64	@ 0x40
 80042f2:	4862      	ldr	r0, [pc, #392]	@ (800447c <HAL_TIM_PeriodElapsedCallback+0x260>)
 80042f4:	f002 fb3c 	bl	8006970 <HAL_GPIO_ReadPin>
 80042f8:	4603      	mov	r3, r0
 80042fa:	005c      	lsls	r4, r3, #1
 80042fc:	2180      	movs	r1, #128	@ 0x80
 80042fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004302:	f002 fb35 	bl	8006970 <HAL_GPIO_ReadPin>
 8004306:	4603      	mov	r3, r0
 8004308:	4323      	orrs	r3, r4
 800430a:	60fb      	str	r3, [r7, #12]
				switch(pinCombination) {
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d007      	beq.n	8004322 <HAL_TIM_PeriodElapsedCallback+0x106>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2b02      	cmp	r3, #2
 8004316:	d109      	bne.n	800432c <HAL_TIM_PeriodElapsedCallback+0x110>
					case 2: // Binary 10: B is SET, A is RESET
						base.ReedStatus = 0b0001;
 8004318:	4b57      	ldr	r3, [pc, #348]	@ (8004478 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800431a:	2201      	movs	r2, #1
 800431c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
						break;
 8004320:	e008      	b.n	8004334 <HAL_TIM_PeriodElapsedCallback+0x118>
					case 1: // Binary 01: B is RESET, A is SET
						base.ReedStatus = 0b0010;
 8004322:	4b55      	ldr	r3, [pc, #340]	@ (8004478 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8004324:	2202      	movs	r2, #2
 8004326:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
						break;
 800432a:	e003      	b.n	8004334 <HAL_TIM_PeriodElapsedCallback+0x118>
					default:
						base.ReedStatus = 0b0000;
 800432c:	4b52      	ldr	r3, [pc, #328]	@ (8004478 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800432e:	2200      	movs	r2, #0
 8004330:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
				}

				// Coarse Step Joy
				if (ps2.mode == 1 && emer == 0 && base.ShelveMode == 1) {base.MotorHome = (ps2.pwmOut < 0) ? 0 : ps2.pwmOut;}
 8004334:	4b52      	ldr	r3, [pc, #328]	@ (8004480 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8004336:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004338:	2b01      	cmp	r3, #1
 800433a:	d10f      	bne.n	800435c <HAL_TIM_PeriodElapsedCallback+0x140>
 800433c:	4b4d      	ldr	r3, [pc, #308]	@ (8004474 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10b      	bne.n	800435c <HAL_TIM_PeriodElapsedCallback+0x140>
 8004344:	4b4c      	ldr	r3, [pc, #304]	@ (8004478 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8004346:	8b1b      	ldrh	r3, [r3, #24]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d107      	bne.n	800435c <HAL_TIM_PeriodElapsedCallback+0x140>
 800434c:	4b4c      	ldr	r3, [pc, #304]	@ (8004480 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800434e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004350:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004354:	b21a      	sxth	r2, r3
 8004356:	4b48      	ldr	r3, [pc, #288]	@ (8004478 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8004358:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
				// Fine Step Joy
				if (ps2.mode == 2 && emer == 0 && base.ShelveMode == 1) {
 800435c:	4b48      	ldr	r3, [pc, #288]	@ (8004480 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800435e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004360:	2b02      	cmp	r3, #2
 8004362:	d11c      	bne.n	800439e <HAL_TIM_PeriodElapsedCallback+0x182>
 8004364:	4b43      	ldr	r3, [pc, #268]	@ (8004474 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d118      	bne.n	800439e <HAL_TIM_PeriodElapsedCallback+0x182>
 800436c:	4b42      	ldr	r3, [pc, #264]	@ (8004478 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800436e:	8b1b      	ldrh	r3, [r3, #24]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d114      	bne.n	800439e <HAL_TIM_PeriodElapsedCallback+0x182>
				    PID_controller_cascade(&PID_pos, &PID_velo, &AMT, ps2.PIDPos);
 8004374:	4b42      	ldr	r3, [pc, #264]	@ (8004480 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8004376:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 800437a:	eeb0 0a67 	vmov.f32	s0, s15
 800437e:	4a41      	ldr	r2, [pc, #260]	@ (8004484 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8004380:	4941      	ldr	r1, [pc, #260]	@ (8004488 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8004382:	4842      	ldr	r0, [pc, #264]	@ (800448c <HAL_TIM_PeriodElapsedCallback+0x270>)
 8004384:	f7fe fdf2 	bl	8002f6c <PID_controller_cascade>
				    base.MotorHome = PID_velo.out;
 8004388:	4b3f      	ldr	r3, [pc, #252]	@ (8004488 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800438a:	edd3 7a06 	vldr	s15, [r3, #24]
 800438e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004392:	ee17 3a90 	vmov	r3, s15
 8004396:	b21a      	sxth	r2, r3
 8004398:	4b37      	ldr	r3, [pc, #220]	@ (8004478 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800439a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
				}
			}

			// For 2 kHz
			//---------------------------For control PWM---------------------------//
			if(interrupt_counter % 10 == 0 && emer == 0){
 800439e:	4b34      	ldr	r3, [pc, #208]	@ (8004470 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80043a0:	6819      	ldr	r1, [r3, #0]
 80043a2:	4b3b      	ldr	r3, [pc, #236]	@ (8004490 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80043a4:	fba3 2301 	umull	r2, r3, r3, r1
 80043a8:	08da      	lsrs	r2, r3, #3
 80043aa:	4613      	mov	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	1aca      	subs	r2, r1, r3
 80043b4:	2a00      	cmp	r2, #0
 80043b6:	d110      	bne.n	80043da <HAL_TIM_PeriodElapsedCallback+0x1be>
 80043b8:	4b2e      	ldr	r3, [pc, #184]	@ (8004474 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10c      	bne.n	80043da <HAL_TIM_PeriodElapsedCallback+0x1be>
				MOTOR_set_duty(&MT, base.MotorHome);
 80043c0:	4b2d      	ldr	r3, [pc, #180]	@ (8004478 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80043c2:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	@ 0x5c
 80043c6:	ee07 3a90 	vmov	s15, r3
 80043ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043ce:	eeb0 0a67 	vmov.f32	s0, s15
 80043d2:	4830      	ldr	r0, [pc, #192]	@ (8004494 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80043d4:	f7fe f9ac 	bl	8002730 <MOTOR_set_duty>
 80043d8:	e02a      	b.n	8004430 <HAL_TIM_PeriodElapsedCallback+0x214>
			}
			else if(emer == 1){
 80043da:	4b26      	ldr	r3, [pc, #152]	@ (8004474 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d126      	bne.n	8004430 <HAL_TIM_PeriodElapsedCallback+0x214>
				MOTOR_set_duty(&MT, 0);
 80043e2:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8004498 <HAL_TIM_PeriodElapsedCallback+0x27c>
 80043e6:	482b      	ldr	r0, [pc, #172]	@ (8004494 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80043e8:	f7fe f9a2 	bl	8002730 <MOTOR_set_duty>
				base.MotorHome = 0;
 80043ec:	4b22      	ldr	r3, [pc, #136]	@ (8004478 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

				if(ps2.ps2RX[0] == 78){
 80043f4:	4b22      	ldr	r3, [pc, #136]	@ (8004480 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	2b4e      	cmp	r3, #78	@ 0x4e
 80043fa:	d119      	bne.n	8004430 <HAL_TIM_PeriodElapsedCallback+0x214>
					emer = 0;
 80043fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004474 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80043fe:	2200      	movs	r2, #0
 8004400:	601a      	str	r2, [r3, #0]
					AMT.Linear_Position = 0;
 8004402:	4b20      	ldr	r3, [pc, #128]	@ (8004484 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8004404:	f04f 0200 	mov.w	r2, #0
 8004408:	645a      	str	r2, [r3, #68]	@ 0x44
					PID_pos.out = 0;
 800440a:	4b20      	ldr	r3, [pc, #128]	@ (800448c <HAL_TIM_PeriodElapsedCallback+0x270>)
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	619a      	str	r2, [r3, #24]
					PID_velo.out = 0;
 8004412:	4b1d      	ldr	r3, [pc, #116]	@ (8004488 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	619a      	str	r2, [r3, #24]
					Traj.currentPosition = AMT.Linear_Position;
 800441a:	4b1a      	ldr	r3, [pc, #104]	@ (8004484 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800441c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800441e:	4a1f      	ldr	r2, [pc, #124]	@ (800449c <HAL_TIM_PeriodElapsedCallback+0x280>)
 8004420:	6093      	str	r3, [r2, #8]
					temp_pos = 0;
 8004422:	4b1f      	ldr	r3, [pc, #124]	@ (80044a0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8004424:	f04f 0200 	mov.w	r2, #0
 8004428:	601a      	str	r2, [r3, #0]
					temp_home = 0;
 800442a:	4b1e      	ldr	r3, [pc, #120]	@ (80044a4 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800442c:	2200      	movs	r2, #0
 800442e:	601a      	str	r2, [r3, #0]
				}
			}

			// For 1 kHz
			//----------------------For AMT Encoder------------------------//
			if(interrupt_counter % 20 == 0){
 8004430:	4b0f      	ldr	r3, [pc, #60]	@ (8004470 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8004432:	6819      	ldr	r1, [r3, #0]
 8004434:	4b16      	ldr	r3, [pc, #88]	@ (8004490 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8004436:	fba3 2301 	umull	r2, r3, r3, r1
 800443a:	091a      	lsrs	r2, r3, #4
 800443c:	4613      	mov	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4413      	add	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	1aca      	subs	r2, r1, r3
 8004446:	2a00      	cmp	r2, #0
 8004448:	d107      	bne.n	800445a <HAL_TIM_PeriodElapsedCallback+0x23e>
			    AMT_encoder_update(&AMT, &htim2, micros());}
 800444a:	f000 f82f 	bl	80044ac <micros>
 800444e:	4602      	mov	r2, r0
 8004450:	460b      	mov	r3, r1
 8004452:	4915      	ldr	r1, [pc, #84]	@ (80044a8 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8004454:	480b      	ldr	r0, [pc, #44]	@ (8004484 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8004456:	f7fd fcd7 	bl	8001e08 <AMT_encoder_update>
		}
	}
 800445a:	bf00      	nop
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bdb0      	pop	{r4, r5, r7, pc}
 8004462:	bf00      	nop
 8004464:	200005e4 	.word	0x200005e4
 8004468:	20001070 	.word	0x20001070
 800446c:	20000518 	.word	0x20000518
 8004470:	2000120c 	.word	0x2000120c
 8004474:	20001068 	.word	0x20001068
 8004478:	20000af8 	.word	0x20000af8
 800447c:	48000400 	.word	0x48000400
 8004480:	20000a40 	.word	0x20000a40
 8004484:	200009f0 	.word	0x200009f0
 8004488:	20000adc 	.word	0x20000adc
 800448c:	20000ac0 	.word	0x20000ac0
 8004490:	cccccccd 	.word	0xcccccccd
 8004494:	200009d4 	.word	0x200009d4
 8004498:	00000000 	.word	0x00000000
 800449c:	200009dc 	.word	0x200009dc
 80044a0:	20000298 	.word	0x20000298
 80044a4:	200002a0 	.word	0x200002a0
 80044a8:	20000380 	.word	0x20000380

080044ac <micros>:

uint64_t micros(){return __HAL_TIM_GET_COUNTER(&htim5)+_micros;}
 80044ac:	b4b0      	push	{r4, r5, r7}
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	4b09      	ldr	r3, [pc, #36]	@ (80044d8 <micros+0x2c>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b6:	2200      	movs	r2, #0
 80044b8:	4618      	mov	r0, r3
 80044ba:	4611      	mov	r1, r2
 80044bc:	4b07      	ldr	r3, [pc, #28]	@ (80044dc <micros+0x30>)
 80044be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c2:	1884      	adds	r4, r0, r2
 80044c4:	eb41 0503 	adc.w	r5, r1, r3
 80044c8:	4622      	mov	r2, r4
 80044ca:	462b      	mov	r3, r5
 80044cc:	4610      	mov	r0, r2
 80044ce:	4619      	mov	r1, r3
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bcb0      	pop	{r4, r5, r7}
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	200005e4 	.word	0x200005e4
 80044dc:	20001070 	.word	0x20001070

080044e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80044e4:	b672      	cpsid	i
}
 80044e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80044e8:	bf00      	nop
 80044ea:	e7fd      	b.n	80044e8 <Error_Handler+0x8>

080044ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004530 <HAL_MspInit+0x44>)
 80044f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044f6:	4a0e      	ldr	r2, [pc, #56]	@ (8004530 <HAL_MspInit+0x44>)
 80044f8:	f043 0301 	orr.w	r3, r3, #1
 80044fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80044fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004530 <HAL_MspInit+0x44>)
 8004500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	607b      	str	r3, [r7, #4]
 8004508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800450a:	4b09      	ldr	r3, [pc, #36]	@ (8004530 <HAL_MspInit+0x44>)
 800450c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800450e:	4a08      	ldr	r2, [pc, #32]	@ (8004530 <HAL_MspInit+0x44>)
 8004510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004514:	6593      	str	r3, [r2, #88]	@ 0x58
 8004516:	4b06      	ldr	r3, [pc, #24]	@ (8004530 <HAL_MspInit+0x44>)
 8004518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800451a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800451e:	603b      	str	r3, [r7, #0]
 8004520:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004522:	f002 fb1d 	bl	8006b60 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004526:	bf00      	nop
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	40021000 	.word	0x40021000

08004534 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b09e      	sub	sp, #120	@ 0x78
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800453c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004540:	2200      	movs	r2, #0
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	605a      	str	r2, [r3, #4]
 8004546:	609a      	str	r2, [r3, #8]
 8004548:	60da      	str	r2, [r3, #12]
 800454a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800454c:	f107 0310 	add.w	r3, r7, #16
 8004550:	2254      	movs	r2, #84	@ 0x54
 8004552:	2100      	movs	r1, #0
 8004554:	4618      	mov	r0, r3
 8004556:	f007 faf7 	bl	800bb48 <memset>
  if(hadc->Instance==ADC1)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004562:	d133      	bne.n	80045cc <HAL_ADC_MspInit+0x98>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004564:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004568:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800456a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800456e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004570:	f107 0310 	add.w	r3, r7, #16
 8004574:	4618      	mov	r0, r3
 8004576:	f003 f831 	bl	80075dc <HAL_RCCEx_PeriphCLKConfig>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004580:	f7ff ffae 	bl	80044e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004584:	4b13      	ldr	r3, [pc, #76]	@ (80045d4 <HAL_ADC_MspInit+0xa0>)
 8004586:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004588:	4a12      	ldr	r2, [pc, #72]	@ (80045d4 <HAL_ADC_MspInit+0xa0>)
 800458a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800458e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004590:	4b10      	ldr	r3, [pc, #64]	@ (80045d4 <HAL_ADC_MspInit+0xa0>)
 8004592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004594:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004598:	60fb      	str	r3, [r7, #12]
 800459a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800459c:	4b0d      	ldr	r3, [pc, #52]	@ (80045d4 <HAL_ADC_MspInit+0xa0>)
 800459e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045a0:	4a0c      	ldr	r2, [pc, #48]	@ (80045d4 <HAL_ADC_MspInit+0xa0>)
 80045a2:	f043 0304 	orr.w	r3, r3, #4
 80045a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80045a8:	4b0a      	ldr	r3, [pc, #40]	@ (80045d4 <HAL_ADC_MspInit+0xa0>)
 80045aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045ac:	f003 0304 	and.w	r3, r3, #4
 80045b0:	60bb      	str	r3, [r7, #8]
 80045b2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Current_sensor_Pin;
 80045b4:	2301      	movs	r3, #1
 80045b6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045b8:	2303      	movs	r3, #3
 80045ba:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045bc:	2300      	movs	r3, #0
 80045be:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(Current_sensor_GPIO_Port, &GPIO_InitStruct);
 80045c0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80045c4:	4619      	mov	r1, r3
 80045c6:	4804      	ldr	r0, [pc, #16]	@ (80045d8 <HAL_ADC_MspInit+0xa4>)
 80045c8:	f002 f850 	bl	800666c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80045cc:	bf00      	nop
 80045ce:	3778      	adds	r7, #120	@ 0x78
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	40021000 	.word	0x40021000
 80045d8:	48000800 	.word	0x48000800

080045dc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b08a      	sub	sp, #40	@ 0x28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e4:	f107 0314 	add.w	r3, r7, #20
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]
 80045ec:	605a      	str	r2, [r3, #4]
 80045ee:	609a      	str	r2, [r3, #8]
 80045f0:	60da      	str	r2, [r3, #12]
 80045f2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045fc:	d128      	bne.n	8004650 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80045fe:	4b16      	ldr	r3, [pc, #88]	@ (8004658 <HAL_TIM_Encoder_MspInit+0x7c>)
 8004600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004602:	4a15      	ldr	r2, [pc, #84]	@ (8004658 <HAL_TIM_Encoder_MspInit+0x7c>)
 8004604:	f043 0301 	orr.w	r3, r3, #1
 8004608:	6593      	str	r3, [r2, #88]	@ 0x58
 800460a:	4b13      	ldr	r3, [pc, #76]	@ (8004658 <HAL_TIM_Encoder_MspInit+0x7c>)
 800460c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	613b      	str	r3, [r7, #16]
 8004614:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004616:	4b10      	ldr	r3, [pc, #64]	@ (8004658 <HAL_TIM_Encoder_MspInit+0x7c>)
 8004618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800461a:	4a0f      	ldr	r2, [pc, #60]	@ (8004658 <HAL_TIM_Encoder_MspInit+0x7c>)
 800461c:	f043 0301 	orr.w	r3, r3, #1
 8004620:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004622:	4b0d      	ldr	r3, [pc, #52]	@ (8004658 <HAL_TIM_Encoder_MspInit+0x7c>)
 8004624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800462e:	2303      	movs	r3, #3
 8004630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004632:	2302      	movs	r3, #2
 8004634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004636:	2300      	movs	r3, #0
 8004638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800463a:	2300      	movs	r3, #0
 800463c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800463e:	2301      	movs	r3, #1
 8004640:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004642:	f107 0314 	add.w	r3, r7, #20
 8004646:	4619      	mov	r1, r3
 8004648:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800464c:	f002 f80e 	bl	800666c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004650:	bf00      	nop
 8004652:	3728      	adds	r7, #40	@ 0x28
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40021000 	.word	0x40021000

0800465c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a30      	ldr	r2, [pc, #192]	@ (800472c <HAL_TIM_Base_MspInit+0xd0>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d10c      	bne.n	8004688 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800466e:	4b30      	ldr	r3, [pc, #192]	@ (8004730 <HAL_TIM_Base_MspInit+0xd4>)
 8004670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004672:	4a2f      	ldr	r2, [pc, #188]	@ (8004730 <HAL_TIM_Base_MspInit+0xd4>)
 8004674:	f043 0302 	orr.w	r3, r3, #2
 8004678:	6593      	str	r3, [r2, #88]	@ 0x58
 800467a:	4b2d      	ldr	r3, [pc, #180]	@ (8004730 <HAL_TIM_Base_MspInit+0xd4>)
 800467c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	617b      	str	r3, [r7, #20]
 8004684:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8004686:	e04c      	b.n	8004722 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a29      	ldr	r2, [pc, #164]	@ (8004734 <HAL_TIM_Base_MspInit+0xd8>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d114      	bne.n	80046bc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004692:	4b27      	ldr	r3, [pc, #156]	@ (8004730 <HAL_TIM_Base_MspInit+0xd4>)
 8004694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004696:	4a26      	ldr	r2, [pc, #152]	@ (8004730 <HAL_TIM_Base_MspInit+0xd4>)
 8004698:	f043 0304 	orr.w	r3, r3, #4
 800469c:	6593      	str	r3, [r2, #88]	@ 0x58
 800469e:	4b24      	ldr	r3, [pc, #144]	@ (8004730 <HAL_TIM_Base_MspInit+0xd4>)
 80046a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046a2:	f003 0304 	and.w	r3, r3, #4
 80046a6:	613b      	str	r3, [r7, #16]
 80046a8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80046aa:	2200      	movs	r2, #0
 80046ac:	2100      	movs	r1, #0
 80046ae:	201e      	movs	r0, #30
 80046b0:	f001 fc75 	bl	8005f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80046b4:	201e      	movs	r0, #30
 80046b6:	f001 fc8c 	bl	8005fd2 <HAL_NVIC_EnableIRQ>
}
 80046ba:	e032      	b.n	8004722 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM5)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004738 <HAL_TIM_Base_MspInit+0xdc>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d114      	bne.n	80046f0 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80046c6:	4b1a      	ldr	r3, [pc, #104]	@ (8004730 <HAL_TIM_Base_MspInit+0xd4>)
 80046c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ca:	4a19      	ldr	r2, [pc, #100]	@ (8004730 <HAL_TIM_Base_MspInit+0xd4>)
 80046cc:	f043 0308 	orr.w	r3, r3, #8
 80046d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80046d2:	4b17      	ldr	r3, [pc, #92]	@ (8004730 <HAL_TIM_Base_MspInit+0xd4>)
 80046d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	60fb      	str	r3, [r7, #12]
 80046dc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80046de:	2200      	movs	r2, #0
 80046e0:	2100      	movs	r1, #0
 80046e2:	2032      	movs	r0, #50	@ 0x32
 80046e4:	f001 fc5b 	bl	8005f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80046e8:	2032      	movs	r0, #50	@ 0x32
 80046ea:	f001 fc72 	bl	8005fd2 <HAL_NVIC_EnableIRQ>
}
 80046ee:	e018      	b.n	8004722 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM16)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a11      	ldr	r2, [pc, #68]	@ (800473c <HAL_TIM_Base_MspInit+0xe0>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d113      	bne.n	8004722 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80046fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004730 <HAL_TIM_Base_MspInit+0xd4>)
 80046fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046fe:	4a0c      	ldr	r2, [pc, #48]	@ (8004730 <HAL_TIM_Base_MspInit+0xd4>)
 8004700:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004704:	6613      	str	r3, [r2, #96]	@ 0x60
 8004706:	4b0a      	ldr	r3, [pc, #40]	@ (8004730 <HAL_TIM_Base_MspInit+0xd4>)
 8004708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800470a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800470e:	60bb      	str	r3, [r7, #8]
 8004710:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004712:	2200      	movs	r2, #0
 8004714:	2100      	movs	r1, #0
 8004716:	2019      	movs	r0, #25
 8004718:	f001 fc41 	bl	8005f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800471c:	2019      	movs	r0, #25
 800471e:	f001 fc58 	bl	8005fd2 <HAL_NVIC_EnableIRQ>
}
 8004722:	bf00      	nop
 8004724:	3718      	adds	r7, #24
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	40000400 	.word	0x40000400
 8004730:	40021000 	.word	0x40021000
 8004734:	40000800 	.word	0x40000800
 8004738:	40000c00 	.word	0x40000c00
 800473c:	40014400 	.word	0x40014400

08004740 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b088      	sub	sp, #32
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004748:	f107 030c 	add.w	r3, r7, #12
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	605a      	str	r2, [r3, #4]
 8004752:	609a      	str	r2, [r3, #8]
 8004754:	60da      	str	r2, [r3, #12]
 8004756:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a11      	ldr	r2, [pc, #68]	@ (80047a4 <HAL_TIM_MspPostInit+0x64>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d11b      	bne.n	800479a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004762:	4b11      	ldr	r3, [pc, #68]	@ (80047a8 <HAL_TIM_MspPostInit+0x68>)
 8004764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004766:	4a10      	ldr	r2, [pc, #64]	@ (80047a8 <HAL_TIM_MspPostInit+0x68>)
 8004768:	f043 0302 	orr.w	r3, r3, #2
 800476c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800476e:	4b0e      	ldr	r3, [pc, #56]	@ (80047a8 <HAL_TIM_MspPostInit+0x68>)
 8004770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	60bb      	str	r3, [r7, #8]
 8004778:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800477a:	2330      	movs	r3, #48	@ 0x30
 800477c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800477e:	2302      	movs	r3, #2
 8004780:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004782:	2300      	movs	r3, #0
 8004784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004786:	2300      	movs	r3, #0
 8004788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800478a:	2302      	movs	r3, #2
 800478c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800478e:	f107 030c 	add.w	r3, r7, #12
 8004792:	4619      	mov	r1, r3
 8004794:	4805      	ldr	r0, [pc, #20]	@ (80047ac <HAL_TIM_MspPostInit+0x6c>)
 8004796:	f001 ff69 	bl	800666c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800479a:	bf00      	nop
 800479c:	3720      	adds	r7, #32
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	40000400 	.word	0x40000400
 80047a8:	40021000 	.word	0x40021000
 80047ac:	48000400 	.word	0x48000400

080047b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b0a0      	sub	sp, #128	@ 0x80
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047b8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80047bc:	2200      	movs	r2, #0
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	605a      	str	r2, [r3, #4]
 80047c2:	609a      	str	r2, [r3, #8]
 80047c4:	60da      	str	r2, [r3, #12]
 80047c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80047c8:	f107 0318 	add.w	r3, r7, #24
 80047cc:	2254      	movs	r2, #84	@ 0x54
 80047ce:	2100      	movs	r1, #0
 80047d0:	4618      	mov	r0, r3
 80047d2:	f007 f9b9 	bl	800bb48 <memset>
  if(huart->Instance==UART4)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a6b      	ldr	r2, [pc, #428]	@ (8004988 <HAL_UART_MspInit+0x1d8>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d137      	bne.n	8004850 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80047e0:	2308      	movs	r3, #8
 80047e2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80047e4:	2300      	movs	r3, #0
 80047e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80047e8:	f107 0318 	add.w	r3, r7, #24
 80047ec:	4618      	mov	r0, r3
 80047ee:	f002 fef5 	bl	80075dc <HAL_RCCEx_PeriphCLKConfig>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80047f8:	f7ff fe72 	bl	80044e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80047fc:	4b63      	ldr	r3, [pc, #396]	@ (800498c <HAL_UART_MspInit+0x1dc>)
 80047fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004800:	4a62      	ldr	r2, [pc, #392]	@ (800498c <HAL_UART_MspInit+0x1dc>)
 8004802:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004806:	6593      	str	r3, [r2, #88]	@ 0x58
 8004808:	4b60      	ldr	r3, [pc, #384]	@ (800498c <HAL_UART_MspInit+0x1dc>)
 800480a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800480c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004810:	617b      	str	r3, [r7, #20]
 8004812:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004814:	4b5d      	ldr	r3, [pc, #372]	@ (800498c <HAL_UART_MspInit+0x1dc>)
 8004816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004818:	4a5c      	ldr	r2, [pc, #368]	@ (800498c <HAL_UART_MspInit+0x1dc>)
 800481a:	f043 0304 	orr.w	r3, r3, #4
 800481e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004820:	4b5a      	ldr	r3, [pc, #360]	@ (800498c <HAL_UART_MspInit+0x1dc>)
 8004822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	613b      	str	r3, [r7, #16]
 800482a:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800482c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004830:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004832:	2302      	movs	r3, #2
 8004834:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004836:	2300      	movs	r3, #0
 8004838:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800483a:	2300      	movs	r3, #0
 800483c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 800483e:	2305      	movs	r3, #5
 8004840:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004842:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004846:	4619      	mov	r1, r3
 8004848:	4851      	ldr	r0, [pc, #324]	@ (8004990 <HAL_UART_MspInit+0x1e0>)
 800484a:	f001 ff0f 	bl	800666c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800484e:	e097      	b.n	8004980 <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART2)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a4f      	ldr	r2, [pc, #316]	@ (8004994 <HAL_UART_MspInit+0x1e4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	f040 8092 	bne.w	8004980 <HAL_UART_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800485c:	2302      	movs	r3, #2
 800485e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004860:	2300      	movs	r3, #0
 8004862:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004864:	f107 0318 	add.w	r3, r7, #24
 8004868:	4618      	mov	r0, r3
 800486a:	f002 feb7 	bl	80075dc <HAL_RCCEx_PeriphCLKConfig>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d001      	beq.n	8004878 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8004874:	f7ff fe34 	bl	80044e0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004878:	4b44      	ldr	r3, [pc, #272]	@ (800498c <HAL_UART_MspInit+0x1dc>)
 800487a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800487c:	4a43      	ldr	r2, [pc, #268]	@ (800498c <HAL_UART_MspInit+0x1dc>)
 800487e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004882:	6593      	str	r3, [r2, #88]	@ 0x58
 8004884:	4b41      	ldr	r3, [pc, #260]	@ (800498c <HAL_UART_MspInit+0x1dc>)
 8004886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004890:	4b3e      	ldr	r3, [pc, #248]	@ (800498c <HAL_UART_MspInit+0x1dc>)
 8004892:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004894:	4a3d      	ldr	r2, [pc, #244]	@ (800498c <HAL_UART_MspInit+0x1dc>)
 8004896:	f043 0301 	orr.w	r3, r3, #1
 800489a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800489c:	4b3b      	ldr	r3, [pc, #236]	@ (800498c <HAL_UART_MspInit+0x1dc>)
 800489e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	60bb      	str	r3, [r7, #8]
 80048a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80048a8:	230c      	movs	r3, #12
 80048aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ac:	2302      	movs	r3, #2
 80048ae:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b0:	2300      	movs	r3, #0
 80048b2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048b4:	2300      	movs	r3, #0
 80048b6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80048b8:	2307      	movs	r3, #7
 80048ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048bc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80048c0:	4619      	mov	r1, r3
 80048c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80048c6:	f001 fed1 	bl	800666c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80048ca:	4b33      	ldr	r3, [pc, #204]	@ (8004998 <HAL_UART_MspInit+0x1e8>)
 80048cc:	4a33      	ldr	r2, [pc, #204]	@ (800499c <HAL_UART_MspInit+0x1ec>)
 80048ce:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80048d0:	4b31      	ldr	r3, [pc, #196]	@ (8004998 <HAL_UART_MspInit+0x1e8>)
 80048d2:	221b      	movs	r2, #27
 80048d4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80048d6:	4b30      	ldr	r3, [pc, #192]	@ (8004998 <HAL_UART_MspInit+0x1e8>)
 80048d8:	2210      	movs	r2, #16
 80048da:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048dc:	4b2e      	ldr	r3, [pc, #184]	@ (8004998 <HAL_UART_MspInit+0x1e8>)
 80048de:	2200      	movs	r2, #0
 80048e0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80048e2:	4b2d      	ldr	r3, [pc, #180]	@ (8004998 <HAL_UART_MspInit+0x1e8>)
 80048e4:	2280      	movs	r2, #128	@ 0x80
 80048e6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004998 <HAL_UART_MspInit+0x1e8>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048ee:	4b2a      	ldr	r3, [pc, #168]	@ (8004998 <HAL_UART_MspInit+0x1e8>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80048f4:	4b28      	ldr	r3, [pc, #160]	@ (8004998 <HAL_UART_MspInit+0x1e8>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80048fa:	4b27      	ldr	r3, [pc, #156]	@ (8004998 <HAL_UART_MspInit+0x1e8>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004900:	4825      	ldr	r0, [pc, #148]	@ (8004998 <HAL_UART_MspInit+0x1e8>)
 8004902:	f001 fb81 	bl	8006008 <HAL_DMA_Init>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <HAL_UART_MspInit+0x160>
      Error_Handler();
 800490c:	f7ff fde8 	bl	80044e0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a21      	ldr	r2, [pc, #132]	@ (8004998 <HAL_UART_MspInit+0x1e8>)
 8004914:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004916:	4a20      	ldr	r2, [pc, #128]	@ (8004998 <HAL_UART_MspInit+0x1e8>)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_rx.Instance = DMA1_Channel2;
 800491c:	4b20      	ldr	r3, [pc, #128]	@ (80049a0 <HAL_UART_MspInit+0x1f0>)
 800491e:	4a21      	ldr	r2, [pc, #132]	@ (80049a4 <HAL_UART_MspInit+0x1f4>)
 8004920:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004922:	4b1f      	ldr	r3, [pc, #124]	@ (80049a0 <HAL_UART_MspInit+0x1f0>)
 8004924:	221a      	movs	r2, #26
 8004926:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004928:	4b1d      	ldr	r3, [pc, #116]	@ (80049a0 <HAL_UART_MspInit+0x1f0>)
 800492a:	2200      	movs	r2, #0
 800492c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800492e:	4b1c      	ldr	r3, [pc, #112]	@ (80049a0 <HAL_UART_MspInit+0x1f0>)
 8004930:	2200      	movs	r2, #0
 8004932:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004934:	4b1a      	ldr	r3, [pc, #104]	@ (80049a0 <HAL_UART_MspInit+0x1f0>)
 8004936:	2280      	movs	r2, #128	@ 0x80
 8004938:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800493a:	4b19      	ldr	r3, [pc, #100]	@ (80049a0 <HAL_UART_MspInit+0x1f0>)
 800493c:	2200      	movs	r2, #0
 800493e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004940:	4b17      	ldr	r3, [pc, #92]	@ (80049a0 <HAL_UART_MspInit+0x1f0>)
 8004942:	2200      	movs	r2, #0
 8004944:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004946:	4b16      	ldr	r3, [pc, #88]	@ (80049a0 <HAL_UART_MspInit+0x1f0>)
 8004948:	2200      	movs	r2, #0
 800494a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800494c:	4b14      	ldr	r3, [pc, #80]	@ (80049a0 <HAL_UART_MspInit+0x1f0>)
 800494e:	2200      	movs	r2, #0
 8004950:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004952:	4813      	ldr	r0, [pc, #76]	@ (80049a0 <HAL_UART_MspInit+0x1f0>)
 8004954:	f001 fb58 	bl	8006008 <HAL_DMA_Init>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <HAL_UART_MspInit+0x1b2>
      Error_Handler();
 800495e:	f7ff fdbf 	bl	80044e0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a0e      	ldr	r2, [pc, #56]	@ (80049a0 <HAL_UART_MspInit+0x1f0>)
 8004966:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800496a:	4a0d      	ldr	r2, [pc, #52]	@ (80049a0 <HAL_UART_MspInit+0x1f0>)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004970:	2200      	movs	r2, #0
 8004972:	2100      	movs	r1, #0
 8004974:	2026      	movs	r0, #38	@ 0x26
 8004976:	f001 fb12 	bl	8005f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800497a:	2026      	movs	r0, #38	@ 0x26
 800497c:	f001 fb29 	bl	8005fd2 <HAL_NVIC_EnableIRQ>
}
 8004980:	bf00      	nop
 8004982:	3780      	adds	r7, #128	@ 0x80
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	40004c00 	.word	0x40004c00
 800498c:	40021000 	.word	0x40021000
 8004990:	48000800 	.word	0x48000800
 8004994:	40004400 	.word	0x40004400
 8004998:	20000914 	.word	0x20000914
 800499c:	40020008 	.word	0x40020008
 80049a0:	20000974 	.word	0x20000974
 80049a4:	4002001c 	.word	0x4002001c

080049a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049a8:	b480      	push	{r7}
 80049aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80049ac:	bf00      	nop
 80049ae:	e7fd      	b.n	80049ac <NMI_Handler+0x4>

080049b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049b4:	bf00      	nop
 80049b6:	e7fd      	b.n	80049b4 <HardFault_Handler+0x4>

080049b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049b8:	b480      	push	{r7}
 80049ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049bc:	bf00      	nop
 80049be:	e7fd      	b.n	80049bc <MemManage_Handler+0x4>

080049c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049c0:	b480      	push	{r7}
 80049c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049c4:	bf00      	nop
 80049c6:	e7fd      	b.n	80049c4 <BusFault_Handler+0x4>

080049c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049cc:	bf00      	nop
 80049ce:	e7fd      	b.n	80049cc <UsageFault_Handler+0x4>

080049d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80049d4:	bf00      	nop
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049de:	b480      	push	{r7}
 80049e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049e2:	bf00      	nop
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049f0:	bf00      	nop
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049fe:	f000 f8d5 	bl	8004bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a02:	bf00      	nop
 8004a04:	bd80      	pop	{r7, pc}
	...

08004a08 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004a0c:	4802      	ldr	r0, [pc, #8]	@ (8004a18 <DMA1_Channel1_IRQHandler+0x10>)
 8004a0e:	f001 fcde 	bl	80063ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004a12:	bf00      	nop
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	20000914 	.word	0x20000914

08004a1c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004a20:	4802      	ldr	r0, [pc, #8]	@ (8004a2c <DMA1_Channel2_IRQHandler+0x10>)
 8004a22:	f001 fcd4 	bl	80063ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004a26:	bf00      	nop
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	20000974 	.word	0x20000974

08004a30 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004a34:	4802      	ldr	r0, [pc, #8]	@ (8004a40 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8004a36:	f003 fd71 	bl	800851c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004a3a:	bf00      	nop
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	200006b0 	.word	0x200006b0

08004a44 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004a48:	4802      	ldr	r0, [pc, #8]	@ (8004a54 <TIM4_IRQHandler+0x10>)
 8004a4a:	f003 fd67 	bl	800851c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004a4e:	bf00      	nop
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	20000518 	.word	0x20000518

08004a58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004a5c:	4802      	ldr	r0, [pc, #8]	@ (8004a68 <USART2_IRQHandler+0x10>)
 8004a5e:	f005 fb65 	bl	800a12c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004a62:	bf00      	nop
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	20000848 	.word	0x20000848

08004a6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004a70:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004a74:	f001 ffac 	bl	80069d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004a78:	bf00      	nop
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004a80:	4802      	ldr	r0, [pc, #8]	@ (8004a8c <TIM5_IRQHandler+0x10>)
 8004a82:	f003 fd4b 	bl	800851c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004a86:	bf00      	nop
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	200005e4 	.word	0x200005e4

08004a90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004a94:	4b06      	ldr	r3, [pc, #24]	@ (8004ab0 <SystemInit+0x20>)
 8004a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a9a:	4a05      	ldr	r2, [pc, #20]	@ (8004ab0 <SystemInit+0x20>)
 8004a9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004aa0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004aa4:	bf00      	nop
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	e000ed00 	.word	0xe000ed00

08004ab4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
	  ldr   r0, =_estack
 8004ab4:	480d      	ldr	r0, [pc, #52]	@ (8004aec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004ab6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004ab8:	f7ff ffea 	bl	8004a90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004abc:	480c      	ldr	r0, [pc, #48]	@ (8004af0 <LoopForever+0x6>)
  ldr r1, =_edata
 8004abe:	490d      	ldr	r1, [pc, #52]	@ (8004af4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8004af8 <LoopForever+0xe>)
  movs r3, #0
 8004ac2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004ac4:	e002      	b.n	8004acc <LoopCopyDataInit>

08004ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004aca:	3304      	adds	r3, #4

08004acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ad0:	d3f9      	bcc.n	8004ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8004afc <LoopForever+0x12>)
  ldr r4, =_ebss
 8004ad4:	4c0a      	ldr	r4, [pc, #40]	@ (8004b00 <LoopForever+0x16>)
  movs r3, #0
 8004ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ad8:	e001      	b.n	8004ade <LoopFillZerobss>

08004ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004adc:	3204      	adds	r2, #4

08004ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ae0:	d3fb      	bcc.n	8004ada <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004ae2:	f007 f83f 	bl	800bb64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004ae6:	f7fe fec5 	bl	8003874 <main>

08004aea <LoopForever>:

LoopForever:
    b LoopForever
 8004aea:	e7fe      	b.n	8004aea <LoopForever>
	  ldr   r0, =_estack
 8004aec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004af4:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 8004af8:	0800be54 	.word	0x0800be54
  ldr r2, =_sbss
 8004afc:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8004b00:	20001354 	.word	0x20001354

08004b04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004b04:	e7fe      	b.n	8004b04 <ADC1_2_IRQHandler>

08004b06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b082      	sub	sp, #8
 8004b0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b10:	2003      	movs	r0, #3
 8004b12:	f001 fa39 	bl	8005f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004b16:	2000      	movs	r0, #0
 8004b18:	f000 f80e 	bl	8004b38 <HAL_InitTick>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d002      	beq.n	8004b28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	71fb      	strb	r3, [r7, #7]
 8004b26:	e001      	b.n	8004b2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004b28:	f7ff fce0 	bl	80044ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004b2c:	79fb      	ldrb	r3, [r7, #7]

}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
	...

08004b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004b40:	2300      	movs	r3, #0
 8004b42:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004b44:	4b16      	ldr	r3, [pc, #88]	@ (8004ba0 <HAL_InitTick+0x68>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d022      	beq.n	8004b92 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004b4c:	4b15      	ldr	r3, [pc, #84]	@ (8004ba4 <HAL_InitTick+0x6c>)
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	4b13      	ldr	r3, [pc, #76]	@ (8004ba0 <HAL_InitTick+0x68>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004b58:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b60:	4618      	mov	r0, r3
 8004b62:	f001 fa44 	bl	8005fee <HAL_SYSTICK_Config>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10f      	bne.n	8004b8c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b0f      	cmp	r3, #15
 8004b70:	d809      	bhi.n	8004b86 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b72:	2200      	movs	r2, #0
 8004b74:	6879      	ldr	r1, [r7, #4]
 8004b76:	f04f 30ff 	mov.w	r0, #4294967295
 8004b7a:	f001 fa10 	bl	8005f9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8004ba8 <HAL_InitTick+0x70>)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6013      	str	r3, [r2, #0]
 8004b84:	e007      	b.n	8004b96 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	73fb      	strb	r3, [r7, #15]
 8004b8a:	e004      	b.n	8004b96 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	73fb      	strb	r3, [r7, #15]
 8004b90:	e001      	b.n	8004b96 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	20000210 	.word	0x20000210
 8004ba4:	20000208 	.word	0x20000208
 8004ba8:	2000020c 	.word	0x2000020c

08004bac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004bac:	b480      	push	{r7}
 8004bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004bb0:	4b05      	ldr	r3, [pc, #20]	@ (8004bc8 <HAL_IncTick+0x1c>)
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	4b05      	ldr	r3, [pc, #20]	@ (8004bcc <HAL_IncTick+0x20>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4413      	add	r3, r2
 8004bba:	4a03      	ldr	r2, [pc, #12]	@ (8004bc8 <HAL_IncTick+0x1c>)
 8004bbc:	6013      	str	r3, [r2, #0]
}
 8004bbe:	bf00      	nop
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	20001218 	.word	0x20001218
 8004bcc:	20000210 	.word	0x20000210

08004bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8004bd4:	4b03      	ldr	r3, [pc, #12]	@ (8004be4 <HAL_GetTick+0x14>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	20001218 	.word	0x20001218

08004be8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	431a      	orrs	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	609a      	str	r2, [r3, #8]
}
 8004c02:	bf00      	nop
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
 8004c16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	609a      	str	r2, [r3, #8]
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b087      	sub	sp, #28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
 8004c5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	3360      	adds	r3, #96	@ 0x60
 8004c62:	461a      	mov	r2, r3
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	4b08      	ldr	r3, [pc, #32]	@ (8004c94 <LL_ADC_SetOffset+0x44>)
 8004c72:	4013      	ands	r3, r2
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004c88:	bf00      	nop
 8004c8a:	371c      	adds	r7, #28
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	03fff000 	.word	0x03fff000

08004c98 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	3360      	adds	r3, #96	@ 0x60
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3714      	adds	r7, #20
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b087      	sub	sp, #28
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	3360      	adds	r3, #96	@ 0x60
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	4413      	add	r3, r2
 8004cdc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004cee:	bf00      	nop
 8004cf0:	371c      	adds	r7, #28
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr

08004cfa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b087      	sub	sp, #28
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	60f8      	str	r0, [r7, #12]
 8004d02:	60b9      	str	r1, [r7, #8]
 8004d04:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	3360      	adds	r3, #96	@ 0x60
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004d24:	bf00      	nop
 8004d26:	371c      	adds	r7, #28
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b087      	sub	sp, #28
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	3360      	adds	r3, #96	@ 0x60
 8004d40:	461a      	mov	r2, r3
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4413      	add	r3, r2
 8004d48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	431a      	orrs	r2, r3
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004d5a:	bf00      	nop
 8004d5c:	371c      	adds	r7, #28
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b083      	sub	sp, #12
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
 8004d6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	615a      	str	r2, [r3, #20]
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	3330      	adds	r3, #48	@ 0x30
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	0a1b      	lsrs	r3, r3, #8
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	f003 030c 	and.w	r3, r3, #12
 8004da8:	4413      	add	r3, r2
 8004daa:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	f003 031f 	and.w	r3, r3, #31
 8004db6:	211f      	movs	r1, #31
 8004db8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dbc:	43db      	mvns	r3, r3
 8004dbe:	401a      	ands	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	0e9b      	lsrs	r3, r3, #26
 8004dc4:	f003 011f 	and.w	r1, r3, #31
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f003 031f 	and.w	r3, r3, #31
 8004dce:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004dd8:	bf00      	nop
 8004dda:	371c      	adds	r7, #28
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b087      	sub	sp, #28
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	3314      	adds	r3, #20
 8004df4:	461a      	mov	r2, r3
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	0e5b      	lsrs	r3, r3, #25
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	4413      	add	r3, r2
 8004e02:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	0d1b      	lsrs	r3, r3, #20
 8004e0c:	f003 031f 	and.w	r3, r3, #31
 8004e10:	2107      	movs	r1, #7
 8004e12:	fa01 f303 	lsl.w	r3, r1, r3
 8004e16:	43db      	mvns	r3, r3
 8004e18:	401a      	ands	r2, r3
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	0d1b      	lsrs	r3, r3, #20
 8004e1e:	f003 031f 	and.w	r3, r3, #31
 8004e22:	6879      	ldr	r1, [r7, #4]
 8004e24:	fa01 f303 	lsl.w	r3, r1, r3
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004e2e:	bf00      	nop
 8004e30:	371c      	adds	r7, #28
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
	...

08004e3c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e54:	43db      	mvns	r3, r3
 8004e56:	401a      	ands	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f003 0318 	and.w	r3, r3, #24
 8004e5e:	4908      	ldr	r1, [pc, #32]	@ (8004e80 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004e60:	40d9      	lsrs	r1, r3
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	400b      	ands	r3, r1
 8004e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004e72:	bf00      	nop
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	0007ffff 	.word	0x0007ffff

08004e84 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004e94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6093      	str	r3, [r2, #8]
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004eb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ebc:	d101      	bne.n	8004ec2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e000      	b.n	8004ec4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004ee0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ee4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f0c:	d101      	bne.n	8004f12 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e000      	b.n	8004f14 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d101      	bne.n	8004f38 <LL_ADC_IsEnabled+0x18>
 8004f34:	2301      	movs	r3, #1
 8004f36:	e000      	b.n	8004f3a <LL_ADC_IsEnabled+0x1a>
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b083      	sub	sp, #12
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f003 0304 	and.w	r3, r3, #4
 8004f56:	2b04      	cmp	r3, #4
 8004f58:	d101      	bne.n	8004f5e <LL_ADC_REG_IsConversionOngoing+0x18>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e000      	b.n	8004f60 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f003 0308 	and.w	r3, r3, #8
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d101      	bne.n	8004f84 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004f80:	2301      	movs	r3, #1
 8004f82:	e000      	b.n	8004f86 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
	...

08004f94 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004f94:	b590      	push	{r4, r7, lr}
 8004f96:	b089      	sub	sp, #36	@ 0x24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e1a9      	b.n	8005302 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d109      	bne.n	8004fd0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f7ff fab9 	bl	8004534 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff ff67 	bl	8004ea8 <LL_ADC_IsDeepPowerDownEnabled>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d004      	beq.n	8004fea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7ff ff4d 	bl	8004e84 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7ff ff82 	bl	8004ef8 <LL_ADC_IsInternalRegulatorEnabled>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d115      	bne.n	8005026 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7ff ff66 	bl	8004ed0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005004:	4b9c      	ldr	r3, [pc, #624]	@ (8005278 <HAL_ADC_Init+0x2e4>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	099b      	lsrs	r3, r3, #6
 800500a:	4a9c      	ldr	r2, [pc, #624]	@ (800527c <HAL_ADC_Init+0x2e8>)
 800500c:	fba2 2303 	umull	r2, r3, r2, r3
 8005010:	099b      	lsrs	r3, r3, #6
 8005012:	3301      	adds	r3, #1
 8005014:	005b      	lsls	r3, r3, #1
 8005016:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005018:	e002      	b.n	8005020 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	3b01      	subs	r3, #1
 800501e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1f9      	bne.n	800501a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4618      	mov	r0, r3
 800502c:	f7ff ff64 	bl	8004ef8 <LL_ADC_IsInternalRegulatorEnabled>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10d      	bne.n	8005052 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800503a:	f043 0210 	orr.w	r2, r3, #16
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005046:	f043 0201 	orr.w	r2, r3, #1
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4618      	mov	r0, r3
 8005058:	f7ff ff75 	bl	8004f46 <LL_ADC_REG_IsConversionOngoing>
 800505c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005062:	f003 0310 	and.w	r3, r3, #16
 8005066:	2b00      	cmp	r3, #0
 8005068:	f040 8142 	bne.w	80052f0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	2b00      	cmp	r3, #0
 8005070:	f040 813e 	bne.w	80052f0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005078:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800507c:	f043 0202 	orr.w	r2, r3, #2
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4618      	mov	r0, r3
 800508a:	f7ff ff49 	bl	8004f20 <LL_ADC_IsEnabled>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d141      	bne.n	8005118 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800509c:	d004      	beq.n	80050a8 <HAL_ADC_Init+0x114>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a77      	ldr	r2, [pc, #476]	@ (8005280 <HAL_ADC_Init+0x2ec>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d10f      	bne.n	80050c8 <HAL_ADC_Init+0x134>
 80050a8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80050ac:	f7ff ff38 	bl	8004f20 <LL_ADC_IsEnabled>
 80050b0:	4604      	mov	r4, r0
 80050b2:	4873      	ldr	r0, [pc, #460]	@ (8005280 <HAL_ADC_Init+0x2ec>)
 80050b4:	f7ff ff34 	bl	8004f20 <LL_ADC_IsEnabled>
 80050b8:	4603      	mov	r3, r0
 80050ba:	4323      	orrs	r3, r4
 80050bc:	2b00      	cmp	r3, #0
 80050be:	bf0c      	ite	eq
 80050c0:	2301      	moveq	r3, #1
 80050c2:	2300      	movne	r3, #0
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	e012      	b.n	80050ee <HAL_ADC_Init+0x15a>
 80050c8:	486e      	ldr	r0, [pc, #440]	@ (8005284 <HAL_ADC_Init+0x2f0>)
 80050ca:	f7ff ff29 	bl	8004f20 <LL_ADC_IsEnabled>
 80050ce:	4604      	mov	r4, r0
 80050d0:	486d      	ldr	r0, [pc, #436]	@ (8005288 <HAL_ADC_Init+0x2f4>)
 80050d2:	f7ff ff25 	bl	8004f20 <LL_ADC_IsEnabled>
 80050d6:	4603      	mov	r3, r0
 80050d8:	431c      	orrs	r4, r3
 80050da:	486c      	ldr	r0, [pc, #432]	@ (800528c <HAL_ADC_Init+0x2f8>)
 80050dc:	f7ff ff20 	bl	8004f20 <LL_ADC_IsEnabled>
 80050e0:	4603      	mov	r3, r0
 80050e2:	4323      	orrs	r3, r4
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	bf0c      	ite	eq
 80050e8:	2301      	moveq	r3, #1
 80050ea:	2300      	movne	r3, #0
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d012      	beq.n	8005118 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050fa:	d004      	beq.n	8005106 <HAL_ADC_Init+0x172>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a5f      	ldr	r2, [pc, #380]	@ (8005280 <HAL_ADC_Init+0x2ec>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d101      	bne.n	800510a <HAL_ADC_Init+0x176>
 8005106:	4a62      	ldr	r2, [pc, #392]	@ (8005290 <HAL_ADC_Init+0x2fc>)
 8005108:	e000      	b.n	800510c <HAL_ADC_Init+0x178>
 800510a:	4a62      	ldr	r2, [pc, #392]	@ (8005294 <HAL_ADC_Init+0x300>)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	4619      	mov	r1, r3
 8005112:	4610      	mov	r0, r2
 8005114:	f7ff fd68 	bl	8004be8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	7f5b      	ldrb	r3, [r3, #29]
 800511c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005122:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005128:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800512e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005136:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005138:	4313      	orrs	r3, r2
 800513a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005142:	2b01      	cmp	r3, #1
 8005144:	d106      	bne.n	8005154 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800514a:	3b01      	subs	r3, #1
 800514c:	045b      	lsls	r3, r3, #17
 800514e:	69ba      	ldr	r2, [r7, #24]
 8005150:	4313      	orrs	r3, r2
 8005152:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005158:	2b00      	cmp	r3, #0
 800515a:	d009      	beq.n	8005170 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005160:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005168:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	4313      	orrs	r3, r2
 800516e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68da      	ldr	r2, [r3, #12]
 8005176:	4b48      	ldr	r3, [pc, #288]	@ (8005298 <HAL_ADC_Init+0x304>)
 8005178:	4013      	ands	r3, r2
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	6812      	ldr	r2, [r2, #0]
 800517e:	69b9      	ldr	r1, [r7, #24]
 8005180:	430b      	orrs	r3, r1
 8005182:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4618      	mov	r0, r3
 80051a0:	f7ff fee4 	bl	8004f6c <LL_ADC_INJ_IsConversionOngoing>
 80051a4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d17f      	bne.n	80052ac <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d17c      	bne.n	80052ac <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80051b6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80051be:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80051c0:	4313      	orrs	r3, r2
 80051c2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051ce:	f023 0302 	bic.w	r3, r3, #2
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	6812      	ldr	r2, [r2, #0]
 80051d6:	69b9      	ldr	r1, [r7, #24]
 80051d8:	430b      	orrs	r3, r1
 80051da:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d017      	beq.n	8005214 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	691a      	ldr	r2, [r3, #16]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80051f2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80051fc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005200:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	6911      	ldr	r1, [r2, #16]
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	6812      	ldr	r2, [r2, #0]
 800520c:	430b      	orrs	r3, r1
 800520e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8005212:	e013      	b.n	800523c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	691a      	ldr	r2, [r3, #16]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005222:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	6812      	ldr	r2, [r2, #0]
 8005230:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005234:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005238:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005242:	2b01      	cmp	r3, #1
 8005244:	d12a      	bne.n	800529c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005250:	f023 0304 	bic.w	r3, r3, #4
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800525c:	4311      	orrs	r1, r2
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005262:	4311      	orrs	r1, r2
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005268:	430a      	orrs	r2, r1
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f042 0201 	orr.w	r2, r2, #1
 8005274:	611a      	str	r2, [r3, #16]
 8005276:	e019      	b.n	80052ac <HAL_ADC_Init+0x318>
 8005278:	20000208 	.word	0x20000208
 800527c:	053e2d63 	.word	0x053e2d63
 8005280:	50000100 	.word	0x50000100
 8005284:	50000400 	.word	0x50000400
 8005288:	50000500 	.word	0x50000500
 800528c:	50000600 	.word	0x50000600
 8005290:	50000300 	.word	0x50000300
 8005294:	50000700 	.word	0x50000700
 8005298:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	691a      	ldr	r2, [r3, #16]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f022 0201 	bic.w	r2, r2, #1
 80052aa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d10c      	bne.n	80052ce <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ba:	f023 010f 	bic.w	r1, r3, #15
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	1e5a      	subs	r2, r3, #1
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	430a      	orrs	r2, r1
 80052ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80052cc:	e007      	b.n	80052de <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f022 020f 	bic.w	r2, r2, #15
 80052dc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052e2:	f023 0303 	bic.w	r3, r3, #3
 80052e6:	f043 0201 	orr.w	r2, r3, #1
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	65da      	str	r2, [r3, #92]	@ 0x5c
 80052ee:	e007      	b.n	8005300 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052f4:	f043 0210 	orr.w	r2, r3, #16
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005300:	7ffb      	ldrb	r3, [r7, #31]
}
 8005302:	4618      	mov	r0, r3
 8005304:	3724      	adds	r7, #36	@ 0x24
 8005306:	46bd      	mov	sp, r7
 8005308:	bd90      	pop	{r4, r7, pc}
 800530a:	bf00      	nop

0800530c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b0b6      	sub	sp, #216	@ 0xd8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005316:	2300      	movs	r3, #0
 8005318:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800531c:	2300      	movs	r3, #0
 800531e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005326:	2b01      	cmp	r3, #1
 8005328:	d102      	bne.n	8005330 <HAL_ADC_ConfigChannel+0x24>
 800532a:	2302      	movs	r3, #2
 800532c:	f000 bc13 	b.w	8005b56 <HAL_ADC_ConfigChannel+0x84a>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4618      	mov	r0, r3
 800533e:	f7ff fe02 	bl	8004f46 <LL_ADC_REG_IsConversionOngoing>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	f040 83f3 	bne.w	8005b30 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6818      	ldr	r0, [r3, #0]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	6859      	ldr	r1, [r3, #4]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	461a      	mov	r2, r3
 8005358:	f7ff fd18 	bl	8004d8c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4618      	mov	r0, r3
 8005362:	f7ff fdf0 	bl	8004f46 <LL_ADC_REG_IsConversionOngoing>
 8005366:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4618      	mov	r0, r3
 8005370:	f7ff fdfc 	bl	8004f6c <LL_ADC_INJ_IsConversionOngoing>
 8005374:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005378:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800537c:	2b00      	cmp	r3, #0
 800537e:	f040 81d9 	bne.w	8005734 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005382:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005386:	2b00      	cmp	r3, #0
 8005388:	f040 81d4 	bne.w	8005734 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005394:	d10f      	bne.n	80053b6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6818      	ldr	r0, [r3, #0]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2200      	movs	r2, #0
 80053a0:	4619      	mov	r1, r3
 80053a2:	f7ff fd1f 	bl	8004de4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7ff fcd9 	bl	8004d66 <LL_ADC_SetSamplingTimeCommonConfig>
 80053b4:	e00e      	b.n	80053d4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6818      	ldr	r0, [r3, #0]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	6819      	ldr	r1, [r3, #0]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	461a      	mov	r2, r3
 80053c4:	f7ff fd0e 	bl	8004de4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2100      	movs	r1, #0
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7ff fcc9 	bl	8004d66 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	695a      	ldr	r2, [r3, #20]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	08db      	lsrs	r3, r3, #3
 80053e0:	f003 0303 	and.w	r3, r3, #3
 80053e4:	005b      	lsls	r3, r3, #1
 80053e6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	2b04      	cmp	r3, #4
 80053f4:	d022      	beq.n	800543c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6818      	ldr	r0, [r3, #0]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	6919      	ldr	r1, [r3, #16]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005406:	f7ff fc23 	bl	8004c50 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6818      	ldr	r0, [r3, #0]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	6919      	ldr	r1, [r3, #16]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	461a      	mov	r2, r3
 8005418:	f7ff fc6f 	bl	8004cfa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6818      	ldr	r0, [r3, #0]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005428:	2b01      	cmp	r3, #1
 800542a:	d102      	bne.n	8005432 <HAL_ADC_ConfigChannel+0x126>
 800542c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005430:	e000      	b.n	8005434 <HAL_ADC_ConfigChannel+0x128>
 8005432:	2300      	movs	r3, #0
 8005434:	461a      	mov	r2, r3
 8005436:	f7ff fc7b 	bl	8004d30 <LL_ADC_SetOffsetSaturation>
 800543a:	e17b      	b.n	8005734 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2100      	movs	r1, #0
 8005442:	4618      	mov	r0, r3
 8005444:	f7ff fc28 	bl	8004c98 <LL_ADC_GetOffsetChannel>
 8005448:	4603      	mov	r3, r0
 800544a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10a      	bne.n	8005468 <HAL_ADC_ConfigChannel+0x15c>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2100      	movs	r1, #0
 8005458:	4618      	mov	r0, r3
 800545a:	f7ff fc1d 	bl	8004c98 <LL_ADC_GetOffsetChannel>
 800545e:	4603      	mov	r3, r0
 8005460:	0e9b      	lsrs	r3, r3, #26
 8005462:	f003 021f 	and.w	r2, r3, #31
 8005466:	e01e      	b.n	80054a6 <HAL_ADC_ConfigChannel+0x19a>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2100      	movs	r1, #0
 800546e:	4618      	mov	r0, r3
 8005470:	f7ff fc12 	bl	8004c98 <LL_ADC_GetOffsetChannel>
 8005474:	4603      	mov	r3, r0
 8005476:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800547a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800547e:	fa93 f3a3 	rbit	r3, r3
 8005482:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005486:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800548a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800548e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8005496:	2320      	movs	r3, #32
 8005498:	e004      	b.n	80054a4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800549a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800549e:	fab3 f383 	clz	r3, r3
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d105      	bne.n	80054be <HAL_ADC_ConfigChannel+0x1b2>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	0e9b      	lsrs	r3, r3, #26
 80054b8:	f003 031f 	and.w	r3, r3, #31
 80054bc:	e018      	b.n	80054f0 <HAL_ADC_ConfigChannel+0x1e4>
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80054ca:	fa93 f3a3 	rbit	r3, r3
 80054ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80054d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80054da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80054e2:	2320      	movs	r3, #32
 80054e4:	e004      	b.n	80054f0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80054e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80054ea:	fab3 f383 	clz	r3, r3
 80054ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d106      	bne.n	8005502 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2200      	movs	r2, #0
 80054fa:	2100      	movs	r1, #0
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7ff fbe1 	bl	8004cc4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2101      	movs	r1, #1
 8005508:	4618      	mov	r0, r3
 800550a:	f7ff fbc5 	bl	8004c98 <LL_ADC_GetOffsetChannel>
 800550e:	4603      	mov	r3, r0
 8005510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10a      	bne.n	800552e <HAL_ADC_ConfigChannel+0x222>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2101      	movs	r1, #1
 800551e:	4618      	mov	r0, r3
 8005520:	f7ff fbba 	bl	8004c98 <LL_ADC_GetOffsetChannel>
 8005524:	4603      	mov	r3, r0
 8005526:	0e9b      	lsrs	r3, r3, #26
 8005528:	f003 021f 	and.w	r2, r3, #31
 800552c:	e01e      	b.n	800556c <HAL_ADC_ConfigChannel+0x260>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2101      	movs	r1, #1
 8005534:	4618      	mov	r0, r3
 8005536:	f7ff fbaf 	bl	8004c98 <LL_ADC_GetOffsetChannel>
 800553a:	4603      	mov	r3, r0
 800553c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005540:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005544:	fa93 f3a3 	rbit	r3, r3
 8005548:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800554c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005550:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8005554:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005558:	2b00      	cmp	r3, #0
 800555a:	d101      	bne.n	8005560 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800555c:	2320      	movs	r3, #32
 800555e:	e004      	b.n	800556a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005560:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005564:	fab3 f383 	clz	r3, r3
 8005568:	b2db      	uxtb	r3, r3
 800556a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005574:	2b00      	cmp	r3, #0
 8005576:	d105      	bne.n	8005584 <HAL_ADC_ConfigChannel+0x278>
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	0e9b      	lsrs	r3, r3, #26
 800557e:	f003 031f 	and.w	r3, r3, #31
 8005582:	e018      	b.n	80055b6 <HAL_ADC_ConfigChannel+0x2aa>
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800558c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005590:	fa93 f3a3 	rbit	r3, r3
 8005594:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005598:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800559c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80055a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d101      	bne.n	80055ac <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80055a8:	2320      	movs	r3, #32
 80055aa:	e004      	b.n	80055b6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80055ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80055b0:	fab3 f383 	clz	r3, r3
 80055b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d106      	bne.n	80055c8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2200      	movs	r2, #0
 80055c0:	2101      	movs	r1, #1
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7ff fb7e 	bl	8004cc4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2102      	movs	r1, #2
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7ff fb62 	bl	8004c98 <LL_ADC_GetOffsetChannel>
 80055d4:	4603      	mov	r3, r0
 80055d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10a      	bne.n	80055f4 <HAL_ADC_ConfigChannel+0x2e8>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2102      	movs	r1, #2
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7ff fb57 	bl	8004c98 <LL_ADC_GetOffsetChannel>
 80055ea:	4603      	mov	r3, r0
 80055ec:	0e9b      	lsrs	r3, r3, #26
 80055ee:	f003 021f 	and.w	r2, r3, #31
 80055f2:	e01e      	b.n	8005632 <HAL_ADC_ConfigChannel+0x326>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2102      	movs	r1, #2
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7ff fb4c 	bl	8004c98 <LL_ADC_GetOffsetChannel>
 8005600:	4603      	mov	r3, r0
 8005602:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005606:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800560a:	fa93 f3a3 	rbit	r3, r3
 800560e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8005612:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005616:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800561a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8005622:	2320      	movs	r3, #32
 8005624:	e004      	b.n	8005630 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8005626:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800562a:	fab3 f383 	clz	r3, r3
 800562e:	b2db      	uxtb	r3, r3
 8005630:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800563a:	2b00      	cmp	r3, #0
 800563c:	d105      	bne.n	800564a <HAL_ADC_ConfigChannel+0x33e>
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	0e9b      	lsrs	r3, r3, #26
 8005644:	f003 031f 	and.w	r3, r3, #31
 8005648:	e016      	b.n	8005678 <HAL_ADC_ConfigChannel+0x36c>
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005652:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005656:	fa93 f3a3 	rbit	r3, r3
 800565a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800565c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800565e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8005662:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005666:	2b00      	cmp	r3, #0
 8005668:	d101      	bne.n	800566e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800566a:	2320      	movs	r3, #32
 800566c:	e004      	b.n	8005678 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800566e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005672:	fab3 f383 	clz	r3, r3
 8005676:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005678:	429a      	cmp	r2, r3
 800567a:	d106      	bne.n	800568a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2200      	movs	r2, #0
 8005682:	2102      	movs	r1, #2
 8005684:	4618      	mov	r0, r3
 8005686:	f7ff fb1d 	bl	8004cc4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2103      	movs	r1, #3
 8005690:	4618      	mov	r0, r3
 8005692:	f7ff fb01 	bl	8004c98 <LL_ADC_GetOffsetChannel>
 8005696:	4603      	mov	r3, r0
 8005698:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10a      	bne.n	80056b6 <HAL_ADC_ConfigChannel+0x3aa>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2103      	movs	r1, #3
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7ff faf6 	bl	8004c98 <LL_ADC_GetOffsetChannel>
 80056ac:	4603      	mov	r3, r0
 80056ae:	0e9b      	lsrs	r3, r3, #26
 80056b0:	f003 021f 	and.w	r2, r3, #31
 80056b4:	e017      	b.n	80056e6 <HAL_ADC_ConfigChannel+0x3da>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2103      	movs	r1, #3
 80056bc:	4618      	mov	r0, r3
 80056be:	f7ff faeb 	bl	8004c98 <LL_ADC_GetOffsetChannel>
 80056c2:	4603      	mov	r3, r0
 80056c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056c8:	fa93 f3a3 	rbit	r3, r3
 80056cc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80056ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056d0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80056d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80056d8:	2320      	movs	r3, #32
 80056da:	e003      	b.n	80056e4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80056dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056de:	fab3 f383 	clz	r3, r3
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d105      	bne.n	80056fe <HAL_ADC_ConfigChannel+0x3f2>
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	0e9b      	lsrs	r3, r3, #26
 80056f8:	f003 031f 	and.w	r3, r3, #31
 80056fc:	e011      	b.n	8005722 <HAL_ADC_ConfigChannel+0x416>
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005704:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005706:	fa93 f3a3 	rbit	r3, r3
 800570a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800570c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800570e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005710:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8005716:	2320      	movs	r3, #32
 8005718:	e003      	b.n	8005722 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800571a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800571c:	fab3 f383 	clz	r3, r3
 8005720:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005722:	429a      	cmp	r2, r3
 8005724:	d106      	bne.n	8005734 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2200      	movs	r2, #0
 800572c:	2103      	movs	r1, #3
 800572e:	4618      	mov	r0, r3
 8005730:	f7ff fac8 	bl	8004cc4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4618      	mov	r0, r3
 800573a:	f7ff fbf1 	bl	8004f20 <LL_ADC_IsEnabled>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	f040 813d 	bne.w	80059c0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6818      	ldr	r0, [r3, #0]
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	6819      	ldr	r1, [r3, #0]
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	461a      	mov	r2, r3
 8005754:	f7ff fb72 	bl	8004e3c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	4aa2      	ldr	r2, [pc, #648]	@ (80059e8 <HAL_ADC_ConfigChannel+0x6dc>)
 800575e:	4293      	cmp	r3, r2
 8005760:	f040 812e 	bne.w	80059c0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10b      	bne.n	800578c <HAL_ADC_ConfigChannel+0x480>
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	0e9b      	lsrs	r3, r3, #26
 800577a:	3301      	adds	r3, #1
 800577c:	f003 031f 	and.w	r3, r3, #31
 8005780:	2b09      	cmp	r3, #9
 8005782:	bf94      	ite	ls
 8005784:	2301      	movls	r3, #1
 8005786:	2300      	movhi	r3, #0
 8005788:	b2db      	uxtb	r3, r3
 800578a:	e019      	b.n	80057c0 <HAL_ADC_ConfigChannel+0x4b4>
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005792:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005794:	fa93 f3a3 	rbit	r3, r3
 8005798:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800579a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800579c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800579e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d101      	bne.n	80057a8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80057a4:	2320      	movs	r3, #32
 80057a6:	e003      	b.n	80057b0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80057a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057aa:	fab3 f383 	clz	r3, r3
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	3301      	adds	r3, #1
 80057b2:	f003 031f 	and.w	r3, r3, #31
 80057b6:	2b09      	cmp	r3, #9
 80057b8:	bf94      	ite	ls
 80057ba:	2301      	movls	r3, #1
 80057bc:	2300      	movhi	r3, #0
 80057be:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d079      	beq.n	80058b8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d107      	bne.n	80057e0 <HAL_ADC_ConfigChannel+0x4d4>
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	0e9b      	lsrs	r3, r3, #26
 80057d6:	3301      	adds	r3, #1
 80057d8:	069b      	lsls	r3, r3, #26
 80057da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80057de:	e015      	b.n	800580c <HAL_ADC_ConfigChannel+0x500>
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057e8:	fa93 f3a3 	rbit	r3, r3
 80057ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80057ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057f0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80057f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d101      	bne.n	80057fc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80057f8:	2320      	movs	r3, #32
 80057fa:	e003      	b.n	8005804 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80057fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057fe:	fab3 f383 	clz	r3, r3
 8005802:	b2db      	uxtb	r3, r3
 8005804:	3301      	adds	r3, #1
 8005806:	069b      	lsls	r3, r3, #26
 8005808:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005814:	2b00      	cmp	r3, #0
 8005816:	d109      	bne.n	800582c <HAL_ADC_ConfigChannel+0x520>
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	0e9b      	lsrs	r3, r3, #26
 800581e:	3301      	adds	r3, #1
 8005820:	f003 031f 	and.w	r3, r3, #31
 8005824:	2101      	movs	r1, #1
 8005826:	fa01 f303 	lsl.w	r3, r1, r3
 800582a:	e017      	b.n	800585c <HAL_ADC_ConfigChannel+0x550>
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005832:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005834:	fa93 f3a3 	rbit	r3, r3
 8005838:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800583a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800583c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800583e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005840:	2b00      	cmp	r3, #0
 8005842:	d101      	bne.n	8005848 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005844:	2320      	movs	r3, #32
 8005846:	e003      	b.n	8005850 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005848:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800584a:	fab3 f383 	clz	r3, r3
 800584e:	b2db      	uxtb	r3, r3
 8005850:	3301      	adds	r3, #1
 8005852:	f003 031f 	and.w	r3, r3, #31
 8005856:	2101      	movs	r1, #1
 8005858:	fa01 f303 	lsl.w	r3, r1, r3
 800585c:	ea42 0103 	orr.w	r1, r2, r3
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10a      	bne.n	8005882 <HAL_ADC_ConfigChannel+0x576>
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	0e9b      	lsrs	r3, r3, #26
 8005872:	3301      	adds	r3, #1
 8005874:	f003 021f 	and.w	r2, r3, #31
 8005878:	4613      	mov	r3, r2
 800587a:	005b      	lsls	r3, r3, #1
 800587c:	4413      	add	r3, r2
 800587e:	051b      	lsls	r3, r3, #20
 8005880:	e018      	b.n	80058b4 <HAL_ADC_ConfigChannel+0x5a8>
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800588a:	fa93 f3a3 	rbit	r3, r3
 800588e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005892:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005894:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005896:	2b00      	cmp	r3, #0
 8005898:	d101      	bne.n	800589e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800589a:	2320      	movs	r3, #32
 800589c:	e003      	b.n	80058a6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800589e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058a0:	fab3 f383 	clz	r3, r3
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	3301      	adds	r3, #1
 80058a8:	f003 021f 	and.w	r2, r3, #31
 80058ac:	4613      	mov	r3, r2
 80058ae:	005b      	lsls	r3, r3, #1
 80058b0:	4413      	add	r3, r2
 80058b2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058b4:	430b      	orrs	r3, r1
 80058b6:	e07e      	b.n	80059b6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d107      	bne.n	80058d4 <HAL_ADC_ConfigChannel+0x5c8>
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	0e9b      	lsrs	r3, r3, #26
 80058ca:	3301      	adds	r3, #1
 80058cc:	069b      	lsls	r3, r3, #26
 80058ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80058d2:	e015      	b.n	8005900 <HAL_ADC_ConfigChannel+0x5f4>
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058dc:	fa93 f3a3 	rbit	r3, r3
 80058e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80058e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80058e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d101      	bne.n	80058f0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80058ec:	2320      	movs	r3, #32
 80058ee:	e003      	b.n	80058f8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80058f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f2:	fab3 f383 	clz	r3, r3
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	3301      	adds	r3, #1
 80058fa:	069b      	lsls	r3, r3, #26
 80058fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005908:	2b00      	cmp	r3, #0
 800590a:	d109      	bne.n	8005920 <HAL_ADC_ConfigChannel+0x614>
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	0e9b      	lsrs	r3, r3, #26
 8005912:	3301      	adds	r3, #1
 8005914:	f003 031f 	and.w	r3, r3, #31
 8005918:	2101      	movs	r1, #1
 800591a:	fa01 f303 	lsl.w	r3, r1, r3
 800591e:	e017      	b.n	8005950 <HAL_ADC_ConfigChannel+0x644>
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	fa93 f3a3 	rbit	r3, r3
 800592c:	61fb      	str	r3, [r7, #28]
  return result;
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005934:	2b00      	cmp	r3, #0
 8005936:	d101      	bne.n	800593c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005938:	2320      	movs	r3, #32
 800593a:	e003      	b.n	8005944 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800593c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593e:	fab3 f383 	clz	r3, r3
 8005942:	b2db      	uxtb	r3, r3
 8005944:	3301      	adds	r3, #1
 8005946:	f003 031f 	and.w	r3, r3, #31
 800594a:	2101      	movs	r1, #1
 800594c:	fa01 f303 	lsl.w	r3, r1, r3
 8005950:	ea42 0103 	orr.w	r1, r2, r3
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10d      	bne.n	800597c <HAL_ADC_ConfigChannel+0x670>
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	0e9b      	lsrs	r3, r3, #26
 8005966:	3301      	adds	r3, #1
 8005968:	f003 021f 	and.w	r2, r3, #31
 800596c:	4613      	mov	r3, r2
 800596e:	005b      	lsls	r3, r3, #1
 8005970:	4413      	add	r3, r2
 8005972:	3b1e      	subs	r3, #30
 8005974:	051b      	lsls	r3, r3, #20
 8005976:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800597a:	e01b      	b.n	80059b4 <HAL_ADC_ConfigChannel+0x6a8>
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	fa93 f3a3 	rbit	r3, r3
 8005988:	613b      	str	r3, [r7, #16]
  return result;
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d101      	bne.n	8005998 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005994:	2320      	movs	r3, #32
 8005996:	e003      	b.n	80059a0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	fab3 f383 	clz	r3, r3
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	3301      	adds	r3, #1
 80059a2:	f003 021f 	and.w	r2, r3, #31
 80059a6:	4613      	mov	r3, r2
 80059a8:	005b      	lsls	r3, r3, #1
 80059aa:	4413      	add	r3, r2
 80059ac:	3b1e      	subs	r3, #30
 80059ae:	051b      	lsls	r3, r3, #20
 80059b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80059b4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80059ba:	4619      	mov	r1, r3
 80059bc:	f7ff fa12 	bl	8004de4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	4b09      	ldr	r3, [pc, #36]	@ (80059ec <HAL_ADC_ConfigChannel+0x6e0>)
 80059c6:	4013      	ands	r3, r2
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 80be 	beq.w	8005b4a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059d6:	d004      	beq.n	80059e2 <HAL_ADC_ConfigChannel+0x6d6>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a04      	ldr	r2, [pc, #16]	@ (80059f0 <HAL_ADC_ConfigChannel+0x6e4>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d10a      	bne.n	80059f8 <HAL_ADC_ConfigChannel+0x6ec>
 80059e2:	4b04      	ldr	r3, [pc, #16]	@ (80059f4 <HAL_ADC_ConfigChannel+0x6e8>)
 80059e4:	e009      	b.n	80059fa <HAL_ADC_ConfigChannel+0x6ee>
 80059e6:	bf00      	nop
 80059e8:	407f0000 	.word	0x407f0000
 80059ec:	80080000 	.word	0x80080000
 80059f0:	50000100 	.word	0x50000100
 80059f4:	50000300 	.word	0x50000300
 80059f8:	4b59      	ldr	r3, [pc, #356]	@ (8005b60 <HAL_ADC_ConfigChannel+0x854>)
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7ff f91a 	bl	8004c34 <LL_ADC_GetCommonPathInternalCh>
 8005a00:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a56      	ldr	r2, [pc, #344]	@ (8005b64 <HAL_ADC_ConfigChannel+0x858>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d004      	beq.n	8005a18 <HAL_ADC_ConfigChannel+0x70c>
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a55      	ldr	r2, [pc, #340]	@ (8005b68 <HAL_ADC_ConfigChannel+0x85c>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d13a      	bne.n	8005a8e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005a18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d134      	bne.n	8005a8e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a2c:	d005      	beq.n	8005a3a <HAL_ADC_ConfigChannel+0x72e>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a4e      	ldr	r2, [pc, #312]	@ (8005b6c <HAL_ADC_ConfigChannel+0x860>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	f040 8085 	bne.w	8005b44 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a42:	d004      	beq.n	8005a4e <HAL_ADC_ConfigChannel+0x742>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a49      	ldr	r2, [pc, #292]	@ (8005b70 <HAL_ADC_ConfigChannel+0x864>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d101      	bne.n	8005a52 <HAL_ADC_ConfigChannel+0x746>
 8005a4e:	4a49      	ldr	r2, [pc, #292]	@ (8005b74 <HAL_ADC_ConfigChannel+0x868>)
 8005a50:	e000      	b.n	8005a54 <HAL_ADC_ConfigChannel+0x748>
 8005a52:	4a43      	ldr	r2, [pc, #268]	@ (8005b60 <HAL_ADC_ConfigChannel+0x854>)
 8005a54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a58:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	4610      	mov	r0, r2
 8005a60:	f7ff f8d5 	bl	8004c0e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a64:	4b44      	ldr	r3, [pc, #272]	@ (8005b78 <HAL_ADC_ConfigChannel+0x86c>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	099b      	lsrs	r3, r3, #6
 8005a6a:	4a44      	ldr	r2, [pc, #272]	@ (8005b7c <HAL_ADC_ConfigChannel+0x870>)
 8005a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a70:	099b      	lsrs	r3, r3, #6
 8005a72:	1c5a      	adds	r2, r3, #1
 8005a74:	4613      	mov	r3, r2
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	4413      	add	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005a7e:	e002      	b.n	8005a86 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	3b01      	subs	r3, #1
 8005a84:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1f9      	bne.n	8005a80 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a8c:	e05a      	b.n	8005b44 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a3b      	ldr	r2, [pc, #236]	@ (8005b80 <HAL_ADC_ConfigChannel+0x874>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d125      	bne.n	8005ae4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005a98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d11f      	bne.n	8005ae4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a31      	ldr	r2, [pc, #196]	@ (8005b70 <HAL_ADC_ConfigChannel+0x864>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d104      	bne.n	8005ab8 <HAL_ADC_ConfigChannel+0x7ac>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a34      	ldr	r2, [pc, #208]	@ (8005b84 <HAL_ADC_ConfigChannel+0x878>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d047      	beq.n	8005b48 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ac0:	d004      	beq.n	8005acc <HAL_ADC_ConfigChannel+0x7c0>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a2a      	ldr	r2, [pc, #168]	@ (8005b70 <HAL_ADC_ConfigChannel+0x864>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d101      	bne.n	8005ad0 <HAL_ADC_ConfigChannel+0x7c4>
 8005acc:	4a29      	ldr	r2, [pc, #164]	@ (8005b74 <HAL_ADC_ConfigChannel+0x868>)
 8005ace:	e000      	b.n	8005ad2 <HAL_ADC_ConfigChannel+0x7c6>
 8005ad0:	4a23      	ldr	r2, [pc, #140]	@ (8005b60 <HAL_ADC_ConfigChannel+0x854>)
 8005ad2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ad6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ada:	4619      	mov	r1, r3
 8005adc:	4610      	mov	r0, r2
 8005ade:	f7ff f896 	bl	8004c0e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005ae2:	e031      	b.n	8005b48 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a27      	ldr	r2, [pc, #156]	@ (8005b88 <HAL_ADC_ConfigChannel+0x87c>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d12d      	bne.n	8005b4a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005aee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005af2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d127      	bne.n	8005b4a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a1c      	ldr	r2, [pc, #112]	@ (8005b70 <HAL_ADC_ConfigChannel+0x864>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d022      	beq.n	8005b4a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b0c:	d004      	beq.n	8005b18 <HAL_ADC_ConfigChannel+0x80c>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a17      	ldr	r2, [pc, #92]	@ (8005b70 <HAL_ADC_ConfigChannel+0x864>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d101      	bne.n	8005b1c <HAL_ADC_ConfigChannel+0x810>
 8005b18:	4a16      	ldr	r2, [pc, #88]	@ (8005b74 <HAL_ADC_ConfigChannel+0x868>)
 8005b1a:	e000      	b.n	8005b1e <HAL_ADC_ConfigChannel+0x812>
 8005b1c:	4a10      	ldr	r2, [pc, #64]	@ (8005b60 <HAL_ADC_ConfigChannel+0x854>)
 8005b1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005b22:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005b26:	4619      	mov	r1, r3
 8005b28:	4610      	mov	r0, r2
 8005b2a:	f7ff f870 	bl	8004c0e <LL_ADC_SetCommonPathInternalCh>
 8005b2e:	e00c      	b.n	8005b4a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b34:	f043 0220 	orr.w	r2, r3, #32
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005b42:	e002      	b.n	8005b4a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005b44:	bf00      	nop
 8005b46:	e000      	b.n	8005b4a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005b48:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005b52:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	37d8      	adds	r7, #216	@ 0xd8
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	50000700 	.word	0x50000700
 8005b64:	c3210000 	.word	0xc3210000
 8005b68:	90c00010 	.word	0x90c00010
 8005b6c:	50000600 	.word	0x50000600
 8005b70:	50000100 	.word	0x50000100
 8005b74:	50000300 	.word	0x50000300
 8005b78:	20000208 	.word	0x20000208
 8005b7c:	053e2d63 	.word	0x053e2d63
 8005b80:	c7520000 	.word	0xc7520000
 8005b84:	50000500 	.word	0x50000500
 8005b88:	cb840000 	.word	0xcb840000

08005b8c <LL_ADC_IsEnabled>:
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d101      	bne.n	8005ba4 <LL_ADC_IsEnabled+0x18>
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e000      	b.n	8005ba6 <LL_ADC_IsEnabled+0x1a>
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr

08005bb2 <LL_ADC_REG_IsConversionOngoing>:
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b083      	sub	sp, #12
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f003 0304 	and.w	r3, r3, #4
 8005bc2:	2b04      	cmp	r3, #4
 8005bc4:	d101      	bne.n	8005bca <LL_ADC_REG_IsConversionOngoing+0x18>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e000      	b.n	8005bcc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005bd8:	b590      	push	{r4, r7, lr}
 8005bda:	b0a1      	sub	sp, #132	@ 0x84
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005be2:	2300      	movs	r3, #0
 8005be4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d101      	bne.n	8005bf6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005bf2:	2302      	movs	r3, #2
 8005bf4:	e0e7      	b.n	8005dc6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005bfe:	2300      	movs	r3, #0
 8005c00:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005c02:	2300      	movs	r3, #0
 8005c04:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c0e:	d102      	bne.n	8005c16 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005c10:	4b6f      	ldr	r3, [pc, #444]	@ (8005dd0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005c12:	60bb      	str	r3, [r7, #8]
 8005c14:	e009      	b.n	8005c2a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a6e      	ldr	r2, [pc, #440]	@ (8005dd4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d102      	bne.n	8005c26 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005c20:	4b6d      	ldr	r3, [pc, #436]	@ (8005dd8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005c22:	60bb      	str	r3, [r7, #8]
 8005c24:	e001      	b.n	8005c2a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005c26:	2300      	movs	r3, #0
 8005c28:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d10b      	bne.n	8005c48 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c34:	f043 0220 	orr.w	r2, r3, #32
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e0be      	b.n	8005dc6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7ff ffb1 	bl	8005bb2 <LL_ADC_REG_IsConversionOngoing>
 8005c50:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7ff ffab 	bl	8005bb2 <LL_ADC_REG_IsConversionOngoing>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f040 80a0 	bne.w	8005da4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005c64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f040 809c 	bne.w	8005da4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c74:	d004      	beq.n	8005c80 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a55      	ldr	r2, [pc, #340]	@ (8005dd0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d101      	bne.n	8005c84 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005c80:	4b56      	ldr	r3, [pc, #344]	@ (8005ddc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005c82:	e000      	b.n	8005c86 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005c84:	4b56      	ldr	r3, [pc, #344]	@ (8005de0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005c86:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d04b      	beq.n	8005d28 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005c90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	6859      	ldr	r1, [r3, #4]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005ca2:	035b      	lsls	r3, r3, #13
 8005ca4:	430b      	orrs	r3, r1
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005caa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005cb4:	d004      	beq.n	8005cc0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a45      	ldr	r2, [pc, #276]	@ (8005dd0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d10f      	bne.n	8005ce0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005cc0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005cc4:	f7ff ff62 	bl	8005b8c <LL_ADC_IsEnabled>
 8005cc8:	4604      	mov	r4, r0
 8005cca:	4841      	ldr	r0, [pc, #260]	@ (8005dd0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005ccc:	f7ff ff5e 	bl	8005b8c <LL_ADC_IsEnabled>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	4323      	orrs	r3, r4
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	bf0c      	ite	eq
 8005cd8:	2301      	moveq	r3, #1
 8005cda:	2300      	movne	r3, #0
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	e012      	b.n	8005d06 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005ce0:	483c      	ldr	r0, [pc, #240]	@ (8005dd4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005ce2:	f7ff ff53 	bl	8005b8c <LL_ADC_IsEnabled>
 8005ce6:	4604      	mov	r4, r0
 8005ce8:	483b      	ldr	r0, [pc, #236]	@ (8005dd8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005cea:	f7ff ff4f 	bl	8005b8c <LL_ADC_IsEnabled>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	431c      	orrs	r4, r3
 8005cf2:	483c      	ldr	r0, [pc, #240]	@ (8005de4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005cf4:	f7ff ff4a 	bl	8005b8c <LL_ADC_IsEnabled>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	4323      	orrs	r3, r4
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	bf0c      	ite	eq
 8005d00:	2301      	moveq	r3, #1
 8005d02:	2300      	movne	r3, #0
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d056      	beq.n	8005db8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005d0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005d12:	f023 030f 	bic.w	r3, r3, #15
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	6811      	ldr	r1, [r2, #0]
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	6892      	ldr	r2, [r2, #8]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	431a      	orrs	r2, r3
 8005d22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d24:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005d26:	e047      	b.n	8005db8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005d28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005d30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d32:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d3c:	d004      	beq.n	8005d48 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a23      	ldr	r2, [pc, #140]	@ (8005dd0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d10f      	bne.n	8005d68 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005d48:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005d4c:	f7ff ff1e 	bl	8005b8c <LL_ADC_IsEnabled>
 8005d50:	4604      	mov	r4, r0
 8005d52:	481f      	ldr	r0, [pc, #124]	@ (8005dd0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005d54:	f7ff ff1a 	bl	8005b8c <LL_ADC_IsEnabled>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	4323      	orrs	r3, r4
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	bf0c      	ite	eq
 8005d60:	2301      	moveq	r3, #1
 8005d62:	2300      	movne	r3, #0
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	e012      	b.n	8005d8e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005d68:	481a      	ldr	r0, [pc, #104]	@ (8005dd4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005d6a:	f7ff ff0f 	bl	8005b8c <LL_ADC_IsEnabled>
 8005d6e:	4604      	mov	r4, r0
 8005d70:	4819      	ldr	r0, [pc, #100]	@ (8005dd8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005d72:	f7ff ff0b 	bl	8005b8c <LL_ADC_IsEnabled>
 8005d76:	4603      	mov	r3, r0
 8005d78:	431c      	orrs	r4, r3
 8005d7a:	481a      	ldr	r0, [pc, #104]	@ (8005de4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005d7c:	f7ff ff06 	bl	8005b8c <LL_ADC_IsEnabled>
 8005d80:	4603      	mov	r3, r0
 8005d82:	4323      	orrs	r3, r4
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	bf0c      	ite	eq
 8005d88:	2301      	moveq	r3, #1
 8005d8a:	2300      	movne	r3, #0
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d012      	beq.n	8005db8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005d92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005d9a:	f023 030f 	bic.w	r3, r3, #15
 8005d9e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005da0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005da2:	e009      	b.n	8005db8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005da8:	f043 0220 	orr.w	r2, r3, #32
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005db6:	e000      	b.n	8005dba <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005db8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005dc2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3784      	adds	r7, #132	@ 0x84
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd90      	pop	{r4, r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	50000100 	.word	0x50000100
 8005dd4:	50000400 	.word	0x50000400
 8005dd8:	50000500 	.word	0x50000500
 8005ddc:	50000300 	.word	0x50000300
 8005de0:	50000700 	.word	0x50000700
 8005de4:	50000600 	.word	0x50000600

08005de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f003 0307 	and.w	r3, r3, #7
 8005df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005df8:	4b0c      	ldr	r3, [pc, #48]	@ (8005e2c <__NVIC_SetPriorityGrouping+0x44>)
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005e04:	4013      	ands	r3, r2
 8005e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e1a:	4a04      	ldr	r2, [pc, #16]	@ (8005e2c <__NVIC_SetPriorityGrouping+0x44>)
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	60d3      	str	r3, [r2, #12]
}
 8005e20:	bf00      	nop
 8005e22:	3714      	adds	r7, #20
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	e000ed00 	.word	0xe000ed00

08005e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e30:	b480      	push	{r7}
 8005e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e34:	4b04      	ldr	r3, [pc, #16]	@ (8005e48 <__NVIC_GetPriorityGrouping+0x18>)
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	0a1b      	lsrs	r3, r3, #8
 8005e3a:	f003 0307 	and.w	r3, r3, #7
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr
 8005e48:	e000ed00 	.word	0xe000ed00

08005e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	4603      	mov	r3, r0
 8005e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	db0b      	blt.n	8005e76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e5e:	79fb      	ldrb	r3, [r7, #7]
 8005e60:	f003 021f 	and.w	r2, r3, #31
 8005e64:	4907      	ldr	r1, [pc, #28]	@ (8005e84 <__NVIC_EnableIRQ+0x38>)
 8005e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e6a:	095b      	lsrs	r3, r3, #5
 8005e6c:	2001      	movs	r0, #1
 8005e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8005e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005e76:	bf00      	nop
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	e000e100 	.word	0xe000e100

08005e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	4603      	mov	r3, r0
 8005e90:	6039      	str	r1, [r7, #0]
 8005e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	db0a      	blt.n	8005eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	490c      	ldr	r1, [pc, #48]	@ (8005ed4 <__NVIC_SetPriority+0x4c>)
 8005ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ea6:	0112      	lsls	r2, r2, #4
 8005ea8:	b2d2      	uxtb	r2, r2
 8005eaa:	440b      	add	r3, r1
 8005eac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005eb0:	e00a      	b.n	8005ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	b2da      	uxtb	r2, r3
 8005eb6:	4908      	ldr	r1, [pc, #32]	@ (8005ed8 <__NVIC_SetPriority+0x50>)
 8005eb8:	79fb      	ldrb	r3, [r7, #7]
 8005eba:	f003 030f 	and.w	r3, r3, #15
 8005ebe:	3b04      	subs	r3, #4
 8005ec0:	0112      	lsls	r2, r2, #4
 8005ec2:	b2d2      	uxtb	r2, r2
 8005ec4:	440b      	add	r3, r1
 8005ec6:	761a      	strb	r2, [r3, #24]
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	e000e100 	.word	0xe000e100
 8005ed8:	e000ed00 	.word	0xe000ed00

08005edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b089      	sub	sp, #36	@ 0x24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f003 0307 	and.w	r3, r3, #7
 8005eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	f1c3 0307 	rsb	r3, r3, #7
 8005ef6:	2b04      	cmp	r3, #4
 8005ef8:	bf28      	it	cs
 8005efa:	2304      	movcs	r3, #4
 8005efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	3304      	adds	r3, #4
 8005f02:	2b06      	cmp	r3, #6
 8005f04:	d902      	bls.n	8005f0c <NVIC_EncodePriority+0x30>
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	3b03      	subs	r3, #3
 8005f0a:	e000      	b.n	8005f0e <NVIC_EncodePriority+0x32>
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f10:	f04f 32ff 	mov.w	r2, #4294967295
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1a:	43da      	mvns	r2, r3
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	401a      	ands	r2, r3
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f24:	f04f 31ff 	mov.w	r1, #4294967295
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f2e:	43d9      	mvns	r1, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f34:	4313      	orrs	r3, r2
         );
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3724      	adds	r7, #36	@ 0x24
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
	...

08005f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f54:	d301      	bcc.n	8005f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005f56:	2301      	movs	r3, #1
 8005f58:	e00f      	b.n	8005f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8005f84 <SysTick_Config+0x40>)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005f62:	210f      	movs	r1, #15
 8005f64:	f04f 30ff 	mov.w	r0, #4294967295
 8005f68:	f7ff ff8e 	bl	8005e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f6c:	4b05      	ldr	r3, [pc, #20]	@ (8005f84 <SysTick_Config+0x40>)
 8005f6e:	2200      	movs	r2, #0
 8005f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f72:	4b04      	ldr	r3, [pc, #16]	@ (8005f84 <SysTick_Config+0x40>)
 8005f74:	2207      	movs	r2, #7
 8005f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	e000e010 	.word	0xe000e010

08005f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f7ff ff29 	bl	8005de8 <__NVIC_SetPriorityGrouping>
}
 8005f96:	bf00      	nop
 8005f98:	3708      	adds	r7, #8
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b086      	sub	sp, #24
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	60b9      	str	r1, [r7, #8]
 8005fa8:	607a      	str	r2, [r7, #4]
 8005faa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005fac:	f7ff ff40 	bl	8005e30 <__NVIC_GetPriorityGrouping>
 8005fb0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	68b9      	ldr	r1, [r7, #8]
 8005fb6:	6978      	ldr	r0, [r7, #20]
 8005fb8:	f7ff ff90 	bl	8005edc <NVIC_EncodePriority>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fc2:	4611      	mov	r1, r2
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7ff ff5f 	bl	8005e88 <__NVIC_SetPriority>
}
 8005fca:	bf00      	nop
 8005fcc:	3718      	adds	r7, #24
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b082      	sub	sp, #8
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	4603      	mov	r3, r0
 8005fda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7ff ff33 	bl	8005e4c <__NVIC_EnableIRQ>
}
 8005fe6:	bf00      	nop
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b082      	sub	sp, #8
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f7ff ffa4 	bl	8005f44 <SysTick_Config>
 8005ffc:	4603      	mov	r3, r0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
	...

08006008 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d101      	bne.n	800601a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e08d      	b.n	8006136 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	461a      	mov	r2, r3
 8006020:	4b47      	ldr	r3, [pc, #284]	@ (8006140 <HAL_DMA_Init+0x138>)
 8006022:	429a      	cmp	r2, r3
 8006024:	d80f      	bhi.n	8006046 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	461a      	mov	r2, r3
 800602c:	4b45      	ldr	r3, [pc, #276]	@ (8006144 <HAL_DMA_Init+0x13c>)
 800602e:	4413      	add	r3, r2
 8006030:	4a45      	ldr	r2, [pc, #276]	@ (8006148 <HAL_DMA_Init+0x140>)
 8006032:	fba2 2303 	umull	r2, r3, r2, r3
 8006036:	091b      	lsrs	r3, r3, #4
 8006038:	009a      	lsls	r2, r3, #2
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a42      	ldr	r2, [pc, #264]	@ (800614c <HAL_DMA_Init+0x144>)
 8006042:	641a      	str	r2, [r3, #64]	@ 0x40
 8006044:	e00e      	b.n	8006064 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	461a      	mov	r2, r3
 800604c:	4b40      	ldr	r3, [pc, #256]	@ (8006150 <HAL_DMA_Init+0x148>)
 800604e:	4413      	add	r3, r2
 8006050:	4a3d      	ldr	r2, [pc, #244]	@ (8006148 <HAL_DMA_Init+0x140>)
 8006052:	fba2 2303 	umull	r2, r3, r2, r3
 8006056:	091b      	lsrs	r3, r3, #4
 8006058:	009a      	lsls	r2, r3, #2
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a3c      	ldr	r2, [pc, #240]	@ (8006154 <HAL_DMA_Init+0x14c>)
 8006062:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2202      	movs	r2, #2
 8006068:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800607a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800607e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006088:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006094:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 fa76 	bl	80065a8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80060c4:	d102      	bne.n	80060cc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685a      	ldr	r2, [r3, #4]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060d4:	b2d2      	uxtb	r2, r2
 80060d6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80060e0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d010      	beq.n	800610c <HAL_DMA_Init+0x104>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	2b04      	cmp	r3, #4
 80060f0:	d80c      	bhi.n	800610c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 fa96 	bl	8006624 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060fc:	2200      	movs	r2, #0
 80060fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006108:	605a      	str	r2, [r3, #4]
 800610a:	e008      	b.n	800611e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	40020407 	.word	0x40020407
 8006144:	bffdfff8 	.word	0xbffdfff8
 8006148:	cccccccd 	.word	0xcccccccd
 800614c:	40020000 	.word	0x40020000
 8006150:	bffdfbf8 	.word	0xbffdfbf8
 8006154:	40020400 	.word	0x40020400

08006158 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
 8006164:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006166:	2300      	movs	r3, #0
 8006168:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006170:	2b01      	cmp	r3, #1
 8006172:	d101      	bne.n	8006178 <HAL_DMA_Start_IT+0x20>
 8006174:	2302      	movs	r3, #2
 8006176:	e066      	b.n	8006246 <HAL_DMA_Start_IT+0xee>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b01      	cmp	r3, #1
 800618a:	d155      	bne.n	8006238 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2202      	movs	r2, #2
 8006190:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f022 0201 	bic.w	r2, r2, #1
 80061a8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	68b9      	ldr	r1, [r7, #8]
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f000 f9bb 	bl	800652c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d008      	beq.n	80061d0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f042 020e 	orr.w	r2, r2, #14
 80061cc:	601a      	str	r2, [r3, #0]
 80061ce:	e00f      	b.n	80061f0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 0204 	bic.w	r2, r2, #4
 80061de:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f042 020a 	orr.w	r2, r2, #10
 80061ee:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d007      	beq.n	800620e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006208:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800620c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006212:	2b00      	cmp	r3, #0
 8006214:	d007      	beq.n	8006226 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006220:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006224:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f042 0201 	orr.w	r2, r2, #1
 8006234:	601a      	str	r2, [r3, #0]
 8006236:	e005      	b.n	8006244 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006240:	2302      	movs	r3, #2
 8006242:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006244:	7dfb      	ldrb	r3, [r7, #23]
}
 8006246:	4618      	mov	r0, r3
 8006248:	3718      	adds	r7, #24
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800624e:	b480      	push	{r7}
 8006250:	b085      	sub	sp, #20
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006256:	2300      	movs	r3, #0
 8006258:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b02      	cmp	r3, #2
 8006264:	d005      	beq.n	8006272 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2204      	movs	r2, #4
 800626a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	73fb      	strb	r3, [r7, #15]
 8006270:	e037      	b.n	80062e2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f022 020e 	bic.w	r2, r2, #14
 8006280:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800628c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006290:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f022 0201 	bic.w	r2, r2, #1
 80062a0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062a6:	f003 021f 	and.w	r2, r3, #31
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ae:	2101      	movs	r1, #1
 80062b0:	fa01 f202 	lsl.w	r2, r1, r2
 80062b4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80062be:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00c      	beq.n	80062e2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062d6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80062e0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80062f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3714      	adds	r7, #20
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006308:	2300      	movs	r3, #0
 800630a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b02      	cmp	r3, #2
 8006316:	d00d      	beq.n	8006334 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2204      	movs	r2, #4
 800631c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	73fb      	strb	r3, [r7, #15]
 8006332:	e047      	b.n	80063c4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f022 020e 	bic.w	r2, r2, #14
 8006342:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 0201 	bic.w	r2, r2, #1
 8006352:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800635e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006362:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006368:	f003 021f 	and.w	r2, r3, #31
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006370:	2101      	movs	r1, #1
 8006372:	fa01 f202 	lsl.w	r2, r1, r2
 8006376:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006380:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00c      	beq.n	80063a4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006394:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006398:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80063a2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d003      	beq.n	80063c4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	4798      	blx	r3
    }
  }
  return status;
 80063c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b084      	sub	sp, #16
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ea:	f003 031f 	and.w	r3, r3, #31
 80063ee:	2204      	movs	r2, #4
 80063f0:	409a      	lsls	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	4013      	ands	r3, r2
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d026      	beq.n	8006448 <HAL_DMA_IRQHandler+0x7a>
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	f003 0304 	and.w	r3, r3, #4
 8006400:	2b00      	cmp	r3, #0
 8006402:	d021      	beq.n	8006448 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0320 	and.w	r3, r3, #32
 800640e:	2b00      	cmp	r3, #0
 8006410:	d107      	bne.n	8006422 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f022 0204 	bic.w	r2, r2, #4
 8006420:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006426:	f003 021f 	and.w	r2, r3, #31
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800642e:	2104      	movs	r1, #4
 8006430:	fa01 f202 	lsl.w	r2, r1, r2
 8006434:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800643a:	2b00      	cmp	r3, #0
 800643c:	d071      	beq.n	8006522 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006446:	e06c      	b.n	8006522 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800644c:	f003 031f 	and.w	r3, r3, #31
 8006450:	2202      	movs	r2, #2
 8006452:	409a      	lsls	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	4013      	ands	r3, r2
 8006458:	2b00      	cmp	r3, #0
 800645a:	d02e      	beq.n	80064ba <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	f003 0302 	and.w	r3, r3, #2
 8006462:	2b00      	cmp	r3, #0
 8006464:	d029      	beq.n	80064ba <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0320 	and.w	r3, r3, #32
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10b      	bne.n	800648c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f022 020a 	bic.w	r2, r2, #10
 8006482:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006490:	f003 021f 	and.w	r2, r3, #31
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006498:	2102      	movs	r1, #2
 800649a:	fa01 f202 	lsl.w	r2, r1, r2
 800649e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d038      	beq.n	8006522 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80064b8:	e033      	b.n	8006522 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064be:	f003 031f 	and.w	r3, r3, #31
 80064c2:	2208      	movs	r2, #8
 80064c4:	409a      	lsls	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	4013      	ands	r3, r2
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d02a      	beq.n	8006524 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	f003 0308 	and.w	r3, r3, #8
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d025      	beq.n	8006524 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 020e 	bic.w	r2, r2, #14
 80064e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ec:	f003 021f 	and.w	r2, r3, #31
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f4:	2101      	movs	r1, #1
 80064f6:	fa01 f202 	lsl.w	r2, r1, r2
 80064fa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006516:	2b00      	cmp	r3, #0
 8006518:	d004      	beq.n	8006524 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006522:	bf00      	nop
 8006524:	bf00      	nop
}
 8006526:	3710      	adds	r7, #16
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800652c:	b480      	push	{r7}
 800652e:	b085      	sub	sp, #20
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]
 8006538:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006542:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006548:	2b00      	cmp	r3, #0
 800654a:	d004      	beq.n	8006556 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006554:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800655a:	f003 021f 	and.w	r2, r3, #31
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006562:	2101      	movs	r1, #1
 8006564:	fa01 f202 	lsl.w	r2, r1, r2
 8006568:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	683a      	ldr	r2, [r7, #0]
 8006570:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	2b10      	cmp	r3, #16
 8006578:	d108      	bne.n	800658c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800658a:	e007      	b.n	800659c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	60da      	str	r2, [r3, #12]
}
 800659c:	bf00      	nop
 800659e:	3714      	adds	r7, #20
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b087      	sub	sp, #28
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	461a      	mov	r2, r3
 80065b6:	4b16      	ldr	r3, [pc, #88]	@ (8006610 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d802      	bhi.n	80065c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80065bc:	4b15      	ldr	r3, [pc, #84]	@ (8006614 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80065be:	617b      	str	r3, [r7, #20]
 80065c0:	e001      	b.n	80065c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80065c2:	4b15      	ldr	r3, [pc, #84]	@ (8006618 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80065c4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	3b08      	subs	r3, #8
 80065d2:	4a12      	ldr	r2, [pc, #72]	@ (800661c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80065d4:	fba2 2303 	umull	r2, r3, r2, r3
 80065d8:	091b      	lsrs	r3, r3, #4
 80065da:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065e0:	089b      	lsrs	r3, r3, #2
 80065e2:	009a      	lsls	r2, r3, #2
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	4413      	add	r3, r2
 80065e8:	461a      	mov	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a0b      	ldr	r2, [pc, #44]	@ (8006620 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80065f2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f003 031f 	and.w	r3, r3, #31
 80065fa:	2201      	movs	r2, #1
 80065fc:	409a      	lsls	r2, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006602:	bf00      	nop
 8006604:	371c      	adds	r7, #28
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	40020407 	.word	0x40020407
 8006614:	40020800 	.word	0x40020800
 8006618:	40020820 	.word	0x40020820
 800661c:	cccccccd 	.word	0xcccccccd
 8006620:	40020880 	.word	0x40020880

08006624 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	b2db      	uxtb	r3, r3
 8006632:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	4b0b      	ldr	r3, [pc, #44]	@ (8006664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006638:	4413      	add	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	461a      	mov	r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a08      	ldr	r2, [pc, #32]	@ (8006668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006646:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	3b01      	subs	r3, #1
 800664c:	f003 031f 	and.w	r3, r3, #31
 8006650:	2201      	movs	r2, #1
 8006652:	409a      	lsls	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006658:	bf00      	nop
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr
 8006664:	1000823f 	.word	0x1000823f
 8006668:	40020940 	.word	0x40020940

0800666c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800666c:	b480      	push	{r7}
 800666e:	b087      	sub	sp, #28
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006676:	2300      	movs	r3, #0
 8006678:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800667a:	e15a      	b.n	8006932 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	2101      	movs	r1, #1
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	fa01 f303 	lsl.w	r3, r1, r3
 8006688:	4013      	ands	r3, r2
 800668a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2b00      	cmp	r3, #0
 8006690:	f000 814c 	beq.w	800692c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	f003 0303 	and.w	r3, r3, #3
 800669c:	2b01      	cmp	r3, #1
 800669e:	d005      	beq.n	80066ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d130      	bne.n	800670e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	005b      	lsls	r3, r3, #1
 80066b6:	2203      	movs	r2, #3
 80066b8:	fa02 f303 	lsl.w	r3, r2, r3
 80066bc:	43db      	mvns	r3, r3
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	4013      	ands	r3, r2
 80066c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	68da      	ldr	r2, [r3, #12]
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	005b      	lsls	r3, r3, #1
 80066cc:	fa02 f303 	lsl.w	r3, r2, r3
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80066e2:	2201      	movs	r2, #1
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ea:	43db      	mvns	r3, r3
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	4013      	ands	r3, r2
 80066f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	091b      	lsrs	r3, r3, #4
 80066f8:	f003 0201 	and.w	r2, r3, #1
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	4313      	orrs	r3, r2
 8006706:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f003 0303 	and.w	r3, r3, #3
 8006716:	2b03      	cmp	r3, #3
 8006718:	d017      	beq.n	800674a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	005b      	lsls	r3, r3, #1
 8006724:	2203      	movs	r2, #3
 8006726:	fa02 f303 	lsl.w	r3, r2, r3
 800672a:	43db      	mvns	r3, r3
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	4013      	ands	r3, r2
 8006730:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	689a      	ldr	r2, [r3, #8]
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	005b      	lsls	r3, r3, #1
 800673a:	fa02 f303 	lsl.w	r3, r2, r3
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	4313      	orrs	r3, r2
 8006742:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	f003 0303 	and.w	r3, r3, #3
 8006752:	2b02      	cmp	r3, #2
 8006754:	d123      	bne.n	800679e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	08da      	lsrs	r2, r3, #3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	3208      	adds	r2, #8
 800675e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006762:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	f003 0307 	and.w	r3, r3, #7
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	220f      	movs	r2, #15
 800676e:	fa02 f303 	lsl.w	r3, r2, r3
 8006772:	43db      	mvns	r3, r3
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	4013      	ands	r3, r2
 8006778:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	691a      	ldr	r2, [r3, #16]
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f003 0307 	and.w	r3, r3, #7
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	fa02 f303 	lsl.w	r3, r2, r3
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	4313      	orrs	r3, r2
 800678e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	08da      	lsrs	r2, r3, #3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	3208      	adds	r2, #8
 8006798:	6939      	ldr	r1, [r7, #16]
 800679a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	005b      	lsls	r3, r3, #1
 80067a8:	2203      	movs	r2, #3
 80067aa:	fa02 f303 	lsl.w	r3, r2, r3
 80067ae:	43db      	mvns	r3, r3
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	4013      	ands	r3, r2
 80067b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	f003 0203 	and.w	r2, r3, #3
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	005b      	lsls	r3, r3, #1
 80067c2:	fa02 f303 	lsl.w	r3, r2, r3
 80067c6:	693a      	ldr	r2, [r7, #16]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f000 80a6 	beq.w	800692c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067e0:	4b5b      	ldr	r3, [pc, #364]	@ (8006950 <HAL_GPIO_Init+0x2e4>)
 80067e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067e4:	4a5a      	ldr	r2, [pc, #360]	@ (8006950 <HAL_GPIO_Init+0x2e4>)
 80067e6:	f043 0301 	orr.w	r3, r3, #1
 80067ea:	6613      	str	r3, [r2, #96]	@ 0x60
 80067ec:	4b58      	ldr	r3, [pc, #352]	@ (8006950 <HAL_GPIO_Init+0x2e4>)
 80067ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067f0:	f003 0301 	and.w	r3, r3, #1
 80067f4:	60bb      	str	r3, [r7, #8]
 80067f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80067f8:	4a56      	ldr	r2, [pc, #344]	@ (8006954 <HAL_GPIO_Init+0x2e8>)
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	089b      	lsrs	r3, r3, #2
 80067fe:	3302      	adds	r3, #2
 8006800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006804:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	f003 0303 	and.w	r3, r3, #3
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	220f      	movs	r2, #15
 8006810:	fa02 f303 	lsl.w	r3, r2, r3
 8006814:	43db      	mvns	r3, r3
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	4013      	ands	r3, r2
 800681a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006822:	d01f      	beq.n	8006864 <HAL_GPIO_Init+0x1f8>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a4c      	ldr	r2, [pc, #304]	@ (8006958 <HAL_GPIO_Init+0x2ec>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d019      	beq.n	8006860 <HAL_GPIO_Init+0x1f4>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a4b      	ldr	r2, [pc, #300]	@ (800695c <HAL_GPIO_Init+0x2f0>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d013      	beq.n	800685c <HAL_GPIO_Init+0x1f0>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a4a      	ldr	r2, [pc, #296]	@ (8006960 <HAL_GPIO_Init+0x2f4>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d00d      	beq.n	8006858 <HAL_GPIO_Init+0x1ec>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a49      	ldr	r2, [pc, #292]	@ (8006964 <HAL_GPIO_Init+0x2f8>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d007      	beq.n	8006854 <HAL_GPIO_Init+0x1e8>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a48      	ldr	r2, [pc, #288]	@ (8006968 <HAL_GPIO_Init+0x2fc>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d101      	bne.n	8006850 <HAL_GPIO_Init+0x1e4>
 800684c:	2305      	movs	r3, #5
 800684e:	e00a      	b.n	8006866 <HAL_GPIO_Init+0x1fa>
 8006850:	2306      	movs	r3, #6
 8006852:	e008      	b.n	8006866 <HAL_GPIO_Init+0x1fa>
 8006854:	2304      	movs	r3, #4
 8006856:	e006      	b.n	8006866 <HAL_GPIO_Init+0x1fa>
 8006858:	2303      	movs	r3, #3
 800685a:	e004      	b.n	8006866 <HAL_GPIO_Init+0x1fa>
 800685c:	2302      	movs	r3, #2
 800685e:	e002      	b.n	8006866 <HAL_GPIO_Init+0x1fa>
 8006860:	2301      	movs	r3, #1
 8006862:	e000      	b.n	8006866 <HAL_GPIO_Init+0x1fa>
 8006864:	2300      	movs	r3, #0
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	f002 0203 	and.w	r2, r2, #3
 800686c:	0092      	lsls	r2, r2, #2
 800686e:	4093      	lsls	r3, r2
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	4313      	orrs	r3, r2
 8006874:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006876:	4937      	ldr	r1, [pc, #220]	@ (8006954 <HAL_GPIO_Init+0x2e8>)
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	089b      	lsrs	r3, r3, #2
 800687c:	3302      	adds	r3, #2
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006884:	4b39      	ldr	r3, [pc, #228]	@ (800696c <HAL_GPIO_Init+0x300>)
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	43db      	mvns	r3, r3
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	4013      	ands	r3, r2
 8006892:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800689c:	2b00      	cmp	r3, #0
 800689e:	d003      	beq.n	80068a8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80068a0:	693a      	ldr	r2, [r7, #16]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80068a8:	4a30      	ldr	r2, [pc, #192]	@ (800696c <HAL_GPIO_Init+0x300>)
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80068ae:	4b2f      	ldr	r3, [pc, #188]	@ (800696c <HAL_GPIO_Init+0x300>)
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	43db      	mvns	r3, r3
 80068b8:	693a      	ldr	r2, [r7, #16]
 80068ba:	4013      	ands	r3, r2
 80068bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d003      	beq.n	80068d2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80068d2:	4a26      	ldr	r2, [pc, #152]	@ (800696c <HAL_GPIO_Init+0x300>)
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80068d8:	4b24      	ldr	r3, [pc, #144]	@ (800696c <HAL_GPIO_Init+0x300>)
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	43db      	mvns	r3, r3
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	4013      	ands	r3, r2
 80068e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d003      	beq.n	80068fc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80068fc:	4a1b      	ldr	r2, [pc, #108]	@ (800696c <HAL_GPIO_Init+0x300>)
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006902:	4b1a      	ldr	r3, [pc, #104]	@ (800696c <HAL_GPIO_Init+0x300>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	43db      	mvns	r3, r3
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	4013      	ands	r3, r2
 8006910:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d003      	beq.n	8006926 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	4313      	orrs	r3, r2
 8006924:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006926:	4a11      	ldr	r2, [pc, #68]	@ (800696c <HAL_GPIO_Init+0x300>)
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	3301      	adds	r3, #1
 8006930:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	fa22 f303 	lsr.w	r3, r2, r3
 800693c:	2b00      	cmp	r3, #0
 800693e:	f47f ae9d 	bne.w	800667c <HAL_GPIO_Init+0x10>
  }
}
 8006942:	bf00      	nop
 8006944:	bf00      	nop
 8006946:	371c      	adds	r7, #28
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr
 8006950:	40021000 	.word	0x40021000
 8006954:	40010000 	.word	0x40010000
 8006958:	48000400 	.word	0x48000400
 800695c:	48000800 	.word	0x48000800
 8006960:	48000c00 	.word	0x48000c00
 8006964:	48001000 	.word	0x48001000
 8006968:	48001400 	.word	0x48001400
 800696c:	40010400 	.word	0x40010400

08006970 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006970:	b480      	push	{r7}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	460b      	mov	r3, r1
 800697a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	691a      	ldr	r2, [r3, #16]
 8006980:	887b      	ldrh	r3, [r7, #2]
 8006982:	4013      	ands	r3, r2
 8006984:	2b00      	cmp	r3, #0
 8006986:	d002      	beq.n	800698e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006988:	2301      	movs	r3, #1
 800698a:	73fb      	strb	r3, [r7, #15]
 800698c:	e001      	b.n	8006992 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800698e:	2300      	movs	r3, #0
 8006990:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006992:	7bfb      	ldrb	r3, [r7, #15]
}
 8006994:	4618      	mov	r0, r3
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	460b      	mov	r3, r1
 80069aa:	807b      	strh	r3, [r7, #2]
 80069ac:	4613      	mov	r3, r2
 80069ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80069b0:	787b      	ldrb	r3, [r7, #1]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d003      	beq.n	80069be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80069b6:	887a      	ldrh	r2, [r7, #2]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80069bc:	e002      	b.n	80069c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80069be:	887a      	ldrh	r2, [r7, #2]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80069c4:	bf00      	nop
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	4603      	mov	r3, r0
 80069d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80069da:	4b08      	ldr	r3, [pc, #32]	@ (80069fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80069dc:	695a      	ldr	r2, [r3, #20]
 80069de:	88fb      	ldrh	r3, [r7, #6]
 80069e0:	4013      	ands	r3, r2
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d006      	beq.n	80069f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80069e6:	4a05      	ldr	r2, [pc, #20]	@ (80069fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80069e8:	88fb      	ldrh	r3, [r7, #6]
 80069ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80069ec:	88fb      	ldrh	r3, [r7, #6]
 80069ee:	4618      	mov	r0, r3
 80069f0:	f000 f806 	bl	8006a00 <HAL_GPIO_EXTI_Callback>
  }
}
 80069f4:	bf00      	nop
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	40010400 	.word	0x40010400

08006a00 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	4603      	mov	r3, r0
 8006a08:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006a0a:	bf00      	nop
 8006a0c:	370c      	adds	r7, #12
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
	...

08006a18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d141      	bne.n	8006aaa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006a26:	4b4b      	ldr	r3, [pc, #300]	@ (8006b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006a2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a32:	d131      	bne.n	8006a98 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006a34:	4b47      	ldr	r3, [pc, #284]	@ (8006b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a3a:	4a46      	ldr	r2, [pc, #280]	@ (8006b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006a44:	4b43      	ldr	r3, [pc, #268]	@ (8006b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006a4c:	4a41      	ldr	r2, [pc, #260]	@ (8006b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006a52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006a54:	4b40      	ldr	r3, [pc, #256]	@ (8006b58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2232      	movs	r2, #50	@ 0x32
 8006a5a:	fb02 f303 	mul.w	r3, r2, r3
 8006a5e:	4a3f      	ldr	r2, [pc, #252]	@ (8006b5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006a60:	fba2 2303 	umull	r2, r3, r2, r3
 8006a64:	0c9b      	lsrs	r3, r3, #18
 8006a66:	3301      	adds	r3, #1
 8006a68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a6a:	e002      	b.n	8006a72 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a72:	4b38      	ldr	r3, [pc, #224]	@ (8006b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a7e:	d102      	bne.n	8006a86 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1f2      	bne.n	8006a6c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006a86:	4b33      	ldr	r3, [pc, #204]	@ (8006b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a92:	d158      	bne.n	8006b46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e057      	b.n	8006b48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006a98:	4b2e      	ldr	r3, [pc, #184]	@ (8006b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a9e:	4a2d      	ldr	r2, [pc, #180]	@ (8006b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006aa0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006aa4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006aa8:	e04d      	b.n	8006b46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ab0:	d141      	bne.n	8006b36 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006ab2:	4b28      	ldr	r3, [pc, #160]	@ (8006b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006aba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006abe:	d131      	bne.n	8006b24 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ac0:	4b24      	ldr	r3, [pc, #144]	@ (8006b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ac6:	4a23      	ldr	r2, [pc, #140]	@ (8006b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ac8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006acc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ad0:	4b20      	ldr	r3, [pc, #128]	@ (8006b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006ad8:	4a1e      	ldr	r2, [pc, #120]	@ (8006b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ada:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006ade:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8006b58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2232      	movs	r2, #50	@ 0x32
 8006ae6:	fb02 f303 	mul.w	r3, r2, r3
 8006aea:	4a1c      	ldr	r2, [pc, #112]	@ (8006b5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006aec:	fba2 2303 	umull	r2, r3, r2, r3
 8006af0:	0c9b      	lsrs	r3, r3, #18
 8006af2:	3301      	adds	r3, #1
 8006af4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006af6:	e002      	b.n	8006afe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	3b01      	subs	r3, #1
 8006afc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006afe:	4b15      	ldr	r3, [pc, #84]	@ (8006b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b00:	695b      	ldr	r3, [r3, #20]
 8006b02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b0a:	d102      	bne.n	8006b12 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1f2      	bne.n	8006af8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006b12:	4b10      	ldr	r3, [pc, #64]	@ (8006b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b1e:	d112      	bne.n	8006b46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006b20:	2303      	movs	r3, #3
 8006b22:	e011      	b.n	8006b48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006b24:	4b0b      	ldr	r3, [pc, #44]	@ (8006b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8006b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006b34:	e007      	b.n	8006b46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006b36:	4b07      	ldr	r3, [pc, #28]	@ (8006b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006b3e:	4a05      	ldr	r2, [pc, #20]	@ (8006b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b40:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006b44:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3714      	adds	r7, #20
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr
 8006b54:	40007000 	.word	0x40007000
 8006b58:	20000208 	.word	0x20000208
 8006b5c:	431bde83 	.word	0x431bde83

08006b60 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006b60:	b480      	push	{r7}
 8006b62:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006b64:	4b05      	ldr	r3, [pc, #20]	@ (8006b7c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	4a04      	ldr	r2, [pc, #16]	@ (8006b7c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006b6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006b6e:	6093      	str	r3, [r2, #8]
}
 8006b70:	bf00      	nop
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	40007000 	.word	0x40007000

08006b80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b088      	sub	sp, #32
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e2fe      	b.n	8007190 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d075      	beq.n	8006c8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b9e:	4b97      	ldr	r3, [pc, #604]	@ (8006dfc <HAL_RCC_OscConfig+0x27c>)
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	f003 030c 	and.w	r3, r3, #12
 8006ba6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ba8:	4b94      	ldr	r3, [pc, #592]	@ (8006dfc <HAL_RCC_OscConfig+0x27c>)
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	f003 0303 	and.w	r3, r3, #3
 8006bb0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	2b0c      	cmp	r3, #12
 8006bb6:	d102      	bne.n	8006bbe <HAL_RCC_OscConfig+0x3e>
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	2b03      	cmp	r3, #3
 8006bbc:	d002      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x44>
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	2b08      	cmp	r3, #8
 8006bc2:	d10b      	bne.n	8006bdc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bc4:	4b8d      	ldr	r3, [pc, #564]	@ (8006dfc <HAL_RCC_OscConfig+0x27c>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d05b      	beq.n	8006c88 <HAL_RCC_OscConfig+0x108>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d157      	bne.n	8006c88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e2d9      	b.n	8007190 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006be4:	d106      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x74>
 8006be6:	4b85      	ldr	r3, [pc, #532]	@ (8006dfc <HAL_RCC_OscConfig+0x27c>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a84      	ldr	r2, [pc, #528]	@ (8006dfc <HAL_RCC_OscConfig+0x27c>)
 8006bec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bf0:	6013      	str	r3, [r2, #0]
 8006bf2:	e01d      	b.n	8006c30 <HAL_RCC_OscConfig+0xb0>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006bfc:	d10c      	bne.n	8006c18 <HAL_RCC_OscConfig+0x98>
 8006bfe:	4b7f      	ldr	r3, [pc, #508]	@ (8006dfc <HAL_RCC_OscConfig+0x27c>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a7e      	ldr	r2, [pc, #504]	@ (8006dfc <HAL_RCC_OscConfig+0x27c>)
 8006c04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c08:	6013      	str	r3, [r2, #0]
 8006c0a:	4b7c      	ldr	r3, [pc, #496]	@ (8006dfc <HAL_RCC_OscConfig+0x27c>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a7b      	ldr	r2, [pc, #492]	@ (8006dfc <HAL_RCC_OscConfig+0x27c>)
 8006c10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c14:	6013      	str	r3, [r2, #0]
 8006c16:	e00b      	b.n	8006c30 <HAL_RCC_OscConfig+0xb0>
 8006c18:	4b78      	ldr	r3, [pc, #480]	@ (8006dfc <HAL_RCC_OscConfig+0x27c>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a77      	ldr	r2, [pc, #476]	@ (8006dfc <HAL_RCC_OscConfig+0x27c>)
 8006c1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c22:	6013      	str	r3, [r2, #0]
 8006c24:	4b75      	ldr	r3, [pc, #468]	@ (8006dfc <HAL_RCC_OscConfig+0x27c>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a74      	ldr	r2, [pc, #464]	@ (8006dfc <HAL_RCC_OscConfig+0x27c>)
 8006c2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d013      	beq.n	8006c60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c38:	f7fd ffca 	bl	8004bd0 <HAL_GetTick>
 8006c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c3e:	e008      	b.n	8006c52 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c40:	f7fd ffc6 	bl	8004bd0 <HAL_GetTick>
 8006c44:	4602      	mov	r2, r0
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	2b64      	cmp	r3, #100	@ 0x64
 8006c4c:	d901      	bls.n	8006c52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e29e      	b.n	8007190 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c52:	4b6a      	ldr	r3, [pc, #424]	@ (8006dfc <HAL_RCC_OscConfig+0x27c>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d0f0      	beq.n	8006c40 <HAL_RCC_OscConfig+0xc0>
 8006c5e:	e014      	b.n	8006c8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c60:	f7fd ffb6 	bl	8004bd0 <HAL_GetTick>
 8006c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006c66:	e008      	b.n	8006c7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c68:	f7fd ffb2 	bl	8004bd0 <HAL_GetTick>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	2b64      	cmp	r3, #100	@ 0x64
 8006c74:	d901      	bls.n	8006c7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e28a      	b.n	8007190 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006c7a:	4b60      	ldr	r3, [pc, #384]	@ (8006dfc <HAL_RCC_OscConfig+0x27c>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1f0      	bne.n	8006c68 <HAL_RCC_OscConfig+0xe8>
 8006c86:	e000      	b.n	8006c8a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0302 	and.w	r3, r3, #2
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d075      	beq.n	8006d82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c96:	4b59      	ldr	r3, [pc, #356]	@ (8006dfc <HAL_RCC_OscConfig+0x27c>)
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f003 030c 	and.w	r3, r3, #12
 8006c9e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ca0:	4b56      	ldr	r3, [pc, #344]	@ (8006dfc <HAL_RCC_OscConfig+0x27c>)
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	f003 0303 	and.w	r3, r3, #3
 8006ca8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	2b0c      	cmp	r3, #12
 8006cae:	d102      	bne.n	8006cb6 <HAL_RCC_OscConfig+0x136>
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d002      	beq.n	8006cbc <HAL_RCC_OscConfig+0x13c>
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	2b04      	cmp	r3, #4
 8006cba:	d11f      	bne.n	8006cfc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cbc:	4b4f      	ldr	r3, [pc, #316]	@ (8006dfc <HAL_RCC_OscConfig+0x27c>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d005      	beq.n	8006cd4 <HAL_RCC_OscConfig+0x154>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d101      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e25d      	b.n	8007190 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cd4:	4b49      	ldr	r3, [pc, #292]	@ (8006dfc <HAL_RCC_OscConfig+0x27c>)
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	061b      	lsls	r3, r3, #24
 8006ce2:	4946      	ldr	r1, [pc, #280]	@ (8006dfc <HAL_RCC_OscConfig+0x27c>)
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006ce8:	4b45      	ldr	r3, [pc, #276]	@ (8006e00 <HAL_RCC_OscConfig+0x280>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7fd ff23 	bl	8004b38 <HAL_InitTick>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d043      	beq.n	8006d80 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e249      	b.n	8007190 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d023      	beq.n	8006d4c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d04:	4b3d      	ldr	r3, [pc, #244]	@ (8006dfc <HAL_RCC_OscConfig+0x27c>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a3c      	ldr	r2, [pc, #240]	@ (8006dfc <HAL_RCC_OscConfig+0x27c>)
 8006d0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d10:	f7fd ff5e 	bl	8004bd0 <HAL_GetTick>
 8006d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d16:	e008      	b.n	8006d2a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d18:	f7fd ff5a 	bl	8004bd0 <HAL_GetTick>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d901      	bls.n	8006d2a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e232      	b.n	8007190 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d2a:	4b34      	ldr	r3, [pc, #208]	@ (8006dfc <HAL_RCC_OscConfig+0x27c>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d0f0      	beq.n	8006d18 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d36:	4b31      	ldr	r3, [pc, #196]	@ (8006dfc <HAL_RCC_OscConfig+0x27c>)
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	061b      	lsls	r3, r3, #24
 8006d44:	492d      	ldr	r1, [pc, #180]	@ (8006dfc <HAL_RCC_OscConfig+0x27c>)
 8006d46:	4313      	orrs	r3, r2
 8006d48:	604b      	str	r3, [r1, #4]
 8006d4a:	e01a      	b.n	8006d82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d4c:	4b2b      	ldr	r3, [pc, #172]	@ (8006dfc <HAL_RCC_OscConfig+0x27c>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a2a      	ldr	r2, [pc, #168]	@ (8006dfc <HAL_RCC_OscConfig+0x27c>)
 8006d52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d58:	f7fd ff3a 	bl	8004bd0 <HAL_GetTick>
 8006d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006d5e:	e008      	b.n	8006d72 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d60:	f7fd ff36 	bl	8004bd0 <HAL_GetTick>
 8006d64:	4602      	mov	r2, r0
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d901      	bls.n	8006d72 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e20e      	b.n	8007190 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006d72:	4b22      	ldr	r3, [pc, #136]	@ (8006dfc <HAL_RCC_OscConfig+0x27c>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1f0      	bne.n	8006d60 <HAL_RCC_OscConfig+0x1e0>
 8006d7e:	e000      	b.n	8006d82 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d80:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 0308 	and.w	r3, r3, #8
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d041      	beq.n	8006e12 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d01c      	beq.n	8006dd0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d96:	4b19      	ldr	r3, [pc, #100]	@ (8006dfc <HAL_RCC_OscConfig+0x27c>)
 8006d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d9c:	4a17      	ldr	r2, [pc, #92]	@ (8006dfc <HAL_RCC_OscConfig+0x27c>)
 8006d9e:	f043 0301 	orr.w	r3, r3, #1
 8006da2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006da6:	f7fd ff13 	bl	8004bd0 <HAL_GetTick>
 8006daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006dac:	e008      	b.n	8006dc0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006dae:	f7fd ff0f 	bl	8004bd0 <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d901      	bls.n	8006dc0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e1e7      	b.n	8007190 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8006dfc <HAL_RCC_OscConfig+0x27c>)
 8006dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006dc6:	f003 0302 	and.w	r3, r3, #2
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d0ef      	beq.n	8006dae <HAL_RCC_OscConfig+0x22e>
 8006dce:	e020      	b.n	8006e12 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8006dfc <HAL_RCC_OscConfig+0x27c>)
 8006dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006dd6:	4a09      	ldr	r2, [pc, #36]	@ (8006dfc <HAL_RCC_OscConfig+0x27c>)
 8006dd8:	f023 0301 	bic.w	r3, r3, #1
 8006ddc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006de0:	f7fd fef6 	bl	8004bd0 <HAL_GetTick>
 8006de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006de6:	e00d      	b.n	8006e04 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006de8:	f7fd fef2 	bl	8004bd0 <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d906      	bls.n	8006e04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e1ca      	b.n	8007190 <HAL_RCC_OscConfig+0x610>
 8006dfa:	bf00      	nop
 8006dfc:	40021000 	.word	0x40021000
 8006e00:	2000020c 	.word	0x2000020c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006e04:	4b8c      	ldr	r3, [pc, #560]	@ (8007038 <HAL_RCC_OscConfig+0x4b8>)
 8006e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e0a:	f003 0302 	and.w	r3, r3, #2
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1ea      	bne.n	8006de8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 0304 	and.w	r3, r3, #4
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f000 80a6 	beq.w	8006f6c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e20:	2300      	movs	r3, #0
 8006e22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006e24:	4b84      	ldr	r3, [pc, #528]	@ (8007038 <HAL_RCC_OscConfig+0x4b8>)
 8006e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d101      	bne.n	8006e34 <HAL_RCC_OscConfig+0x2b4>
 8006e30:	2301      	movs	r3, #1
 8006e32:	e000      	b.n	8006e36 <HAL_RCC_OscConfig+0x2b6>
 8006e34:	2300      	movs	r3, #0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00d      	beq.n	8006e56 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e3a:	4b7f      	ldr	r3, [pc, #508]	@ (8007038 <HAL_RCC_OscConfig+0x4b8>)
 8006e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e3e:	4a7e      	ldr	r2, [pc, #504]	@ (8007038 <HAL_RCC_OscConfig+0x4b8>)
 8006e40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e44:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e46:	4b7c      	ldr	r3, [pc, #496]	@ (8007038 <HAL_RCC_OscConfig+0x4b8>)
 8006e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e4e:	60fb      	str	r3, [r7, #12]
 8006e50:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006e52:	2301      	movs	r3, #1
 8006e54:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e56:	4b79      	ldr	r3, [pc, #484]	@ (800703c <HAL_RCC_OscConfig+0x4bc>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d118      	bne.n	8006e94 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e62:	4b76      	ldr	r3, [pc, #472]	@ (800703c <HAL_RCC_OscConfig+0x4bc>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a75      	ldr	r2, [pc, #468]	@ (800703c <HAL_RCC_OscConfig+0x4bc>)
 8006e68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e6e:	f7fd feaf 	bl	8004bd0 <HAL_GetTick>
 8006e72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e74:	e008      	b.n	8006e88 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e76:	f7fd feab 	bl	8004bd0 <HAL_GetTick>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d901      	bls.n	8006e88 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e183      	b.n	8007190 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e88:	4b6c      	ldr	r3, [pc, #432]	@ (800703c <HAL_RCC_OscConfig+0x4bc>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d0f0      	beq.n	8006e76 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d108      	bne.n	8006eae <HAL_RCC_OscConfig+0x32e>
 8006e9c:	4b66      	ldr	r3, [pc, #408]	@ (8007038 <HAL_RCC_OscConfig+0x4b8>)
 8006e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ea2:	4a65      	ldr	r2, [pc, #404]	@ (8007038 <HAL_RCC_OscConfig+0x4b8>)
 8006ea4:	f043 0301 	orr.w	r3, r3, #1
 8006ea8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006eac:	e024      	b.n	8006ef8 <HAL_RCC_OscConfig+0x378>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	2b05      	cmp	r3, #5
 8006eb4:	d110      	bne.n	8006ed8 <HAL_RCC_OscConfig+0x358>
 8006eb6:	4b60      	ldr	r3, [pc, #384]	@ (8007038 <HAL_RCC_OscConfig+0x4b8>)
 8006eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ebc:	4a5e      	ldr	r2, [pc, #376]	@ (8007038 <HAL_RCC_OscConfig+0x4b8>)
 8006ebe:	f043 0304 	orr.w	r3, r3, #4
 8006ec2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006ec6:	4b5c      	ldr	r3, [pc, #368]	@ (8007038 <HAL_RCC_OscConfig+0x4b8>)
 8006ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ecc:	4a5a      	ldr	r2, [pc, #360]	@ (8007038 <HAL_RCC_OscConfig+0x4b8>)
 8006ece:	f043 0301 	orr.w	r3, r3, #1
 8006ed2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006ed6:	e00f      	b.n	8006ef8 <HAL_RCC_OscConfig+0x378>
 8006ed8:	4b57      	ldr	r3, [pc, #348]	@ (8007038 <HAL_RCC_OscConfig+0x4b8>)
 8006eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ede:	4a56      	ldr	r2, [pc, #344]	@ (8007038 <HAL_RCC_OscConfig+0x4b8>)
 8006ee0:	f023 0301 	bic.w	r3, r3, #1
 8006ee4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006ee8:	4b53      	ldr	r3, [pc, #332]	@ (8007038 <HAL_RCC_OscConfig+0x4b8>)
 8006eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006eee:	4a52      	ldr	r2, [pc, #328]	@ (8007038 <HAL_RCC_OscConfig+0x4b8>)
 8006ef0:	f023 0304 	bic.w	r3, r3, #4
 8006ef4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d016      	beq.n	8006f2e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f00:	f7fd fe66 	bl	8004bd0 <HAL_GetTick>
 8006f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f06:	e00a      	b.n	8006f1e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f08:	f7fd fe62 	bl	8004bd0 <HAL_GetTick>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d901      	bls.n	8006f1e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e138      	b.n	8007190 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f1e:	4b46      	ldr	r3, [pc, #280]	@ (8007038 <HAL_RCC_OscConfig+0x4b8>)
 8006f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f24:	f003 0302 	and.w	r3, r3, #2
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d0ed      	beq.n	8006f08 <HAL_RCC_OscConfig+0x388>
 8006f2c:	e015      	b.n	8006f5a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f2e:	f7fd fe4f 	bl	8004bd0 <HAL_GetTick>
 8006f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006f34:	e00a      	b.n	8006f4c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f36:	f7fd fe4b 	bl	8004bd0 <HAL_GetTick>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d901      	bls.n	8006f4c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e121      	b.n	8007190 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006f4c:	4b3a      	ldr	r3, [pc, #232]	@ (8007038 <HAL_RCC_OscConfig+0x4b8>)
 8006f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f52:	f003 0302 	and.w	r3, r3, #2
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1ed      	bne.n	8006f36 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006f5a:	7ffb      	ldrb	r3, [r7, #31]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d105      	bne.n	8006f6c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f60:	4b35      	ldr	r3, [pc, #212]	@ (8007038 <HAL_RCC_OscConfig+0x4b8>)
 8006f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f64:	4a34      	ldr	r2, [pc, #208]	@ (8007038 <HAL_RCC_OscConfig+0x4b8>)
 8006f66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f6a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f003 0320 	and.w	r3, r3, #32
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d03c      	beq.n	8006ff2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d01c      	beq.n	8006fba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006f80:	4b2d      	ldr	r3, [pc, #180]	@ (8007038 <HAL_RCC_OscConfig+0x4b8>)
 8006f82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f86:	4a2c      	ldr	r2, [pc, #176]	@ (8007038 <HAL_RCC_OscConfig+0x4b8>)
 8006f88:	f043 0301 	orr.w	r3, r3, #1
 8006f8c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f90:	f7fd fe1e 	bl	8004bd0 <HAL_GetTick>
 8006f94:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006f96:	e008      	b.n	8006faa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f98:	f7fd fe1a 	bl	8004bd0 <HAL_GetTick>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	d901      	bls.n	8006faa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e0f2      	b.n	8007190 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006faa:	4b23      	ldr	r3, [pc, #140]	@ (8007038 <HAL_RCC_OscConfig+0x4b8>)
 8006fac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006fb0:	f003 0302 	and.w	r3, r3, #2
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d0ef      	beq.n	8006f98 <HAL_RCC_OscConfig+0x418>
 8006fb8:	e01b      	b.n	8006ff2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006fba:	4b1f      	ldr	r3, [pc, #124]	@ (8007038 <HAL_RCC_OscConfig+0x4b8>)
 8006fbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006fc0:	4a1d      	ldr	r2, [pc, #116]	@ (8007038 <HAL_RCC_OscConfig+0x4b8>)
 8006fc2:	f023 0301 	bic.w	r3, r3, #1
 8006fc6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fca:	f7fd fe01 	bl	8004bd0 <HAL_GetTick>
 8006fce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006fd0:	e008      	b.n	8006fe4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006fd2:	f7fd fdfd 	bl	8004bd0 <HAL_GetTick>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d901      	bls.n	8006fe4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006fe0:	2303      	movs	r3, #3
 8006fe2:	e0d5      	b.n	8007190 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006fe4:	4b14      	ldr	r3, [pc, #80]	@ (8007038 <HAL_RCC_OscConfig+0x4b8>)
 8006fe6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006fea:	f003 0302 	and.w	r3, r3, #2
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1ef      	bne.n	8006fd2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	69db      	ldr	r3, [r3, #28]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	f000 80c9 	beq.w	800718e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ffc:	4b0e      	ldr	r3, [pc, #56]	@ (8007038 <HAL_RCC_OscConfig+0x4b8>)
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	f003 030c 	and.w	r3, r3, #12
 8007004:	2b0c      	cmp	r3, #12
 8007006:	f000 8083 	beq.w	8007110 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	69db      	ldr	r3, [r3, #28]
 800700e:	2b02      	cmp	r3, #2
 8007010:	d15e      	bne.n	80070d0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007012:	4b09      	ldr	r3, [pc, #36]	@ (8007038 <HAL_RCC_OscConfig+0x4b8>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a08      	ldr	r2, [pc, #32]	@ (8007038 <HAL_RCC_OscConfig+0x4b8>)
 8007018:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800701c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800701e:	f7fd fdd7 	bl	8004bd0 <HAL_GetTick>
 8007022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007024:	e00c      	b.n	8007040 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007026:	f7fd fdd3 	bl	8004bd0 <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	2b02      	cmp	r3, #2
 8007032:	d905      	bls.n	8007040 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	e0ab      	b.n	8007190 <HAL_RCC_OscConfig+0x610>
 8007038:	40021000 	.word	0x40021000
 800703c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007040:	4b55      	ldr	r3, [pc, #340]	@ (8007198 <HAL_RCC_OscConfig+0x618>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1ec      	bne.n	8007026 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800704c:	4b52      	ldr	r3, [pc, #328]	@ (8007198 <HAL_RCC_OscConfig+0x618>)
 800704e:	68da      	ldr	r2, [r3, #12]
 8007050:	4b52      	ldr	r3, [pc, #328]	@ (800719c <HAL_RCC_OscConfig+0x61c>)
 8007052:	4013      	ands	r3, r2
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	6a11      	ldr	r1, [r2, #32]
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800705c:	3a01      	subs	r2, #1
 800705e:	0112      	lsls	r2, r2, #4
 8007060:	4311      	orrs	r1, r2
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007066:	0212      	lsls	r2, r2, #8
 8007068:	4311      	orrs	r1, r2
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800706e:	0852      	lsrs	r2, r2, #1
 8007070:	3a01      	subs	r2, #1
 8007072:	0552      	lsls	r2, r2, #21
 8007074:	4311      	orrs	r1, r2
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800707a:	0852      	lsrs	r2, r2, #1
 800707c:	3a01      	subs	r2, #1
 800707e:	0652      	lsls	r2, r2, #25
 8007080:	4311      	orrs	r1, r2
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007086:	06d2      	lsls	r2, r2, #27
 8007088:	430a      	orrs	r2, r1
 800708a:	4943      	ldr	r1, [pc, #268]	@ (8007198 <HAL_RCC_OscConfig+0x618>)
 800708c:	4313      	orrs	r3, r2
 800708e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007090:	4b41      	ldr	r3, [pc, #260]	@ (8007198 <HAL_RCC_OscConfig+0x618>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a40      	ldr	r2, [pc, #256]	@ (8007198 <HAL_RCC_OscConfig+0x618>)
 8007096:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800709a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800709c:	4b3e      	ldr	r3, [pc, #248]	@ (8007198 <HAL_RCC_OscConfig+0x618>)
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	4a3d      	ldr	r2, [pc, #244]	@ (8007198 <HAL_RCC_OscConfig+0x618>)
 80070a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80070a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070a8:	f7fd fd92 	bl	8004bd0 <HAL_GetTick>
 80070ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070ae:	e008      	b.n	80070c2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070b0:	f7fd fd8e 	bl	8004bd0 <HAL_GetTick>
 80070b4:	4602      	mov	r2, r0
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d901      	bls.n	80070c2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e066      	b.n	8007190 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070c2:	4b35      	ldr	r3, [pc, #212]	@ (8007198 <HAL_RCC_OscConfig+0x618>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d0f0      	beq.n	80070b0 <HAL_RCC_OscConfig+0x530>
 80070ce:	e05e      	b.n	800718e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070d0:	4b31      	ldr	r3, [pc, #196]	@ (8007198 <HAL_RCC_OscConfig+0x618>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a30      	ldr	r2, [pc, #192]	@ (8007198 <HAL_RCC_OscConfig+0x618>)
 80070d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80070da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070dc:	f7fd fd78 	bl	8004bd0 <HAL_GetTick>
 80070e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070e2:	e008      	b.n	80070f6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070e4:	f7fd fd74 	bl	8004bd0 <HAL_GetTick>
 80070e8:	4602      	mov	r2, r0
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d901      	bls.n	80070f6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e04c      	b.n	8007190 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070f6:	4b28      	ldr	r3, [pc, #160]	@ (8007198 <HAL_RCC_OscConfig+0x618>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1f0      	bne.n	80070e4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007102:	4b25      	ldr	r3, [pc, #148]	@ (8007198 <HAL_RCC_OscConfig+0x618>)
 8007104:	68da      	ldr	r2, [r3, #12]
 8007106:	4924      	ldr	r1, [pc, #144]	@ (8007198 <HAL_RCC_OscConfig+0x618>)
 8007108:	4b25      	ldr	r3, [pc, #148]	@ (80071a0 <HAL_RCC_OscConfig+0x620>)
 800710a:	4013      	ands	r3, r2
 800710c:	60cb      	str	r3, [r1, #12]
 800710e:	e03e      	b.n	800718e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	69db      	ldr	r3, [r3, #28]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d101      	bne.n	800711c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e039      	b.n	8007190 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800711c:	4b1e      	ldr	r3, [pc, #120]	@ (8007198 <HAL_RCC_OscConfig+0x618>)
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	f003 0203 	and.w	r2, r3, #3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a1b      	ldr	r3, [r3, #32]
 800712c:	429a      	cmp	r2, r3
 800712e:	d12c      	bne.n	800718a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800713a:	3b01      	subs	r3, #1
 800713c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800713e:	429a      	cmp	r2, r3
 8007140:	d123      	bne.n	800718a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800714c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800714e:	429a      	cmp	r2, r3
 8007150:	d11b      	bne.n	800718a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800715c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800715e:	429a      	cmp	r2, r3
 8007160:	d113      	bne.n	800718a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800716c:	085b      	lsrs	r3, r3, #1
 800716e:	3b01      	subs	r3, #1
 8007170:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007172:	429a      	cmp	r2, r3
 8007174:	d109      	bne.n	800718a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007180:	085b      	lsrs	r3, r3, #1
 8007182:	3b01      	subs	r3, #1
 8007184:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007186:	429a      	cmp	r2, r3
 8007188:	d001      	beq.n	800718e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e000      	b.n	8007190 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3720      	adds	r7, #32
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	40021000 	.word	0x40021000
 800719c:	019f800c 	.word	0x019f800c
 80071a0:	feeefffc 	.word	0xfeeefffc

080071a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80071ae:	2300      	movs	r3, #0
 80071b0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d101      	bne.n	80071bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e11e      	b.n	80073fa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80071bc:	4b91      	ldr	r3, [pc, #580]	@ (8007404 <HAL_RCC_ClockConfig+0x260>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 030f 	and.w	r3, r3, #15
 80071c4:	683a      	ldr	r2, [r7, #0]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d910      	bls.n	80071ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071ca:	4b8e      	ldr	r3, [pc, #568]	@ (8007404 <HAL_RCC_ClockConfig+0x260>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f023 020f 	bic.w	r2, r3, #15
 80071d2:	498c      	ldr	r1, [pc, #560]	@ (8007404 <HAL_RCC_ClockConfig+0x260>)
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071da:	4b8a      	ldr	r3, [pc, #552]	@ (8007404 <HAL_RCC_ClockConfig+0x260>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 030f 	and.w	r3, r3, #15
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d001      	beq.n	80071ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e106      	b.n	80073fa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0301 	and.w	r3, r3, #1
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d073      	beq.n	80072e0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	2b03      	cmp	r3, #3
 80071fe:	d129      	bne.n	8007254 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007200:	4b81      	ldr	r3, [pc, #516]	@ (8007408 <HAL_RCC_ClockConfig+0x264>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007208:	2b00      	cmp	r3, #0
 800720a:	d101      	bne.n	8007210 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	e0f4      	b.n	80073fa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007210:	f000 f99e 	bl	8007550 <RCC_GetSysClockFreqFromPLLSource>
 8007214:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	4a7c      	ldr	r2, [pc, #496]	@ (800740c <HAL_RCC_ClockConfig+0x268>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d93f      	bls.n	800729e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800721e:	4b7a      	ldr	r3, [pc, #488]	@ (8007408 <HAL_RCC_ClockConfig+0x264>)
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d009      	beq.n	800723e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007232:	2b00      	cmp	r3, #0
 8007234:	d033      	beq.n	800729e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800723a:	2b00      	cmp	r3, #0
 800723c:	d12f      	bne.n	800729e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800723e:	4b72      	ldr	r3, [pc, #456]	@ (8007408 <HAL_RCC_ClockConfig+0x264>)
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007246:	4a70      	ldr	r2, [pc, #448]	@ (8007408 <HAL_RCC_ClockConfig+0x264>)
 8007248:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800724c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800724e:	2380      	movs	r3, #128	@ 0x80
 8007250:	617b      	str	r3, [r7, #20]
 8007252:	e024      	b.n	800729e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	2b02      	cmp	r3, #2
 800725a:	d107      	bne.n	800726c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800725c:	4b6a      	ldr	r3, [pc, #424]	@ (8007408 <HAL_RCC_ClockConfig+0x264>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007264:	2b00      	cmp	r3, #0
 8007266:	d109      	bne.n	800727c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	e0c6      	b.n	80073fa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800726c:	4b66      	ldr	r3, [pc, #408]	@ (8007408 <HAL_RCC_ClockConfig+0x264>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007274:	2b00      	cmp	r3, #0
 8007276:	d101      	bne.n	800727c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	e0be      	b.n	80073fa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800727c:	f000 f8ce 	bl	800741c <HAL_RCC_GetSysClockFreq>
 8007280:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	4a61      	ldr	r2, [pc, #388]	@ (800740c <HAL_RCC_ClockConfig+0x268>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d909      	bls.n	800729e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800728a:	4b5f      	ldr	r3, [pc, #380]	@ (8007408 <HAL_RCC_ClockConfig+0x264>)
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007292:	4a5d      	ldr	r2, [pc, #372]	@ (8007408 <HAL_RCC_ClockConfig+0x264>)
 8007294:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007298:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800729a:	2380      	movs	r3, #128	@ 0x80
 800729c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800729e:	4b5a      	ldr	r3, [pc, #360]	@ (8007408 <HAL_RCC_ClockConfig+0x264>)
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	f023 0203 	bic.w	r2, r3, #3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	4957      	ldr	r1, [pc, #348]	@ (8007408 <HAL_RCC_ClockConfig+0x264>)
 80072ac:	4313      	orrs	r3, r2
 80072ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072b0:	f7fd fc8e 	bl	8004bd0 <HAL_GetTick>
 80072b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072b6:	e00a      	b.n	80072ce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072b8:	f7fd fc8a 	bl	8004bd0 <HAL_GetTick>
 80072bc:	4602      	mov	r2, r0
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d901      	bls.n	80072ce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e095      	b.n	80073fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072ce:	4b4e      	ldr	r3, [pc, #312]	@ (8007408 <HAL_RCC_ClockConfig+0x264>)
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	f003 020c 	and.w	r2, r3, #12
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	429a      	cmp	r2, r3
 80072de:	d1eb      	bne.n	80072b8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 0302 	and.w	r3, r3, #2
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d023      	beq.n	8007334 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 0304 	and.w	r3, r3, #4
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d005      	beq.n	8007304 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80072f8:	4b43      	ldr	r3, [pc, #268]	@ (8007408 <HAL_RCC_ClockConfig+0x264>)
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	4a42      	ldr	r2, [pc, #264]	@ (8007408 <HAL_RCC_ClockConfig+0x264>)
 80072fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007302:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0308 	and.w	r3, r3, #8
 800730c:	2b00      	cmp	r3, #0
 800730e:	d007      	beq.n	8007320 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007310:	4b3d      	ldr	r3, [pc, #244]	@ (8007408 <HAL_RCC_ClockConfig+0x264>)
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007318:	4a3b      	ldr	r2, [pc, #236]	@ (8007408 <HAL_RCC_ClockConfig+0x264>)
 800731a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800731e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007320:	4b39      	ldr	r3, [pc, #228]	@ (8007408 <HAL_RCC_ClockConfig+0x264>)
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	4936      	ldr	r1, [pc, #216]	@ (8007408 <HAL_RCC_ClockConfig+0x264>)
 800732e:	4313      	orrs	r3, r2
 8007330:	608b      	str	r3, [r1, #8]
 8007332:	e008      	b.n	8007346 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	2b80      	cmp	r3, #128	@ 0x80
 8007338:	d105      	bne.n	8007346 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800733a:	4b33      	ldr	r3, [pc, #204]	@ (8007408 <HAL_RCC_ClockConfig+0x264>)
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	4a32      	ldr	r2, [pc, #200]	@ (8007408 <HAL_RCC_ClockConfig+0x264>)
 8007340:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007344:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007346:	4b2f      	ldr	r3, [pc, #188]	@ (8007404 <HAL_RCC_ClockConfig+0x260>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 030f 	and.w	r3, r3, #15
 800734e:	683a      	ldr	r2, [r7, #0]
 8007350:	429a      	cmp	r2, r3
 8007352:	d21d      	bcs.n	8007390 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007354:	4b2b      	ldr	r3, [pc, #172]	@ (8007404 <HAL_RCC_ClockConfig+0x260>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f023 020f 	bic.w	r2, r3, #15
 800735c:	4929      	ldr	r1, [pc, #164]	@ (8007404 <HAL_RCC_ClockConfig+0x260>)
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	4313      	orrs	r3, r2
 8007362:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007364:	f7fd fc34 	bl	8004bd0 <HAL_GetTick>
 8007368:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800736a:	e00a      	b.n	8007382 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800736c:	f7fd fc30 	bl	8004bd0 <HAL_GetTick>
 8007370:	4602      	mov	r2, r0
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	1ad3      	subs	r3, r2, r3
 8007376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800737a:	4293      	cmp	r3, r2
 800737c:	d901      	bls.n	8007382 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	e03b      	b.n	80073fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007382:	4b20      	ldr	r3, [pc, #128]	@ (8007404 <HAL_RCC_ClockConfig+0x260>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 030f 	and.w	r3, r3, #15
 800738a:	683a      	ldr	r2, [r7, #0]
 800738c:	429a      	cmp	r2, r3
 800738e:	d1ed      	bne.n	800736c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 0304 	and.w	r3, r3, #4
 8007398:	2b00      	cmp	r3, #0
 800739a:	d008      	beq.n	80073ae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800739c:	4b1a      	ldr	r3, [pc, #104]	@ (8007408 <HAL_RCC_ClockConfig+0x264>)
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	4917      	ldr	r1, [pc, #92]	@ (8007408 <HAL_RCC_ClockConfig+0x264>)
 80073aa:	4313      	orrs	r3, r2
 80073ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 0308 	and.w	r3, r3, #8
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d009      	beq.n	80073ce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80073ba:	4b13      	ldr	r3, [pc, #76]	@ (8007408 <HAL_RCC_ClockConfig+0x264>)
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	00db      	lsls	r3, r3, #3
 80073c8:	490f      	ldr	r1, [pc, #60]	@ (8007408 <HAL_RCC_ClockConfig+0x264>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80073ce:	f000 f825 	bl	800741c <HAL_RCC_GetSysClockFreq>
 80073d2:	4602      	mov	r2, r0
 80073d4:	4b0c      	ldr	r3, [pc, #48]	@ (8007408 <HAL_RCC_ClockConfig+0x264>)
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	091b      	lsrs	r3, r3, #4
 80073da:	f003 030f 	and.w	r3, r3, #15
 80073de:	490c      	ldr	r1, [pc, #48]	@ (8007410 <HAL_RCC_ClockConfig+0x26c>)
 80073e0:	5ccb      	ldrb	r3, [r1, r3]
 80073e2:	f003 031f 	and.w	r3, r3, #31
 80073e6:	fa22 f303 	lsr.w	r3, r2, r3
 80073ea:	4a0a      	ldr	r2, [pc, #40]	@ (8007414 <HAL_RCC_ClockConfig+0x270>)
 80073ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80073ee:	4b0a      	ldr	r3, [pc, #40]	@ (8007418 <HAL_RCC_ClockConfig+0x274>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7fd fba0 	bl	8004b38 <HAL_InitTick>
 80073f8:	4603      	mov	r3, r0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3718      	adds	r7, #24
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	40022000 	.word	0x40022000
 8007408:	40021000 	.word	0x40021000
 800740c:	04c4b400 	.word	0x04c4b400
 8007410:	0800be04 	.word	0x0800be04
 8007414:	20000208 	.word	0x20000208
 8007418:	2000020c 	.word	0x2000020c

0800741c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800741c:	b480      	push	{r7}
 800741e:	b087      	sub	sp, #28
 8007420:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007422:	4b2c      	ldr	r3, [pc, #176]	@ (80074d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	f003 030c 	and.w	r3, r3, #12
 800742a:	2b04      	cmp	r3, #4
 800742c:	d102      	bne.n	8007434 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800742e:	4b2a      	ldr	r3, [pc, #168]	@ (80074d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007430:	613b      	str	r3, [r7, #16]
 8007432:	e047      	b.n	80074c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007434:	4b27      	ldr	r3, [pc, #156]	@ (80074d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	f003 030c 	and.w	r3, r3, #12
 800743c:	2b08      	cmp	r3, #8
 800743e:	d102      	bne.n	8007446 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007440:	4b26      	ldr	r3, [pc, #152]	@ (80074dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8007442:	613b      	str	r3, [r7, #16]
 8007444:	e03e      	b.n	80074c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007446:	4b23      	ldr	r3, [pc, #140]	@ (80074d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	f003 030c 	and.w	r3, r3, #12
 800744e:	2b0c      	cmp	r3, #12
 8007450:	d136      	bne.n	80074c0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007452:	4b20      	ldr	r3, [pc, #128]	@ (80074d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	f003 0303 	and.w	r3, r3, #3
 800745a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800745c:	4b1d      	ldr	r3, [pc, #116]	@ (80074d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	091b      	lsrs	r3, r3, #4
 8007462:	f003 030f 	and.w	r3, r3, #15
 8007466:	3301      	adds	r3, #1
 8007468:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2b03      	cmp	r3, #3
 800746e:	d10c      	bne.n	800748a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007470:	4a1a      	ldr	r2, [pc, #104]	@ (80074dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	fbb2 f3f3 	udiv	r3, r2, r3
 8007478:	4a16      	ldr	r2, [pc, #88]	@ (80074d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800747a:	68d2      	ldr	r2, [r2, #12]
 800747c:	0a12      	lsrs	r2, r2, #8
 800747e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007482:	fb02 f303 	mul.w	r3, r2, r3
 8007486:	617b      	str	r3, [r7, #20]
      break;
 8007488:	e00c      	b.n	80074a4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800748a:	4a13      	ldr	r2, [pc, #76]	@ (80074d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007492:	4a10      	ldr	r2, [pc, #64]	@ (80074d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007494:	68d2      	ldr	r2, [r2, #12]
 8007496:	0a12      	lsrs	r2, r2, #8
 8007498:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800749c:	fb02 f303 	mul.w	r3, r2, r3
 80074a0:	617b      	str	r3, [r7, #20]
      break;
 80074a2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80074a4:	4b0b      	ldr	r3, [pc, #44]	@ (80074d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	0e5b      	lsrs	r3, r3, #25
 80074aa:	f003 0303 	and.w	r3, r3, #3
 80074ae:	3301      	adds	r3, #1
 80074b0:	005b      	lsls	r3, r3, #1
 80074b2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80074b4:	697a      	ldr	r2, [r7, #20]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074bc:	613b      	str	r3, [r7, #16]
 80074be:	e001      	b.n	80074c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80074c0:	2300      	movs	r3, #0
 80074c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80074c4:	693b      	ldr	r3, [r7, #16]
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	371c      	adds	r7, #28
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop
 80074d4:	40021000 	.word	0x40021000
 80074d8:	00f42400 	.word	0x00f42400
 80074dc:	016e3600 	.word	0x016e3600

080074e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074e0:	b480      	push	{r7}
 80074e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80074e4:	4b03      	ldr	r3, [pc, #12]	@ (80074f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80074e6:	681b      	ldr	r3, [r3, #0]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	20000208 	.word	0x20000208

080074f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80074fc:	f7ff fff0 	bl	80074e0 <HAL_RCC_GetHCLKFreq>
 8007500:	4602      	mov	r2, r0
 8007502:	4b06      	ldr	r3, [pc, #24]	@ (800751c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	0a1b      	lsrs	r3, r3, #8
 8007508:	f003 0307 	and.w	r3, r3, #7
 800750c:	4904      	ldr	r1, [pc, #16]	@ (8007520 <HAL_RCC_GetPCLK1Freq+0x28>)
 800750e:	5ccb      	ldrb	r3, [r1, r3]
 8007510:	f003 031f 	and.w	r3, r3, #31
 8007514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007518:	4618      	mov	r0, r3
 800751a:	bd80      	pop	{r7, pc}
 800751c:	40021000 	.word	0x40021000
 8007520:	0800be14 	.word	0x0800be14

08007524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007528:	f7ff ffda 	bl	80074e0 <HAL_RCC_GetHCLKFreq>
 800752c:	4602      	mov	r2, r0
 800752e:	4b06      	ldr	r3, [pc, #24]	@ (8007548 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	0adb      	lsrs	r3, r3, #11
 8007534:	f003 0307 	and.w	r3, r3, #7
 8007538:	4904      	ldr	r1, [pc, #16]	@ (800754c <HAL_RCC_GetPCLK2Freq+0x28>)
 800753a:	5ccb      	ldrb	r3, [r1, r3]
 800753c:	f003 031f 	and.w	r3, r3, #31
 8007540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007544:	4618      	mov	r0, r3
 8007546:	bd80      	pop	{r7, pc}
 8007548:	40021000 	.word	0x40021000
 800754c:	0800be14 	.word	0x0800be14

08007550 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007550:	b480      	push	{r7}
 8007552:	b087      	sub	sp, #28
 8007554:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007556:	4b1e      	ldr	r3, [pc, #120]	@ (80075d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	f003 0303 	and.w	r3, r3, #3
 800755e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007560:	4b1b      	ldr	r3, [pc, #108]	@ (80075d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	091b      	lsrs	r3, r3, #4
 8007566:	f003 030f 	and.w	r3, r3, #15
 800756a:	3301      	adds	r3, #1
 800756c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	2b03      	cmp	r3, #3
 8007572:	d10c      	bne.n	800758e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007574:	4a17      	ldr	r2, [pc, #92]	@ (80075d4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	fbb2 f3f3 	udiv	r3, r2, r3
 800757c:	4a14      	ldr	r2, [pc, #80]	@ (80075d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800757e:	68d2      	ldr	r2, [r2, #12]
 8007580:	0a12      	lsrs	r2, r2, #8
 8007582:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007586:	fb02 f303 	mul.w	r3, r2, r3
 800758a:	617b      	str	r3, [r7, #20]
    break;
 800758c:	e00c      	b.n	80075a8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800758e:	4a12      	ldr	r2, [pc, #72]	@ (80075d8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	fbb2 f3f3 	udiv	r3, r2, r3
 8007596:	4a0e      	ldr	r2, [pc, #56]	@ (80075d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007598:	68d2      	ldr	r2, [r2, #12]
 800759a:	0a12      	lsrs	r2, r2, #8
 800759c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80075a0:	fb02 f303 	mul.w	r3, r2, r3
 80075a4:	617b      	str	r3, [r7, #20]
    break;
 80075a6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80075a8:	4b09      	ldr	r3, [pc, #36]	@ (80075d0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	0e5b      	lsrs	r3, r3, #25
 80075ae:	f003 0303 	and.w	r3, r3, #3
 80075b2:	3301      	adds	r3, #1
 80075b4:	005b      	lsls	r3, r3, #1
 80075b6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80075b8:	697a      	ldr	r2, [r7, #20]
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80075c0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80075c2:	687b      	ldr	r3, [r7, #4]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	371c      	adds	r7, #28
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr
 80075d0:	40021000 	.word	0x40021000
 80075d4:	016e3600 	.word	0x016e3600
 80075d8:	00f42400 	.word	0x00f42400

080075dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b086      	sub	sp, #24
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80075e4:	2300      	movs	r3, #0
 80075e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80075e8:	2300      	movs	r3, #0
 80075ea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f000 8098 	beq.w	800772a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075fa:	2300      	movs	r3, #0
 80075fc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075fe:	4b43      	ldr	r3, [pc, #268]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d10d      	bne.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800760a:	4b40      	ldr	r3, [pc, #256]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800760c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800760e:	4a3f      	ldr	r2, [pc, #252]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007610:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007614:	6593      	str	r3, [r2, #88]	@ 0x58
 8007616:	4b3d      	ldr	r3, [pc, #244]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800761a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800761e:	60bb      	str	r3, [r7, #8]
 8007620:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007622:	2301      	movs	r3, #1
 8007624:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007626:	4b3a      	ldr	r3, [pc, #232]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a39      	ldr	r2, [pc, #228]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800762c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007630:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007632:	f7fd facd 	bl	8004bd0 <HAL_GetTick>
 8007636:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007638:	e009      	b.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800763a:	f7fd fac9 	bl	8004bd0 <HAL_GetTick>
 800763e:	4602      	mov	r2, r0
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	2b02      	cmp	r3, #2
 8007646:	d902      	bls.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007648:	2303      	movs	r3, #3
 800764a:	74fb      	strb	r3, [r7, #19]
        break;
 800764c:	e005      	b.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800764e:	4b30      	ldr	r3, [pc, #192]	@ (8007710 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007656:	2b00      	cmp	r3, #0
 8007658:	d0ef      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800765a:	7cfb      	ldrb	r3, [r7, #19]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d159      	bne.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007660:	4b2a      	ldr	r3, [pc, #168]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007666:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800766a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d01e      	beq.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007676:	697a      	ldr	r2, [r7, #20]
 8007678:	429a      	cmp	r2, r3
 800767a:	d019      	beq.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800767c:	4b23      	ldr	r3, [pc, #140]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800767e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007682:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007686:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007688:	4b20      	ldr	r3, [pc, #128]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800768a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800768e:	4a1f      	ldr	r2, [pc, #124]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007694:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007698:	4b1c      	ldr	r3, [pc, #112]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800769a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800769e:	4a1b      	ldr	r2, [pc, #108]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80076a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80076a8:	4a18      	ldr	r2, [pc, #96]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	f003 0301 	and.w	r3, r3, #1
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d016      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076ba:	f7fd fa89 	bl	8004bd0 <HAL_GetTick>
 80076be:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80076c0:	e00b      	b.n	80076da <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076c2:	f7fd fa85 	bl	8004bd0 <HAL_GetTick>
 80076c6:	4602      	mov	r2, r0
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d902      	bls.n	80076da <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80076d4:	2303      	movs	r3, #3
 80076d6:	74fb      	strb	r3, [r7, #19]
            break;
 80076d8:	e006      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80076da:	4b0c      	ldr	r3, [pc, #48]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80076dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076e0:	f003 0302 	and.w	r3, r3, #2
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d0ec      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80076e8:	7cfb      	ldrb	r3, [r7, #19]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d10b      	bne.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076ee:	4b07      	ldr	r3, [pc, #28]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80076f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076fc:	4903      	ldr	r1, [pc, #12]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80076fe:	4313      	orrs	r3, r2
 8007700:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007704:	e008      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007706:	7cfb      	ldrb	r3, [r7, #19]
 8007708:	74bb      	strb	r3, [r7, #18]
 800770a:	e005      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800770c:	40021000 	.word	0x40021000
 8007710:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007714:	7cfb      	ldrb	r3, [r7, #19]
 8007716:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007718:	7c7b      	ldrb	r3, [r7, #17]
 800771a:	2b01      	cmp	r3, #1
 800771c:	d105      	bne.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800771e:	4ba7      	ldr	r3, [pc, #668]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007722:	4aa6      	ldr	r2, [pc, #664]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007724:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007728:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 0301 	and.w	r3, r3, #1
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00a      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007736:	4ba1      	ldr	r3, [pc, #644]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007738:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800773c:	f023 0203 	bic.w	r2, r3, #3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	499d      	ldr	r1, [pc, #628]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007746:	4313      	orrs	r3, r2
 8007748:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0302 	and.w	r3, r3, #2
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00a      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007758:	4b98      	ldr	r3, [pc, #608]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800775a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800775e:	f023 020c 	bic.w	r2, r3, #12
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	4995      	ldr	r1, [pc, #596]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007768:	4313      	orrs	r3, r2
 800776a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 0304 	and.w	r3, r3, #4
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00a      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800777a:	4b90      	ldr	r3, [pc, #576]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800777c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007780:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	498c      	ldr	r1, [pc, #560]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800778a:	4313      	orrs	r3, r2
 800778c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 0308 	and.w	r3, r3, #8
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00a      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800779c:	4b87      	ldr	r3, [pc, #540]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800779e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	4984      	ldr	r1, [pc, #528]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077ac:	4313      	orrs	r3, r2
 80077ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f003 0310 	and.w	r3, r3, #16
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00a      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80077be:	4b7f      	ldr	r3, [pc, #508]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	695b      	ldr	r3, [r3, #20]
 80077cc:	497b      	ldr	r1, [pc, #492]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0320 	and.w	r3, r3, #32
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00a      	beq.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80077e0:	4b76      	ldr	r3, [pc, #472]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	699b      	ldr	r3, [r3, #24]
 80077ee:	4973      	ldr	r1, [pc, #460]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077f0:	4313      	orrs	r3, r2
 80077f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00a      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007802:	4b6e      	ldr	r3, [pc, #440]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007808:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	69db      	ldr	r3, [r3, #28]
 8007810:	496a      	ldr	r1, [pc, #424]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007812:	4313      	orrs	r3, r2
 8007814:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007820:	2b00      	cmp	r3, #0
 8007822:	d00a      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007824:	4b65      	ldr	r3, [pc, #404]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800782a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	4962      	ldr	r1, [pc, #392]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007834:	4313      	orrs	r3, r2
 8007836:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00a      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007846:	4b5d      	ldr	r3, [pc, #372]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800784c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007854:	4959      	ldr	r1, [pc, #356]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007856:	4313      	orrs	r3, r2
 8007858:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00a      	beq.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007868:	4b54      	ldr	r3, [pc, #336]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800786a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800786e:	f023 0203 	bic.w	r2, r3, #3
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007876:	4951      	ldr	r1, [pc, #324]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007878:	4313      	orrs	r3, r2
 800787a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00a      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800788a:	4b4c      	ldr	r3, [pc, #304]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800788c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007890:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007898:	4948      	ldr	r1, [pc, #288]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800789a:	4313      	orrs	r3, r2
 800789c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d015      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80078ac:	4b43      	ldr	r3, [pc, #268]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078ba:	4940      	ldr	r1, [pc, #256]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078bc:	4313      	orrs	r3, r2
 80078be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80078ca:	d105      	bne.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80078cc:	4b3b      	ldr	r3, [pc, #236]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	4a3a      	ldr	r2, [pc, #232]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d015      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80078e4:	4b35      	ldr	r3, [pc, #212]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078ea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078f2:	4932      	ldr	r1, [pc, #200]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078f4:	4313      	orrs	r3, r2
 80078f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007902:	d105      	bne.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007904:	4b2d      	ldr	r3, [pc, #180]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	4a2c      	ldr	r2, [pc, #176]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800790a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800790e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d015      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800791c:	4b27      	ldr	r3, [pc, #156]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800791e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007922:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800792a:	4924      	ldr	r1, [pc, #144]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800792c:	4313      	orrs	r3, r2
 800792e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007936:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800793a:	d105      	bne.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800793c:	4b1f      	ldr	r3, [pc, #124]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	4a1e      	ldr	r2, [pc, #120]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007942:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007946:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007950:	2b00      	cmp	r3, #0
 8007952:	d015      	beq.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007954:	4b19      	ldr	r3, [pc, #100]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800795a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007962:	4916      	ldr	r1, [pc, #88]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007964:	4313      	orrs	r3, r2
 8007966:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800796e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007972:	d105      	bne.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007974:	4b11      	ldr	r3, [pc, #68]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	4a10      	ldr	r2, [pc, #64]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800797a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800797e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007988:	2b00      	cmp	r3, #0
 800798a:	d019      	beq.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800798c:	4b0b      	ldr	r3, [pc, #44]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800798e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007992:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800799a:	4908      	ldr	r1, [pc, #32]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800799c:	4313      	orrs	r3, r2
 800799e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079aa:	d109      	bne.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80079ac:	4b03      	ldr	r3, [pc, #12]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	4a02      	ldr	r2, [pc, #8]	@ (80079bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80079b6:	60d3      	str	r3, [r2, #12]
 80079b8:	e002      	b.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80079ba:	bf00      	nop
 80079bc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d015      	beq.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80079cc:	4b29      	ldr	r3, [pc, #164]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80079ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079d2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079da:	4926      	ldr	r1, [pc, #152]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80079dc:	4313      	orrs	r3, r2
 80079de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079ea:	d105      	bne.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80079ec:	4b21      	ldr	r3, [pc, #132]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	4a20      	ldr	r2, [pc, #128]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80079f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079f6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d015      	beq.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007a04:	4b1b      	ldr	r3, [pc, #108]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a0a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a12:	4918      	ldr	r1, [pc, #96]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007a14:	4313      	orrs	r3, r2
 8007a16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a22:	d105      	bne.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007a24:	4b13      	ldr	r3, [pc, #76]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	4a12      	ldr	r2, [pc, #72]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007a2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a2e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d015      	beq.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007a3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007a42:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a4a:	490a      	ldr	r1, [pc, #40]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a5a:	d105      	bne.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a5c:	4b05      	ldr	r3, [pc, #20]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	4a04      	ldr	r2, [pc, #16]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007a62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a66:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007a68:	7cbb      	ldrb	r3, [r7, #18]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3718      	adds	r7, #24
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	40021000 	.word	0x40021000

08007a78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d101      	bne.n	8007a8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e054      	b.n	8007b34 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d111      	bne.n	8007aba <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f001 ff3a 	bl	8009918 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d102      	bne.n	8007ab2 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4a23      	ldr	r2, [pc, #140]	@ (8007b3c <HAL_TIM_Base_Init+0xc4>)
 8007ab0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2202      	movs	r2, #2
 8007abe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	3304      	adds	r3, #4
 8007aca:	4619      	mov	r1, r3
 8007acc:	4610      	mov	r0, r2
 8007ace:	f001 fa83 	bl	8008fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2201      	movs	r2, #1
 8007ade:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2201      	movs	r2, #1
 8007b16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3708      	adds	r7, #8
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	0800465d 	.word	0x0800465d

08007b40 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d001      	beq.n	8007b58 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	e04c      	b.n	8007bf2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2202      	movs	r2, #2
 8007b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a26      	ldr	r2, [pc, #152]	@ (8007c00 <HAL_TIM_Base_Start+0xc0>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d022      	beq.n	8007bb0 <HAL_TIM_Base_Start+0x70>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b72:	d01d      	beq.n	8007bb0 <HAL_TIM_Base_Start+0x70>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a22      	ldr	r2, [pc, #136]	@ (8007c04 <HAL_TIM_Base_Start+0xc4>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d018      	beq.n	8007bb0 <HAL_TIM_Base_Start+0x70>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a21      	ldr	r2, [pc, #132]	@ (8007c08 <HAL_TIM_Base_Start+0xc8>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d013      	beq.n	8007bb0 <HAL_TIM_Base_Start+0x70>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a1f      	ldr	r2, [pc, #124]	@ (8007c0c <HAL_TIM_Base_Start+0xcc>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d00e      	beq.n	8007bb0 <HAL_TIM_Base_Start+0x70>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a1e      	ldr	r2, [pc, #120]	@ (8007c10 <HAL_TIM_Base_Start+0xd0>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d009      	beq.n	8007bb0 <HAL_TIM_Base_Start+0x70>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a1c      	ldr	r2, [pc, #112]	@ (8007c14 <HAL_TIM_Base_Start+0xd4>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d004      	beq.n	8007bb0 <HAL_TIM_Base_Start+0x70>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a1b      	ldr	r2, [pc, #108]	@ (8007c18 <HAL_TIM_Base_Start+0xd8>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d115      	bne.n	8007bdc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	689a      	ldr	r2, [r3, #8]
 8007bb6:	4b19      	ldr	r3, [pc, #100]	@ (8007c1c <HAL_TIM_Base_Start+0xdc>)
 8007bb8:	4013      	ands	r3, r2
 8007bba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2b06      	cmp	r3, #6
 8007bc0:	d015      	beq.n	8007bee <HAL_TIM_Base_Start+0xae>
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bc8:	d011      	beq.n	8007bee <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f042 0201 	orr.w	r2, r2, #1
 8007bd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bda:	e008      	b.n	8007bee <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f042 0201 	orr.w	r2, r2, #1
 8007bea:	601a      	str	r2, [r3, #0]
 8007bec:	e000      	b.n	8007bf0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3714      	adds	r7, #20
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	40012c00 	.word	0x40012c00
 8007c04:	40000400 	.word	0x40000400
 8007c08:	40000800 	.word	0x40000800
 8007c0c:	40000c00 	.word	0x40000c00
 8007c10:	40013400 	.word	0x40013400
 8007c14:	40014000 	.word	0x40014000
 8007c18:	40015000 	.word	0x40015000
 8007c1c:	00010007 	.word	0x00010007

08007c20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d001      	beq.n	8007c38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e054      	b.n	8007ce2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2202      	movs	r2, #2
 8007c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68da      	ldr	r2, [r3, #12]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f042 0201 	orr.w	r2, r2, #1
 8007c4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a26      	ldr	r2, [pc, #152]	@ (8007cf0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d022      	beq.n	8007ca0 <HAL_TIM_Base_Start_IT+0x80>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c62:	d01d      	beq.n	8007ca0 <HAL_TIM_Base_Start_IT+0x80>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a22      	ldr	r2, [pc, #136]	@ (8007cf4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d018      	beq.n	8007ca0 <HAL_TIM_Base_Start_IT+0x80>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a21      	ldr	r2, [pc, #132]	@ (8007cf8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d013      	beq.n	8007ca0 <HAL_TIM_Base_Start_IT+0x80>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a1f      	ldr	r2, [pc, #124]	@ (8007cfc <HAL_TIM_Base_Start_IT+0xdc>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d00e      	beq.n	8007ca0 <HAL_TIM_Base_Start_IT+0x80>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a1e      	ldr	r2, [pc, #120]	@ (8007d00 <HAL_TIM_Base_Start_IT+0xe0>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d009      	beq.n	8007ca0 <HAL_TIM_Base_Start_IT+0x80>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a1c      	ldr	r2, [pc, #112]	@ (8007d04 <HAL_TIM_Base_Start_IT+0xe4>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d004      	beq.n	8007ca0 <HAL_TIM_Base_Start_IT+0x80>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8007d08 <HAL_TIM_Base_Start_IT+0xe8>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d115      	bne.n	8007ccc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	689a      	ldr	r2, [r3, #8]
 8007ca6:	4b19      	ldr	r3, [pc, #100]	@ (8007d0c <HAL_TIM_Base_Start_IT+0xec>)
 8007ca8:	4013      	ands	r3, r2
 8007caa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2b06      	cmp	r3, #6
 8007cb0:	d015      	beq.n	8007cde <HAL_TIM_Base_Start_IT+0xbe>
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cb8:	d011      	beq.n	8007cde <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f042 0201 	orr.w	r2, r2, #1
 8007cc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cca:	e008      	b.n	8007cde <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f042 0201 	orr.w	r2, r2, #1
 8007cda:	601a      	str	r2, [r3, #0]
 8007cdc:	e000      	b.n	8007ce0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cde:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3714      	adds	r7, #20
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	40012c00 	.word	0x40012c00
 8007cf4:	40000400 	.word	0x40000400
 8007cf8:	40000800 	.word	0x40000800
 8007cfc:	40000c00 	.word	0x40000c00
 8007d00:	40013400 	.word	0x40013400
 8007d04:	40014000 	.word	0x40014000
 8007d08:	40015000 	.word	0x40015000
 8007d0c:	00010007 	.word	0x00010007

08007d10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d101      	bne.n	8007d22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e054      	b.n	8007dcc <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d111      	bne.n	8007d52 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f001 fdee 	bl	8009918 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d102      	bne.n	8007d4a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a23      	ldr	r2, [pc, #140]	@ (8007dd4 <HAL_TIM_PWM_Init+0xc4>)
 8007d48:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2202      	movs	r2, #2
 8007d56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	3304      	adds	r3, #4
 8007d62:	4619      	mov	r1, r3
 8007d64:	4610      	mov	r0, r2
 8007d66:	f001 f937 	bl	8008fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2201      	movs	r2, #1
 8007d76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2201      	movs	r2, #1
 8007db6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3708      	adds	r7, #8
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	08007dd9 	.word	0x08007dd9

08007dd8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007de0:	bf00      	nop
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007df6:	2300      	movs	r3, #0
 8007df8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d109      	bne.n	8007e14 <HAL_TIM_PWM_Start_IT+0x28>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	bf14      	ite	ne
 8007e0c:	2301      	movne	r3, #1
 8007e0e:	2300      	moveq	r3, #0
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	e03c      	b.n	8007e8e <HAL_TIM_PWM_Start_IT+0xa2>
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	2b04      	cmp	r3, #4
 8007e18:	d109      	bne.n	8007e2e <HAL_TIM_PWM_Start_IT+0x42>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	bf14      	ite	ne
 8007e26:	2301      	movne	r3, #1
 8007e28:	2300      	moveq	r3, #0
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	e02f      	b.n	8007e8e <HAL_TIM_PWM_Start_IT+0xa2>
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	2b08      	cmp	r3, #8
 8007e32:	d109      	bne.n	8007e48 <HAL_TIM_PWM_Start_IT+0x5c>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	bf14      	ite	ne
 8007e40:	2301      	movne	r3, #1
 8007e42:	2300      	moveq	r3, #0
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	e022      	b.n	8007e8e <HAL_TIM_PWM_Start_IT+0xa2>
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	2b0c      	cmp	r3, #12
 8007e4c:	d109      	bne.n	8007e62 <HAL_TIM_PWM_Start_IT+0x76>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	bf14      	ite	ne
 8007e5a:	2301      	movne	r3, #1
 8007e5c:	2300      	moveq	r3, #0
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	e015      	b.n	8007e8e <HAL_TIM_PWM_Start_IT+0xa2>
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	2b10      	cmp	r3, #16
 8007e66:	d109      	bne.n	8007e7c <HAL_TIM_PWM_Start_IT+0x90>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	bf14      	ite	ne
 8007e74:	2301      	movne	r3, #1
 8007e76:	2300      	moveq	r3, #0
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	e008      	b.n	8007e8e <HAL_TIM_PWM_Start_IT+0xa2>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	bf14      	ite	ne
 8007e88:	2301      	movne	r3, #1
 8007e8a:	2300      	moveq	r3, #0
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d001      	beq.n	8007e96 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	e0f1      	b.n	800807a <HAL_TIM_PWM_Start_IT+0x28e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d104      	bne.n	8007ea6 <HAL_TIM_PWM_Start_IT+0xba>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2202      	movs	r2, #2
 8007ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ea4:	e023      	b.n	8007eee <HAL_TIM_PWM_Start_IT+0x102>
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	2b04      	cmp	r3, #4
 8007eaa:	d104      	bne.n	8007eb6 <HAL_TIM_PWM_Start_IT+0xca>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2202      	movs	r2, #2
 8007eb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007eb4:	e01b      	b.n	8007eee <HAL_TIM_PWM_Start_IT+0x102>
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	2b08      	cmp	r3, #8
 8007eba:	d104      	bne.n	8007ec6 <HAL_TIM_PWM_Start_IT+0xda>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2202      	movs	r2, #2
 8007ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ec4:	e013      	b.n	8007eee <HAL_TIM_PWM_Start_IT+0x102>
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	2b0c      	cmp	r3, #12
 8007eca:	d104      	bne.n	8007ed6 <HAL_TIM_PWM_Start_IT+0xea>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2202      	movs	r2, #2
 8007ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007ed4:	e00b      	b.n	8007eee <HAL_TIM_PWM_Start_IT+0x102>
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	2b10      	cmp	r3, #16
 8007eda:	d104      	bne.n	8007ee6 <HAL_TIM_PWM_Start_IT+0xfa>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2202      	movs	r2, #2
 8007ee0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ee4:	e003      	b.n	8007eee <HAL_TIM_PWM_Start_IT+0x102>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2202      	movs	r2, #2
 8007eea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	2b0c      	cmp	r3, #12
 8007ef2:	d841      	bhi.n	8007f78 <HAL_TIM_PWM_Start_IT+0x18c>
 8007ef4:	a201      	add	r2, pc, #4	@ (adr r2, 8007efc <HAL_TIM_PWM_Start_IT+0x110>)
 8007ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007efa:	bf00      	nop
 8007efc:	08007f31 	.word	0x08007f31
 8007f00:	08007f79 	.word	0x08007f79
 8007f04:	08007f79 	.word	0x08007f79
 8007f08:	08007f79 	.word	0x08007f79
 8007f0c:	08007f43 	.word	0x08007f43
 8007f10:	08007f79 	.word	0x08007f79
 8007f14:	08007f79 	.word	0x08007f79
 8007f18:	08007f79 	.word	0x08007f79
 8007f1c:	08007f55 	.word	0x08007f55
 8007f20:	08007f79 	.word	0x08007f79
 8007f24:	08007f79 	.word	0x08007f79
 8007f28:	08007f79 	.word	0x08007f79
 8007f2c:	08007f67 	.word	0x08007f67
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	68da      	ldr	r2, [r3, #12]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f042 0202 	orr.w	r2, r2, #2
 8007f3e:	60da      	str	r2, [r3, #12]
      break;
 8007f40:	e01d      	b.n	8007f7e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	68da      	ldr	r2, [r3, #12]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f042 0204 	orr.w	r2, r2, #4
 8007f50:	60da      	str	r2, [r3, #12]
      break;
 8007f52:	e014      	b.n	8007f7e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68da      	ldr	r2, [r3, #12]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f042 0208 	orr.w	r2, r2, #8
 8007f62:	60da      	str	r2, [r3, #12]
      break;
 8007f64:	e00b      	b.n	8007f7e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	68da      	ldr	r2, [r3, #12]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f042 0210 	orr.w	r2, r2, #16
 8007f74:	60da      	str	r2, [r3, #12]
      break;
 8007f76:	e002      	b.n	8007f7e <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f7c:	bf00      	nop
  }

  if (status == HAL_OK)
 8007f7e:	7bfb      	ldrb	r3, [r7, #15]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d179      	bne.n	8008078 <HAL_TIM_PWM_Start_IT+0x28c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	6839      	ldr	r1, [r7, #0]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f001 fc9d 	bl	80098cc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a3b      	ldr	r2, [pc, #236]	@ (8008084 <HAL_TIM_PWM_Start_IT+0x298>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d018      	beq.n	8007fce <HAL_TIM_PWM_Start_IT+0x1e2>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a39      	ldr	r2, [pc, #228]	@ (8008088 <HAL_TIM_PWM_Start_IT+0x29c>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d013      	beq.n	8007fce <HAL_TIM_PWM_Start_IT+0x1e2>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a38      	ldr	r2, [pc, #224]	@ (800808c <HAL_TIM_PWM_Start_IT+0x2a0>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d00e      	beq.n	8007fce <HAL_TIM_PWM_Start_IT+0x1e2>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a36      	ldr	r2, [pc, #216]	@ (8008090 <HAL_TIM_PWM_Start_IT+0x2a4>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d009      	beq.n	8007fce <HAL_TIM_PWM_Start_IT+0x1e2>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a35      	ldr	r2, [pc, #212]	@ (8008094 <HAL_TIM_PWM_Start_IT+0x2a8>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d004      	beq.n	8007fce <HAL_TIM_PWM_Start_IT+0x1e2>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a33      	ldr	r2, [pc, #204]	@ (8008098 <HAL_TIM_PWM_Start_IT+0x2ac>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d101      	bne.n	8007fd2 <HAL_TIM_PWM_Start_IT+0x1e6>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e000      	b.n	8007fd4 <HAL_TIM_PWM_Start_IT+0x1e8>
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d007      	beq.n	8007fe8 <HAL_TIM_PWM_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007fe6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a25      	ldr	r2, [pc, #148]	@ (8008084 <HAL_TIM_PWM_Start_IT+0x298>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d022      	beq.n	8008038 <HAL_TIM_PWM_Start_IT+0x24c>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ffa:	d01d      	beq.n	8008038 <HAL_TIM_PWM_Start_IT+0x24c>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a26      	ldr	r2, [pc, #152]	@ (800809c <HAL_TIM_PWM_Start_IT+0x2b0>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d018      	beq.n	8008038 <HAL_TIM_PWM_Start_IT+0x24c>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a25      	ldr	r2, [pc, #148]	@ (80080a0 <HAL_TIM_PWM_Start_IT+0x2b4>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d013      	beq.n	8008038 <HAL_TIM_PWM_Start_IT+0x24c>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a23      	ldr	r2, [pc, #140]	@ (80080a4 <HAL_TIM_PWM_Start_IT+0x2b8>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d00e      	beq.n	8008038 <HAL_TIM_PWM_Start_IT+0x24c>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a1a      	ldr	r2, [pc, #104]	@ (8008088 <HAL_TIM_PWM_Start_IT+0x29c>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d009      	beq.n	8008038 <HAL_TIM_PWM_Start_IT+0x24c>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a18      	ldr	r2, [pc, #96]	@ (800808c <HAL_TIM_PWM_Start_IT+0x2a0>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d004      	beq.n	8008038 <HAL_TIM_PWM_Start_IT+0x24c>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a19      	ldr	r2, [pc, #100]	@ (8008098 <HAL_TIM_PWM_Start_IT+0x2ac>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d115      	bne.n	8008064 <HAL_TIM_PWM_Start_IT+0x278>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	689a      	ldr	r2, [r3, #8]
 800803e:	4b1a      	ldr	r3, [pc, #104]	@ (80080a8 <HAL_TIM_PWM_Start_IT+0x2bc>)
 8008040:	4013      	ands	r3, r2
 8008042:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	2b06      	cmp	r3, #6
 8008048:	d015      	beq.n	8008076 <HAL_TIM_PWM_Start_IT+0x28a>
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008050:	d011      	beq.n	8008076 <HAL_TIM_PWM_Start_IT+0x28a>
      {
        __HAL_TIM_ENABLE(htim);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f042 0201 	orr.w	r2, r2, #1
 8008060:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008062:	e008      	b.n	8008076 <HAL_TIM_PWM_Start_IT+0x28a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f042 0201 	orr.w	r2, r2, #1
 8008072:	601a      	str	r2, [r3, #0]
 8008074:	e000      	b.n	8008078 <HAL_TIM_PWM_Start_IT+0x28c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008076:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008078:	7bfb      	ldrb	r3, [r7, #15]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	40012c00 	.word	0x40012c00
 8008088:	40013400 	.word	0x40013400
 800808c:	40014000 	.word	0x40014000
 8008090:	40014400 	.word	0x40014400
 8008094:	40014800 	.word	0x40014800
 8008098:	40015000 	.word	0x40015000
 800809c:	40000400 	.word	0x40000400
 80080a0:	40000800 	.word	0x40000800
 80080a4:	40000c00 	.word	0x40000c00
 80080a8:	00010007 	.word	0x00010007

080080ac <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d101      	bne.n	80080c0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	e04c      	b.n	800815a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d111      	bne.n	80080f0 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f001 fc1f 	bl	8009918 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d102      	bne.n	80080e8 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4a1f      	ldr	r2, [pc, #124]	@ (8008164 <HAL_TIM_OnePulse_Init+0xb8>)
 80080e6:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2202      	movs	r2, #2
 80080f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681a      	ldr	r2, [r3, #0]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	3304      	adds	r3, #4
 8008100:	4619      	mov	r1, r3
 8008102:	4610      	mov	r0, r2
 8008104:	f000 ff68 	bl	8008fd8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f022 0208 	bic.w	r2, r2, #8
 8008116:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	6819      	ldr	r1, [r3, #0]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	683a      	ldr	r2, [r7, #0]
 8008124:	430a      	orrs	r2, r1
 8008126:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	08008169 	.word	0x08008169

08008168 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8008170:	bf00      	nop
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800818c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008194:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800819c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80081a4:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80081a6:	7bfb      	ldrb	r3, [r7, #15]
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d108      	bne.n	80081be <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80081ac:	7bbb      	ldrb	r3, [r7, #14]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d105      	bne.n	80081be <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80081b2:	7b7b      	ldrb	r3, [r7, #13]
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d102      	bne.n	80081be <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80081b8:	7b3b      	ldrb	r3, [r7, #12]
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d001      	beq.n	80081c2 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	e059      	b.n	8008276 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2202      	movs	r2, #2
 80081c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2202      	movs	r2, #2
 80081ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2202      	movs	r2, #2
 80081d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2202      	movs	r2, #2
 80081de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	68da      	ldr	r2, [r3, #12]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f042 0202 	orr.w	r2, r2, #2
 80081f0:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	68da      	ldr	r2, [r3, #12]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f042 0204 	orr.w	r2, r2, #4
 8008200:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2201      	movs	r2, #1
 8008208:	2100      	movs	r1, #0
 800820a:	4618      	mov	r0, r3
 800820c:	f001 fb5e 	bl	80098cc <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2201      	movs	r2, #1
 8008216:	2104      	movs	r1, #4
 8008218:	4618      	mov	r0, r3
 800821a:	f001 fb57 	bl	80098cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a17      	ldr	r2, [pc, #92]	@ (8008280 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d018      	beq.n	800825a <HAL_TIM_OnePulse_Start_IT+0xde>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a15      	ldr	r2, [pc, #84]	@ (8008284 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d013      	beq.n	800825a <HAL_TIM_OnePulse_Start_IT+0xde>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a14      	ldr	r2, [pc, #80]	@ (8008288 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d00e      	beq.n	800825a <HAL_TIM_OnePulse_Start_IT+0xde>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a12      	ldr	r2, [pc, #72]	@ (800828c <HAL_TIM_OnePulse_Start_IT+0x110>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d009      	beq.n	800825a <HAL_TIM_OnePulse_Start_IT+0xde>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a11      	ldr	r2, [pc, #68]	@ (8008290 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d004      	beq.n	800825a <HAL_TIM_OnePulse_Start_IT+0xde>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a0f      	ldr	r2, [pc, #60]	@ (8008294 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d101      	bne.n	800825e <HAL_TIM_OnePulse_Start_IT+0xe2>
 800825a:	2301      	movs	r3, #1
 800825c:	e000      	b.n	8008260 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800825e:	2300      	movs	r3, #0
 8008260:	2b00      	cmp	r3, #0
 8008262:	d007      	beq.n	8008274 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008272:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	40012c00 	.word	0x40012c00
 8008284:	40013400 	.word	0x40013400
 8008288:	40014000 	.word	0x40014000
 800828c:	40014400 	.word	0x40014400
 8008290:	40014800 	.word	0x40014800
 8008294:	40015000 	.word	0x40015000

08008298 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b086      	sub	sp, #24
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d101      	bne.n	80082ac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	e0a2      	b.n	80083f2 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d111      	bne.n	80082dc <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f001 fb29 	bl	8009918 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d102      	bne.n	80082d4 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a4a      	ldr	r2, [pc, #296]	@ (80083fc <HAL_TIM_Encoder_Init+0x164>)
 80082d2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2202      	movs	r2, #2
 80082e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	6812      	ldr	r2, [r2, #0]
 80082ee:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80082f2:	f023 0307 	bic.w	r3, r3, #7
 80082f6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	3304      	adds	r3, #4
 8008300:	4619      	mov	r1, r3
 8008302:	4610      	mov	r0, r2
 8008304:	f000 fe68 	bl	8008fd8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	6a1b      	ldr	r3, [r3, #32]
 800831e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	697a      	ldr	r2, [r7, #20]
 8008326:	4313      	orrs	r3, r2
 8008328:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008330:	f023 0303 	bic.w	r3, r3, #3
 8008334:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	689a      	ldr	r2, [r3, #8]
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	699b      	ldr	r3, [r3, #24]
 800833e:	021b      	lsls	r3, r3, #8
 8008340:	4313      	orrs	r3, r2
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	4313      	orrs	r3, r2
 8008346:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800834e:	f023 030c 	bic.w	r3, r3, #12
 8008352:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800835a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800835e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	68da      	ldr	r2, [r3, #12]
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	69db      	ldr	r3, [r3, #28]
 8008368:	021b      	lsls	r3, r3, #8
 800836a:	4313      	orrs	r3, r2
 800836c:	693a      	ldr	r2, [r7, #16]
 800836e:	4313      	orrs	r3, r2
 8008370:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	011a      	lsls	r2, r3, #4
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	6a1b      	ldr	r3, [r3, #32]
 800837c:	031b      	lsls	r3, r3, #12
 800837e:	4313      	orrs	r3, r2
 8008380:	693a      	ldr	r2, [r7, #16]
 8008382:	4313      	orrs	r3, r2
 8008384:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800838c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008394:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	685a      	ldr	r2, [r3, #4]
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	695b      	ldr	r3, [r3, #20]
 800839e:	011b      	lsls	r3, r3, #4
 80083a0:	4313      	orrs	r3, r2
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	697a      	ldr	r2, [r7, #20]
 80083ae:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	693a      	ldr	r2, [r7, #16]
 80083b6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2201      	movs	r2, #1
 80083e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3718      	adds	r7, #24
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	080045dd 	.word	0x080045dd

08008400 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008410:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008418:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008420:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008428:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d110      	bne.n	8008452 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008430:	7bfb      	ldrb	r3, [r7, #15]
 8008432:	2b01      	cmp	r3, #1
 8008434:	d102      	bne.n	800843c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008436:	7b7b      	ldrb	r3, [r7, #13]
 8008438:	2b01      	cmp	r3, #1
 800843a:	d001      	beq.n	8008440 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	e069      	b.n	8008514 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2202      	movs	r2, #2
 8008444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2202      	movs	r2, #2
 800844c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008450:	e031      	b.n	80084b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	2b04      	cmp	r3, #4
 8008456:	d110      	bne.n	800847a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008458:	7bbb      	ldrb	r3, [r7, #14]
 800845a:	2b01      	cmp	r3, #1
 800845c:	d102      	bne.n	8008464 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800845e:	7b3b      	ldrb	r3, [r7, #12]
 8008460:	2b01      	cmp	r3, #1
 8008462:	d001      	beq.n	8008468 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008464:	2301      	movs	r3, #1
 8008466:	e055      	b.n	8008514 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2202      	movs	r2, #2
 800846c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2202      	movs	r2, #2
 8008474:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008478:	e01d      	b.n	80084b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800847a:	7bfb      	ldrb	r3, [r7, #15]
 800847c:	2b01      	cmp	r3, #1
 800847e:	d108      	bne.n	8008492 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008480:	7bbb      	ldrb	r3, [r7, #14]
 8008482:	2b01      	cmp	r3, #1
 8008484:	d105      	bne.n	8008492 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008486:	7b7b      	ldrb	r3, [r7, #13]
 8008488:	2b01      	cmp	r3, #1
 800848a:	d102      	bne.n	8008492 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800848c:	7b3b      	ldrb	r3, [r7, #12]
 800848e:	2b01      	cmp	r3, #1
 8008490:	d001      	beq.n	8008496 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	e03e      	b.n	8008514 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2202      	movs	r2, #2
 800849a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2202      	movs	r2, #2
 80084a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2202      	movs	r2, #2
 80084aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2202      	movs	r2, #2
 80084b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d003      	beq.n	80084c4 <HAL_TIM_Encoder_Start+0xc4>
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	2b04      	cmp	r3, #4
 80084c0:	d008      	beq.n	80084d4 <HAL_TIM_Encoder_Start+0xd4>
 80084c2:	e00f      	b.n	80084e4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2201      	movs	r2, #1
 80084ca:	2100      	movs	r1, #0
 80084cc:	4618      	mov	r0, r3
 80084ce:	f001 f9fd 	bl	80098cc <TIM_CCxChannelCmd>
      break;
 80084d2:	e016      	b.n	8008502 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2201      	movs	r2, #1
 80084da:	2104      	movs	r1, #4
 80084dc:	4618      	mov	r0, r3
 80084de:	f001 f9f5 	bl	80098cc <TIM_CCxChannelCmd>
      break;
 80084e2:	e00e      	b.n	8008502 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2201      	movs	r2, #1
 80084ea:	2100      	movs	r1, #0
 80084ec:	4618      	mov	r0, r3
 80084ee:	f001 f9ed 	bl	80098cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2201      	movs	r2, #1
 80084f8:	2104      	movs	r1, #4
 80084fa:	4618      	mov	r0, r3
 80084fc:	f001 f9e6 	bl	80098cc <TIM_CCxChannelCmd>
      break;
 8008500:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f042 0201 	orr.w	r2, r2, #1
 8008510:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008512:	2300      	movs	r3, #0
}
 8008514:	4618      	mov	r0, r3
 8008516:	3710      	adds	r7, #16
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68db      	ldr	r3, [r3, #12]
 800852a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	f003 0302 	and.w	r3, r3, #2
 800853a:	2b00      	cmp	r3, #0
 800853c:	d026      	beq.n	800858c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f003 0302 	and.w	r3, r3, #2
 8008544:	2b00      	cmp	r3, #0
 8008546:	d021      	beq.n	800858c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f06f 0202 	mvn.w	r2, #2
 8008550:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2201      	movs	r2, #1
 8008556:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	699b      	ldr	r3, [r3, #24]
 800855e:	f003 0303 	and.w	r3, r3, #3
 8008562:	2b00      	cmp	r3, #0
 8008564:	d005      	beq.n	8008572 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	4798      	blx	r3
 8008570:	e009      	b.n	8008586 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	f003 0304 	and.w	r3, r3, #4
 8008592:	2b00      	cmp	r3, #0
 8008594:	d026      	beq.n	80085e4 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f003 0304 	and.w	r3, r3, #4
 800859c:	2b00      	cmp	r3, #0
 800859e:	d021      	beq.n	80085e4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f06f 0204 	mvn.w	r2, #4
 80085a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2202      	movs	r2, #2
 80085ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	699b      	ldr	r3, [r3, #24]
 80085b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d005      	beq.n	80085ca <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	4798      	blx	r3
 80085c8:	e009      	b.n	80085de <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	f003 0308 	and.w	r3, r3, #8
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d026      	beq.n	800863c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f003 0308 	and.w	r3, r3, #8
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d021      	beq.n	800863c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f06f 0208 	mvn.w	r2, #8
 8008600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2204      	movs	r2, #4
 8008606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	69db      	ldr	r3, [r3, #28]
 800860e:	f003 0303 	and.w	r3, r3, #3
 8008612:	2b00      	cmp	r3, #0
 8008614:	d005      	beq.n	8008622 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	4798      	blx	r3
 8008620:	e009      	b.n	8008636 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	f003 0310 	and.w	r3, r3, #16
 8008642:	2b00      	cmp	r3, #0
 8008644:	d026      	beq.n	8008694 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f003 0310 	and.w	r3, r3, #16
 800864c:	2b00      	cmp	r3, #0
 800864e:	d021      	beq.n	8008694 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f06f 0210 	mvn.w	r2, #16
 8008658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2208      	movs	r2, #8
 800865e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	69db      	ldr	r3, [r3, #28]
 8008666:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800866a:	2b00      	cmp	r3, #0
 800866c:	d005      	beq.n	800867a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	4798      	blx	r3
 8008678:	e009      	b.n	800868e <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	f003 0301 	and.w	r3, r3, #1
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00e      	beq.n	80086bc <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f003 0301 	and.w	r3, r3, #1
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d009      	beq.n	80086bc <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f06f 0201 	mvn.w	r2, #1
 80086b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d104      	bne.n	80086d0 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d00e      	beq.n	80086ee <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d009      	beq.n	80086ee <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80086e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d00e      	beq.n	8008716 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d009      	beq.n	8008716 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800870a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800871c:	2b00      	cmp	r3, #0
 800871e:	d00e      	beq.n	800873e <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008726:	2b00      	cmp	r3, #0
 8008728:	d009      	beq.n	800873e <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	f003 0320 	and.w	r3, r3, #32
 8008744:	2b00      	cmp	r3, #0
 8008746:	d00e      	beq.n	8008766 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f003 0320 	and.w	r3, r3, #32
 800874e:	2b00      	cmp	r3, #0
 8008750:	d009      	beq.n	8008766 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f06f 0220 	mvn.w	r2, #32
 800875a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00e      	beq.n	800878e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008776:	2b00      	cmp	r3, #0
 8008778:	d009      	beq.n	800878e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008794:	2b00      	cmp	r3, #0
 8008796:	d00e      	beq.n	80087b6 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d009      	beq.n	80087b6 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80087aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00e      	beq.n	80087de <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d009      	beq.n	80087de <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80087d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00e      	beq.n	8008806 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d009      	beq.n	8008806 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80087fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008806:	bf00      	nop
 8008808:	3710      	adds	r7, #16
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
	...

08008810 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b086      	sub	sp, #24
 8008814:	af00      	add	r7, sp, #0
 8008816:	60f8      	str	r0, [r7, #12]
 8008818:	60b9      	str	r1, [r7, #8]
 800881a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800881c:	2300      	movs	r3, #0
 800881e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008826:	2b01      	cmp	r3, #1
 8008828:	d101      	bne.n	800882e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800882a:	2302      	movs	r3, #2
 800882c:	e0ff      	b.n	8008a2e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2201      	movs	r2, #1
 8008832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2b14      	cmp	r3, #20
 800883a:	f200 80f0 	bhi.w	8008a1e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800883e:	a201      	add	r2, pc, #4	@ (adr r2, 8008844 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008844:	08008899 	.word	0x08008899
 8008848:	08008a1f 	.word	0x08008a1f
 800884c:	08008a1f 	.word	0x08008a1f
 8008850:	08008a1f 	.word	0x08008a1f
 8008854:	080088d9 	.word	0x080088d9
 8008858:	08008a1f 	.word	0x08008a1f
 800885c:	08008a1f 	.word	0x08008a1f
 8008860:	08008a1f 	.word	0x08008a1f
 8008864:	0800891b 	.word	0x0800891b
 8008868:	08008a1f 	.word	0x08008a1f
 800886c:	08008a1f 	.word	0x08008a1f
 8008870:	08008a1f 	.word	0x08008a1f
 8008874:	0800895b 	.word	0x0800895b
 8008878:	08008a1f 	.word	0x08008a1f
 800887c:	08008a1f 	.word	0x08008a1f
 8008880:	08008a1f 	.word	0x08008a1f
 8008884:	0800899d 	.word	0x0800899d
 8008888:	08008a1f 	.word	0x08008a1f
 800888c:	08008a1f 	.word	0x08008a1f
 8008890:	08008a1f 	.word	0x08008a1f
 8008894:	080089dd 	.word	0x080089dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	68b9      	ldr	r1, [r7, #8]
 800889e:	4618      	mov	r0, r3
 80088a0:	f000 fc4e 	bl	8009140 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	699a      	ldr	r2, [r3, #24]
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f042 0208 	orr.w	r2, r2, #8
 80088b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	699a      	ldr	r2, [r3, #24]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f022 0204 	bic.w	r2, r2, #4
 80088c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	6999      	ldr	r1, [r3, #24]
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	691a      	ldr	r2, [r3, #16]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	430a      	orrs	r2, r1
 80088d4:	619a      	str	r2, [r3, #24]
      break;
 80088d6:	e0a5      	b.n	8008a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	68b9      	ldr	r1, [r7, #8]
 80088de:	4618      	mov	r0, r3
 80088e0:	f000 fcc8 	bl	8009274 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	699a      	ldr	r2, [r3, #24]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80088f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	699a      	ldr	r2, [r3, #24]
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008902:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	6999      	ldr	r1, [r3, #24]
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	021a      	lsls	r2, r3, #8
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	430a      	orrs	r2, r1
 8008916:	619a      	str	r2, [r3, #24]
      break;
 8008918:	e084      	b.n	8008a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	68b9      	ldr	r1, [r7, #8]
 8008920:	4618      	mov	r0, r3
 8008922:	f000 fd3b 	bl	800939c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	69da      	ldr	r2, [r3, #28]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f042 0208 	orr.w	r2, r2, #8
 8008934:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	69da      	ldr	r2, [r3, #28]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f022 0204 	bic.w	r2, r2, #4
 8008944:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	69d9      	ldr	r1, [r3, #28]
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	691a      	ldr	r2, [r3, #16]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	430a      	orrs	r2, r1
 8008956:	61da      	str	r2, [r3, #28]
      break;
 8008958:	e064      	b.n	8008a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	68b9      	ldr	r1, [r7, #8]
 8008960:	4618      	mov	r0, r3
 8008962:	f000 fdad 	bl	80094c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	69da      	ldr	r2, [r3, #28]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008974:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	69da      	ldr	r2, [r3, #28]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008984:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	69d9      	ldr	r1, [r3, #28]
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	691b      	ldr	r3, [r3, #16]
 8008990:	021a      	lsls	r2, r3, #8
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	430a      	orrs	r2, r1
 8008998:	61da      	str	r2, [r3, #28]
      break;
 800899a:	e043      	b.n	8008a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68b9      	ldr	r1, [r7, #8]
 80089a2:	4618      	mov	r0, r3
 80089a4:	f000 fe20 	bl	80095e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f042 0208 	orr.w	r2, r2, #8
 80089b6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f022 0204 	bic.w	r2, r2, #4
 80089c6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	691a      	ldr	r2, [r3, #16]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	430a      	orrs	r2, r1
 80089d8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80089da:	e023      	b.n	8008a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	68b9      	ldr	r1, [r7, #8]
 80089e2:	4618      	mov	r0, r3
 80089e4:	f000 fe6a 	bl	80096bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80089f6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a06:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	021a      	lsls	r2, r3, #8
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	430a      	orrs	r2, r1
 8008a1a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008a1c:	e002      	b.n	8008a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	75fb      	strb	r3, [r7, #23]
      break;
 8008a22:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3718      	adds	r7, #24
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop

08008a38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b084      	sub	sp, #16
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a42:	2300      	movs	r3, #0
 8008a44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d101      	bne.n	8008a54 <HAL_TIM_ConfigClockSource+0x1c>
 8008a50:	2302      	movs	r3, #2
 8008a52:	e0f6      	b.n	8008c42 <HAL_TIM_ConfigClockSource+0x20a>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2202      	movs	r2, #2
 8008a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008a72:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008a76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	68ba      	ldr	r2, [r7, #8]
 8008a86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a6f      	ldr	r2, [pc, #444]	@ (8008c4c <HAL_TIM_ConfigClockSource+0x214>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	f000 80c1 	beq.w	8008c16 <HAL_TIM_ConfigClockSource+0x1de>
 8008a94:	4a6d      	ldr	r2, [pc, #436]	@ (8008c4c <HAL_TIM_ConfigClockSource+0x214>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	f200 80c6 	bhi.w	8008c28 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a9c:	4a6c      	ldr	r2, [pc, #432]	@ (8008c50 <HAL_TIM_ConfigClockSource+0x218>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	f000 80b9 	beq.w	8008c16 <HAL_TIM_ConfigClockSource+0x1de>
 8008aa4:	4a6a      	ldr	r2, [pc, #424]	@ (8008c50 <HAL_TIM_ConfigClockSource+0x218>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	f200 80be 	bhi.w	8008c28 <HAL_TIM_ConfigClockSource+0x1f0>
 8008aac:	4a69      	ldr	r2, [pc, #420]	@ (8008c54 <HAL_TIM_ConfigClockSource+0x21c>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	f000 80b1 	beq.w	8008c16 <HAL_TIM_ConfigClockSource+0x1de>
 8008ab4:	4a67      	ldr	r2, [pc, #412]	@ (8008c54 <HAL_TIM_ConfigClockSource+0x21c>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	f200 80b6 	bhi.w	8008c28 <HAL_TIM_ConfigClockSource+0x1f0>
 8008abc:	4a66      	ldr	r2, [pc, #408]	@ (8008c58 <HAL_TIM_ConfigClockSource+0x220>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	f000 80a9 	beq.w	8008c16 <HAL_TIM_ConfigClockSource+0x1de>
 8008ac4:	4a64      	ldr	r2, [pc, #400]	@ (8008c58 <HAL_TIM_ConfigClockSource+0x220>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	f200 80ae 	bhi.w	8008c28 <HAL_TIM_ConfigClockSource+0x1f0>
 8008acc:	4a63      	ldr	r2, [pc, #396]	@ (8008c5c <HAL_TIM_ConfigClockSource+0x224>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	f000 80a1 	beq.w	8008c16 <HAL_TIM_ConfigClockSource+0x1de>
 8008ad4:	4a61      	ldr	r2, [pc, #388]	@ (8008c5c <HAL_TIM_ConfigClockSource+0x224>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	f200 80a6 	bhi.w	8008c28 <HAL_TIM_ConfigClockSource+0x1f0>
 8008adc:	4a60      	ldr	r2, [pc, #384]	@ (8008c60 <HAL_TIM_ConfigClockSource+0x228>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	f000 8099 	beq.w	8008c16 <HAL_TIM_ConfigClockSource+0x1de>
 8008ae4:	4a5e      	ldr	r2, [pc, #376]	@ (8008c60 <HAL_TIM_ConfigClockSource+0x228>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	f200 809e 	bhi.w	8008c28 <HAL_TIM_ConfigClockSource+0x1f0>
 8008aec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008af0:	f000 8091 	beq.w	8008c16 <HAL_TIM_ConfigClockSource+0x1de>
 8008af4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008af8:	f200 8096 	bhi.w	8008c28 <HAL_TIM_ConfigClockSource+0x1f0>
 8008afc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b00:	f000 8089 	beq.w	8008c16 <HAL_TIM_ConfigClockSource+0x1de>
 8008b04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b08:	f200 808e 	bhi.w	8008c28 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b10:	d03e      	beq.n	8008b90 <HAL_TIM_ConfigClockSource+0x158>
 8008b12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b16:	f200 8087 	bhi.w	8008c28 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b1e:	f000 8086 	beq.w	8008c2e <HAL_TIM_ConfigClockSource+0x1f6>
 8008b22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b26:	d87f      	bhi.n	8008c28 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b28:	2b70      	cmp	r3, #112	@ 0x70
 8008b2a:	d01a      	beq.n	8008b62 <HAL_TIM_ConfigClockSource+0x12a>
 8008b2c:	2b70      	cmp	r3, #112	@ 0x70
 8008b2e:	d87b      	bhi.n	8008c28 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b30:	2b60      	cmp	r3, #96	@ 0x60
 8008b32:	d050      	beq.n	8008bd6 <HAL_TIM_ConfigClockSource+0x19e>
 8008b34:	2b60      	cmp	r3, #96	@ 0x60
 8008b36:	d877      	bhi.n	8008c28 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b38:	2b50      	cmp	r3, #80	@ 0x50
 8008b3a:	d03c      	beq.n	8008bb6 <HAL_TIM_ConfigClockSource+0x17e>
 8008b3c:	2b50      	cmp	r3, #80	@ 0x50
 8008b3e:	d873      	bhi.n	8008c28 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b40:	2b40      	cmp	r3, #64	@ 0x40
 8008b42:	d058      	beq.n	8008bf6 <HAL_TIM_ConfigClockSource+0x1be>
 8008b44:	2b40      	cmp	r3, #64	@ 0x40
 8008b46:	d86f      	bhi.n	8008c28 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b48:	2b30      	cmp	r3, #48	@ 0x30
 8008b4a:	d064      	beq.n	8008c16 <HAL_TIM_ConfigClockSource+0x1de>
 8008b4c:	2b30      	cmp	r3, #48	@ 0x30
 8008b4e:	d86b      	bhi.n	8008c28 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b50:	2b20      	cmp	r3, #32
 8008b52:	d060      	beq.n	8008c16 <HAL_TIM_ConfigClockSource+0x1de>
 8008b54:	2b20      	cmp	r3, #32
 8008b56:	d867      	bhi.n	8008c28 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d05c      	beq.n	8008c16 <HAL_TIM_ConfigClockSource+0x1de>
 8008b5c:	2b10      	cmp	r3, #16
 8008b5e:	d05a      	beq.n	8008c16 <HAL_TIM_ConfigClockSource+0x1de>
 8008b60:	e062      	b.n	8008c28 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008b72:	f000 fe8b 	bl	800988c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008b84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	68ba      	ldr	r2, [r7, #8]
 8008b8c:	609a      	str	r2, [r3, #8]
      break;
 8008b8e:	e04f      	b.n	8008c30 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008ba0:	f000 fe74 	bl	800988c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	689a      	ldr	r2, [r3, #8]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008bb2:	609a      	str	r2, [r3, #8]
      break;
 8008bb4:	e03c      	b.n	8008c30 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	f000 fde6 	bl	8009794 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2150      	movs	r1, #80	@ 0x50
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f000 fe3f 	bl	8009852 <TIM_ITRx_SetConfig>
      break;
 8008bd4:	e02c      	b.n	8008c30 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008be2:	461a      	mov	r2, r3
 8008be4:	f000 fe05 	bl	80097f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2160      	movs	r1, #96	@ 0x60
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f000 fe2f 	bl	8009852 <TIM_ITRx_SetConfig>
      break;
 8008bf4:	e01c      	b.n	8008c30 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c02:	461a      	mov	r2, r3
 8008c04:	f000 fdc6 	bl	8009794 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	2140      	movs	r1, #64	@ 0x40
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f000 fe1f 	bl	8009852 <TIM_ITRx_SetConfig>
      break;
 8008c14:	e00c      	b.n	8008c30 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4619      	mov	r1, r3
 8008c20:	4610      	mov	r0, r2
 8008c22:	f000 fe16 	bl	8009852 <TIM_ITRx_SetConfig>
      break;
 8008c26:	e003      	b.n	8008c30 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8008c2c:	e000      	b.n	8008c30 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008c2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2201      	movs	r2, #1
 8008c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	00100070 	.word	0x00100070
 8008c50:	00100060 	.word	0x00100060
 8008c54:	00100050 	.word	0x00100050
 8008c58:	00100040 	.word	0x00100040
 8008c5c:	00100030 	.word	0x00100030
 8008c60:	00100020 	.word	0x00100020

08008c64 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008c6c:	bf00      	nop
 8008c6e:	370c      	adds	r7, #12
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c80:	bf00      	nop
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c94:	bf00      	nop
 8008c96:	370c      	adds	r7, #12
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008ca8:	bf00      	nop
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008cbc:	bf00      	nop
 8008cbe:	370c      	adds	r7, #12
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b083      	sub	sp, #12
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008cd0:	bf00      	nop
 8008cd2:	370c      	adds	r7, #12
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr

08008cdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ce4:	bf00      	nop
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008cf8:	bf00      	nop
 8008cfa:	370c      	adds	r7, #12
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008d0c:	bf00      	nop
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b087      	sub	sp, #28
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	460b      	mov	r3, r1
 8008d22:	607a      	str	r2, [r7, #4]
 8008d24:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008d26:	2300      	movs	r3, #0
 8008d28:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d101      	bne.n	8008d34 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	e14a      	b.n	8008fca <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	f040 80dd 	bne.w	8008efc <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8008d42:	7afb      	ldrb	r3, [r7, #11]
 8008d44:	2b1f      	cmp	r3, #31
 8008d46:	f200 80d6 	bhi.w	8008ef6 <HAL_TIM_RegisterCallback+0x1de>
 8008d4a:	a201      	add	r2, pc, #4	@ (adr r2, 8008d50 <HAL_TIM_RegisterCallback+0x38>)
 8008d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d50:	08008dd1 	.word	0x08008dd1
 8008d54:	08008dd9 	.word	0x08008dd9
 8008d58:	08008de1 	.word	0x08008de1
 8008d5c:	08008de9 	.word	0x08008de9
 8008d60:	08008df1 	.word	0x08008df1
 8008d64:	08008df9 	.word	0x08008df9
 8008d68:	08008e01 	.word	0x08008e01
 8008d6c:	08008e09 	.word	0x08008e09
 8008d70:	08008e11 	.word	0x08008e11
 8008d74:	08008e19 	.word	0x08008e19
 8008d78:	08008e21 	.word	0x08008e21
 8008d7c:	08008e29 	.word	0x08008e29
 8008d80:	08008e31 	.word	0x08008e31
 8008d84:	08008e39 	.word	0x08008e39
 8008d88:	08008e43 	.word	0x08008e43
 8008d8c:	08008e4d 	.word	0x08008e4d
 8008d90:	08008e57 	.word	0x08008e57
 8008d94:	08008e61 	.word	0x08008e61
 8008d98:	08008e6b 	.word	0x08008e6b
 8008d9c:	08008e75 	.word	0x08008e75
 8008da0:	08008e7f 	.word	0x08008e7f
 8008da4:	08008e89 	.word	0x08008e89
 8008da8:	08008e93 	.word	0x08008e93
 8008dac:	08008e9d 	.word	0x08008e9d
 8008db0:	08008ea7 	.word	0x08008ea7
 8008db4:	08008eb1 	.word	0x08008eb1
 8008db8:	08008ebb 	.word	0x08008ebb
 8008dbc:	08008ec5 	.word	0x08008ec5
 8008dc0:	08008ecf 	.word	0x08008ecf
 8008dc4:	08008ed9 	.word	0x08008ed9
 8008dc8:	08008ee3 	.word	0x08008ee3
 8008dcc:	08008eed 	.word	0x08008eed
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008dd6:	e0f7      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008dde:	e0f3      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008de6:	e0ef      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008dee:	e0eb      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008df6:	e0e7      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008dfe:	e0e3      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008e06:	e0df      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008e0e:	e0db      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008e16:	e0d7      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008e1e:	e0d3      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008e26:	e0cf      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008e2e:	e0cb      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008e36:	e0c7      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008e40:	e0c2      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8008e4a:	e0bd      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8008e54:	e0b8      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8008e5e:	e0b3      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8008e68:	e0ae      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008e72:	e0a9      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8008e7c:	e0a4      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008e86:	e09f      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008e90:	e09a      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008e9a:	e095      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008ea4:	e090      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008eae:	e08b      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008eb8:	e086      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008ec2:	e081      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008ecc:	e07c      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008ed6:	e077      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8008ee0:	e072      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008eea:	e06d      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008ef4:	e068      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	75fb      	strb	r3, [r7, #23]
        break;
 8008efa:	e065      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d15d      	bne.n	8008fc4 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8008f08:	7afb      	ldrb	r3, [r7, #11]
 8008f0a:	2b0d      	cmp	r3, #13
 8008f0c:	d857      	bhi.n	8008fbe <HAL_TIM_RegisterCallback+0x2a6>
 8008f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f14 <HAL_TIM_RegisterCallback+0x1fc>)
 8008f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f14:	08008f4d 	.word	0x08008f4d
 8008f18:	08008f55 	.word	0x08008f55
 8008f1c:	08008f5d 	.word	0x08008f5d
 8008f20:	08008f65 	.word	0x08008f65
 8008f24:	08008f6d 	.word	0x08008f6d
 8008f28:	08008f75 	.word	0x08008f75
 8008f2c:	08008f7d 	.word	0x08008f7d
 8008f30:	08008f85 	.word	0x08008f85
 8008f34:	08008f8d 	.word	0x08008f8d
 8008f38:	08008f95 	.word	0x08008f95
 8008f3c:	08008f9d 	.word	0x08008f9d
 8008f40:	08008fa5 	.word	0x08008fa5
 8008f44:	08008fad 	.word	0x08008fad
 8008f48:	08008fb5 	.word	0x08008fb5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008f52:	e039      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008f5a:	e035      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008f62:	e031      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008f6a:	e02d      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008f72:	e029      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008f7a:	e025      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008f82:	e021      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008f8a:	e01d      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008f92:	e019      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008f9a:	e015      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008fa2:	e011      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008faa:	e00d      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008fb2:	e009      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008fbc:	e004      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	75fb      	strb	r3, [r7, #23]
        break;
 8008fc2:	e001      	b.n	8008fc8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	371c      	adds	r7, #28
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr
 8008fd6:	bf00      	nop

08008fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	4a4c      	ldr	r2, [pc, #304]	@ (800911c <TIM_Base_SetConfig+0x144>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d017      	beq.n	8009020 <TIM_Base_SetConfig+0x48>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ff6:	d013      	beq.n	8009020 <TIM_Base_SetConfig+0x48>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4a49      	ldr	r2, [pc, #292]	@ (8009120 <TIM_Base_SetConfig+0x148>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d00f      	beq.n	8009020 <TIM_Base_SetConfig+0x48>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	4a48      	ldr	r2, [pc, #288]	@ (8009124 <TIM_Base_SetConfig+0x14c>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d00b      	beq.n	8009020 <TIM_Base_SetConfig+0x48>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	4a47      	ldr	r2, [pc, #284]	@ (8009128 <TIM_Base_SetConfig+0x150>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d007      	beq.n	8009020 <TIM_Base_SetConfig+0x48>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	4a46      	ldr	r2, [pc, #280]	@ (800912c <TIM_Base_SetConfig+0x154>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d003      	beq.n	8009020 <TIM_Base_SetConfig+0x48>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	4a45      	ldr	r2, [pc, #276]	@ (8009130 <TIM_Base_SetConfig+0x158>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d108      	bne.n	8009032 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	68fa      	ldr	r2, [r7, #12]
 800902e:	4313      	orrs	r3, r2
 8009030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4a39      	ldr	r2, [pc, #228]	@ (800911c <TIM_Base_SetConfig+0x144>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d023      	beq.n	8009082 <TIM_Base_SetConfig+0xaa>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009040:	d01f      	beq.n	8009082 <TIM_Base_SetConfig+0xaa>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a36      	ldr	r2, [pc, #216]	@ (8009120 <TIM_Base_SetConfig+0x148>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d01b      	beq.n	8009082 <TIM_Base_SetConfig+0xaa>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4a35      	ldr	r2, [pc, #212]	@ (8009124 <TIM_Base_SetConfig+0x14c>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d017      	beq.n	8009082 <TIM_Base_SetConfig+0xaa>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	4a34      	ldr	r2, [pc, #208]	@ (8009128 <TIM_Base_SetConfig+0x150>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d013      	beq.n	8009082 <TIM_Base_SetConfig+0xaa>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	4a33      	ldr	r2, [pc, #204]	@ (800912c <TIM_Base_SetConfig+0x154>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d00f      	beq.n	8009082 <TIM_Base_SetConfig+0xaa>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	4a33      	ldr	r2, [pc, #204]	@ (8009134 <TIM_Base_SetConfig+0x15c>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d00b      	beq.n	8009082 <TIM_Base_SetConfig+0xaa>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	4a32      	ldr	r2, [pc, #200]	@ (8009138 <TIM_Base_SetConfig+0x160>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d007      	beq.n	8009082 <TIM_Base_SetConfig+0xaa>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	4a31      	ldr	r2, [pc, #196]	@ (800913c <TIM_Base_SetConfig+0x164>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d003      	beq.n	8009082 <TIM_Base_SetConfig+0xaa>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	4a2c      	ldr	r2, [pc, #176]	@ (8009130 <TIM_Base_SetConfig+0x158>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d108      	bne.n	8009094 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	68fa      	ldr	r2, [r7, #12]
 8009090:	4313      	orrs	r3, r2
 8009092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	695b      	ldr	r3, [r3, #20]
 800909e:	4313      	orrs	r3, r2
 80090a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	68fa      	ldr	r2, [r7, #12]
 80090a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	689a      	ldr	r2, [r3, #8]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4a18      	ldr	r2, [pc, #96]	@ (800911c <TIM_Base_SetConfig+0x144>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d013      	beq.n	80090e8 <TIM_Base_SetConfig+0x110>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4a1a      	ldr	r2, [pc, #104]	@ (800912c <TIM_Base_SetConfig+0x154>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d00f      	beq.n	80090e8 <TIM_Base_SetConfig+0x110>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	4a1a      	ldr	r2, [pc, #104]	@ (8009134 <TIM_Base_SetConfig+0x15c>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d00b      	beq.n	80090e8 <TIM_Base_SetConfig+0x110>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	4a19      	ldr	r2, [pc, #100]	@ (8009138 <TIM_Base_SetConfig+0x160>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d007      	beq.n	80090e8 <TIM_Base_SetConfig+0x110>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	4a18      	ldr	r2, [pc, #96]	@ (800913c <TIM_Base_SetConfig+0x164>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d003      	beq.n	80090e8 <TIM_Base_SetConfig+0x110>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	4a13      	ldr	r2, [pc, #76]	@ (8009130 <TIM_Base_SetConfig+0x158>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d103      	bne.n	80090f0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	691a      	ldr	r2, [r3, #16]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2201      	movs	r2, #1
 80090f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	691b      	ldr	r3, [r3, #16]
 80090fa:	f003 0301 	and.w	r3, r3, #1
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d105      	bne.n	800910e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	f023 0201 	bic.w	r2, r3, #1
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	611a      	str	r2, [r3, #16]
  }
}
 800910e:	bf00      	nop
 8009110:	3714      	adds	r7, #20
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr
 800911a:	bf00      	nop
 800911c:	40012c00 	.word	0x40012c00
 8009120:	40000400 	.word	0x40000400
 8009124:	40000800 	.word	0x40000800
 8009128:	40000c00 	.word	0x40000c00
 800912c:	40013400 	.word	0x40013400
 8009130:	40015000 	.word	0x40015000
 8009134:	40014000 	.word	0x40014000
 8009138:	40014400 	.word	0x40014400
 800913c:	40014800 	.word	0x40014800

08009140 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009140:	b480      	push	{r7}
 8009142:	b087      	sub	sp, #28
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6a1b      	ldr	r3, [r3, #32]
 800914e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6a1b      	ldr	r3, [r3, #32]
 8009154:	f023 0201 	bic.w	r2, r3, #1
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	699b      	ldr	r3, [r3, #24]
 8009166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800916e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f023 0303 	bic.w	r3, r3, #3
 800917a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	4313      	orrs	r3, r2
 8009184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	f023 0302 	bic.w	r3, r3, #2
 800918c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	697a      	ldr	r2, [r7, #20]
 8009194:	4313      	orrs	r3, r2
 8009196:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	4a30      	ldr	r2, [pc, #192]	@ (800925c <TIM_OC1_SetConfig+0x11c>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d013      	beq.n	80091c8 <TIM_OC1_SetConfig+0x88>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	4a2f      	ldr	r2, [pc, #188]	@ (8009260 <TIM_OC1_SetConfig+0x120>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d00f      	beq.n	80091c8 <TIM_OC1_SetConfig+0x88>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	4a2e      	ldr	r2, [pc, #184]	@ (8009264 <TIM_OC1_SetConfig+0x124>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d00b      	beq.n	80091c8 <TIM_OC1_SetConfig+0x88>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	4a2d      	ldr	r2, [pc, #180]	@ (8009268 <TIM_OC1_SetConfig+0x128>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d007      	beq.n	80091c8 <TIM_OC1_SetConfig+0x88>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	4a2c      	ldr	r2, [pc, #176]	@ (800926c <TIM_OC1_SetConfig+0x12c>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d003      	beq.n	80091c8 <TIM_OC1_SetConfig+0x88>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	4a2b      	ldr	r2, [pc, #172]	@ (8009270 <TIM_OC1_SetConfig+0x130>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d10c      	bne.n	80091e2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	f023 0308 	bic.w	r3, r3, #8
 80091ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	697a      	ldr	r2, [r7, #20]
 80091d6:	4313      	orrs	r3, r2
 80091d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	f023 0304 	bic.w	r3, r3, #4
 80091e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4a1d      	ldr	r2, [pc, #116]	@ (800925c <TIM_OC1_SetConfig+0x11c>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d013      	beq.n	8009212 <TIM_OC1_SetConfig+0xd2>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	4a1c      	ldr	r2, [pc, #112]	@ (8009260 <TIM_OC1_SetConfig+0x120>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d00f      	beq.n	8009212 <TIM_OC1_SetConfig+0xd2>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4a1b      	ldr	r2, [pc, #108]	@ (8009264 <TIM_OC1_SetConfig+0x124>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d00b      	beq.n	8009212 <TIM_OC1_SetConfig+0xd2>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	4a1a      	ldr	r2, [pc, #104]	@ (8009268 <TIM_OC1_SetConfig+0x128>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d007      	beq.n	8009212 <TIM_OC1_SetConfig+0xd2>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	4a19      	ldr	r2, [pc, #100]	@ (800926c <TIM_OC1_SetConfig+0x12c>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d003      	beq.n	8009212 <TIM_OC1_SetConfig+0xd2>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	4a18      	ldr	r2, [pc, #96]	@ (8009270 <TIM_OC1_SetConfig+0x130>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d111      	bne.n	8009236 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009218:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009220:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	695b      	ldr	r3, [r3, #20]
 8009226:	693a      	ldr	r2, [r7, #16]
 8009228:	4313      	orrs	r3, r2
 800922a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	699b      	ldr	r3, [r3, #24]
 8009230:	693a      	ldr	r2, [r7, #16]
 8009232:	4313      	orrs	r3, r2
 8009234:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	693a      	ldr	r2, [r7, #16]
 800923a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	68fa      	ldr	r2, [r7, #12]
 8009240:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	685a      	ldr	r2, [r3, #4]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	697a      	ldr	r2, [r7, #20]
 800924e:	621a      	str	r2, [r3, #32]
}
 8009250:	bf00      	nop
 8009252:	371c      	adds	r7, #28
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr
 800925c:	40012c00 	.word	0x40012c00
 8009260:	40013400 	.word	0x40013400
 8009264:	40014000 	.word	0x40014000
 8009268:	40014400 	.word	0x40014400
 800926c:	40014800 	.word	0x40014800
 8009270:	40015000 	.word	0x40015000

08009274 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009274:	b480      	push	{r7}
 8009276:	b087      	sub	sp, #28
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6a1b      	ldr	r3, [r3, #32]
 8009282:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6a1b      	ldr	r3, [r3, #32]
 8009288:	f023 0210 	bic.w	r2, r3, #16
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	699b      	ldr	r3, [r3, #24]
 800929a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80092a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	021b      	lsls	r3, r3, #8
 80092b6:	68fa      	ldr	r2, [r7, #12]
 80092b8:	4313      	orrs	r3, r2
 80092ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	f023 0320 	bic.w	r3, r3, #32
 80092c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	011b      	lsls	r3, r3, #4
 80092ca:	697a      	ldr	r2, [r7, #20]
 80092cc:	4313      	orrs	r3, r2
 80092ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	4a2c      	ldr	r2, [pc, #176]	@ (8009384 <TIM_OC2_SetConfig+0x110>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d007      	beq.n	80092e8 <TIM_OC2_SetConfig+0x74>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	4a2b      	ldr	r2, [pc, #172]	@ (8009388 <TIM_OC2_SetConfig+0x114>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d003      	beq.n	80092e8 <TIM_OC2_SetConfig+0x74>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	4a2a      	ldr	r2, [pc, #168]	@ (800938c <TIM_OC2_SetConfig+0x118>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d10d      	bne.n	8009304 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80092ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	68db      	ldr	r3, [r3, #12]
 80092f4:	011b      	lsls	r3, r3, #4
 80092f6:	697a      	ldr	r2, [r7, #20]
 80092f8:	4313      	orrs	r3, r2
 80092fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009302:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	4a1f      	ldr	r2, [pc, #124]	@ (8009384 <TIM_OC2_SetConfig+0x110>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d013      	beq.n	8009334 <TIM_OC2_SetConfig+0xc0>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	4a1e      	ldr	r2, [pc, #120]	@ (8009388 <TIM_OC2_SetConfig+0x114>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d00f      	beq.n	8009334 <TIM_OC2_SetConfig+0xc0>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	4a1e      	ldr	r2, [pc, #120]	@ (8009390 <TIM_OC2_SetConfig+0x11c>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d00b      	beq.n	8009334 <TIM_OC2_SetConfig+0xc0>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	4a1d      	ldr	r2, [pc, #116]	@ (8009394 <TIM_OC2_SetConfig+0x120>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d007      	beq.n	8009334 <TIM_OC2_SetConfig+0xc0>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	4a1c      	ldr	r2, [pc, #112]	@ (8009398 <TIM_OC2_SetConfig+0x124>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d003      	beq.n	8009334 <TIM_OC2_SetConfig+0xc0>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	4a17      	ldr	r2, [pc, #92]	@ (800938c <TIM_OC2_SetConfig+0x118>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d113      	bne.n	800935c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800933a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009342:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	695b      	ldr	r3, [r3, #20]
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	693a      	ldr	r2, [r7, #16]
 800934c:	4313      	orrs	r3, r2
 800934e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	699b      	ldr	r3, [r3, #24]
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	693a      	ldr	r2, [r7, #16]
 8009358:	4313      	orrs	r3, r2
 800935a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	693a      	ldr	r2, [r7, #16]
 8009360:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	68fa      	ldr	r2, [r7, #12]
 8009366:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	685a      	ldr	r2, [r3, #4]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	697a      	ldr	r2, [r7, #20]
 8009374:	621a      	str	r2, [r3, #32]
}
 8009376:	bf00      	nop
 8009378:	371c      	adds	r7, #28
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr
 8009382:	bf00      	nop
 8009384:	40012c00 	.word	0x40012c00
 8009388:	40013400 	.word	0x40013400
 800938c:	40015000 	.word	0x40015000
 8009390:	40014000 	.word	0x40014000
 8009394:	40014400 	.word	0x40014400
 8009398:	40014800 	.word	0x40014800

0800939c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800939c:	b480      	push	{r7}
 800939e:	b087      	sub	sp, #28
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6a1b      	ldr	r3, [r3, #32]
 80093aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6a1b      	ldr	r3, [r3, #32]
 80093b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	69db      	ldr	r3, [r3, #28]
 80093c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f023 0303 	bic.w	r3, r3, #3
 80093d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	68fa      	ldr	r2, [r7, #12]
 80093de:	4313      	orrs	r3, r2
 80093e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80093e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	021b      	lsls	r3, r3, #8
 80093f0:	697a      	ldr	r2, [r7, #20]
 80093f2:	4313      	orrs	r3, r2
 80093f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4a2b      	ldr	r2, [pc, #172]	@ (80094a8 <TIM_OC3_SetConfig+0x10c>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d007      	beq.n	800940e <TIM_OC3_SetConfig+0x72>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	4a2a      	ldr	r2, [pc, #168]	@ (80094ac <TIM_OC3_SetConfig+0x110>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d003      	beq.n	800940e <TIM_OC3_SetConfig+0x72>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4a29      	ldr	r2, [pc, #164]	@ (80094b0 <TIM_OC3_SetConfig+0x114>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d10d      	bne.n	800942a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009414:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	021b      	lsls	r3, r3, #8
 800941c:	697a      	ldr	r2, [r7, #20]
 800941e:	4313      	orrs	r3, r2
 8009420:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009428:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4a1e      	ldr	r2, [pc, #120]	@ (80094a8 <TIM_OC3_SetConfig+0x10c>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d013      	beq.n	800945a <TIM_OC3_SetConfig+0xbe>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4a1d      	ldr	r2, [pc, #116]	@ (80094ac <TIM_OC3_SetConfig+0x110>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d00f      	beq.n	800945a <TIM_OC3_SetConfig+0xbe>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a1d      	ldr	r2, [pc, #116]	@ (80094b4 <TIM_OC3_SetConfig+0x118>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d00b      	beq.n	800945a <TIM_OC3_SetConfig+0xbe>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4a1c      	ldr	r2, [pc, #112]	@ (80094b8 <TIM_OC3_SetConfig+0x11c>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d007      	beq.n	800945a <TIM_OC3_SetConfig+0xbe>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4a1b      	ldr	r2, [pc, #108]	@ (80094bc <TIM_OC3_SetConfig+0x120>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d003      	beq.n	800945a <TIM_OC3_SetConfig+0xbe>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4a16      	ldr	r2, [pc, #88]	@ (80094b0 <TIM_OC3_SetConfig+0x114>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d113      	bne.n	8009482 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009460:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009468:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	695b      	ldr	r3, [r3, #20]
 800946e:	011b      	lsls	r3, r3, #4
 8009470:	693a      	ldr	r2, [r7, #16]
 8009472:	4313      	orrs	r3, r2
 8009474:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	699b      	ldr	r3, [r3, #24]
 800947a:	011b      	lsls	r3, r3, #4
 800947c:	693a      	ldr	r2, [r7, #16]
 800947e:	4313      	orrs	r3, r2
 8009480:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	693a      	ldr	r2, [r7, #16]
 8009486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	685a      	ldr	r2, [r3, #4]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	697a      	ldr	r2, [r7, #20]
 800949a:	621a      	str	r2, [r3, #32]
}
 800949c:	bf00      	nop
 800949e:	371c      	adds	r7, #28
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr
 80094a8:	40012c00 	.word	0x40012c00
 80094ac:	40013400 	.word	0x40013400
 80094b0:	40015000 	.word	0x40015000
 80094b4:	40014000 	.word	0x40014000
 80094b8:	40014400 	.word	0x40014400
 80094bc:	40014800 	.word	0x40014800

080094c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b087      	sub	sp, #28
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a1b      	ldr	r3, [r3, #32]
 80094ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6a1b      	ldr	r3, [r3, #32]
 80094d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	69db      	ldr	r3, [r3, #28]
 80094e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80094ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	021b      	lsls	r3, r3, #8
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	4313      	orrs	r3, r2
 8009506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800950e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	031b      	lsls	r3, r3, #12
 8009516:	697a      	ldr	r2, [r7, #20]
 8009518:	4313      	orrs	r3, r2
 800951a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4a2c      	ldr	r2, [pc, #176]	@ (80095d0 <TIM_OC4_SetConfig+0x110>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d007      	beq.n	8009534 <TIM_OC4_SetConfig+0x74>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4a2b      	ldr	r2, [pc, #172]	@ (80095d4 <TIM_OC4_SetConfig+0x114>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d003      	beq.n	8009534 <TIM_OC4_SetConfig+0x74>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	4a2a      	ldr	r2, [pc, #168]	@ (80095d8 <TIM_OC4_SetConfig+0x118>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d10d      	bne.n	8009550 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800953a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	031b      	lsls	r3, r3, #12
 8009542:	697a      	ldr	r2, [r7, #20]
 8009544:	4313      	orrs	r3, r2
 8009546:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800954e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	4a1f      	ldr	r2, [pc, #124]	@ (80095d0 <TIM_OC4_SetConfig+0x110>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d013      	beq.n	8009580 <TIM_OC4_SetConfig+0xc0>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	4a1e      	ldr	r2, [pc, #120]	@ (80095d4 <TIM_OC4_SetConfig+0x114>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d00f      	beq.n	8009580 <TIM_OC4_SetConfig+0xc0>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	4a1e      	ldr	r2, [pc, #120]	@ (80095dc <TIM_OC4_SetConfig+0x11c>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d00b      	beq.n	8009580 <TIM_OC4_SetConfig+0xc0>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4a1d      	ldr	r2, [pc, #116]	@ (80095e0 <TIM_OC4_SetConfig+0x120>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d007      	beq.n	8009580 <TIM_OC4_SetConfig+0xc0>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	4a1c      	ldr	r2, [pc, #112]	@ (80095e4 <TIM_OC4_SetConfig+0x124>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d003      	beq.n	8009580 <TIM_OC4_SetConfig+0xc0>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	4a17      	ldr	r2, [pc, #92]	@ (80095d8 <TIM_OC4_SetConfig+0x118>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d113      	bne.n	80095a8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009586:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800958e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	695b      	ldr	r3, [r3, #20]
 8009594:	019b      	lsls	r3, r3, #6
 8009596:	693a      	ldr	r2, [r7, #16]
 8009598:	4313      	orrs	r3, r2
 800959a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	699b      	ldr	r3, [r3, #24]
 80095a0:	019b      	lsls	r3, r3, #6
 80095a2:	693a      	ldr	r2, [r7, #16]
 80095a4:	4313      	orrs	r3, r2
 80095a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	693a      	ldr	r2, [r7, #16]
 80095ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	68fa      	ldr	r2, [r7, #12]
 80095b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	685a      	ldr	r2, [r3, #4]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	697a      	ldr	r2, [r7, #20]
 80095c0:	621a      	str	r2, [r3, #32]
}
 80095c2:	bf00      	nop
 80095c4:	371c      	adds	r7, #28
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	40012c00 	.word	0x40012c00
 80095d4:	40013400 	.word	0x40013400
 80095d8:	40015000 	.word	0x40015000
 80095dc:	40014000 	.word	0x40014000
 80095e0:	40014400 	.word	0x40014400
 80095e4:	40014800 	.word	0x40014800

080095e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b087      	sub	sp, #28
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6a1b      	ldr	r3, [r3, #32]
 80095f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6a1b      	ldr	r3, [r3, #32]
 80095fc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800960e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800961a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	68fa      	ldr	r2, [r7, #12]
 8009622:	4313      	orrs	r3, r2
 8009624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800962c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	041b      	lsls	r3, r3, #16
 8009634:	693a      	ldr	r2, [r7, #16]
 8009636:	4313      	orrs	r3, r2
 8009638:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4a19      	ldr	r2, [pc, #100]	@ (80096a4 <TIM_OC5_SetConfig+0xbc>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d013      	beq.n	800966a <TIM_OC5_SetConfig+0x82>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4a18      	ldr	r2, [pc, #96]	@ (80096a8 <TIM_OC5_SetConfig+0xc0>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d00f      	beq.n	800966a <TIM_OC5_SetConfig+0x82>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4a17      	ldr	r2, [pc, #92]	@ (80096ac <TIM_OC5_SetConfig+0xc4>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d00b      	beq.n	800966a <TIM_OC5_SetConfig+0x82>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4a16      	ldr	r2, [pc, #88]	@ (80096b0 <TIM_OC5_SetConfig+0xc8>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d007      	beq.n	800966a <TIM_OC5_SetConfig+0x82>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4a15      	ldr	r2, [pc, #84]	@ (80096b4 <TIM_OC5_SetConfig+0xcc>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d003      	beq.n	800966a <TIM_OC5_SetConfig+0x82>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4a14      	ldr	r2, [pc, #80]	@ (80096b8 <TIM_OC5_SetConfig+0xd0>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d109      	bne.n	800967e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009670:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	695b      	ldr	r3, [r3, #20]
 8009676:	021b      	lsls	r3, r3, #8
 8009678:	697a      	ldr	r2, [r7, #20]
 800967a:	4313      	orrs	r3, r2
 800967c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	697a      	ldr	r2, [r7, #20]
 8009682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	68fa      	ldr	r2, [r7, #12]
 8009688:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	685a      	ldr	r2, [r3, #4]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	693a      	ldr	r2, [r7, #16]
 8009696:	621a      	str	r2, [r3, #32]
}
 8009698:	bf00      	nop
 800969a:	371c      	adds	r7, #28
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr
 80096a4:	40012c00 	.word	0x40012c00
 80096a8:	40013400 	.word	0x40013400
 80096ac:	40014000 	.word	0x40014000
 80096b0:	40014400 	.word	0x40014400
 80096b4:	40014800 	.word	0x40014800
 80096b8:	40015000 	.word	0x40015000

080096bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80096bc:	b480      	push	{r7}
 80096be:	b087      	sub	sp, #28
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6a1b      	ldr	r3, [r3, #32]
 80096ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6a1b      	ldr	r3, [r3, #32]
 80096d0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80096ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	021b      	lsls	r3, r3, #8
 80096f6:	68fa      	ldr	r2, [r7, #12]
 80096f8:	4313      	orrs	r3, r2
 80096fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009702:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	051b      	lsls	r3, r3, #20
 800970a:	693a      	ldr	r2, [r7, #16]
 800970c:	4313      	orrs	r3, r2
 800970e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	4a1a      	ldr	r2, [pc, #104]	@ (800977c <TIM_OC6_SetConfig+0xc0>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d013      	beq.n	8009740 <TIM_OC6_SetConfig+0x84>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4a19      	ldr	r2, [pc, #100]	@ (8009780 <TIM_OC6_SetConfig+0xc4>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d00f      	beq.n	8009740 <TIM_OC6_SetConfig+0x84>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	4a18      	ldr	r2, [pc, #96]	@ (8009784 <TIM_OC6_SetConfig+0xc8>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d00b      	beq.n	8009740 <TIM_OC6_SetConfig+0x84>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	4a17      	ldr	r2, [pc, #92]	@ (8009788 <TIM_OC6_SetConfig+0xcc>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d007      	beq.n	8009740 <TIM_OC6_SetConfig+0x84>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	4a16      	ldr	r2, [pc, #88]	@ (800978c <TIM_OC6_SetConfig+0xd0>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d003      	beq.n	8009740 <TIM_OC6_SetConfig+0x84>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	4a15      	ldr	r2, [pc, #84]	@ (8009790 <TIM_OC6_SetConfig+0xd4>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d109      	bne.n	8009754 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009746:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	695b      	ldr	r3, [r3, #20]
 800974c:	029b      	lsls	r3, r3, #10
 800974e:	697a      	ldr	r2, [r7, #20]
 8009750:	4313      	orrs	r3, r2
 8009752:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	697a      	ldr	r2, [r7, #20]
 8009758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	68fa      	ldr	r2, [r7, #12]
 800975e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	685a      	ldr	r2, [r3, #4]
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	693a      	ldr	r2, [r7, #16]
 800976c:	621a      	str	r2, [r3, #32]
}
 800976e:	bf00      	nop
 8009770:	371c      	adds	r7, #28
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr
 800977a:	bf00      	nop
 800977c:	40012c00 	.word	0x40012c00
 8009780:	40013400 	.word	0x40013400
 8009784:	40014000 	.word	0x40014000
 8009788:	40014400 	.word	0x40014400
 800978c:	40014800 	.word	0x40014800
 8009790:	40015000 	.word	0x40015000

08009794 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009794:	b480      	push	{r7}
 8009796:	b087      	sub	sp, #28
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	6a1b      	ldr	r3, [r3, #32]
 80097a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	6a1b      	ldr	r3, [r3, #32]
 80097aa:	f023 0201 	bic.w	r2, r3, #1
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	699b      	ldr	r3, [r3, #24]
 80097b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80097be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	011b      	lsls	r3, r3, #4
 80097c4:	693a      	ldr	r2, [r7, #16]
 80097c6:	4313      	orrs	r3, r2
 80097c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	f023 030a 	bic.w	r3, r3, #10
 80097d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80097d2:	697a      	ldr	r2, [r7, #20]
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	4313      	orrs	r3, r2
 80097d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	693a      	ldr	r2, [r7, #16]
 80097de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	697a      	ldr	r2, [r7, #20]
 80097e4:	621a      	str	r2, [r3, #32]
}
 80097e6:	bf00      	nop
 80097e8:	371c      	adds	r7, #28
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr

080097f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097f2:	b480      	push	{r7}
 80097f4:	b087      	sub	sp, #28
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	60f8      	str	r0, [r7, #12]
 80097fa:	60b9      	str	r1, [r7, #8]
 80097fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	6a1b      	ldr	r3, [r3, #32]
 8009802:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	6a1b      	ldr	r3, [r3, #32]
 8009808:	f023 0210 	bic.w	r2, r3, #16
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	699b      	ldr	r3, [r3, #24]
 8009814:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800981c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	031b      	lsls	r3, r3, #12
 8009822:	693a      	ldr	r2, [r7, #16]
 8009824:	4313      	orrs	r3, r2
 8009826:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800982e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	011b      	lsls	r3, r3, #4
 8009834:	697a      	ldr	r2, [r7, #20]
 8009836:	4313      	orrs	r3, r2
 8009838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	693a      	ldr	r2, [r7, #16]
 800983e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	697a      	ldr	r2, [r7, #20]
 8009844:	621a      	str	r2, [r3, #32]
}
 8009846:	bf00      	nop
 8009848:	371c      	adds	r7, #28
 800984a:	46bd      	mov	sp, r7
 800984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009850:	4770      	bx	lr

08009852 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009852:	b480      	push	{r7}
 8009854:	b085      	sub	sp, #20
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
 800985a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	689b      	ldr	r3, [r3, #8]
 8009860:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009868:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800986c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800986e:	683a      	ldr	r2, [r7, #0]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	4313      	orrs	r3, r2
 8009874:	f043 0307 	orr.w	r3, r3, #7
 8009878:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	68fa      	ldr	r2, [r7, #12]
 800987e:	609a      	str	r2, [r3, #8]
}
 8009880:	bf00      	nop
 8009882:	3714      	adds	r7, #20
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800988c:	b480      	push	{r7}
 800988e:	b087      	sub	sp, #28
 8009890:	af00      	add	r7, sp, #0
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	60b9      	str	r1, [r7, #8]
 8009896:	607a      	str	r2, [r7, #4]
 8009898:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80098a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	021a      	lsls	r2, r3, #8
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	431a      	orrs	r2, r3
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	697a      	ldr	r2, [r7, #20]
 80098b6:	4313      	orrs	r3, r2
 80098b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	697a      	ldr	r2, [r7, #20]
 80098be:	609a      	str	r2, [r3, #8]
}
 80098c0:	bf00      	nop
 80098c2:	371c      	adds	r7, #28
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b087      	sub	sp, #28
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	60b9      	str	r1, [r7, #8]
 80098d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	f003 031f 	and.w	r3, r3, #31
 80098de:	2201      	movs	r2, #1
 80098e0:	fa02 f303 	lsl.w	r3, r2, r3
 80098e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	6a1a      	ldr	r2, [r3, #32]
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	43db      	mvns	r3, r3
 80098ee:	401a      	ands	r2, r3
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6a1a      	ldr	r2, [r3, #32]
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	f003 031f 	and.w	r3, r3, #31
 80098fe:	6879      	ldr	r1, [r7, #4]
 8009900:	fa01 f303 	lsl.w	r3, r1, r3
 8009904:	431a      	orrs	r2, r3
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	621a      	str	r2, [r3, #32]
}
 800990a:	bf00      	nop
 800990c:	371c      	adds	r7, #28
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr
	...

08009918 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8009918:	b480      	push	{r7}
 800991a:	b083      	sub	sp, #12
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4a26      	ldr	r2, [pc, #152]	@ (80099bc <TIM_ResetCallback+0xa4>)
 8009924:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	4a25      	ldr	r2, [pc, #148]	@ (80099c0 <TIM_ResetCallback+0xa8>)
 800992c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a24      	ldr	r2, [pc, #144]	@ (80099c4 <TIM_ResetCallback+0xac>)
 8009934:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	4a23      	ldr	r2, [pc, #140]	@ (80099c8 <TIM_ResetCallback+0xb0>)
 800993c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	4a22      	ldr	r2, [pc, #136]	@ (80099cc <TIM_ResetCallback+0xb4>)
 8009944:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4a21      	ldr	r2, [pc, #132]	@ (80099d0 <TIM_ResetCallback+0xb8>)
 800994c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	4a20      	ldr	r2, [pc, #128]	@ (80099d4 <TIM_ResetCallback+0xbc>)
 8009954:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	4a1f      	ldr	r2, [pc, #124]	@ (80099d8 <TIM_ResetCallback+0xc0>)
 800995c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	4a1e      	ldr	r2, [pc, #120]	@ (80099dc <TIM_ResetCallback+0xc4>)
 8009964:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	4a1d      	ldr	r2, [pc, #116]	@ (80099e0 <TIM_ResetCallback+0xc8>)
 800996c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	4a1c      	ldr	r2, [pc, #112]	@ (80099e4 <TIM_ResetCallback+0xcc>)
 8009974:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	4a1b      	ldr	r2, [pc, #108]	@ (80099e8 <TIM_ResetCallback+0xd0>)
 800997c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	4a1a      	ldr	r2, [pc, #104]	@ (80099ec <TIM_ResetCallback+0xd4>)
 8009984:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4a19      	ldr	r2, [pc, #100]	@ (80099f0 <TIM_ResetCallback+0xd8>)
 800998c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4a18      	ldr	r2, [pc, #96]	@ (80099f4 <TIM_ResetCallback+0xdc>)
 8009994:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4a17      	ldr	r2, [pc, #92]	@ (80099f8 <TIM_ResetCallback+0xe0>)
 800999c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4a16      	ldr	r2, [pc, #88]	@ (80099fc <TIM_ResetCallback+0xe4>)
 80099a4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	4a15      	ldr	r2, [pc, #84]	@ (8009a00 <TIM_ResetCallback+0xe8>)
 80099ac:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 80099b0:	bf00      	nop
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr
 80099bc:	0800421d 	.word	0x0800421d
 80099c0:	08008c65 	.word	0x08008c65
 80099c4:	08008cdd 	.word	0x08008cdd
 80099c8:	08008cf1 	.word	0x08008cf1
 80099cc:	08008c8d 	.word	0x08008c8d
 80099d0:	08008ca1 	.word	0x08008ca1
 80099d4:	08008c79 	.word	0x08008c79
 80099d8:	08008cb5 	.word	0x08008cb5
 80099dc:	08008cc9 	.word	0x08008cc9
 80099e0:	08008d05 	.word	0x08008d05
 80099e4:	08009b31 	.word	0x08009b31
 80099e8:	08009b45 	.word	0x08009b45
 80099ec:	08009b59 	.word	0x08009b59
 80099f0:	08009b6d 	.word	0x08009b6d
 80099f4:	08009b81 	.word	0x08009b81
 80099f8:	08009b95 	.word	0x08009b95
 80099fc:	08009ba9 	.word	0x08009ba9
 8009a00:	08009bbd 	.word	0x08009bbd

08009a04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b085      	sub	sp, #20
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d101      	bne.n	8009a1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a18:	2302      	movs	r3, #2
 8009a1a:	e074      	b.n	8009b06 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2201      	movs	r2, #1
 8009a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2202      	movs	r2, #2
 8009a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a34      	ldr	r2, [pc, #208]	@ (8009b14 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d009      	beq.n	8009a5a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a33      	ldr	r2, [pc, #204]	@ (8009b18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d004      	beq.n	8009a5a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a31      	ldr	r2, [pc, #196]	@ (8009b1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d108      	bne.n	8009a6c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009a60:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	68fa      	ldr	r2, [r7, #12]
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	68fa      	ldr	r2, [r7, #12]
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	68fa      	ldr	r2, [r7, #12]
 8009a88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a21      	ldr	r2, [pc, #132]	@ (8009b14 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d022      	beq.n	8009ada <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a9c:	d01d      	beq.n	8009ada <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a1f      	ldr	r2, [pc, #124]	@ (8009b20 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d018      	beq.n	8009ada <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a1d      	ldr	r2, [pc, #116]	@ (8009b24 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d013      	beq.n	8009ada <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a1c      	ldr	r2, [pc, #112]	@ (8009b28 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d00e      	beq.n	8009ada <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a15      	ldr	r2, [pc, #84]	@ (8009b18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d009      	beq.n	8009ada <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a18      	ldr	r2, [pc, #96]	@ (8009b2c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d004      	beq.n	8009ada <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4a11      	ldr	r2, [pc, #68]	@ (8009b1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d10c      	bne.n	8009af4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ae0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	689b      	ldr	r3, [r3, #8]
 8009ae6:	68ba      	ldr	r2, [r7, #8]
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	68ba      	ldr	r2, [r7, #8]
 8009af2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2201      	movs	r2, #1
 8009af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009b04:	2300      	movs	r3, #0
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3714      	adds	r7, #20
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr
 8009b12:	bf00      	nop
 8009b14:	40012c00 	.word	0x40012c00
 8009b18:	40013400 	.word	0x40013400
 8009b1c:	40015000 	.word	0x40015000
 8009b20:	40000400 	.word	0x40000400
 8009b24:	40000800 	.word	0x40000800
 8009b28:	40000c00 	.word	0x40000c00
 8009b2c:	40014000 	.word	0x40014000

08009b30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b38:	bf00      	nop
 8009b3a:	370c      	adds	r7, #12
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009b4c:	bf00      	nop
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b60:	bf00      	nop
 8009b62:	370c      	adds	r7, #12
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009b74:	bf00      	nop
 8009b76:	370c      	adds	r7, #12
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b083      	sub	sp, #12
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009b88:	bf00      	nop
 8009b8a:	370c      	adds	r7, #12
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr

08009b94 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009b9c:	bf00      	nop
 8009b9e:	370c      	adds	r7, #12
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr

08009ba8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009bb0:	bf00      	nop
 8009bb2:	370c      	adds	r7, #12
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr

08009bbc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b083      	sub	sp, #12
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009bc4:	bf00      	nop
 8009bc6:	370c      	adds	r7, #12
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr

08009bd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d101      	bne.n	8009be2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	e050      	b.n	8009c84 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d114      	bne.n	8009c16 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 fe8d 	bl	800a914 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d103      	bne.n	8009c0c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	4a21      	ldr	r2, [pc, #132]	@ (8009c8c <HAL_UART_Init+0xbc>)
 8009c08:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2224      	movs	r2, #36	@ 0x24
 8009c1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f022 0201 	bic.w	r2, r2, #1
 8009c2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d002      	beq.n	8009c3c <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f001 f9ba 	bl	800afb0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 febb 	bl	800a9b8 <UART_SetConfig>
 8009c42:	4603      	mov	r3, r0
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d101      	bne.n	8009c4c <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e01b      	b.n	8009c84 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	685a      	ldr	r2, [r3, #4]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009c5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	689a      	ldr	r2, [r3, #8]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009c6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f042 0201 	orr.w	r2, r2, #1
 8009c7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f001 fa39 	bl	800b0f4 <UART_CheckIdleState>
 8009c82:	4603      	mov	r3, r0
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3708      	adds	r7, #8
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	080047b1 	.word	0x080047b1

08009c90 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b087      	sub	sp, #28
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	460b      	mov	r3, r1
 8009c9a:	607a      	str	r2, [r7, #4]
 8009c9c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d109      	bne.n	8009cbc <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	e09c      	b.n	8009df6 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cc2:	2b20      	cmp	r3, #32
 8009cc4:	d16c      	bne.n	8009da0 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8009cc6:	7afb      	ldrb	r3, [r7, #11]
 8009cc8:	2b0c      	cmp	r3, #12
 8009cca:	d85e      	bhi.n	8009d8a <HAL_UART_RegisterCallback+0xfa>
 8009ccc:	a201      	add	r2, pc, #4	@ (adr r2, 8009cd4 <HAL_UART_RegisterCallback+0x44>)
 8009cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cd2:	bf00      	nop
 8009cd4:	08009d09 	.word	0x08009d09
 8009cd8:	08009d13 	.word	0x08009d13
 8009cdc:	08009d1d 	.word	0x08009d1d
 8009ce0:	08009d27 	.word	0x08009d27
 8009ce4:	08009d31 	.word	0x08009d31
 8009ce8:	08009d3b 	.word	0x08009d3b
 8009cec:	08009d45 	.word	0x08009d45
 8009cf0:	08009d4f 	.word	0x08009d4f
 8009cf4:	08009d59 	.word	0x08009d59
 8009cf8:	08009d63 	.word	0x08009d63
 8009cfc:	08009d6d 	.word	0x08009d6d
 8009d00:	08009d77 	.word	0x08009d77
 8009d04:	08009d81 	.word	0x08009d81
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009d10:	e070      	b.n	8009df4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8009d1a:	e06b      	b.n	8009df4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8009d24:	e066      	b.n	8009df4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009d2e:	e061      	b.n	8009df4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009d38:	e05c      	b.n	8009df4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	687a      	ldr	r2, [r7, #4]
 8009d3e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8009d42:	e057      	b.n	8009df4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009d4c:	e052      	b.n	8009df4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009d56:	e04d      	b.n	8009df4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009d60:	e048      	b.n	8009df4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009d6a:	e043      	b.n	8009df4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009d74:	e03e      	b.n	8009df4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009d7e:	e039      	b.n	8009df4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009d88:	e034      	b.n	8009df4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d90:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	75fb      	strb	r3, [r7, #23]
        break;
 8009d9e:	e029      	b.n	8009df4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d11a      	bne.n	8009de0 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8009daa:	7afb      	ldrb	r3, [r7, #11]
 8009dac:	2b0b      	cmp	r3, #11
 8009dae:	d002      	beq.n	8009db6 <HAL_UART_RegisterCallback+0x126>
 8009db0:	2b0c      	cmp	r3, #12
 8009db2:	d005      	beq.n	8009dc0 <HAL_UART_RegisterCallback+0x130>
 8009db4:	e009      	b.n	8009dca <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	687a      	ldr	r2, [r7, #4]
 8009dba:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009dbe:	e019      	b.n	8009df4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009dc8:	e014      	b.n	8009df4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009dd0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	75fb      	strb	r3, [r7, #23]
        break;
 8009dde:	e009      	b.n	8009df4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009de6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8009df0:	2301      	movs	r3, #1
 8009df2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	371c      	adds	r7, #28
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr
 8009e02:	bf00      	nop

08009e04 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b08a      	sub	sp, #40	@ 0x28
 8009e08:	af02      	add	r7, sp, #8
 8009e0a:	60f8      	str	r0, [r7, #12]
 8009e0c:	60b9      	str	r1, [r7, #8]
 8009e0e:	603b      	str	r3, [r7, #0]
 8009e10:	4613      	mov	r3, r2
 8009e12:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009e1a:	2b20      	cmp	r3, #32
 8009e1c:	f040 80b5 	bne.w	8009f8a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d002      	beq.n	8009e2c <HAL_UART_Receive+0x28>
 8009e26:	88fb      	ldrh	r3, [r7, #6]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d101      	bne.n	8009e30 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e0ad      	b.n	8009f8c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2200      	movs	r2, #0
 8009e34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2222      	movs	r2, #34	@ 0x22
 8009e3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2200      	movs	r2, #0
 8009e44:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009e46:	f7fa fec3 	bl	8004bd0 <HAL_GetTick>
 8009e4a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	88fa      	ldrh	r2, [r7, #6]
 8009e50:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	88fa      	ldrh	r2, [r7, #6]
 8009e58:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	689b      	ldr	r3, [r3, #8]
 8009e60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e64:	d10e      	bne.n	8009e84 <HAL_UART_Receive+0x80>
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	691b      	ldr	r3, [r3, #16]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d105      	bne.n	8009e7a <HAL_UART_Receive+0x76>
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009e74:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009e78:	e02d      	b.n	8009ed6 <HAL_UART_Receive+0xd2>
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	22ff      	movs	r2, #255	@ 0xff
 8009e7e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009e82:	e028      	b.n	8009ed6 <HAL_UART_Receive+0xd2>
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	689b      	ldr	r3, [r3, #8]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d10d      	bne.n	8009ea8 <HAL_UART_Receive+0xa4>
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	691b      	ldr	r3, [r3, #16]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d104      	bne.n	8009e9e <HAL_UART_Receive+0x9a>
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	22ff      	movs	r2, #255	@ 0xff
 8009e98:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009e9c:	e01b      	b.n	8009ed6 <HAL_UART_Receive+0xd2>
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	227f      	movs	r2, #127	@ 0x7f
 8009ea2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009ea6:	e016      	b.n	8009ed6 <HAL_UART_Receive+0xd2>
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009eb0:	d10d      	bne.n	8009ece <HAL_UART_Receive+0xca>
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	691b      	ldr	r3, [r3, #16]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d104      	bne.n	8009ec4 <HAL_UART_Receive+0xc0>
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	227f      	movs	r2, #127	@ 0x7f
 8009ebe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009ec2:	e008      	b.n	8009ed6 <HAL_UART_Receive+0xd2>
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	223f      	movs	r2, #63	@ 0x3f
 8009ec8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009ecc:	e003      	b.n	8009ed6 <HAL_UART_Receive+0xd2>
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009edc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ee6:	d108      	bne.n	8009efa <HAL_UART_Receive+0xf6>
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	691b      	ldr	r3, [r3, #16]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d104      	bne.n	8009efa <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	61bb      	str	r3, [r7, #24]
 8009ef8:	e003      	b.n	8009f02 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009efe:	2300      	movs	r3, #0
 8009f00:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009f02:	e036      	b.n	8009f72 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	9300      	str	r3, [sp, #0]
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	2120      	movs	r1, #32
 8009f0e:	68f8      	ldr	r0, [r7, #12]
 8009f10:	f001 f99a 	bl	800b248 <UART_WaitOnFlagUntilTimeout>
 8009f14:	4603      	mov	r3, r0
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d005      	beq.n	8009f26 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2220      	movs	r2, #32
 8009f1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8009f22:	2303      	movs	r3, #3
 8009f24:	e032      	b.n	8009f8c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8009f26:	69fb      	ldr	r3, [r7, #28]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d10c      	bne.n	8009f46 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f32:	b29a      	uxth	r2, r3
 8009f34:	8a7b      	ldrh	r3, [r7, #18]
 8009f36:	4013      	ands	r3, r2
 8009f38:	b29a      	uxth	r2, r3
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009f3e:	69bb      	ldr	r3, [r7, #24]
 8009f40:	3302      	adds	r3, #2
 8009f42:	61bb      	str	r3, [r7, #24]
 8009f44:	e00c      	b.n	8009f60 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f4c:	b2da      	uxtb	r2, r3
 8009f4e:	8a7b      	ldrh	r3, [r7, #18]
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	4013      	ands	r3, r2
 8009f54:	b2da      	uxtb	r2, r3
 8009f56:	69fb      	ldr	r3, [r7, #28]
 8009f58:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009f5a:	69fb      	ldr	r3, [r7, #28]
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	3b01      	subs	r3, #1
 8009f6a:	b29a      	uxth	r2, r3
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d1c2      	bne.n	8009f04 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2220      	movs	r2, #32
 8009f82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8009f86:	2300      	movs	r3, #0
 8009f88:	e000      	b.n	8009f8c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8009f8a:	2302      	movs	r3, #2
  }
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3720      	adds	r7, #32
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b08a      	sub	sp, #40	@ 0x28
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fa8:	2b20      	cmp	r3, #32
 8009faa:	d167      	bne.n	800a07c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d002      	beq.n	8009fb8 <HAL_UART_Transmit_DMA+0x24>
 8009fb2:	88fb      	ldrh	r3, [r7, #6]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d101      	bne.n	8009fbc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	e060      	b.n	800a07e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	68ba      	ldr	r2, [r7, #8]
 8009fc0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	88fa      	ldrh	r2, [r7, #6]
 8009fc6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	88fa      	ldrh	r2, [r7, #6]
 8009fce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2221      	movs	r2, #33	@ 0x21
 8009fde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d028      	beq.n	800a03c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009fee:	4a26      	ldr	r2, [pc, #152]	@ (800a088 <HAL_UART_Transmit_DMA+0xf4>)
 8009ff0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009ff6:	4a25      	ldr	r2, [pc, #148]	@ (800a08c <HAL_UART_Transmit_DMA+0xf8>)
 8009ff8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009ffe:	4a24      	ldr	r2, [pc, #144]	@ (800a090 <HAL_UART_Transmit_DMA+0xfc>)
 800a000:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a006:	2200      	movs	r2, #0
 800a008:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a012:	4619      	mov	r1, r3
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	3328      	adds	r3, #40	@ 0x28
 800a01a:	461a      	mov	r2, r3
 800a01c:	88fb      	ldrh	r3, [r7, #6]
 800a01e:	f7fc f89b 	bl	8006158 <HAL_DMA_Start_IT>
 800a022:	4603      	mov	r3, r0
 800a024:	2b00      	cmp	r3, #0
 800a026:	d009      	beq.n	800a03c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2210      	movs	r2, #16
 800a02c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2220      	movs	r2, #32
 800a034:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800a038:	2301      	movs	r3, #1
 800a03a:	e020      	b.n	800a07e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2240      	movs	r2, #64	@ 0x40
 800a042:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	3308      	adds	r3, #8
 800a04a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	e853 3f00 	ldrex	r3, [r3]
 800a052:	613b      	str	r3, [r7, #16]
   return(result);
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a05a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	3308      	adds	r3, #8
 800a062:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a064:	623a      	str	r2, [r7, #32]
 800a066:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a068:	69f9      	ldr	r1, [r7, #28]
 800a06a:	6a3a      	ldr	r2, [r7, #32]
 800a06c:	e841 2300 	strex	r3, r2, [r1]
 800a070:	61bb      	str	r3, [r7, #24]
   return(result);
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d1e5      	bne.n	800a044 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800a078:	2300      	movs	r3, #0
 800a07a:	e000      	b.n	800a07e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a07c:	2302      	movs	r3, #2
  }
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3728      	adds	r7, #40	@ 0x28
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
 800a086:	bf00      	nop
 800a088:	0800b5bf 	.word	0x0800b5bf
 800a08c:	0800b65d 	.word	0x0800b65d
 800a090:	0800b7f7 	.word	0x0800b7f7

0800a094 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b08a      	sub	sp, #40	@ 0x28
 800a098:	af00      	add	r7, sp, #0
 800a09a:	60f8      	str	r0, [r7, #12]
 800a09c:	60b9      	str	r1, [r7, #8]
 800a09e:	4613      	mov	r3, r2
 800a0a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a0a8:	2b20      	cmp	r3, #32
 800a0aa:	d137      	bne.n	800a11c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d002      	beq.n	800a0b8 <HAL_UART_Receive_DMA+0x24>
 800a0b2:	88fb      	ldrh	r3, [r7, #6]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d101      	bne.n	800a0bc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	e030      	b.n	800a11e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4a18      	ldr	r2, [pc, #96]	@ (800a128 <HAL_UART_Receive_DMA+0x94>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d01f      	beq.n	800a10c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d018      	beq.n	800a10c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	e853 3f00 	ldrex	r3, [r3]
 800a0e6:	613b      	str	r3, [r7, #16]
   return(result);
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a0ee:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f8:	623b      	str	r3, [r7, #32]
 800a0fa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0fc:	69f9      	ldr	r1, [r7, #28]
 800a0fe:	6a3a      	ldr	r2, [r7, #32]
 800a100:	e841 2300 	strex	r3, r2, [r1]
 800a104:	61bb      	str	r3, [r7, #24]
   return(result);
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d1e6      	bne.n	800a0da <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a10c:	88fb      	ldrh	r3, [r7, #6]
 800a10e:	461a      	mov	r2, r3
 800a110:	68b9      	ldr	r1, [r7, #8]
 800a112:	68f8      	ldr	r0, [r7, #12]
 800a114:	f001 f906 	bl	800b324 <UART_Start_Receive_DMA>
 800a118:	4603      	mov	r3, r0
 800a11a:	e000      	b.n	800a11e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a11c:	2302      	movs	r3, #2
  }
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3728      	adds	r7, #40	@ 0x28
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	40008000 	.word	0x40008000

0800a12c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b0ba      	sub	sp, #232	@ 0xe8
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	69db      	ldr	r3, [r3, #28]
 800a13a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	689b      	ldr	r3, [r3, #8]
 800a14e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a152:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a156:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a15a:	4013      	ands	r3, r2
 800a15c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a160:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a164:	2b00      	cmp	r3, #0
 800a166:	d11b      	bne.n	800a1a0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a16c:	f003 0320 	and.w	r3, r3, #32
 800a170:	2b00      	cmp	r3, #0
 800a172:	d015      	beq.n	800a1a0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a178:	f003 0320 	and.w	r3, r3, #32
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d105      	bne.n	800a18c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a180:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a184:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d009      	beq.n	800a1a0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a190:	2b00      	cmp	r3, #0
 800a192:	f000 82f3 	beq.w	800a77c <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	4798      	blx	r3
      }
      return;
 800a19e:	e2ed      	b.n	800a77c <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a1a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	f000 8129 	beq.w	800a3fc <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a1aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a1ae:	4b90      	ldr	r3, [pc, #576]	@ (800a3f0 <HAL_UART_IRQHandler+0x2c4>)
 800a1b0:	4013      	ands	r3, r2
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d106      	bne.n	800a1c4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a1b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a1ba:	4b8e      	ldr	r3, [pc, #568]	@ (800a3f4 <HAL_UART_IRQHandler+0x2c8>)
 800a1bc:	4013      	ands	r3, r2
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	f000 811c 	beq.w	800a3fc <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a1c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1c8:	f003 0301 	and.w	r3, r3, #1
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d011      	beq.n	800a1f4 <HAL_UART_IRQHandler+0xc8>
 800a1d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d00b      	beq.n	800a1f4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1ea:	f043 0201 	orr.w	r2, r3, #1
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a1f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1f8:	f003 0302 	and.w	r3, r3, #2
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d011      	beq.n	800a224 <HAL_UART_IRQHandler+0xf8>
 800a200:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a204:	f003 0301 	and.w	r3, r3, #1
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d00b      	beq.n	800a224 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	2202      	movs	r2, #2
 800a212:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a21a:	f043 0204 	orr.w	r2, r3, #4
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a228:	f003 0304 	and.w	r3, r3, #4
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d011      	beq.n	800a254 <HAL_UART_IRQHandler+0x128>
 800a230:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a234:	f003 0301 	and.w	r3, r3, #1
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d00b      	beq.n	800a254 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	2204      	movs	r2, #4
 800a242:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a24a:	f043 0202 	orr.w	r2, r3, #2
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a258:	f003 0308 	and.w	r3, r3, #8
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d017      	beq.n	800a290 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a264:	f003 0320 	and.w	r3, r3, #32
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d105      	bne.n	800a278 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a26c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a270:	4b5f      	ldr	r3, [pc, #380]	@ (800a3f0 <HAL_UART_IRQHandler+0x2c4>)
 800a272:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a274:	2b00      	cmp	r3, #0
 800a276:	d00b      	beq.n	800a290 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	2208      	movs	r2, #8
 800a27e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a286:	f043 0208 	orr.w	r2, r3, #8
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a294:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d012      	beq.n	800a2c2 <HAL_UART_IRQHandler+0x196>
 800a29c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d00c      	beq.n	800a2c2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a2b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2b8:	f043 0220 	orr.w	r2, r3, #32
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	f000 8259 	beq.w	800a780 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a2ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2d2:	f003 0320 	and.w	r3, r3, #32
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d013      	beq.n	800a302 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a2da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2de:	f003 0320 	and.w	r3, r3, #32
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d105      	bne.n	800a2f2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a2e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a2ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d007      	beq.n	800a302 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d003      	beq.n	800a302 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a308:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	689b      	ldr	r3, [r3, #8]
 800a312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a316:	2b40      	cmp	r3, #64	@ 0x40
 800a318:	d005      	beq.n	800a326 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a31a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a31e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a322:	2b00      	cmp	r3, #0
 800a324:	d058      	beq.n	800a3d8 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f001 f8e3 	bl	800b4f2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	689b      	ldr	r3, [r3, #8]
 800a332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a336:	2b40      	cmp	r3, #64	@ 0x40
 800a338:	d148      	bne.n	800a3cc <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	3308      	adds	r3, #8
 800a340:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a344:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a348:	e853 3f00 	ldrex	r3, [r3]
 800a34c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a350:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a354:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a358:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	3308      	adds	r3, #8
 800a362:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a366:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a36a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a36e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a372:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a376:	e841 2300 	strex	r3, r2, [r1]
 800a37a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a37e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a382:	2b00      	cmp	r3, #0
 800a384:	d1d9      	bne.n	800a33a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d017      	beq.n	800a3c0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a396:	4a18      	ldr	r2, [pc, #96]	@ (800a3f8 <HAL_UART_IRQHandler+0x2cc>)
 800a398:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7fb ffad 	bl	8006300 <HAL_DMA_Abort_IT>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d01f      	beq.n	800a3ec <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3b4:	687a      	ldr	r2, [r7, #4]
 800a3b6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a3ba:	4610      	mov	r0, r2
 800a3bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3be:	e015      	b.n	800a3ec <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3ca:	e00f      	b.n	800a3ec <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3d6:	e009      	b.n	800a3ec <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a3ea:	e1c9      	b.n	800a780 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3ec:	bf00      	nop
    return;
 800a3ee:	e1c7      	b.n	800a780 <HAL_UART_IRQHandler+0x654>
 800a3f0:	10000001 	.word	0x10000001
 800a3f4:	04000120 	.word	0x04000120
 800a3f8:	0800b87b 	.word	0x0800b87b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a400:	2b01      	cmp	r3, #1
 800a402:	f040 8157 	bne.w	800a6b4 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a40a:	f003 0310 	and.w	r3, r3, #16
 800a40e:	2b00      	cmp	r3, #0
 800a410:	f000 8150 	beq.w	800a6b4 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a418:	f003 0310 	and.w	r3, r3, #16
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	f000 8149 	beq.w	800a6b4 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	2210      	movs	r2, #16
 800a428:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	689b      	ldr	r3, [r3, #8]
 800a430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a434:	2b40      	cmp	r3, #64	@ 0x40
 800a436:	f040 80bd 	bne.w	800a5b4 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a448:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	f000 8199 	beq.w	800a784 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a458:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a45c:	429a      	cmp	r2, r3
 800a45e:	f080 8191 	bcs.w	800a784 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a468:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f003 0320 	and.w	r3, r3, #32
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	f040 8087 	bne.w	800a58e <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a488:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a48c:	e853 3f00 	ldrex	r3, [r3]
 800a490:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a494:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a498:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a49c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a4aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a4ae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a4b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a4ba:	e841 2300 	strex	r3, r2, [r1]
 800a4be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a4c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d1da      	bne.n	800a480 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	3308      	adds	r3, #8
 800a4d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a4d4:	e853 3f00 	ldrex	r3, [r3]
 800a4d8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a4da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a4dc:	f023 0301 	bic.w	r3, r3, #1
 800a4e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	3308      	adds	r3, #8
 800a4ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a4ee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a4f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a4f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a4fa:	e841 2300 	strex	r3, r2, [r1]
 800a4fe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a500:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a502:	2b00      	cmp	r3, #0
 800a504:	d1e1      	bne.n	800a4ca <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	3308      	adds	r3, #8
 800a50c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a50e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a510:	e853 3f00 	ldrex	r3, [r3]
 800a514:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a516:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a518:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a51c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	3308      	adds	r3, #8
 800a526:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a52a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a52c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a52e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a530:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a532:	e841 2300 	strex	r3, r2, [r1]
 800a536:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a538:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d1e3      	bne.n	800a506 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2220      	movs	r2, #32
 800a542:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2200      	movs	r2, #0
 800a54a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a552:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a554:	e853 3f00 	ldrex	r3, [r3]
 800a558:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a55a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a55c:	f023 0310 	bic.w	r3, r3, #16
 800a560:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	461a      	mov	r2, r3
 800a56a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a56e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a570:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a572:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a574:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a576:	e841 2300 	strex	r3, r2, [r1]
 800a57a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a57c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d1e4      	bne.n	800a54c <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a588:	4618      	mov	r0, r3
 800a58a:	f7fb fe60 	bl	800624e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2202      	movs	r2, #2
 800a592:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800a5a0:	687a      	ldr	r2, [r7, #4]
 800a5a2:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800a5a6:	b292      	uxth	r2, r2
 800a5a8:	1a8a      	subs	r2, r1, r2
 800a5aa:	b292      	uxth	r2, r2
 800a5ac:	4611      	mov	r1, r2
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a5b2:	e0e7      	b.n	800a784 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a5c0:	b29b      	uxth	r3, r3
 800a5c2:	1ad3      	subs	r3, r2, r3
 800a5c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	f000 80d9 	beq.w	800a788 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 800a5d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	f000 80d4 	beq.w	800a788 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5e8:	e853 3f00 	ldrex	r3, [r3]
 800a5ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a5ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a5f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a602:	647b      	str	r3, [r7, #68]	@ 0x44
 800a604:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a606:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a608:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a60a:	e841 2300 	strex	r3, r2, [r1]
 800a60e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a610:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a612:	2b00      	cmp	r3, #0
 800a614:	d1e4      	bne.n	800a5e0 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	3308      	adds	r3, #8
 800a61c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a620:	e853 3f00 	ldrex	r3, [r3]
 800a624:	623b      	str	r3, [r7, #32]
   return(result);
 800a626:	6a3b      	ldr	r3, [r7, #32]
 800a628:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a62c:	f023 0301 	bic.w	r3, r3, #1
 800a630:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	3308      	adds	r3, #8
 800a63a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a63e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a640:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a642:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a644:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a646:	e841 2300 	strex	r3, r2, [r1]
 800a64a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a64c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d1e1      	bne.n	800a616 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2220      	movs	r2, #32
 800a656:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2200      	movs	r2, #0
 800a65e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2200      	movs	r2, #0
 800a664:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	e853 3f00 	ldrex	r3, [r3]
 800a672:	60fb      	str	r3, [r7, #12]
   return(result);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f023 0310 	bic.w	r3, r3, #16
 800a67a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	461a      	mov	r2, r3
 800a684:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a688:	61fb      	str	r3, [r7, #28]
 800a68a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a68c:	69b9      	ldr	r1, [r7, #24]
 800a68e:	69fa      	ldr	r2, [r7, #28]
 800a690:	e841 2300 	strex	r3, r2, [r1]
 800a694:	617b      	str	r3, [r7, #20]
   return(result);
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d1e4      	bne.n	800a666 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2202      	movs	r2, #2
 800a6a0:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a6a8:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800a6ac:	4611      	mov	r1, r2
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a6b2:	e069      	b.n	800a788 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a6b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d010      	beq.n	800a6e2 <HAL_UART_IRQHandler+0x5b6>
 800a6c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a6c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d00a      	beq.n	800a6e2 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a6d4:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a6e0:	e055      	b.n	800a78e <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a6e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d014      	beq.n	800a718 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a6ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d105      	bne.n	800a706 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a6fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a6fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a702:	2b00      	cmp	r3, #0
 800a704:	d008      	beq.n	800a718 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d03e      	beq.n	800a78c <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	4798      	blx	r3
    }
    return;
 800a716:	e039      	b.n	800a78c <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a71c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a720:	2b00      	cmp	r3, #0
 800a722:	d009      	beq.n	800a738 <HAL_UART_IRQHandler+0x60c>
 800a724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d003      	beq.n	800a738 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f001 f8ba 	bl	800b8aa <UART_EndTransmit_IT>
    return;
 800a736:	e02a      	b.n	800a78e <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a73c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a740:	2b00      	cmp	r3, #0
 800a742:	d00b      	beq.n	800a75c <HAL_UART_IRQHandler+0x630>
 800a744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a748:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d005      	beq.n	800a75c <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a75a:	e018      	b.n	800a78e <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a75c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a760:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a764:	2b00      	cmp	r3, #0
 800a766:	d012      	beq.n	800a78e <HAL_UART_IRQHandler+0x662>
 800a768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	da0e      	bge.n	800a78e <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a77a:	e008      	b.n	800a78e <HAL_UART_IRQHandler+0x662>
      return;
 800a77c:	bf00      	nop
 800a77e:	e006      	b.n	800a78e <HAL_UART_IRQHandler+0x662>
    return;
 800a780:	bf00      	nop
 800a782:	e004      	b.n	800a78e <HAL_UART_IRQHandler+0x662>
      return;
 800a784:	bf00      	nop
 800a786:	e002      	b.n	800a78e <HAL_UART_IRQHandler+0x662>
      return;
 800a788:	bf00      	nop
 800a78a:	e000      	b.n	800a78e <HAL_UART_IRQHandler+0x662>
    return;
 800a78c:	bf00      	nop
  }
}
 800a78e:	37e8      	adds	r7, #232	@ 0xe8
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a79c:	bf00      	nop
 800a79e:	370c      	adds	r7, #12
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a7b0:	bf00      	nop
 800a7b2:	370c      	adds	r7, #12
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr

0800a7bc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b083      	sub	sp, #12
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a7c4:	bf00      	nop
 800a7c6:	370c      	adds	r7, #12
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr

0800a7d0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a7d8:	bf00      	nop
 800a7da:	370c      	adds	r7, #12
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr

0800a7e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a7ec:	bf00      	nop
 800a7ee:	370c      	adds	r7, #12
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr

0800a7f8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800a800:	bf00      	nop
 800a802:	370c      	adds	r7, #12
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr

0800a80c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800a814:	bf00      	nop
 800a816:	370c      	adds	r7, #12
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr

0800a820 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800a820:	b480      	push	{r7}
 800a822:	b083      	sub	sp, #12
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800a828:	bf00      	nop
 800a82a:	370c      	adds	r7, #12
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr

0800a834 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a834:	b480      	push	{r7}
 800a836:	b083      	sub	sp, #12
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	460b      	mov	r3, r1
 800a83e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a840:	bf00      	nop
 800a842:	370c      	adds	r7, #12
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr

0800a84c <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b083      	sub	sp, #12
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4a09      	ldr	r2, [pc, #36]	@ (800a880 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d009      	beq.n	800a874 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	695b      	ldr	r3, [r3, #20]
 800a866:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	683a      	ldr	r2, [r7, #0]
 800a870:	430a      	orrs	r2, r1
 800a872:	615a      	str	r2, [r3, #20]
  }
}
 800a874:	bf00      	nop
 800a876:	370c      	adds	r7, #12
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr
 800a880:	40008000 	.word	0x40008000

0800a884 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800a884:	b480      	push	{r7}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4a18      	ldr	r2, [pc, #96]	@ (800a8f4 <HAL_UART_EnableReceiverTimeout+0x70>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d027      	beq.n	800a8e6 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a89c:	2b20      	cmp	r3, #32
 800a89e:	d120      	bne.n	800a8e2 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a8a6:	2b01      	cmp	r3, #1
 800a8a8:	d101      	bne.n	800a8ae <HAL_UART_EnableReceiverTimeout+0x2a>
 800a8aa:	2302      	movs	r3, #2
 800a8ac:	e01c      	b.n	800a8e8 <HAL_UART_EnableReceiverTimeout+0x64>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2224      	movs	r2, #36	@ 0x24
 800a8ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	685a      	ldr	r2, [r3, #4]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800a8cc:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2220      	movs	r2, #32
 800a8d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	e002      	b.n	800a8e8 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800a8e2:	2302      	movs	r3, #2
 800a8e4:	e000      	b.n	800a8e8 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800a8e6:	2301      	movs	r3, #1
  }
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	370c      	adds	r7, #12
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr
 800a8f4:	40008000 	.word	0x40008000

0800a8f8 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800a906:	4618      	mov	r0, r3
 800a908:	370c      	adds	r7, #12
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr
	...

0800a914 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800a914:	b480      	push	{r7}
 800a916:	b083      	sub	sp, #12
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	4a1a      	ldr	r2, [pc, #104]	@ (800a988 <UART_InitCallbacksToDefault+0x74>)
 800a920:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	4a19      	ldr	r2, [pc, #100]	@ (800a98c <UART_InitCallbacksToDefault+0x78>)
 800a928:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	4a18      	ldr	r2, [pc, #96]	@ (800a990 <UART_InitCallbacksToDefault+0x7c>)
 800a930:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	4a17      	ldr	r2, [pc, #92]	@ (800a994 <UART_InitCallbacksToDefault+0x80>)
 800a938:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	4a16      	ldr	r2, [pc, #88]	@ (800a998 <UART_InitCallbacksToDefault+0x84>)
 800a940:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	4a15      	ldr	r2, [pc, #84]	@ (800a99c <UART_InitCallbacksToDefault+0x88>)
 800a948:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	4a14      	ldr	r2, [pc, #80]	@ (800a9a0 <UART_InitCallbacksToDefault+0x8c>)
 800a950:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	4a13      	ldr	r2, [pc, #76]	@ (800a9a4 <UART_InitCallbacksToDefault+0x90>)
 800a958:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	4a12      	ldr	r2, [pc, #72]	@ (800a9a8 <UART_InitCallbacksToDefault+0x94>)
 800a960:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	4a11      	ldr	r2, [pc, #68]	@ (800a9ac <UART_InitCallbacksToDefault+0x98>)
 800a968:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	4a10      	ldr	r2, [pc, #64]	@ (800a9b0 <UART_InitCallbacksToDefault+0x9c>)
 800a970:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	4a0f      	ldr	r2, [pc, #60]	@ (800a9b4 <UART_InitCallbacksToDefault+0xa0>)
 800a978:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800a97c:	bf00      	nop
 800a97e:	370c      	adds	r7, #12
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr
 800a988:	0800a7a9 	.word	0x0800a7a9
 800a98c:	0800a795 	.word	0x0800a795
 800a990:	0800a7d1 	.word	0x0800a7d1
 800a994:	0800a7bd 	.word	0x0800a7bd
 800a998:	0800a7e5 	.word	0x0800a7e5
 800a99c:	0800a7f9 	.word	0x0800a7f9
 800a9a0:	0800a80d 	.word	0x0800a80d
 800a9a4:	0800a821 	.word	0x0800a821
 800a9a8:	0800b905 	.word	0x0800b905
 800a9ac:	0800b919 	.word	0x0800b919
 800a9b0:	0800b92d 	.word	0x0800b92d
 800a9b4:	0800a835 	.word	0x0800a835

0800a9b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a9b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a9bc:	b08c      	sub	sp, #48	@ 0x30
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	689a      	ldr	r2, [r3, #8]
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	691b      	ldr	r3, [r3, #16]
 800a9d0:	431a      	orrs	r2, r3
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	695b      	ldr	r3, [r3, #20]
 800a9d6:	431a      	orrs	r2, r3
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	69db      	ldr	r3, [r3, #28]
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	681a      	ldr	r2, [r3, #0]
 800a9e6:	4baa      	ldr	r3, [pc, #680]	@ (800ac90 <UART_SetConfig+0x2d8>)
 800a9e8:	4013      	ands	r3, r2
 800a9ea:	697a      	ldr	r2, [r7, #20]
 800a9ec:	6812      	ldr	r2, [r2, #0]
 800a9ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a9f0:	430b      	orrs	r3, r1
 800a9f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	68da      	ldr	r2, [r3, #12]
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	430a      	orrs	r2, r1
 800aa08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	699b      	ldr	r3, [r3, #24]
 800aa0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4a9f      	ldr	r2, [pc, #636]	@ (800ac94 <UART_SetConfig+0x2dc>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d004      	beq.n	800aa24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	6a1b      	ldr	r3, [r3, #32]
 800aa1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa20:	4313      	orrs	r3, r2
 800aa22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	689b      	ldr	r3, [r3, #8]
 800aa2a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800aa2e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800aa32:	697a      	ldr	r2, [r7, #20]
 800aa34:	6812      	ldr	r2, [r2, #0]
 800aa36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa38:	430b      	orrs	r3, r1
 800aa3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa42:	f023 010f 	bic.w	r1, r3, #15
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	430a      	orrs	r2, r1
 800aa50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a90      	ldr	r2, [pc, #576]	@ (800ac98 <UART_SetConfig+0x2e0>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d125      	bne.n	800aaa8 <UART_SetConfig+0xf0>
 800aa5c:	4b8f      	ldr	r3, [pc, #572]	@ (800ac9c <UART_SetConfig+0x2e4>)
 800aa5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa62:	f003 0303 	and.w	r3, r3, #3
 800aa66:	2b03      	cmp	r3, #3
 800aa68:	d81a      	bhi.n	800aaa0 <UART_SetConfig+0xe8>
 800aa6a:	a201      	add	r2, pc, #4	@ (adr r2, 800aa70 <UART_SetConfig+0xb8>)
 800aa6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa70:	0800aa81 	.word	0x0800aa81
 800aa74:	0800aa91 	.word	0x0800aa91
 800aa78:	0800aa89 	.word	0x0800aa89
 800aa7c:	0800aa99 	.word	0x0800aa99
 800aa80:	2301      	movs	r3, #1
 800aa82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa86:	e116      	b.n	800acb6 <UART_SetConfig+0x2fe>
 800aa88:	2302      	movs	r3, #2
 800aa8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa8e:	e112      	b.n	800acb6 <UART_SetConfig+0x2fe>
 800aa90:	2304      	movs	r3, #4
 800aa92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa96:	e10e      	b.n	800acb6 <UART_SetConfig+0x2fe>
 800aa98:	2308      	movs	r3, #8
 800aa9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa9e:	e10a      	b.n	800acb6 <UART_SetConfig+0x2fe>
 800aaa0:	2310      	movs	r3, #16
 800aaa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aaa6:	e106      	b.n	800acb6 <UART_SetConfig+0x2fe>
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	4a7c      	ldr	r2, [pc, #496]	@ (800aca0 <UART_SetConfig+0x2e8>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d138      	bne.n	800ab24 <UART_SetConfig+0x16c>
 800aab2:	4b7a      	ldr	r3, [pc, #488]	@ (800ac9c <UART_SetConfig+0x2e4>)
 800aab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aab8:	f003 030c 	and.w	r3, r3, #12
 800aabc:	2b0c      	cmp	r3, #12
 800aabe:	d82d      	bhi.n	800ab1c <UART_SetConfig+0x164>
 800aac0:	a201      	add	r2, pc, #4	@ (adr r2, 800aac8 <UART_SetConfig+0x110>)
 800aac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac6:	bf00      	nop
 800aac8:	0800aafd 	.word	0x0800aafd
 800aacc:	0800ab1d 	.word	0x0800ab1d
 800aad0:	0800ab1d 	.word	0x0800ab1d
 800aad4:	0800ab1d 	.word	0x0800ab1d
 800aad8:	0800ab0d 	.word	0x0800ab0d
 800aadc:	0800ab1d 	.word	0x0800ab1d
 800aae0:	0800ab1d 	.word	0x0800ab1d
 800aae4:	0800ab1d 	.word	0x0800ab1d
 800aae8:	0800ab05 	.word	0x0800ab05
 800aaec:	0800ab1d 	.word	0x0800ab1d
 800aaf0:	0800ab1d 	.word	0x0800ab1d
 800aaf4:	0800ab1d 	.word	0x0800ab1d
 800aaf8:	0800ab15 	.word	0x0800ab15
 800aafc:	2300      	movs	r3, #0
 800aafe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab02:	e0d8      	b.n	800acb6 <UART_SetConfig+0x2fe>
 800ab04:	2302      	movs	r3, #2
 800ab06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab0a:	e0d4      	b.n	800acb6 <UART_SetConfig+0x2fe>
 800ab0c:	2304      	movs	r3, #4
 800ab0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab12:	e0d0      	b.n	800acb6 <UART_SetConfig+0x2fe>
 800ab14:	2308      	movs	r3, #8
 800ab16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab1a:	e0cc      	b.n	800acb6 <UART_SetConfig+0x2fe>
 800ab1c:	2310      	movs	r3, #16
 800ab1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab22:	e0c8      	b.n	800acb6 <UART_SetConfig+0x2fe>
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	4a5e      	ldr	r2, [pc, #376]	@ (800aca4 <UART_SetConfig+0x2ec>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d125      	bne.n	800ab7a <UART_SetConfig+0x1c2>
 800ab2e:	4b5b      	ldr	r3, [pc, #364]	@ (800ac9c <UART_SetConfig+0x2e4>)
 800ab30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab34:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ab38:	2b30      	cmp	r3, #48	@ 0x30
 800ab3a:	d016      	beq.n	800ab6a <UART_SetConfig+0x1b2>
 800ab3c:	2b30      	cmp	r3, #48	@ 0x30
 800ab3e:	d818      	bhi.n	800ab72 <UART_SetConfig+0x1ba>
 800ab40:	2b20      	cmp	r3, #32
 800ab42:	d00a      	beq.n	800ab5a <UART_SetConfig+0x1a2>
 800ab44:	2b20      	cmp	r3, #32
 800ab46:	d814      	bhi.n	800ab72 <UART_SetConfig+0x1ba>
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d002      	beq.n	800ab52 <UART_SetConfig+0x19a>
 800ab4c:	2b10      	cmp	r3, #16
 800ab4e:	d008      	beq.n	800ab62 <UART_SetConfig+0x1aa>
 800ab50:	e00f      	b.n	800ab72 <UART_SetConfig+0x1ba>
 800ab52:	2300      	movs	r3, #0
 800ab54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab58:	e0ad      	b.n	800acb6 <UART_SetConfig+0x2fe>
 800ab5a:	2302      	movs	r3, #2
 800ab5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab60:	e0a9      	b.n	800acb6 <UART_SetConfig+0x2fe>
 800ab62:	2304      	movs	r3, #4
 800ab64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab68:	e0a5      	b.n	800acb6 <UART_SetConfig+0x2fe>
 800ab6a:	2308      	movs	r3, #8
 800ab6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab70:	e0a1      	b.n	800acb6 <UART_SetConfig+0x2fe>
 800ab72:	2310      	movs	r3, #16
 800ab74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab78:	e09d      	b.n	800acb6 <UART_SetConfig+0x2fe>
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4a4a      	ldr	r2, [pc, #296]	@ (800aca8 <UART_SetConfig+0x2f0>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d125      	bne.n	800abd0 <UART_SetConfig+0x218>
 800ab84:	4b45      	ldr	r3, [pc, #276]	@ (800ac9c <UART_SetConfig+0x2e4>)
 800ab86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab8a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ab8e:	2bc0      	cmp	r3, #192	@ 0xc0
 800ab90:	d016      	beq.n	800abc0 <UART_SetConfig+0x208>
 800ab92:	2bc0      	cmp	r3, #192	@ 0xc0
 800ab94:	d818      	bhi.n	800abc8 <UART_SetConfig+0x210>
 800ab96:	2b80      	cmp	r3, #128	@ 0x80
 800ab98:	d00a      	beq.n	800abb0 <UART_SetConfig+0x1f8>
 800ab9a:	2b80      	cmp	r3, #128	@ 0x80
 800ab9c:	d814      	bhi.n	800abc8 <UART_SetConfig+0x210>
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d002      	beq.n	800aba8 <UART_SetConfig+0x1f0>
 800aba2:	2b40      	cmp	r3, #64	@ 0x40
 800aba4:	d008      	beq.n	800abb8 <UART_SetConfig+0x200>
 800aba6:	e00f      	b.n	800abc8 <UART_SetConfig+0x210>
 800aba8:	2300      	movs	r3, #0
 800abaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abae:	e082      	b.n	800acb6 <UART_SetConfig+0x2fe>
 800abb0:	2302      	movs	r3, #2
 800abb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abb6:	e07e      	b.n	800acb6 <UART_SetConfig+0x2fe>
 800abb8:	2304      	movs	r3, #4
 800abba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abbe:	e07a      	b.n	800acb6 <UART_SetConfig+0x2fe>
 800abc0:	2308      	movs	r3, #8
 800abc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abc6:	e076      	b.n	800acb6 <UART_SetConfig+0x2fe>
 800abc8:	2310      	movs	r3, #16
 800abca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abce:	e072      	b.n	800acb6 <UART_SetConfig+0x2fe>
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4a35      	ldr	r2, [pc, #212]	@ (800acac <UART_SetConfig+0x2f4>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d12a      	bne.n	800ac30 <UART_SetConfig+0x278>
 800abda:	4b30      	ldr	r3, [pc, #192]	@ (800ac9c <UART_SetConfig+0x2e4>)
 800abdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abe0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800abe4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800abe8:	d01a      	beq.n	800ac20 <UART_SetConfig+0x268>
 800abea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800abee:	d81b      	bhi.n	800ac28 <UART_SetConfig+0x270>
 800abf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800abf4:	d00c      	beq.n	800ac10 <UART_SetConfig+0x258>
 800abf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800abfa:	d815      	bhi.n	800ac28 <UART_SetConfig+0x270>
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d003      	beq.n	800ac08 <UART_SetConfig+0x250>
 800ac00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac04:	d008      	beq.n	800ac18 <UART_SetConfig+0x260>
 800ac06:	e00f      	b.n	800ac28 <UART_SetConfig+0x270>
 800ac08:	2300      	movs	r3, #0
 800ac0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac0e:	e052      	b.n	800acb6 <UART_SetConfig+0x2fe>
 800ac10:	2302      	movs	r3, #2
 800ac12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac16:	e04e      	b.n	800acb6 <UART_SetConfig+0x2fe>
 800ac18:	2304      	movs	r3, #4
 800ac1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac1e:	e04a      	b.n	800acb6 <UART_SetConfig+0x2fe>
 800ac20:	2308      	movs	r3, #8
 800ac22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac26:	e046      	b.n	800acb6 <UART_SetConfig+0x2fe>
 800ac28:	2310      	movs	r3, #16
 800ac2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac2e:	e042      	b.n	800acb6 <UART_SetConfig+0x2fe>
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a17      	ldr	r2, [pc, #92]	@ (800ac94 <UART_SetConfig+0x2dc>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d13a      	bne.n	800acb0 <UART_SetConfig+0x2f8>
 800ac3a:	4b18      	ldr	r3, [pc, #96]	@ (800ac9c <UART_SetConfig+0x2e4>)
 800ac3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac40:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ac44:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ac48:	d01a      	beq.n	800ac80 <UART_SetConfig+0x2c8>
 800ac4a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ac4e:	d81b      	bhi.n	800ac88 <UART_SetConfig+0x2d0>
 800ac50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ac54:	d00c      	beq.n	800ac70 <UART_SetConfig+0x2b8>
 800ac56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ac5a:	d815      	bhi.n	800ac88 <UART_SetConfig+0x2d0>
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d003      	beq.n	800ac68 <UART_SetConfig+0x2b0>
 800ac60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ac64:	d008      	beq.n	800ac78 <UART_SetConfig+0x2c0>
 800ac66:	e00f      	b.n	800ac88 <UART_SetConfig+0x2d0>
 800ac68:	2300      	movs	r3, #0
 800ac6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac6e:	e022      	b.n	800acb6 <UART_SetConfig+0x2fe>
 800ac70:	2302      	movs	r3, #2
 800ac72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac76:	e01e      	b.n	800acb6 <UART_SetConfig+0x2fe>
 800ac78:	2304      	movs	r3, #4
 800ac7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac7e:	e01a      	b.n	800acb6 <UART_SetConfig+0x2fe>
 800ac80:	2308      	movs	r3, #8
 800ac82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac86:	e016      	b.n	800acb6 <UART_SetConfig+0x2fe>
 800ac88:	2310      	movs	r3, #16
 800ac8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac8e:	e012      	b.n	800acb6 <UART_SetConfig+0x2fe>
 800ac90:	cfff69f3 	.word	0xcfff69f3
 800ac94:	40008000 	.word	0x40008000
 800ac98:	40013800 	.word	0x40013800
 800ac9c:	40021000 	.word	0x40021000
 800aca0:	40004400 	.word	0x40004400
 800aca4:	40004800 	.word	0x40004800
 800aca8:	40004c00 	.word	0x40004c00
 800acac:	40005000 	.word	0x40005000
 800acb0:	2310      	movs	r3, #16
 800acb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4aae      	ldr	r2, [pc, #696]	@ (800af74 <UART_SetConfig+0x5bc>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	f040 8097 	bne.w	800adf0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800acc2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800acc6:	2b08      	cmp	r3, #8
 800acc8:	d823      	bhi.n	800ad12 <UART_SetConfig+0x35a>
 800acca:	a201      	add	r2, pc, #4	@ (adr r2, 800acd0 <UART_SetConfig+0x318>)
 800accc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acd0:	0800acf5 	.word	0x0800acf5
 800acd4:	0800ad13 	.word	0x0800ad13
 800acd8:	0800acfd 	.word	0x0800acfd
 800acdc:	0800ad13 	.word	0x0800ad13
 800ace0:	0800ad03 	.word	0x0800ad03
 800ace4:	0800ad13 	.word	0x0800ad13
 800ace8:	0800ad13 	.word	0x0800ad13
 800acec:	0800ad13 	.word	0x0800ad13
 800acf0:	0800ad0b 	.word	0x0800ad0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800acf4:	f7fc fc00 	bl	80074f8 <HAL_RCC_GetPCLK1Freq>
 800acf8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800acfa:	e010      	b.n	800ad1e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800acfc:	4b9e      	ldr	r3, [pc, #632]	@ (800af78 <UART_SetConfig+0x5c0>)
 800acfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ad00:	e00d      	b.n	800ad1e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad02:	f7fc fb8b 	bl	800741c <HAL_RCC_GetSysClockFreq>
 800ad06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ad08:	e009      	b.n	800ad1e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ad10:	e005      	b.n	800ad1e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800ad12:	2300      	movs	r3, #0
 800ad14:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ad16:	2301      	movs	r3, #1
 800ad18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ad1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ad1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	f000 8130 	beq.w	800af86 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad2a:	4a94      	ldr	r2, [pc, #592]	@ (800af7c <UART_SetConfig+0x5c4>)
 800ad2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad30:	461a      	mov	r2, r3
 800ad32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad34:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad38:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	685a      	ldr	r2, [r3, #4]
 800ad3e:	4613      	mov	r3, r2
 800ad40:	005b      	lsls	r3, r3, #1
 800ad42:	4413      	add	r3, r2
 800ad44:	69ba      	ldr	r2, [r7, #24]
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d305      	bcc.n	800ad56 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad50:	69ba      	ldr	r2, [r7, #24]
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d903      	bls.n	800ad5e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ad56:	2301      	movs	r3, #1
 800ad58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ad5c:	e113      	b.n	800af86 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad60:	2200      	movs	r2, #0
 800ad62:	60bb      	str	r3, [r7, #8]
 800ad64:	60fa      	str	r2, [r7, #12]
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad6a:	4a84      	ldr	r2, [pc, #528]	@ (800af7c <UART_SetConfig+0x5c4>)
 800ad6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad70:	b29b      	uxth	r3, r3
 800ad72:	2200      	movs	r2, #0
 800ad74:	603b      	str	r3, [r7, #0]
 800ad76:	607a      	str	r2, [r7, #4]
 800ad78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ad80:	f7f6 f834 	bl	8000dec <__aeabi_uldivmod>
 800ad84:	4602      	mov	r2, r0
 800ad86:	460b      	mov	r3, r1
 800ad88:	4610      	mov	r0, r2
 800ad8a:	4619      	mov	r1, r3
 800ad8c:	f04f 0200 	mov.w	r2, #0
 800ad90:	f04f 0300 	mov.w	r3, #0
 800ad94:	020b      	lsls	r3, r1, #8
 800ad96:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ad9a:	0202      	lsls	r2, r0, #8
 800ad9c:	6979      	ldr	r1, [r7, #20]
 800ad9e:	6849      	ldr	r1, [r1, #4]
 800ada0:	0849      	lsrs	r1, r1, #1
 800ada2:	2000      	movs	r0, #0
 800ada4:	460c      	mov	r4, r1
 800ada6:	4605      	mov	r5, r0
 800ada8:	eb12 0804 	adds.w	r8, r2, r4
 800adac:	eb43 0905 	adc.w	r9, r3, r5
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	2200      	movs	r2, #0
 800adb6:	469a      	mov	sl, r3
 800adb8:	4693      	mov	fp, r2
 800adba:	4652      	mov	r2, sl
 800adbc:	465b      	mov	r3, fp
 800adbe:	4640      	mov	r0, r8
 800adc0:	4649      	mov	r1, r9
 800adc2:	f7f6 f813 	bl	8000dec <__aeabi_uldivmod>
 800adc6:	4602      	mov	r2, r0
 800adc8:	460b      	mov	r3, r1
 800adca:	4613      	mov	r3, r2
 800adcc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800adce:	6a3b      	ldr	r3, [r7, #32]
 800add0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800add4:	d308      	bcc.n	800ade8 <UART_SetConfig+0x430>
 800add6:	6a3b      	ldr	r3, [r7, #32]
 800add8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800addc:	d204      	bcs.n	800ade8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	6a3a      	ldr	r2, [r7, #32]
 800ade4:	60da      	str	r2, [r3, #12]
 800ade6:	e0ce      	b.n	800af86 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800ade8:	2301      	movs	r3, #1
 800adea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800adee:	e0ca      	b.n	800af86 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	69db      	ldr	r3, [r3, #28]
 800adf4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800adf8:	d166      	bne.n	800aec8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800adfa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800adfe:	2b08      	cmp	r3, #8
 800ae00:	d827      	bhi.n	800ae52 <UART_SetConfig+0x49a>
 800ae02:	a201      	add	r2, pc, #4	@ (adr r2, 800ae08 <UART_SetConfig+0x450>)
 800ae04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae08:	0800ae2d 	.word	0x0800ae2d
 800ae0c:	0800ae35 	.word	0x0800ae35
 800ae10:	0800ae3d 	.word	0x0800ae3d
 800ae14:	0800ae53 	.word	0x0800ae53
 800ae18:	0800ae43 	.word	0x0800ae43
 800ae1c:	0800ae53 	.word	0x0800ae53
 800ae20:	0800ae53 	.word	0x0800ae53
 800ae24:	0800ae53 	.word	0x0800ae53
 800ae28:	0800ae4b 	.word	0x0800ae4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae2c:	f7fc fb64 	bl	80074f8 <HAL_RCC_GetPCLK1Freq>
 800ae30:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae32:	e014      	b.n	800ae5e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae34:	f7fc fb76 	bl	8007524 <HAL_RCC_GetPCLK2Freq>
 800ae38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae3a:	e010      	b.n	800ae5e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae3c:	4b4e      	ldr	r3, [pc, #312]	@ (800af78 <UART_SetConfig+0x5c0>)
 800ae3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ae40:	e00d      	b.n	800ae5e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae42:	f7fc faeb 	bl	800741c <HAL_RCC_GetSysClockFreq>
 800ae46:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae48:	e009      	b.n	800ae5e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ae50:	e005      	b.n	800ae5e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ae52:	2300      	movs	r3, #0
 800ae54:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ae56:	2301      	movs	r3, #1
 800ae58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ae5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ae5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f000 8090 	beq.w	800af86 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae6a:	4a44      	ldr	r2, [pc, #272]	@ (800af7c <UART_SetConfig+0x5c4>)
 800ae6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae70:	461a      	mov	r2, r3
 800ae72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae74:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae78:	005a      	lsls	r2, r3, #1
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	085b      	lsrs	r3, r3, #1
 800ae80:	441a      	add	r2, r3
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae8a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae8c:	6a3b      	ldr	r3, [r7, #32]
 800ae8e:	2b0f      	cmp	r3, #15
 800ae90:	d916      	bls.n	800aec0 <UART_SetConfig+0x508>
 800ae92:	6a3b      	ldr	r3, [r7, #32]
 800ae94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae98:	d212      	bcs.n	800aec0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae9a:	6a3b      	ldr	r3, [r7, #32]
 800ae9c:	b29b      	uxth	r3, r3
 800ae9e:	f023 030f 	bic.w	r3, r3, #15
 800aea2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aea4:	6a3b      	ldr	r3, [r7, #32]
 800aea6:	085b      	lsrs	r3, r3, #1
 800aea8:	b29b      	uxth	r3, r3
 800aeaa:	f003 0307 	and.w	r3, r3, #7
 800aeae:	b29a      	uxth	r2, r3
 800aeb0:	8bfb      	ldrh	r3, [r7, #30]
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800aeb6:	697b      	ldr	r3, [r7, #20]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	8bfa      	ldrh	r2, [r7, #30]
 800aebc:	60da      	str	r2, [r3, #12]
 800aebe:	e062      	b.n	800af86 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800aec0:	2301      	movs	r3, #1
 800aec2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800aec6:	e05e      	b.n	800af86 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aec8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aecc:	2b08      	cmp	r3, #8
 800aece:	d828      	bhi.n	800af22 <UART_SetConfig+0x56a>
 800aed0:	a201      	add	r2, pc, #4	@ (adr r2, 800aed8 <UART_SetConfig+0x520>)
 800aed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aed6:	bf00      	nop
 800aed8:	0800aefd 	.word	0x0800aefd
 800aedc:	0800af05 	.word	0x0800af05
 800aee0:	0800af0d 	.word	0x0800af0d
 800aee4:	0800af23 	.word	0x0800af23
 800aee8:	0800af13 	.word	0x0800af13
 800aeec:	0800af23 	.word	0x0800af23
 800aef0:	0800af23 	.word	0x0800af23
 800aef4:	0800af23 	.word	0x0800af23
 800aef8:	0800af1b 	.word	0x0800af1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aefc:	f7fc fafc 	bl	80074f8 <HAL_RCC_GetPCLK1Freq>
 800af00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800af02:	e014      	b.n	800af2e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af04:	f7fc fb0e 	bl	8007524 <HAL_RCC_GetPCLK2Freq>
 800af08:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800af0a:	e010      	b.n	800af2e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800af0c:	4b1a      	ldr	r3, [pc, #104]	@ (800af78 <UART_SetConfig+0x5c0>)
 800af0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800af10:	e00d      	b.n	800af2e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af12:	f7fc fa83 	bl	800741c <HAL_RCC_GetSysClockFreq>
 800af16:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800af18:	e009      	b.n	800af2e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800af20:	e005      	b.n	800af2e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800af22:	2300      	movs	r3, #0
 800af24:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800af26:	2301      	movs	r3, #1
 800af28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800af2c:	bf00      	nop
    }

    if (pclk != 0U)
 800af2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af30:	2b00      	cmp	r3, #0
 800af32:	d028      	beq.n	800af86 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af38:	4a10      	ldr	r2, [pc, #64]	@ (800af7c <UART_SetConfig+0x5c4>)
 800af3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af3e:	461a      	mov	r2, r3
 800af40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af42:	fbb3 f2f2 	udiv	r2, r3, r2
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	685b      	ldr	r3, [r3, #4]
 800af4a:	085b      	lsrs	r3, r3, #1
 800af4c:	441a      	add	r2, r3
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	fbb2 f3f3 	udiv	r3, r2, r3
 800af56:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af58:	6a3b      	ldr	r3, [r7, #32]
 800af5a:	2b0f      	cmp	r3, #15
 800af5c:	d910      	bls.n	800af80 <UART_SetConfig+0x5c8>
 800af5e:	6a3b      	ldr	r3, [r7, #32]
 800af60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af64:	d20c      	bcs.n	800af80 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800af66:	6a3b      	ldr	r3, [r7, #32]
 800af68:	b29a      	uxth	r2, r3
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	60da      	str	r2, [r3, #12]
 800af70:	e009      	b.n	800af86 <UART_SetConfig+0x5ce>
 800af72:	bf00      	nop
 800af74:	40008000 	.word	0x40008000
 800af78:	00f42400 	.word	0x00f42400
 800af7c:	0800be1c 	.word	0x0800be1c
      }
      else
      {
        ret = HAL_ERROR;
 800af80:	2301      	movs	r3, #1
 800af82:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	2201      	movs	r2, #1
 800af8a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	2201      	movs	r2, #1
 800af92:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	2200      	movs	r2, #0
 800af9a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	2200      	movs	r2, #0
 800afa0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800afa2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3730      	adds	r7, #48	@ 0x30
 800afaa:	46bd      	mov	sp, r7
 800afac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800afb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b083      	sub	sp, #12
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afbc:	f003 0308 	and.w	r3, r3, #8
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d00a      	beq.n	800afda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	430a      	orrs	r2, r1
 800afd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afde:	f003 0301 	and.w	r3, r3, #1
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d00a      	beq.n	800affc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	430a      	orrs	r2, r1
 800affa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b000:	f003 0302 	and.w	r3, r3, #2
 800b004:	2b00      	cmp	r3, #0
 800b006:	d00a      	beq.n	800b01e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	685b      	ldr	r3, [r3, #4]
 800b00e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	430a      	orrs	r2, r1
 800b01c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b022:	f003 0304 	and.w	r3, r3, #4
 800b026:	2b00      	cmp	r3, #0
 800b028:	d00a      	beq.n	800b040 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	430a      	orrs	r2, r1
 800b03e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b044:	f003 0310 	and.w	r3, r3, #16
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d00a      	beq.n	800b062 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	430a      	orrs	r2, r1
 800b060:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b066:	f003 0320 	and.w	r3, r3, #32
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d00a      	beq.n	800b084 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	689b      	ldr	r3, [r3, #8]
 800b074:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	430a      	orrs	r2, r1
 800b082:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d01a      	beq.n	800b0c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	430a      	orrs	r2, r1
 800b0a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b0ae:	d10a      	bne.n	800b0c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	430a      	orrs	r2, r1
 800b0c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d00a      	beq.n	800b0e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	430a      	orrs	r2, r1
 800b0e6:	605a      	str	r2, [r3, #4]
  }
}
 800b0e8:	bf00      	nop
 800b0ea:	370c      	adds	r7, #12
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr

0800b0f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b098      	sub	sp, #96	@ 0x60
 800b0f8:	af02      	add	r7, sp, #8
 800b0fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2200      	movs	r2, #0
 800b100:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b104:	f7f9 fd64 	bl	8004bd0 <HAL_GetTick>
 800b108:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f003 0308 	and.w	r3, r3, #8
 800b114:	2b08      	cmp	r3, #8
 800b116:	d12f      	bne.n	800b178 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b118:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b11c:	9300      	str	r3, [sp, #0]
 800b11e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b120:	2200      	movs	r2, #0
 800b122:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 f88e 	bl	800b248 <UART_WaitOnFlagUntilTimeout>
 800b12c:	4603      	mov	r3, r0
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d022      	beq.n	800b178 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b13a:	e853 3f00 	ldrex	r3, [r3]
 800b13e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b142:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b146:	653b      	str	r3, [r7, #80]	@ 0x50
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	461a      	mov	r2, r3
 800b14e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b150:	647b      	str	r3, [r7, #68]	@ 0x44
 800b152:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b154:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b156:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b158:	e841 2300 	strex	r3, r2, [r1]
 800b15c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b15e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b160:	2b00      	cmp	r3, #0
 800b162:	d1e6      	bne.n	800b132 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2220      	movs	r2, #32
 800b168:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2200      	movs	r2, #0
 800b170:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b174:	2303      	movs	r3, #3
 800b176:	e063      	b.n	800b240 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f003 0304 	and.w	r3, r3, #4
 800b182:	2b04      	cmp	r3, #4
 800b184:	d149      	bne.n	800b21a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b186:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b18a:	9300      	str	r3, [sp, #0]
 800b18c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b18e:	2200      	movs	r2, #0
 800b190:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f000 f857 	bl	800b248 <UART_WaitOnFlagUntilTimeout>
 800b19a:	4603      	mov	r3, r0
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d03c      	beq.n	800b21a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a8:	e853 3f00 	ldrex	r3, [r3]
 800b1ac:	623b      	str	r3, [r7, #32]
   return(result);
 800b1ae:	6a3b      	ldr	r3, [r7, #32]
 800b1b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b1b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1be:	633b      	str	r3, [r7, #48]	@ 0x30
 800b1c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b1c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1c6:	e841 2300 	strex	r3, r2, [r1]
 800b1ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b1cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d1e6      	bne.n	800b1a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	3308      	adds	r3, #8
 800b1d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1da:	693b      	ldr	r3, [r7, #16]
 800b1dc:	e853 3f00 	ldrex	r3, [r3]
 800b1e0:	60fb      	str	r3, [r7, #12]
   return(result);
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	f023 0301 	bic.w	r3, r3, #1
 800b1e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	3308      	adds	r3, #8
 800b1f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b1f2:	61fa      	str	r2, [r7, #28]
 800b1f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1f6:	69b9      	ldr	r1, [r7, #24]
 800b1f8:	69fa      	ldr	r2, [r7, #28]
 800b1fa:	e841 2300 	strex	r3, r2, [r1]
 800b1fe:	617b      	str	r3, [r7, #20]
   return(result);
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d1e5      	bne.n	800b1d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2220      	movs	r2, #32
 800b20a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2200      	movs	r2, #0
 800b212:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b216:	2303      	movs	r3, #3
 800b218:	e012      	b.n	800b240 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2220      	movs	r2, #32
 800b21e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2220      	movs	r2, #32
 800b226:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2200      	movs	r2, #0
 800b22e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2200      	movs	r2, #0
 800b234:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2200      	movs	r2, #0
 800b23a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b23e:	2300      	movs	r3, #0
}
 800b240:	4618      	mov	r0, r3
 800b242:	3758      	adds	r7, #88	@ 0x58
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	60f8      	str	r0, [r7, #12]
 800b250:	60b9      	str	r1, [r7, #8]
 800b252:	603b      	str	r3, [r7, #0]
 800b254:	4613      	mov	r3, r2
 800b256:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b258:	e04f      	b.n	800b2fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b25a:	69bb      	ldr	r3, [r7, #24]
 800b25c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b260:	d04b      	beq.n	800b2fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b262:	f7f9 fcb5 	bl	8004bd0 <HAL_GetTick>
 800b266:	4602      	mov	r2, r0
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	1ad3      	subs	r3, r2, r3
 800b26c:	69ba      	ldr	r2, [r7, #24]
 800b26e:	429a      	cmp	r2, r3
 800b270:	d302      	bcc.n	800b278 <UART_WaitOnFlagUntilTimeout+0x30>
 800b272:	69bb      	ldr	r3, [r7, #24]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d101      	bne.n	800b27c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b278:	2303      	movs	r3, #3
 800b27a:	e04e      	b.n	800b31a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f003 0304 	and.w	r3, r3, #4
 800b286:	2b00      	cmp	r3, #0
 800b288:	d037      	beq.n	800b2fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	2b80      	cmp	r3, #128	@ 0x80
 800b28e:	d034      	beq.n	800b2fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	2b40      	cmp	r3, #64	@ 0x40
 800b294:	d031      	beq.n	800b2fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	69db      	ldr	r3, [r3, #28]
 800b29c:	f003 0308 	and.w	r3, r3, #8
 800b2a0:	2b08      	cmp	r3, #8
 800b2a2:	d110      	bne.n	800b2c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	2208      	movs	r2, #8
 800b2aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b2ac:	68f8      	ldr	r0, [r7, #12]
 800b2ae:	f000 f920 	bl	800b4f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	2208      	movs	r2, #8
 800b2b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	e029      	b.n	800b31a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	69db      	ldr	r3, [r3, #28]
 800b2cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b2d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b2d4:	d111      	bne.n	800b2fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b2de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b2e0:	68f8      	ldr	r0, [r7, #12]
 800b2e2:	f000 f906 	bl	800b4f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	2220      	movs	r2, #32
 800b2ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b2f6:	2303      	movs	r3, #3
 800b2f8:	e00f      	b.n	800b31a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	69da      	ldr	r2, [r3, #28]
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	4013      	ands	r3, r2
 800b304:	68ba      	ldr	r2, [r7, #8]
 800b306:	429a      	cmp	r2, r3
 800b308:	bf0c      	ite	eq
 800b30a:	2301      	moveq	r3, #1
 800b30c:	2300      	movne	r3, #0
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	461a      	mov	r2, r3
 800b312:	79fb      	ldrb	r3, [r7, #7]
 800b314:	429a      	cmp	r2, r3
 800b316:	d0a0      	beq.n	800b25a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b318:	2300      	movs	r3, #0
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3710      	adds	r7, #16
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
	...

0800b324 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b096      	sub	sp, #88	@ 0x58
 800b328:	af00      	add	r7, sp, #0
 800b32a:	60f8      	str	r0, [r7, #12]
 800b32c:	60b9      	str	r1, [r7, #8]
 800b32e:	4613      	mov	r3, r2
 800b330:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	68ba      	ldr	r2, [r7, #8]
 800b336:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	88fa      	ldrh	r2, [r7, #6]
 800b33c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2200      	movs	r2, #0
 800b344:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2222      	movs	r2, #34	@ 0x22
 800b34c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b356:	2b00      	cmp	r3, #0
 800b358:	d02d      	beq.n	800b3b6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b360:	4a40      	ldr	r2, [pc, #256]	@ (800b464 <UART_Start_Receive_DMA+0x140>)
 800b362:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b36a:	4a3f      	ldr	r2, [pc, #252]	@ (800b468 <UART_Start_Receive_DMA+0x144>)
 800b36c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b374:	4a3d      	ldr	r2, [pc, #244]	@ (800b46c <UART_Start_Receive_DMA+0x148>)
 800b376:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b37e:	2200      	movs	r2, #0
 800b380:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	3324      	adds	r3, #36	@ 0x24
 800b38e:	4619      	mov	r1, r3
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b394:	461a      	mov	r2, r3
 800b396:	88fb      	ldrh	r3, [r7, #6]
 800b398:	f7fa fede 	bl	8006158 <HAL_DMA_Start_IT>
 800b39c:	4603      	mov	r3, r0
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d009      	beq.n	800b3b6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	2210      	movs	r2, #16
 800b3a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2220      	movs	r2, #32
 800b3ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	e051      	b.n	800b45a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	691b      	ldr	r3, [r3, #16]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d018      	beq.n	800b3f0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3c6:	e853 3f00 	ldrex	r3, [r3]
 800b3ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b3cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b3d2:	657b      	str	r3, [r7, #84]	@ 0x54
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	461a      	mov	r2, r3
 800b3da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b3dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b3de:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3e0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b3e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b3e4:	e841 2300 	strex	r3, r2, [r1]
 800b3e8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b3ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d1e6      	bne.n	800b3be <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	3308      	adds	r3, #8
 800b3f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3fa:	e853 3f00 	ldrex	r3, [r3]
 800b3fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b402:	f043 0301 	orr.w	r3, r3, #1
 800b406:	653b      	str	r3, [r7, #80]	@ 0x50
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	3308      	adds	r3, #8
 800b40e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b410:	637a      	str	r2, [r7, #52]	@ 0x34
 800b412:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b414:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b416:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b418:	e841 2300 	strex	r3, r2, [r1]
 800b41c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b41e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b420:	2b00      	cmp	r3, #0
 800b422:	d1e5      	bne.n	800b3f0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	3308      	adds	r3, #8
 800b42a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	e853 3f00 	ldrex	r3, [r3]
 800b432:	613b      	str	r3, [r7, #16]
   return(result);
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b43a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	3308      	adds	r3, #8
 800b442:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b444:	623a      	str	r2, [r7, #32]
 800b446:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b448:	69f9      	ldr	r1, [r7, #28]
 800b44a:	6a3a      	ldr	r2, [r7, #32]
 800b44c:	e841 2300 	strex	r3, r2, [r1]
 800b450:	61bb      	str	r3, [r7, #24]
   return(result);
 800b452:	69bb      	ldr	r3, [r7, #24]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d1e5      	bne.n	800b424 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b458:	2300      	movs	r3, #0
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3758      	adds	r7, #88	@ 0x58
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop
 800b464:	0800b67d 	.word	0x0800b67d
 800b468:	0800b7b1 	.word	0x0800b7b1
 800b46c:	0800b7f7 	.word	0x0800b7f7

0800b470 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b470:	b480      	push	{r7}
 800b472:	b08f      	sub	sp, #60	@ 0x3c
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b47e:	6a3b      	ldr	r3, [r7, #32]
 800b480:	e853 3f00 	ldrex	r3, [r3]
 800b484:	61fb      	str	r3, [r7, #28]
   return(result);
 800b486:	69fb      	ldr	r3, [r7, #28]
 800b488:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b48c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	461a      	mov	r2, r3
 800b494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b496:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b498:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b49a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b49c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b49e:	e841 2300 	strex	r3, r2, [r1]
 800b4a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d1e6      	bne.n	800b478 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	3308      	adds	r3, #8
 800b4b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	e853 3f00 	ldrex	r3, [r3]
 800b4b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b4c0:	633b      	str	r3, [r7, #48]	@ 0x30
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	3308      	adds	r3, #8
 800b4c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4ca:	61ba      	str	r2, [r7, #24]
 800b4cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ce:	6979      	ldr	r1, [r7, #20]
 800b4d0:	69ba      	ldr	r2, [r7, #24]
 800b4d2:	e841 2300 	strex	r3, r2, [r1]
 800b4d6:	613b      	str	r3, [r7, #16]
   return(result);
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d1e5      	bne.n	800b4aa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2220      	movs	r2, #32
 800b4e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b4e6:	bf00      	nop
 800b4e8:	373c      	adds	r7, #60	@ 0x3c
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f0:	4770      	bx	lr

0800b4f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b4f2:	b480      	push	{r7}
 800b4f4:	b095      	sub	sp, #84	@ 0x54
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b502:	e853 3f00 	ldrex	r3, [r3]
 800b506:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b50a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b50e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	461a      	mov	r2, r3
 800b516:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b518:	643b      	str	r3, [r7, #64]	@ 0x40
 800b51a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b51c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b51e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b520:	e841 2300 	strex	r3, r2, [r1]
 800b524:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d1e6      	bne.n	800b4fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	3308      	adds	r3, #8
 800b532:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b534:	6a3b      	ldr	r3, [r7, #32]
 800b536:	e853 3f00 	ldrex	r3, [r3]
 800b53a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b53c:	69fb      	ldr	r3, [r7, #28]
 800b53e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b542:	f023 0301 	bic.w	r3, r3, #1
 800b546:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	3308      	adds	r3, #8
 800b54e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b550:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b552:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b554:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b556:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b558:	e841 2300 	strex	r3, r2, [r1]
 800b55c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b560:	2b00      	cmp	r3, #0
 800b562:	d1e3      	bne.n	800b52c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b568:	2b01      	cmp	r3, #1
 800b56a:	d118      	bne.n	800b59e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	e853 3f00 	ldrex	r3, [r3]
 800b578:	60bb      	str	r3, [r7, #8]
   return(result);
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	f023 0310 	bic.w	r3, r3, #16
 800b580:	647b      	str	r3, [r7, #68]	@ 0x44
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	461a      	mov	r2, r3
 800b588:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b58a:	61bb      	str	r3, [r7, #24]
 800b58c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b58e:	6979      	ldr	r1, [r7, #20]
 800b590:	69ba      	ldr	r2, [r7, #24]
 800b592:	e841 2300 	strex	r3, r2, [r1]
 800b596:	613b      	str	r3, [r7, #16]
   return(result);
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d1e6      	bne.n	800b56c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2220      	movs	r2, #32
 800b5a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b5b2:	bf00      	nop
 800b5b4:	3754      	adds	r7, #84	@ 0x54
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr

0800b5be <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b5be:	b580      	push	{r7, lr}
 800b5c0:	b090      	sub	sp, #64	@ 0x40
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5ca:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f003 0320 	and.w	r3, r3, #32
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d137      	bne.n	800b64a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b5da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5dc:	2200      	movs	r2, #0
 800b5de:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b5e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	3308      	adds	r3, #8
 800b5e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ec:	e853 3f00 	ldrex	r3, [r3]
 800b5f0:	623b      	str	r3, [r7, #32]
   return(result);
 800b5f2:	6a3b      	ldr	r3, [r7, #32]
 800b5f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b5f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b5fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	3308      	adds	r3, #8
 800b600:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b602:	633a      	str	r2, [r7, #48]	@ 0x30
 800b604:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b606:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b608:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b60a:	e841 2300 	strex	r3, r2, [r1]
 800b60e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b612:	2b00      	cmp	r3, #0
 800b614:	d1e5      	bne.n	800b5e2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	e853 3f00 	ldrex	r3, [r3]
 800b622:	60fb      	str	r3, [r7, #12]
   return(result);
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b62a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b62c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	461a      	mov	r2, r3
 800b632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b634:	61fb      	str	r3, [r7, #28]
 800b636:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b638:	69b9      	ldr	r1, [r7, #24]
 800b63a:	69fa      	ldr	r2, [r7, #28]
 800b63c:	e841 2300 	strex	r3, r2, [r1]
 800b640:	617b      	str	r3, [r7, #20]
   return(result);
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d1e6      	bne.n	800b616 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b648:	e004      	b.n	800b654 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800b64a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b64c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b650:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b652:	4798      	blx	r3
}
 800b654:	bf00      	nop
 800b656:	3740      	adds	r7, #64	@ 0x40
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}

0800b65c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b084      	sub	sp, #16
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b668:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b670:	68f8      	ldr	r0, [r7, #12]
 800b672:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b674:	bf00      	nop
 800b676:	3710      	adds	r7, #16
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b09c      	sub	sp, #112	@ 0x70
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b688:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f003 0320 	and.w	r3, r3, #32
 800b694:	2b00      	cmp	r3, #0
 800b696:	d171      	bne.n	800b77c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b698:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b69a:	2200      	movs	r2, #0
 800b69c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b6a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6a8:	e853 3f00 	ldrex	r3, [r3]
 800b6ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b6ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b6b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b6b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b6b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b6be:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b6c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b6c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b6c6:	e841 2300 	strex	r3, r2, [r1]
 800b6ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b6cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d1e6      	bne.n	800b6a0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	3308      	adds	r3, #8
 800b6d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6dc:	e853 3f00 	ldrex	r3, [r3]
 800b6e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b6e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6e4:	f023 0301 	bic.w	r3, r3, #1
 800b6e8:	667b      	str	r3, [r7, #100]	@ 0x64
 800b6ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	3308      	adds	r3, #8
 800b6f0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b6f2:	647a      	str	r2, [r7, #68]	@ 0x44
 800b6f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b6f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b6fa:	e841 2300 	strex	r3, r2, [r1]
 800b6fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b702:	2b00      	cmp	r3, #0
 800b704:	d1e5      	bne.n	800b6d2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b706:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	3308      	adds	r3, #8
 800b70c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b70e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b710:	e853 3f00 	ldrex	r3, [r3]
 800b714:	623b      	str	r3, [r7, #32]
   return(result);
 800b716:	6a3b      	ldr	r3, [r7, #32]
 800b718:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b71c:	663b      	str	r3, [r7, #96]	@ 0x60
 800b71e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	3308      	adds	r3, #8
 800b724:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b726:	633a      	str	r2, [r7, #48]	@ 0x30
 800b728:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b72a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b72c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b72e:	e841 2300 	strex	r3, r2, [r1]
 800b732:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b736:	2b00      	cmp	r3, #0
 800b738:	d1e5      	bne.n	800b706 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b73a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b73c:	2220      	movs	r2, #32
 800b73e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b742:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b744:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b746:	2b01      	cmp	r3, #1
 800b748:	d118      	bne.n	800b77c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b74a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	e853 3f00 	ldrex	r3, [r3]
 800b756:	60fb      	str	r3, [r7, #12]
   return(result);
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f023 0310 	bic.w	r3, r3, #16
 800b75e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b760:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	461a      	mov	r2, r3
 800b766:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b768:	61fb      	str	r3, [r7, #28]
 800b76a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b76c:	69b9      	ldr	r1, [r7, #24]
 800b76e:	69fa      	ldr	r2, [r7, #28]
 800b770:	e841 2300 	strex	r3, r2, [r1]
 800b774:	617b      	str	r3, [r7, #20]
   return(result);
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d1e6      	bne.n	800b74a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b77c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b77e:	2200      	movs	r2, #0
 800b780:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b782:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b784:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b786:	2b01      	cmp	r3, #1
 800b788:	d109      	bne.n	800b79e <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800b78a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b78c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b790:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b792:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b796:	4611      	mov	r1, r2
 800b798:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b79a:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b79c:	e004      	b.n	800b7a8 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800b79e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b7a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b7a4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b7a6:	4798      	blx	r3
}
 800b7a8:	bf00      	nop
 800b7aa:	3770      	adds	r7, #112	@ 0x70
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7bc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d10b      	bne.n	800b7e4 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b7d2:	68fa      	ldr	r2, [r7, #12]
 800b7d4:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b7d8:	0852      	lsrs	r2, r2, #1
 800b7da:	b292      	uxth	r2, r2
 800b7dc:	4611      	mov	r1, r2
 800b7de:	68f8      	ldr	r0, [r7, #12]
 800b7e0:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b7e2:	e004      	b.n	800b7ee <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b7ea:	68f8      	ldr	r0, [r7, #12]
 800b7ec:	4798      	blx	r3
}
 800b7ee:	bf00      	nop
 800b7f0:	3710      	adds	r7, #16
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}

0800b7f6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b7f6:	b580      	push	{r7, lr}
 800b7f8:	b086      	sub	sp, #24
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b802:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b80a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b812:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	689b      	ldr	r3, [r3, #8]
 800b81a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b81e:	2b80      	cmp	r3, #128	@ 0x80
 800b820:	d109      	bne.n	800b836 <UART_DMAError+0x40>
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	2b21      	cmp	r3, #33	@ 0x21
 800b826:	d106      	bne.n	800b836 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	2200      	movs	r2, #0
 800b82c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b830:	6978      	ldr	r0, [r7, #20]
 800b832:	f7ff fe1d 	bl	800b470 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	689b      	ldr	r3, [r3, #8]
 800b83c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b840:	2b40      	cmp	r3, #64	@ 0x40
 800b842:	d109      	bne.n	800b858 <UART_DMAError+0x62>
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2b22      	cmp	r3, #34	@ 0x22
 800b848:	d106      	bne.n	800b858 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	2200      	movs	r2, #0
 800b84e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b852:	6978      	ldr	r0, [r7, #20]
 800b854:	f7ff fe4d 	bl	800b4f2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b85e:	f043 0210 	orr.w	r2, r3, #16
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b86e:	6978      	ldr	r0, [r7, #20]
 800b870:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b872:	bf00      	nop
 800b874:	3718      	adds	r7, #24
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}

0800b87a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b87a:	b580      	push	{r7, lr}
 800b87c:	b084      	sub	sp, #16
 800b87e:	af00      	add	r7, sp, #0
 800b880:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b886:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	2200      	movs	r2, #0
 800b88c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2200      	movs	r2, #0
 800b894:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b89e:	68f8      	ldr	r0, [r7, #12]
 800b8a0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8a2:	bf00      	nop
 800b8a4:	3710      	adds	r7, #16
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}

0800b8aa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b8aa:	b580      	push	{r7, lr}
 800b8ac:	b088      	sub	sp, #32
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	e853 3f00 	ldrex	r3, [r3]
 800b8be:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b8c6:	61fb      	str	r3, [r7, #28]
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	69fb      	ldr	r3, [r7, #28]
 800b8d0:	61bb      	str	r3, [r7, #24]
 800b8d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d4:	6979      	ldr	r1, [r7, #20]
 800b8d6:	69ba      	ldr	r2, [r7, #24]
 800b8d8:	e841 2300 	strex	r3, r2, [r1]
 800b8dc:	613b      	str	r3, [r7, #16]
   return(result);
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d1e6      	bne.n	800b8b2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2220      	movs	r2, #32
 800b8e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8fc:	bf00      	nop
 800b8fe:	3720      	adds	r7, #32
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b904:	b480      	push	{r7}
 800b906:	b083      	sub	sp, #12
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b90c:	bf00      	nop
 800b90e:	370c      	adds	r7, #12
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b918:	b480      	push	{r7}
 800b91a:	b083      	sub	sp, #12
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b920:	bf00      	nop
 800b922:	370c      	adds	r7, #12
 800b924:	46bd      	mov	sp, r7
 800b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92a:	4770      	bx	lr

0800b92c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b083      	sub	sp, #12
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b934:	bf00      	nop
 800b936:	370c      	adds	r7, #12
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr

0800b940 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b940:	b480      	push	{r7}
 800b942:	b085      	sub	sp, #20
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b94e:	2b01      	cmp	r3, #1
 800b950:	d101      	bne.n	800b956 <HAL_UARTEx_DisableFifoMode+0x16>
 800b952:	2302      	movs	r3, #2
 800b954:	e027      	b.n	800b9a6 <HAL_UARTEx_DisableFifoMode+0x66>
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2201      	movs	r2, #1
 800b95a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2224      	movs	r2, #36	@ 0x24
 800b962:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	681a      	ldr	r2, [r3, #0]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f022 0201 	bic.w	r2, r2, #1
 800b97c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b984:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2200      	movs	r2, #0
 800b98a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	68fa      	ldr	r2, [r7, #12]
 800b992:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2220      	movs	r2, #32
 800b998:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b9a4:	2300      	movs	r3, #0
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3714      	adds	r7, #20
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b0:	4770      	bx	lr

0800b9b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b9b2:	b580      	push	{r7, lr}
 800b9b4:	b084      	sub	sp, #16
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	6078      	str	r0, [r7, #4]
 800b9ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d101      	bne.n	800b9ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b9c6:	2302      	movs	r3, #2
 800b9c8:	e02d      	b.n	800ba26 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2224      	movs	r2, #36	@ 0x24
 800b9d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	681a      	ldr	r2, [r3, #0]
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f022 0201 	bic.w	r2, r2, #1
 800b9f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	689b      	ldr	r3, [r3, #8]
 800b9f8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	683a      	ldr	r2, [r7, #0]
 800ba02:	430a      	orrs	r2, r1
 800ba04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f000 f850 	bl	800baac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	68fa      	ldr	r2, [r7, #12]
 800ba12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2220      	movs	r2, #32
 800ba18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba24:	2300      	movs	r3, #0
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3710      	adds	r7, #16
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}

0800ba2e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ba2e:	b580      	push	{r7, lr}
 800ba30:	b084      	sub	sp, #16
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6078      	str	r0, [r7, #4]
 800ba36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba3e:	2b01      	cmp	r3, #1
 800ba40:	d101      	bne.n	800ba46 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ba42:	2302      	movs	r3, #2
 800ba44:	e02d      	b.n	800baa2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2201      	movs	r2, #1
 800ba4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2224      	movs	r2, #36	@ 0x24
 800ba52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	681a      	ldr	r2, [r3, #0]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f022 0201 	bic.w	r2, r2, #1
 800ba6c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	689b      	ldr	r3, [r3, #8]
 800ba74:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	683a      	ldr	r2, [r7, #0]
 800ba7e:	430a      	orrs	r2, r1
 800ba80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f000 f812 	bl	800baac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	68fa      	ldr	r2, [r7, #12]
 800ba8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2220      	movs	r2, #32
 800ba94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800baa0:	2300      	movs	r3, #0
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3710      	adds	r7, #16
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
	...

0800baac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800baac:	b480      	push	{r7}
 800baae:	b085      	sub	sp, #20
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d108      	bne.n	800bace <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2201      	movs	r2, #1
 800bac0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2201      	movs	r2, #1
 800bac8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bacc:	e031      	b.n	800bb32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bace:	2308      	movs	r3, #8
 800bad0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bad2:	2308      	movs	r3, #8
 800bad4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	689b      	ldr	r3, [r3, #8]
 800badc:	0e5b      	lsrs	r3, r3, #25
 800bade:	b2db      	uxtb	r3, r3
 800bae0:	f003 0307 	and.w	r3, r3, #7
 800bae4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	689b      	ldr	r3, [r3, #8]
 800baec:	0f5b      	lsrs	r3, r3, #29
 800baee:	b2db      	uxtb	r3, r3
 800baf0:	f003 0307 	and.w	r3, r3, #7
 800baf4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800baf6:	7bbb      	ldrb	r3, [r7, #14]
 800baf8:	7b3a      	ldrb	r2, [r7, #12]
 800bafa:	4911      	ldr	r1, [pc, #68]	@ (800bb40 <UARTEx_SetNbDataToProcess+0x94>)
 800bafc:	5c8a      	ldrb	r2, [r1, r2]
 800bafe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bb02:	7b3a      	ldrb	r2, [r7, #12]
 800bb04:	490f      	ldr	r1, [pc, #60]	@ (800bb44 <UARTEx_SetNbDataToProcess+0x98>)
 800bb06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bb08:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb0c:	b29a      	uxth	r2, r3
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb14:	7bfb      	ldrb	r3, [r7, #15]
 800bb16:	7b7a      	ldrb	r2, [r7, #13]
 800bb18:	4909      	ldr	r1, [pc, #36]	@ (800bb40 <UARTEx_SetNbDataToProcess+0x94>)
 800bb1a:	5c8a      	ldrb	r2, [r1, r2]
 800bb1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bb20:	7b7a      	ldrb	r2, [r7, #13]
 800bb22:	4908      	ldr	r1, [pc, #32]	@ (800bb44 <UARTEx_SetNbDataToProcess+0x98>)
 800bb24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bb26:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb2a:	b29a      	uxth	r2, r3
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bb32:	bf00      	nop
 800bb34:	3714      	adds	r7, #20
 800bb36:	46bd      	mov	sp, r7
 800bb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3c:	4770      	bx	lr
 800bb3e:	bf00      	nop
 800bb40:	0800be34 	.word	0x0800be34
 800bb44:	0800be3c 	.word	0x0800be3c

0800bb48 <memset>:
 800bb48:	4402      	add	r2, r0
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d100      	bne.n	800bb52 <memset+0xa>
 800bb50:	4770      	bx	lr
 800bb52:	f803 1b01 	strb.w	r1, [r3], #1
 800bb56:	e7f9      	b.n	800bb4c <memset+0x4>

0800bb58 <__errno>:
 800bb58:	4b01      	ldr	r3, [pc, #4]	@ (800bb60 <__errno+0x8>)
 800bb5a:	6818      	ldr	r0, [r3, #0]
 800bb5c:	4770      	bx	lr
 800bb5e:	bf00      	nop
 800bb60:	20000214 	.word	0x20000214

0800bb64 <__libc_init_array>:
 800bb64:	b570      	push	{r4, r5, r6, lr}
 800bb66:	4d0d      	ldr	r5, [pc, #52]	@ (800bb9c <__libc_init_array+0x38>)
 800bb68:	4c0d      	ldr	r4, [pc, #52]	@ (800bba0 <__libc_init_array+0x3c>)
 800bb6a:	1b64      	subs	r4, r4, r5
 800bb6c:	10a4      	asrs	r4, r4, #2
 800bb6e:	2600      	movs	r6, #0
 800bb70:	42a6      	cmp	r6, r4
 800bb72:	d109      	bne.n	800bb88 <__libc_init_array+0x24>
 800bb74:	4d0b      	ldr	r5, [pc, #44]	@ (800bba4 <__libc_init_array+0x40>)
 800bb76:	4c0c      	ldr	r4, [pc, #48]	@ (800bba8 <__libc_init_array+0x44>)
 800bb78:	f000 f92c 	bl	800bdd4 <_init>
 800bb7c:	1b64      	subs	r4, r4, r5
 800bb7e:	10a4      	asrs	r4, r4, #2
 800bb80:	2600      	movs	r6, #0
 800bb82:	42a6      	cmp	r6, r4
 800bb84:	d105      	bne.n	800bb92 <__libc_init_array+0x2e>
 800bb86:	bd70      	pop	{r4, r5, r6, pc}
 800bb88:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb8c:	4798      	blx	r3
 800bb8e:	3601      	adds	r6, #1
 800bb90:	e7ee      	b.n	800bb70 <__libc_init_array+0xc>
 800bb92:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb96:	4798      	blx	r3
 800bb98:	3601      	adds	r6, #1
 800bb9a:	e7f2      	b.n	800bb82 <__libc_init_array+0x1e>
 800bb9c:	0800be4c 	.word	0x0800be4c
 800bba0:	0800be4c 	.word	0x0800be4c
 800bba4:	0800be4c 	.word	0x0800be4c
 800bba8:	0800be50 	.word	0x0800be50

0800bbac <memcpy>:
 800bbac:	440a      	add	r2, r1
 800bbae:	4291      	cmp	r1, r2
 800bbb0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bbb4:	d100      	bne.n	800bbb8 <memcpy+0xc>
 800bbb6:	4770      	bx	lr
 800bbb8:	b510      	push	{r4, lr}
 800bbba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbc2:	4291      	cmp	r1, r2
 800bbc4:	d1f9      	bne.n	800bbba <memcpy+0xe>
 800bbc6:	bd10      	pop	{r4, pc}

0800bbc8 <sqrt>:
 800bbc8:	b538      	push	{r3, r4, r5, lr}
 800bbca:	ed2d 8b02 	vpush	{d8}
 800bbce:	ec55 4b10 	vmov	r4, r5, d0
 800bbd2:	f000 f825 	bl	800bc20 <__ieee754_sqrt>
 800bbd6:	4622      	mov	r2, r4
 800bbd8:	462b      	mov	r3, r5
 800bbda:	4620      	mov	r0, r4
 800bbdc:	4629      	mov	r1, r5
 800bbde:	eeb0 8a40 	vmov.f32	s16, s0
 800bbe2:	eef0 8a60 	vmov.f32	s17, s1
 800bbe6:	f7f4 ff6d 	bl	8000ac4 <__aeabi_dcmpun>
 800bbea:	b990      	cbnz	r0, 800bc12 <sqrt+0x4a>
 800bbec:	2200      	movs	r2, #0
 800bbee:	2300      	movs	r3, #0
 800bbf0:	4620      	mov	r0, r4
 800bbf2:	4629      	mov	r1, r5
 800bbf4:	f7f4 ff3e 	bl	8000a74 <__aeabi_dcmplt>
 800bbf8:	b158      	cbz	r0, 800bc12 <sqrt+0x4a>
 800bbfa:	f7ff ffad 	bl	800bb58 <__errno>
 800bbfe:	2321      	movs	r3, #33	@ 0x21
 800bc00:	6003      	str	r3, [r0, #0]
 800bc02:	2200      	movs	r2, #0
 800bc04:	2300      	movs	r3, #0
 800bc06:	4610      	mov	r0, r2
 800bc08:	4619      	mov	r1, r3
 800bc0a:	f7f4 fdeb 	bl	80007e4 <__aeabi_ddiv>
 800bc0e:	ec41 0b18 	vmov	d8, r0, r1
 800bc12:	eeb0 0a48 	vmov.f32	s0, s16
 800bc16:	eef0 0a68 	vmov.f32	s1, s17
 800bc1a:	ecbd 8b02 	vpop	{d8}
 800bc1e:	bd38      	pop	{r3, r4, r5, pc}

0800bc20 <__ieee754_sqrt>:
 800bc20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc24:	4a68      	ldr	r2, [pc, #416]	@ (800bdc8 <__ieee754_sqrt+0x1a8>)
 800bc26:	ec55 4b10 	vmov	r4, r5, d0
 800bc2a:	43aa      	bics	r2, r5
 800bc2c:	462b      	mov	r3, r5
 800bc2e:	4621      	mov	r1, r4
 800bc30:	d110      	bne.n	800bc54 <__ieee754_sqrt+0x34>
 800bc32:	4622      	mov	r2, r4
 800bc34:	4620      	mov	r0, r4
 800bc36:	4629      	mov	r1, r5
 800bc38:	f7f4 fcaa 	bl	8000590 <__aeabi_dmul>
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	460b      	mov	r3, r1
 800bc40:	4620      	mov	r0, r4
 800bc42:	4629      	mov	r1, r5
 800bc44:	f7f4 faee 	bl	8000224 <__adddf3>
 800bc48:	4604      	mov	r4, r0
 800bc4a:	460d      	mov	r5, r1
 800bc4c:	ec45 4b10 	vmov	d0, r4, r5
 800bc50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc54:	2d00      	cmp	r5, #0
 800bc56:	dc0e      	bgt.n	800bc76 <__ieee754_sqrt+0x56>
 800bc58:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800bc5c:	4322      	orrs	r2, r4
 800bc5e:	d0f5      	beq.n	800bc4c <__ieee754_sqrt+0x2c>
 800bc60:	b19d      	cbz	r5, 800bc8a <__ieee754_sqrt+0x6a>
 800bc62:	4622      	mov	r2, r4
 800bc64:	4620      	mov	r0, r4
 800bc66:	4629      	mov	r1, r5
 800bc68:	f7f4 fada 	bl	8000220 <__aeabi_dsub>
 800bc6c:	4602      	mov	r2, r0
 800bc6e:	460b      	mov	r3, r1
 800bc70:	f7f4 fdb8 	bl	80007e4 <__aeabi_ddiv>
 800bc74:	e7e8      	b.n	800bc48 <__ieee754_sqrt+0x28>
 800bc76:	152a      	asrs	r2, r5, #20
 800bc78:	d115      	bne.n	800bca6 <__ieee754_sqrt+0x86>
 800bc7a:	2000      	movs	r0, #0
 800bc7c:	e009      	b.n	800bc92 <__ieee754_sqrt+0x72>
 800bc7e:	0acb      	lsrs	r3, r1, #11
 800bc80:	3a15      	subs	r2, #21
 800bc82:	0549      	lsls	r1, r1, #21
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d0fa      	beq.n	800bc7e <__ieee754_sqrt+0x5e>
 800bc88:	e7f7      	b.n	800bc7a <__ieee754_sqrt+0x5a>
 800bc8a:	462a      	mov	r2, r5
 800bc8c:	e7fa      	b.n	800bc84 <__ieee754_sqrt+0x64>
 800bc8e:	005b      	lsls	r3, r3, #1
 800bc90:	3001      	adds	r0, #1
 800bc92:	02dc      	lsls	r4, r3, #11
 800bc94:	d5fb      	bpl.n	800bc8e <__ieee754_sqrt+0x6e>
 800bc96:	1e44      	subs	r4, r0, #1
 800bc98:	1b12      	subs	r2, r2, r4
 800bc9a:	f1c0 0420 	rsb	r4, r0, #32
 800bc9e:	fa21 f404 	lsr.w	r4, r1, r4
 800bca2:	4323      	orrs	r3, r4
 800bca4:	4081      	lsls	r1, r0
 800bca6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bcaa:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800bcae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bcb2:	07d2      	lsls	r2, r2, #31
 800bcb4:	bf5c      	itt	pl
 800bcb6:	005b      	lslpl	r3, r3, #1
 800bcb8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800bcbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bcc0:	bf58      	it	pl
 800bcc2:	0049      	lslpl	r1, r1, #1
 800bcc4:	2600      	movs	r6, #0
 800bcc6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800bcca:	106d      	asrs	r5, r5, #1
 800bccc:	0049      	lsls	r1, r1, #1
 800bcce:	2016      	movs	r0, #22
 800bcd0:	4632      	mov	r2, r6
 800bcd2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800bcd6:	1917      	adds	r7, r2, r4
 800bcd8:	429f      	cmp	r7, r3
 800bcda:	bfde      	ittt	le
 800bcdc:	193a      	addle	r2, r7, r4
 800bcde:	1bdb      	suble	r3, r3, r7
 800bce0:	1936      	addle	r6, r6, r4
 800bce2:	0fcf      	lsrs	r7, r1, #31
 800bce4:	3801      	subs	r0, #1
 800bce6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800bcea:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bcee:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800bcf2:	d1f0      	bne.n	800bcd6 <__ieee754_sqrt+0xb6>
 800bcf4:	4604      	mov	r4, r0
 800bcf6:	2720      	movs	r7, #32
 800bcf8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800bcfc:	429a      	cmp	r2, r3
 800bcfe:	eb00 0e0c 	add.w	lr, r0, ip
 800bd02:	db02      	blt.n	800bd0a <__ieee754_sqrt+0xea>
 800bd04:	d113      	bne.n	800bd2e <__ieee754_sqrt+0x10e>
 800bd06:	458e      	cmp	lr, r1
 800bd08:	d811      	bhi.n	800bd2e <__ieee754_sqrt+0x10e>
 800bd0a:	f1be 0f00 	cmp.w	lr, #0
 800bd0e:	eb0e 000c 	add.w	r0, lr, ip
 800bd12:	da42      	bge.n	800bd9a <__ieee754_sqrt+0x17a>
 800bd14:	2800      	cmp	r0, #0
 800bd16:	db40      	blt.n	800bd9a <__ieee754_sqrt+0x17a>
 800bd18:	f102 0801 	add.w	r8, r2, #1
 800bd1c:	1a9b      	subs	r3, r3, r2
 800bd1e:	458e      	cmp	lr, r1
 800bd20:	bf88      	it	hi
 800bd22:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800bd26:	eba1 010e 	sub.w	r1, r1, lr
 800bd2a:	4464      	add	r4, ip
 800bd2c:	4642      	mov	r2, r8
 800bd2e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800bd32:	3f01      	subs	r7, #1
 800bd34:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800bd38:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bd3c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800bd40:	d1dc      	bne.n	800bcfc <__ieee754_sqrt+0xdc>
 800bd42:	4319      	orrs	r1, r3
 800bd44:	d01b      	beq.n	800bd7e <__ieee754_sqrt+0x15e>
 800bd46:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800bdcc <__ieee754_sqrt+0x1ac>
 800bd4a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800bdd0 <__ieee754_sqrt+0x1b0>
 800bd4e:	e9da 0100 	ldrd	r0, r1, [sl]
 800bd52:	e9db 2300 	ldrd	r2, r3, [fp]
 800bd56:	f7f4 fa63 	bl	8000220 <__aeabi_dsub>
 800bd5a:	e9da 8900 	ldrd	r8, r9, [sl]
 800bd5e:	4602      	mov	r2, r0
 800bd60:	460b      	mov	r3, r1
 800bd62:	4640      	mov	r0, r8
 800bd64:	4649      	mov	r1, r9
 800bd66:	f7f4 fe8f 	bl	8000a88 <__aeabi_dcmple>
 800bd6a:	b140      	cbz	r0, 800bd7e <__ieee754_sqrt+0x15e>
 800bd6c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800bd70:	e9da 0100 	ldrd	r0, r1, [sl]
 800bd74:	e9db 2300 	ldrd	r2, r3, [fp]
 800bd78:	d111      	bne.n	800bd9e <__ieee754_sqrt+0x17e>
 800bd7a:	3601      	adds	r6, #1
 800bd7c:	463c      	mov	r4, r7
 800bd7e:	1072      	asrs	r2, r6, #1
 800bd80:	0863      	lsrs	r3, r4, #1
 800bd82:	07f1      	lsls	r1, r6, #31
 800bd84:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800bd88:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800bd8c:	bf48      	it	mi
 800bd8e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800bd92:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800bd96:	4618      	mov	r0, r3
 800bd98:	e756      	b.n	800bc48 <__ieee754_sqrt+0x28>
 800bd9a:	4690      	mov	r8, r2
 800bd9c:	e7be      	b.n	800bd1c <__ieee754_sqrt+0xfc>
 800bd9e:	f7f4 fa41 	bl	8000224 <__adddf3>
 800bda2:	e9da 8900 	ldrd	r8, r9, [sl]
 800bda6:	4602      	mov	r2, r0
 800bda8:	460b      	mov	r3, r1
 800bdaa:	4640      	mov	r0, r8
 800bdac:	4649      	mov	r1, r9
 800bdae:	f7f4 fe61 	bl	8000a74 <__aeabi_dcmplt>
 800bdb2:	b120      	cbz	r0, 800bdbe <__ieee754_sqrt+0x19e>
 800bdb4:	1ca0      	adds	r0, r4, #2
 800bdb6:	bf08      	it	eq
 800bdb8:	3601      	addeq	r6, #1
 800bdba:	3402      	adds	r4, #2
 800bdbc:	e7df      	b.n	800bd7e <__ieee754_sqrt+0x15e>
 800bdbe:	1c63      	adds	r3, r4, #1
 800bdc0:	f023 0401 	bic.w	r4, r3, #1
 800bdc4:	e7db      	b.n	800bd7e <__ieee754_sqrt+0x15e>
 800bdc6:	bf00      	nop
 800bdc8:	7ff00000 	.word	0x7ff00000
 800bdcc:	20000270 	.word	0x20000270
 800bdd0:	20000268 	.word	0x20000268

0800bdd4 <_init>:
 800bdd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdd6:	bf00      	nop
 800bdd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdda:	bc08      	pop	{r3}
 800bddc:	469e      	mov	lr, r3
 800bdde:	4770      	bx	lr

0800bde0 <_fini>:
 800bde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bde2:	bf00      	nop
 800bde4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bde6:	bc08      	pop	{r3}
 800bde8:	469e      	mov	lr, r3
 800bdea:	4770      	bx	lr
