
Studio_G15.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb74  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800bd4c  0800bd4c  0000cd4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bda4  0800bda4  0000d278  2**0
                  CONTENTS
  4 .ARM          00000008  0800bda4  0800bda4  0000cda4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bdac  0800bdac  0000d278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdac  0800bdac  0000cdac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bdb0  0800bdb0  0000cdb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000278  20000000  0800bdb4  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010e4  20000278  0800c02c  0000d278  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000135c  0800c02c  0000d35c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d278  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f381  00000000  00000000  0000d2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c86  00000000  00000000  0002c629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001700  00000000  00000000  000302b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011eb  00000000  00000000  000319b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a1ee  00000000  00000000  00032b9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dc4b  00000000  00000000  0005cd89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115442  00000000  00000000  0007a9d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018fe16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065d8  00000000  00000000  0018fe5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00196434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000278 	.word	0x20000278
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800bd34 	.word	0x0800bd34

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000027c 	.word	0x2000027c
 8000214:	0800bd34 	.word	0x0800bd34

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_frsub>:
 8000b90:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b94:	e002      	b.n	8000b9c <__addsf3>
 8000b96:	bf00      	nop

08000b98 <__aeabi_fsub>:
 8000b98:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b9c <__addsf3>:
 8000b9c:	0042      	lsls	r2, r0, #1
 8000b9e:	bf1f      	itttt	ne
 8000ba0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ba4:	ea92 0f03 	teqne	r2, r3
 8000ba8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb0:	d06a      	beq.n	8000c88 <__addsf3+0xec>
 8000bb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bba:	bfc1      	itttt	gt
 8000bbc:	18d2      	addgt	r2, r2, r3
 8000bbe:	4041      	eorgt	r1, r0
 8000bc0:	4048      	eorgt	r0, r1
 8000bc2:	4041      	eorgt	r1, r0
 8000bc4:	bfb8      	it	lt
 8000bc6:	425b      	neglt	r3, r3
 8000bc8:	2b19      	cmp	r3, #25
 8000bca:	bf88      	it	hi
 8000bcc:	4770      	bxhi	lr
 8000bce:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bd2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bda:	bf18      	it	ne
 8000bdc:	4240      	negne	r0, r0
 8000bde:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000be2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000be6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4249      	negne	r1, r1
 8000bee:	ea92 0f03 	teq	r2, r3
 8000bf2:	d03f      	beq.n	8000c74 <__addsf3+0xd8>
 8000bf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bfc:	eb10 000c 	adds.w	r0, r0, ip
 8000c00:	f1c3 0320 	rsb	r3, r3, #32
 8000c04:	fa01 f103 	lsl.w	r1, r1, r3
 8000c08:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c0c:	d502      	bpl.n	8000c14 <__addsf3+0x78>
 8000c0e:	4249      	negs	r1, r1
 8000c10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c14:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c18:	d313      	bcc.n	8000c42 <__addsf3+0xa6>
 8000c1a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c1e:	d306      	bcc.n	8000c2e <__addsf3+0x92>
 8000c20:	0840      	lsrs	r0, r0, #1
 8000c22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c26:	f102 0201 	add.w	r2, r2, #1
 8000c2a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c2c:	d251      	bcs.n	8000cd2 <__addsf3+0x136>
 8000c2e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c36:	bf08      	it	eq
 8000c38:	f020 0001 	biceq.w	r0, r0, #1
 8000c3c:	ea40 0003 	orr.w	r0, r0, r3
 8000c40:	4770      	bx	lr
 8000c42:	0049      	lsls	r1, r1, #1
 8000c44:	eb40 0000 	adc.w	r0, r0, r0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	bf28      	it	cs
 8000c4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c50:	d2ed      	bcs.n	8000c2e <__addsf3+0x92>
 8000c52:	fab0 fc80 	clz	ip, r0
 8000c56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c62:	bfaa      	itet	ge
 8000c64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c68:	4252      	neglt	r2, r2
 8000c6a:	4318      	orrge	r0, r3
 8000c6c:	bfbc      	itt	lt
 8000c6e:	40d0      	lsrlt	r0, r2
 8000c70:	4318      	orrlt	r0, r3
 8000c72:	4770      	bx	lr
 8000c74:	f092 0f00 	teq	r2, #0
 8000c78:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c7c:	bf06      	itte	eq
 8000c7e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c82:	3201      	addeq	r2, #1
 8000c84:	3b01      	subne	r3, #1
 8000c86:	e7b5      	b.n	8000bf4 <__addsf3+0x58>
 8000c88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c90:	bf18      	it	ne
 8000c92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c96:	d021      	beq.n	8000cdc <__addsf3+0x140>
 8000c98:	ea92 0f03 	teq	r2, r3
 8000c9c:	d004      	beq.n	8000ca8 <__addsf3+0x10c>
 8000c9e:	f092 0f00 	teq	r2, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	4608      	moveq	r0, r1
 8000ca6:	4770      	bx	lr
 8000ca8:	ea90 0f01 	teq	r0, r1
 8000cac:	bf1c      	itt	ne
 8000cae:	2000      	movne	r0, #0
 8000cb0:	4770      	bxne	lr
 8000cb2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cb6:	d104      	bne.n	8000cc2 <__addsf3+0x126>
 8000cb8:	0040      	lsls	r0, r0, #1
 8000cba:	bf28      	it	cs
 8000cbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cc6:	bf3c      	itt	cc
 8000cc8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ccc:	4770      	bxcc	lr
 8000cce:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cd2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cd6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cda:	4770      	bx	lr
 8000cdc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce0:	bf16      	itet	ne
 8000ce2:	4608      	movne	r0, r1
 8000ce4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ce8:	4601      	movne	r1, r0
 8000cea:	0242      	lsls	r2, r0, #9
 8000cec:	bf06      	itte	eq
 8000cee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cf2:	ea90 0f01 	teqeq	r0, r1
 8000cf6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cfa:	4770      	bx	lr

08000cfc <__aeabi_ui2f>:
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e004      	b.n	8000d0c <__aeabi_i2f+0x8>
 8000d02:	bf00      	nop

08000d04 <__aeabi_i2f>:
 8000d04:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d08:	bf48      	it	mi
 8000d0a:	4240      	negmi	r0, r0
 8000d0c:	ea5f 0c00 	movs.w	ip, r0
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d18:	4601      	mov	r1, r0
 8000d1a:	f04f 0000 	mov.w	r0, #0
 8000d1e:	e01c      	b.n	8000d5a <__aeabi_l2f+0x2a>

08000d20 <__aeabi_ul2f>:
 8000d20:	ea50 0201 	orrs.w	r2, r0, r1
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	e00a      	b.n	8000d44 <__aeabi_l2f+0x14>
 8000d2e:	bf00      	nop

08000d30 <__aeabi_l2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d3c:	d502      	bpl.n	8000d44 <__aeabi_l2f+0x14>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	ea5f 0c01 	movs.w	ip, r1
 8000d48:	bf02      	ittt	eq
 8000d4a:	4684      	moveq	ip, r0
 8000d4c:	4601      	moveq	r1, r0
 8000d4e:	2000      	moveq	r0, #0
 8000d50:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d54:	bf08      	it	eq
 8000d56:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d5a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d5e:	fabc f28c 	clz	r2, ip
 8000d62:	3a08      	subs	r2, #8
 8000d64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d68:	db10      	blt.n	8000d8c <__aeabi_l2f+0x5c>
 8000d6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6e:	4463      	add	r3, ip
 8000d70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d74:	f1c2 0220 	rsb	r2, r2, #32
 8000d78:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d80:	eb43 0002 	adc.w	r0, r3, r2
 8000d84:	bf08      	it	eq
 8000d86:	f020 0001 	biceq.w	r0, r0, #1
 8000d8a:	4770      	bx	lr
 8000d8c:	f102 0220 	add.w	r2, r2, #32
 8000d90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d94:	f1c2 0220 	rsb	r2, r2, #32
 8000d98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000da0:	eb43 0002 	adc.w	r0, r3, r2
 8000da4:	bf08      	it	eq
 8000da6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000daa:	4770      	bx	lr

08000dac <__aeabi_uldivmod>:
 8000dac:	b953      	cbnz	r3, 8000dc4 <__aeabi_uldivmod+0x18>
 8000dae:	b94a      	cbnz	r2, 8000dc4 <__aeabi_uldivmod+0x18>
 8000db0:	2900      	cmp	r1, #0
 8000db2:	bf08      	it	eq
 8000db4:	2800      	cmpeq	r0, #0
 8000db6:	bf1c      	itt	ne
 8000db8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000dc0:	f000 b96a 	b.w	8001098 <__aeabi_idiv0>
 8000dc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dcc:	f000 f806 	bl	8000ddc <__udivmoddi4>
 8000dd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd8:	b004      	add	sp, #16
 8000dda:	4770      	bx	lr

08000ddc <__udivmoddi4>:
 8000ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de0:	9d08      	ldr	r5, [sp, #32]
 8000de2:	460c      	mov	r4, r1
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d14e      	bne.n	8000e86 <__udivmoddi4+0xaa>
 8000de8:	4694      	mov	ip, r2
 8000dea:	458c      	cmp	ip, r1
 8000dec:	4686      	mov	lr, r0
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	d962      	bls.n	8000eba <__udivmoddi4+0xde>
 8000df4:	b14a      	cbz	r2, 8000e0a <__udivmoddi4+0x2e>
 8000df6:	f1c2 0320 	rsb	r3, r2, #32
 8000dfa:	4091      	lsls	r1, r2
 8000dfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000e00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e04:	4319      	orrs	r1, r3
 8000e06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e0e:	fa1f f68c 	uxth.w	r6, ip
 8000e12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000e1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e22:	fb04 f106 	mul.w	r1, r4, r6
 8000e26:	4299      	cmp	r1, r3
 8000e28:	d90a      	bls.n	8000e40 <__udivmoddi4+0x64>
 8000e2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e32:	f080 8112 	bcs.w	800105a <__udivmoddi4+0x27e>
 8000e36:	4299      	cmp	r1, r3
 8000e38:	f240 810f 	bls.w	800105a <__udivmoddi4+0x27e>
 8000e3c:	3c02      	subs	r4, #2
 8000e3e:	4463      	add	r3, ip
 8000e40:	1a59      	subs	r1, r3, r1
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000e4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e52:	fb00 f606 	mul.w	r6, r0, r6
 8000e56:	429e      	cmp	r6, r3
 8000e58:	d90a      	bls.n	8000e70 <__udivmoddi4+0x94>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e62:	f080 80fc 	bcs.w	800105e <__udivmoddi4+0x282>
 8000e66:	429e      	cmp	r6, r3
 8000e68:	f240 80f9 	bls.w	800105e <__udivmoddi4+0x282>
 8000e6c:	4463      	add	r3, ip
 8000e6e:	3802      	subs	r0, #2
 8000e70:	1b9b      	subs	r3, r3, r6
 8000e72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e76:	2100      	movs	r1, #0
 8000e78:	b11d      	cbz	r5, 8000e82 <__udivmoddi4+0xa6>
 8000e7a:	40d3      	lsrs	r3, r2
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d905      	bls.n	8000e96 <__udivmoddi4+0xba>
 8000e8a:	b10d      	cbz	r5, 8000e90 <__udivmoddi4+0xb4>
 8000e8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000e90:	2100      	movs	r1, #0
 8000e92:	4608      	mov	r0, r1
 8000e94:	e7f5      	b.n	8000e82 <__udivmoddi4+0xa6>
 8000e96:	fab3 f183 	clz	r1, r3
 8000e9a:	2900      	cmp	r1, #0
 8000e9c:	d146      	bne.n	8000f2c <__udivmoddi4+0x150>
 8000e9e:	42a3      	cmp	r3, r4
 8000ea0:	d302      	bcc.n	8000ea8 <__udivmoddi4+0xcc>
 8000ea2:	4290      	cmp	r0, r2
 8000ea4:	f0c0 80f0 	bcc.w	8001088 <__udivmoddi4+0x2ac>
 8000ea8:	1a86      	subs	r6, r0, r2
 8000eaa:	eb64 0303 	sbc.w	r3, r4, r3
 8000eae:	2001      	movs	r0, #1
 8000eb0:	2d00      	cmp	r5, #0
 8000eb2:	d0e6      	beq.n	8000e82 <__udivmoddi4+0xa6>
 8000eb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000eb8:	e7e3      	b.n	8000e82 <__udivmoddi4+0xa6>
 8000eba:	2a00      	cmp	r2, #0
 8000ebc:	f040 8090 	bne.w	8000fe0 <__udivmoddi4+0x204>
 8000ec0:	eba1 040c 	sub.w	r4, r1, ip
 8000ec4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ec8:	fa1f f78c 	uxth.w	r7, ip
 8000ecc:	2101      	movs	r1, #1
 8000ece:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ed2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ed6:	fb08 4416 	mls	r4, r8, r6, r4
 8000eda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ede:	fb07 f006 	mul.w	r0, r7, r6
 8000ee2:	4298      	cmp	r0, r3
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x11c>
 8000ee6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eea:	f106 34ff 	add.w	r4, r6, #4294967295
 8000eee:	d202      	bcs.n	8000ef6 <__udivmoddi4+0x11a>
 8000ef0:	4298      	cmp	r0, r3
 8000ef2:	f200 80cd 	bhi.w	8001090 <__udivmoddi4+0x2b4>
 8000ef6:	4626      	mov	r6, r4
 8000ef8:	1a1c      	subs	r4, r3, r0
 8000efa:	fa1f f38e 	uxth.w	r3, lr
 8000efe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f02:	fb08 4410 	mls	r4, r8, r0, r4
 8000f06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f0a:	fb00 f707 	mul.w	r7, r0, r7
 8000f0e:	429f      	cmp	r7, r3
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x148>
 8000f12:	eb1c 0303 	adds.w	r3, ip, r3
 8000f16:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1a:	d202      	bcs.n	8000f22 <__udivmoddi4+0x146>
 8000f1c:	429f      	cmp	r7, r3
 8000f1e:	f200 80b0 	bhi.w	8001082 <__udivmoddi4+0x2a6>
 8000f22:	4620      	mov	r0, r4
 8000f24:	1bdb      	subs	r3, r3, r7
 8000f26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f2a:	e7a5      	b.n	8000e78 <__udivmoddi4+0x9c>
 8000f2c:	f1c1 0620 	rsb	r6, r1, #32
 8000f30:	408b      	lsls	r3, r1
 8000f32:	fa22 f706 	lsr.w	r7, r2, r6
 8000f36:	431f      	orrs	r7, r3
 8000f38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000f40:	ea43 030c 	orr.w	r3, r3, ip
 8000f44:	40f4      	lsrs	r4, r6
 8000f46:	fa00 f801 	lsl.w	r8, r0, r1
 8000f4a:	0c38      	lsrs	r0, r7, #16
 8000f4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f50:	fbb4 fef0 	udiv	lr, r4, r0
 8000f54:	fa1f fc87 	uxth.w	ip, r7
 8000f58:	fb00 441e 	mls	r4, r0, lr, r4
 8000f5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f60:	fb0e f90c 	mul.w	r9, lr, ip
 8000f64:	45a1      	cmp	r9, r4
 8000f66:	fa02 f201 	lsl.w	r2, r2, r1
 8000f6a:	d90a      	bls.n	8000f82 <__udivmoddi4+0x1a6>
 8000f6c:	193c      	adds	r4, r7, r4
 8000f6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f72:	f080 8084 	bcs.w	800107e <__udivmoddi4+0x2a2>
 8000f76:	45a1      	cmp	r9, r4
 8000f78:	f240 8081 	bls.w	800107e <__udivmoddi4+0x2a2>
 8000f7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f80:	443c      	add	r4, r7
 8000f82:	eba4 0409 	sub.w	r4, r4, r9
 8000f86:	fa1f f983 	uxth.w	r9, r3
 8000f8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000f92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f9a:	45a4      	cmp	ip, r4
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x1d2>
 8000f9e:	193c      	adds	r4, r7, r4
 8000fa0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fa4:	d267      	bcs.n	8001076 <__udivmoddi4+0x29a>
 8000fa6:	45a4      	cmp	ip, r4
 8000fa8:	d965      	bls.n	8001076 <__udivmoddi4+0x29a>
 8000faa:	3b02      	subs	r3, #2
 8000fac:	443c      	add	r4, r7
 8000fae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000fb2:	fba0 9302 	umull	r9, r3, r0, r2
 8000fb6:	eba4 040c 	sub.w	r4, r4, ip
 8000fba:	429c      	cmp	r4, r3
 8000fbc:	46ce      	mov	lr, r9
 8000fbe:	469c      	mov	ip, r3
 8000fc0:	d351      	bcc.n	8001066 <__udivmoddi4+0x28a>
 8000fc2:	d04e      	beq.n	8001062 <__udivmoddi4+0x286>
 8000fc4:	b155      	cbz	r5, 8000fdc <__udivmoddi4+0x200>
 8000fc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000fca:	eb64 040c 	sbc.w	r4, r4, ip
 8000fce:	fa04 f606 	lsl.w	r6, r4, r6
 8000fd2:	40cb      	lsrs	r3, r1
 8000fd4:	431e      	orrs	r6, r3
 8000fd6:	40cc      	lsrs	r4, r1
 8000fd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000fdc:	2100      	movs	r1, #0
 8000fde:	e750      	b.n	8000e82 <__udivmoddi4+0xa6>
 8000fe0:	f1c2 0320 	rsb	r3, r2, #32
 8000fe4:	fa20 f103 	lsr.w	r1, r0, r3
 8000fe8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fec:	fa24 f303 	lsr.w	r3, r4, r3
 8000ff0:	4094      	lsls	r4, r2
 8000ff2:	430c      	orrs	r4, r1
 8000ff4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ff8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ffc:	fa1f f78c 	uxth.w	r7, ip
 8001000:	fbb3 f0f8 	udiv	r0, r3, r8
 8001004:	fb08 3110 	mls	r1, r8, r0, r3
 8001008:	0c23      	lsrs	r3, r4, #16
 800100a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800100e:	fb00 f107 	mul.w	r1, r0, r7
 8001012:	4299      	cmp	r1, r3
 8001014:	d908      	bls.n	8001028 <__udivmoddi4+0x24c>
 8001016:	eb1c 0303 	adds.w	r3, ip, r3
 800101a:	f100 36ff 	add.w	r6, r0, #4294967295
 800101e:	d22c      	bcs.n	800107a <__udivmoddi4+0x29e>
 8001020:	4299      	cmp	r1, r3
 8001022:	d92a      	bls.n	800107a <__udivmoddi4+0x29e>
 8001024:	3802      	subs	r0, #2
 8001026:	4463      	add	r3, ip
 8001028:	1a5b      	subs	r3, r3, r1
 800102a:	b2a4      	uxth	r4, r4
 800102c:	fbb3 f1f8 	udiv	r1, r3, r8
 8001030:	fb08 3311 	mls	r3, r8, r1, r3
 8001034:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001038:	fb01 f307 	mul.w	r3, r1, r7
 800103c:	42a3      	cmp	r3, r4
 800103e:	d908      	bls.n	8001052 <__udivmoddi4+0x276>
 8001040:	eb1c 0404 	adds.w	r4, ip, r4
 8001044:	f101 36ff 	add.w	r6, r1, #4294967295
 8001048:	d213      	bcs.n	8001072 <__udivmoddi4+0x296>
 800104a:	42a3      	cmp	r3, r4
 800104c:	d911      	bls.n	8001072 <__udivmoddi4+0x296>
 800104e:	3902      	subs	r1, #2
 8001050:	4464      	add	r4, ip
 8001052:	1ae4      	subs	r4, r4, r3
 8001054:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001058:	e739      	b.n	8000ece <__udivmoddi4+0xf2>
 800105a:	4604      	mov	r4, r0
 800105c:	e6f0      	b.n	8000e40 <__udivmoddi4+0x64>
 800105e:	4608      	mov	r0, r1
 8001060:	e706      	b.n	8000e70 <__udivmoddi4+0x94>
 8001062:	45c8      	cmp	r8, r9
 8001064:	d2ae      	bcs.n	8000fc4 <__udivmoddi4+0x1e8>
 8001066:	ebb9 0e02 	subs.w	lr, r9, r2
 800106a:	eb63 0c07 	sbc.w	ip, r3, r7
 800106e:	3801      	subs	r0, #1
 8001070:	e7a8      	b.n	8000fc4 <__udivmoddi4+0x1e8>
 8001072:	4631      	mov	r1, r6
 8001074:	e7ed      	b.n	8001052 <__udivmoddi4+0x276>
 8001076:	4603      	mov	r3, r0
 8001078:	e799      	b.n	8000fae <__udivmoddi4+0x1d2>
 800107a:	4630      	mov	r0, r6
 800107c:	e7d4      	b.n	8001028 <__udivmoddi4+0x24c>
 800107e:	46d6      	mov	lr, sl
 8001080:	e77f      	b.n	8000f82 <__udivmoddi4+0x1a6>
 8001082:	4463      	add	r3, ip
 8001084:	3802      	subs	r0, #2
 8001086:	e74d      	b.n	8000f24 <__udivmoddi4+0x148>
 8001088:	4606      	mov	r6, r0
 800108a:	4623      	mov	r3, r4
 800108c:	4608      	mov	r0, r1
 800108e:	e70f      	b.n	8000eb0 <__udivmoddi4+0xd4>
 8001090:	3e02      	subs	r6, #2
 8001092:	4463      	add	r3, ip
 8001094:	e730      	b.n	8000ef8 <__udivmoddi4+0x11c>
 8001096:	bf00      	nop

08001098 <__aeabi_idiv0>:
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop

0800109c <easyCase>:
uint32_t initDelay = 0;
uint32_t vacuumPlace = 0;

//-------------------------------------------Function Code-------------------------------------------------------//

void easyCase(){
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
	base.Base_case = registerFrame[0x01].U16;
 80010a0:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <easyCase+0x2c>)
 80010a2:	885a      	ldrh	r2, [r3, #2]
 80010a4:	4b09      	ldr	r3, [pc, #36]	@ (80010cc <easyCase+0x30>)
 80010a6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
	base.Vacuum_case = registerFrame[0x02].U16;
 80010aa:	4b07      	ldr	r3, [pc, #28]	@ (80010c8 <easyCase+0x2c>)
 80010ac:	889a      	ldrh	r2, [r3, #4]
 80010ae:	4b07      	ldr	r3, [pc, #28]	@ (80010cc <easyCase+0x30>)
 80010b0:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
	base.Gripper_case = registerFrame[0x03].U16;
 80010b4:	4b04      	ldr	r3, [pc, #16]	@ (80010c8 <easyCase+0x2c>)
 80010b6:	88da      	ldrh	r2, [r3, #6]
 80010b8:	4b04      	ldr	r3, [pc, #16]	@ (80010cc <easyCase+0x30>)
 80010ba:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	20001080 	.word	0x20001080
 80010cc:	20000b00 	.word	0x20000b00

080010d0 <Heartbeat>:

void Heartbeat(){
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
	registerFrame[0x00].U16 = 22881;
 80010d4:	4b04      	ldr	r3, [pc, #16]	@ (80010e8 <Heartbeat+0x18>)
 80010d6:	f645 1261 	movw	r2, #22881	@ 0x5961
 80010da:	801a      	strh	r2, [r3, #0]
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20001080 	.word	0x20001080

080010ec <Routine>:

void Routine(){
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
	if(registerFrame[0x00].U16 == 18537)
 80010f0:	4b27      	ldr	r3, [pc, #156]	@ (8001190 <Routine+0xa4>)
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	f644 0269 	movw	r2, #18537	@ 0x4869
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d144      	bne.n	8001186 <Routine+0x9a>
	{
		//Gripper 0x04 not sure!?!?
		registerFrame[0x04].U16 = base.ReedStatus;   					//Gripper status 0b0010 = 0000 0000 0000 0010
 80010fc:	4b25      	ldr	r3, [pc, #148]	@ (8001194 <Routine+0xa8>)
 80010fe:	f8b3 2052 	ldrh.w	r2, [r3, #82]	@ 0x52
 8001102:	4b23      	ldr	r3, [pc, #140]	@ (8001190 <Routine+0xa4>)
 8001104:	811a      	strh	r2, [r3, #8]
		registerFrame[0x10].U16 = base.BaseStatus;							//Z-axis status 0010 = 1
 8001106:	4b23      	ldr	r3, [pc, #140]	@ (8001194 <Routine+0xa8>)
 8001108:	881a      	ldrh	r2, [r3, #0]
 800110a:	4b21      	ldr	r3, [pc, #132]	@ (8001190 <Routine+0xa4>)
 800110c:	841a      	strh	r2, [r3, #32]
		registerFrame[0x11].U16 = AMT.Linear_Position			*10;	//Z-axis position
 800110e:	4b22      	ldr	r3, [pc, #136]	@ (8001198 <Routine+0xac>)
 8001110:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001114:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001118:	ee67 7a87 	vmul.f32	s15, s15, s14
 800111c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001120:	ee17 3a90 	vmov	r3, s15
 8001124:	b29a      	uxth	r2, r3
 8001126:	4b1a      	ldr	r3, [pc, #104]	@ (8001190 <Routine+0xa4>)
 8001128:	845a      	strh	r2, [r3, #34]	@ 0x22
		registerFrame[0x12].U16 = (int)(AMT.Linear_Velocity)		*10;	//Z-axis speed
 800112a:	4b1b      	ldr	r3, [pc, #108]	@ (8001198 <Routine+0xac>)
 800112c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001130:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001134:	ee17 3a90 	vmov	r3, s15
 8001138:	b29b      	uxth	r3, r3
 800113a:	461a      	mov	r2, r3
 800113c:	0092      	lsls	r2, r2, #2
 800113e:	4413      	add	r3, r2
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	b29a      	uxth	r2, r3
 8001144:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <Routine+0xa4>)
 8001146:	849a      	strh	r2, [r3, #36]	@ 0x24
		registerFrame[0x13].U16 = (int)(AMT.Linear_Acceleration)	*10;	//Z-axis acceleration
 8001148:	4b13      	ldr	r3, [pc, #76]	@ (8001198 <Routine+0xac>)
 800114a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800114e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001152:	ee17 3a90 	vmov	r3, s15
 8001156:	b29b      	uxth	r3, r3
 8001158:	461a      	mov	r2, r3
 800115a:	0092      	lsls	r2, r2, #2
 800115c:	4413      	add	r3, r2
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	b29a      	uxth	r2, r3
 8001162:	4b0b      	ldr	r3, [pc, #44]	@ (8001190 <Routine+0xa4>)
 8001164:	84da      	strh	r2, [r3, #38]	@ 0x26
		registerFrame[0x40].U16 = (int)(x_pos)								*10;	//X-axis position
 8001166:	4b0d      	ldr	r3, [pc, #52]	@ (800119c <Routine+0xb0>)
 8001168:	edd3 7a00 	vldr	s15, [r3]
 800116c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001170:	ee17 3a90 	vmov	r3, s15
 8001174:	b29b      	uxth	r3, r3
 8001176:	461a      	mov	r2, r3
 8001178:	0092      	lsls	r2, r2, #2
 800117a:	4413      	add	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	b29a      	uxth	r2, r3
 8001180:	4b03      	ldr	r3, [pc, #12]	@ (8001190 <Routine+0xa4>)
 8001182:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
	}
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	20001080 	.word	0x20001080
 8001194:	20000b00 	.word	0x20000b00
 8001198:	200009f8 	.word	0x200009f8
 800119c:	200002d0 	.word	0x200002d0

080011a0 <Vacuum>:

void Vacuum(){
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	if(registerFrame[0x02].U16 == 0b0000){
 80011a4:	4b0a      	ldr	r3, [pc, #40]	@ (80011d0 <Vacuum+0x30>)
 80011a6:	889b      	ldrh	r3, [r3, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d105      	bne.n	80011b8 <Vacuum+0x18>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, RESET);			// Vacuum off
 80011ac:	2200      	movs	r2, #0
 80011ae:	2120      	movs	r1, #32
 80011b0:	4808      	ldr	r0, [pc, #32]	@ (80011d4 <Vacuum+0x34>)
 80011b2:	f005 fba5 	bl	8006900 <HAL_GPIO_WritePin>
	else if(registerFrame[0x02].U16 == 0b0001){
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, SET);			// Vacuum on


	}
}
 80011b6:	e008      	b.n	80011ca <Vacuum+0x2a>
	else if(registerFrame[0x02].U16 == 0b0001){
 80011b8:	4b05      	ldr	r3, [pc, #20]	@ (80011d0 <Vacuum+0x30>)
 80011ba:	889b      	ldrh	r3, [r3, #4]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d104      	bne.n	80011ca <Vacuum+0x2a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, SET);			// Vacuum on
 80011c0:	2201      	movs	r2, #1
 80011c2:	2120      	movs	r1, #32
 80011c4:	4803      	ldr	r0, [pc, #12]	@ (80011d4 <Vacuum+0x34>)
 80011c6:	f005 fb9b 	bl	8006900 <HAL_GPIO_WritePin>
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20001080 	.word	0x20001080
 80011d4:	48000800 	.word	0x48000800

080011d8 <GripperMovement>:

void GripperMovement(){
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	if(registerFrame[0x03].U16 == 0b0000){
 80011dc:	4b14      	ldr	r3, [pc, #80]	@ (8001230 <GripperMovement+0x58>)
 80011de:	88db      	ldrh	r3, [r3, #6]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d10f      	bne.n	8001204 <GripperMovement+0x2c>
		base.Gripper = 0;			//Gripper Movement: Backward
 80011e4:	4b13      	ldr	r3, [pc, #76]	@ (8001234 <GripperMovement+0x5c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	82da      	strh	r2, [r3, #22]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, SET);			// Backward
 80011ea:	2201      	movs	r2, #1
 80011ec:	2110      	movs	r1, #16
 80011ee:	4812      	ldr	r0, [pc, #72]	@ (8001238 <GripperMovement+0x60>)
 80011f0:	f005 fb86 	bl	8006900 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 80011f4:	2200      	movs	r2, #0
 80011f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011fe:	f005 fb7f 	bl	8006900 <HAL_GPIO_WritePin>
	else if(registerFrame[0x03].U16 == 0b0001){
		base.Gripper = 1;			//Gripper Movement: Forward
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);			//Forward
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
	}
}
 8001202:	e012      	b.n	800122a <GripperMovement+0x52>
	else if(registerFrame[0x03].U16 == 0b0001){
 8001204:	4b0a      	ldr	r3, [pc, #40]	@ (8001230 <GripperMovement+0x58>)
 8001206:	88db      	ldrh	r3, [r3, #6]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d10e      	bne.n	800122a <GripperMovement+0x52>
		base.Gripper = 1;			//Gripper Movement: Forward
 800120c:	4b09      	ldr	r3, [pc, #36]	@ (8001234 <GripperMovement+0x5c>)
 800120e:	2201      	movs	r2, #1
 8001210:	82da      	strh	r2, [r3, #22]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);			//Forward
 8001212:	2200      	movs	r2, #0
 8001214:	2110      	movs	r1, #16
 8001216:	4808      	ldr	r0, [pc, #32]	@ (8001238 <GripperMovement+0x60>)
 8001218:	f005 fb72 	bl	8006900 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 800121c:	2201      	movs	r2, #1
 800121e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001222:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001226:	f005 fb6b 	bl	8006900 <HAL_GPIO_WritePin>
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20001080 	.word	0x20001080
 8001234:	20000b00 	.word	0x20000b00
 8001238:	48000800 	.word	0x48000800

0800123c <SetShelves>:



void SetShelves(){
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	base.ShelveMode = 1;
 8001240:	4b40      	ldr	r3, [pc, #256]	@ (8001344 <SetShelves+0x108>)
 8001242:	2201      	movs	r2, #1
 8001244:	831a      	strh	r2, [r3, #24]
	PS2X_Reader();
 8001246:	f001 fe27 	bl	8002e98 <PS2X_Reader>
	if(ps2.ps2RX[0] == 74){
 800124a:	4b3f      	ldr	r3, [pc, #252]	@ (8001348 <SetShelves+0x10c>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b4a      	cmp	r3, #74	@ 0x4a
 8001250:	d102      	bne.n	8001258 <SetShelves+0x1c>
		ps2.stop = 1;
 8001252:	4b3d      	ldr	r3, [pc, #244]	@ (8001348 <SetShelves+0x10c>)
 8001254:	2201      	movs	r2, #1
 8001256:	671a      	str	r2, [r3, #112]	@ 0x70
	}
	if (ps2.stop == 1 && ps2.ps2RX[0] == 75){
 8001258:	4b3b      	ldr	r3, [pc, #236]	@ (8001348 <SetShelves+0x10c>)
 800125a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800125c:	2b01      	cmp	r3, #1
 800125e:	d10b      	bne.n	8001278 <SetShelves+0x3c>
 8001260:	4b39      	ldr	r3, [pc, #228]	@ (8001348 <SetShelves+0x10c>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b4b      	cmp	r3, #75	@ 0x4b
 8001266:	d107      	bne.n	8001278 <SetShelves+0x3c>
		ps2.stop = 0;
 8001268:	4b37      	ldr	r3, [pc, #220]	@ (8001348 <SetShelves+0x10c>)
 800126a:	2200      	movs	r2, #0
 800126c:	671a      	str	r2, [r3, #112]	@ 0x70
		base.MotorHome = 150;
 800126e:	4b35      	ldr	r3, [pc, #212]	@ (8001344 <SetShelves+0x108>)
 8001270:	2296      	movs	r2, #150	@ 0x96
 8001272:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8001276:	e005      	b.n	8001284 <SetShelves+0x48>
	}
		  else if(ps2.stop == 0){
 8001278:	4b33      	ldr	r3, [pc, #204]	@ (8001348 <SetShelves+0x10c>)
 800127a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800127c:	2b00      	cmp	r3, #0
 800127e:	d101      	bne.n	8001284 <SetShelves+0x48>
			  PS2X_Reader();
 8001280:	f001 fe0a 	bl	8002e98 <PS2X_Reader>
	  	  }
	if (base.ShelveMode == 0)
 8001284:	4b2f      	ldr	r3, [pc, #188]	@ (8001344 <SetShelves+0x108>)
 8001286:	8b1b      	ldrh	r3, [r3, #24]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d158      	bne.n	800133e <SetShelves+0x102>
	{
		registerFrame[0x23].U16 = base.Shelve[0] *10; 	//Position Shelve 1
 800128c:	4b2d      	ldr	r3, [pc, #180]	@ (8001344 <SetShelves+0x108>)
 800128e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001292:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001296:	ee67 7a87 	vmul.f32	s15, s15, s14
 800129a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800129e:	ee17 3a90 	vmov	r3, s15
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	4b29      	ldr	r3, [pc, #164]	@ (800134c <SetShelves+0x110>)
 80012a6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
		registerFrame[0x24].U16 = base.Shelve[1] *10;
 80012aa:	4b26      	ldr	r3, [pc, #152]	@ (8001344 <SetShelves+0x108>)
 80012ac:	edd3 7a08 	vldr	s15, [r3, #32]
 80012b0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80012b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012bc:	ee17 3a90 	vmov	r3, s15
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	4b22      	ldr	r3, [pc, #136]	@ (800134c <SetShelves+0x110>)
 80012c4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
		registerFrame[0x25].U16 = base.Shelve[2] *10;
 80012c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001344 <SetShelves+0x108>)
 80012ca:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80012ce:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80012d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012da:	ee17 3a90 	vmov	r3, s15
 80012de:	b29a      	uxth	r2, r3
 80012e0:	4b1a      	ldr	r3, [pc, #104]	@ (800134c <SetShelves+0x110>)
 80012e2:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
		registerFrame[0x26].U16 = base.Shelve[3] *10;
 80012e6:	4b17      	ldr	r3, [pc, #92]	@ (8001344 <SetShelves+0x108>)
 80012e8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80012ec:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80012f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012f8:	ee17 3a90 	vmov	r3, s15
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	4b13      	ldr	r3, [pc, #76]	@ (800134c <SetShelves+0x110>)
 8001300:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
		registerFrame[0x27].U16 = base.Shelve[4] *10;
 8001304:	4b0f      	ldr	r3, [pc, #60]	@ (8001344 <SetShelves+0x108>)
 8001306:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800130a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800130e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001312:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001316:	ee17 3a90 	vmov	r3, s15
 800131a:	b29a      	uxth	r2, r3
 800131c:	4b0b      	ldr	r3, [pc, #44]	@ (800134c <SetShelves+0x110>)
 800131e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

		//finish
		base.BaseStatus = 0;
 8001322:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <SetShelves+0x108>)
 8001324:	2200      	movs	r2, #0
 8001326:	801a      	strh	r2, [r3, #0]
		registerFrame[0x01].U16 = 0;
 8001328:	4b08      	ldr	r3, [pc, #32]	@ (800134c <SetShelves+0x110>)
 800132a:	2200      	movs	r2, #0
 800132c:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = base.BaseStatus;
 800132e:	4b05      	ldr	r3, [pc, #20]	@ (8001344 <SetShelves+0x108>)
 8001330:	881a      	ldrh	r2, [r3, #0]
 8001332:	4b06      	ldr	r3, [pc, #24]	@ (800134c <SetShelves+0x110>)
 8001334:	841a      	strh	r2, [r3, #32]
		base.Base_case = 0;
 8001336:	4b03      	ldr	r3, [pc, #12]	@ (8001344 <SetShelves+0x108>)
 8001338:	2200      	movs	r2, #0
 800133a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
	}
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000b00 	.word	0x20000b00
 8001348:	20000a48 	.word	0x20000a48
 800134c:	20001080 	.word	0x20001080

08001350 <RunPoint>:

void RunPoint(){
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
	base.GoalPoint = (registerFrame[0x30].U16)/10; //Get Goal point from BaseSytem(Point Mode) that we pick/write After pressing Run Button
 8001354:	4b3e      	ldr	r3, [pc, #248]	@ (8001450 <RunPoint+0x100>)
 8001356:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800135a:	4a3e      	ldr	r2, [pc, #248]	@ (8001454 <RunPoint+0x104>)
 800135c:	fba2 2303 	umull	r2, r3, r2, r3
 8001360:	08db      	lsrs	r3, r3, #3
 8001362:	b29b      	uxth	r3, r3
 8001364:	ee07 3a90 	vmov	s15, r3
 8001368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800136c:	4b3a      	ldr	r3, [pc, #232]	@ (8001458 <RunPoint+0x108>)
 800136e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	elapsedTime += 0.0002;
 8001372:	4b3a      	ldr	r3, [pc, #232]	@ (800145c <RunPoint+0x10c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff f8b2 	bl	80004e0 <__aeabi_f2d>
 800137c:	a330      	add	r3, pc, #192	@ (adr r3, 8001440 <RunPoint+0xf0>)
 800137e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001382:	f7fe ff4f 	bl	8000224 <__adddf3>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4610      	mov	r0, r2
 800138c:	4619      	mov	r1, r3
 800138e:	f7ff fbaf 	bl	8000af0 <__aeabi_d2f>
 8001392:	4603      	mov	r3, r0
 8001394:	4a31      	ldr	r2, [pc, #196]	@ (800145c <RunPoint+0x10c>)
 8001396:	6013      	str	r3, [r2, #0]
	Traject(&Traj, temp_pos, base.GoalPoint);
 8001398:	4b31      	ldr	r3, [pc, #196]	@ (8001460 <RunPoint+0x110>)
 800139a:	edd3 7a00 	vldr	s15, [r3]
 800139e:	4b2e      	ldr	r3, [pc, #184]	@ (8001458 <RunPoint+0x108>)
 80013a0:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80013a4:	eef0 0a47 	vmov.f32	s1, s14
 80013a8:	eeb0 0a67 	vmov.f32	s0, s15
 80013ac:	482d      	ldr	r0, [pc, #180]	@ (8001464 <RunPoint+0x114>)
 80013ae:	f001 ff11 	bl	80031d4 <Traject>
	PID_controller_cascade(&PID_pos, &PID_velo, &AMT, Traj.currentPosition);
 80013b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001464 <RunPoint+0x114>)
 80013b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80013b8:	eeb0 0a67 	vmov.f32	s0, s15
 80013bc:	4a2a      	ldr	r2, [pc, #168]	@ (8001468 <RunPoint+0x118>)
 80013be:	492b      	ldr	r1, [pc, #172]	@ (800146c <RunPoint+0x11c>)
 80013c0:	482b      	ldr	r0, [pc, #172]	@ (8001470 <RunPoint+0x120>)
 80013c2:	f001 fd4d 	bl	8002e60 <PID_controller_cascade>
	base.MotorHome = PID_velo.out;
 80013c6:	4b29      	ldr	r3, [pc, #164]	@ (800146c <RunPoint+0x11c>)
 80013c8:	edd3 7a06 	vldr	s15, [r3, #24]
 80013cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013d0:	ee17 3a90 	vmov	r3, s15
 80013d4:	b21a      	sxth	r2, r3
 80013d6:	4b20      	ldr	r3, [pc, #128]	@ (8001458 <RunPoint+0x108>)
 80013d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

	// Error must less than 0.1 mm
	if(fabs(AMT.Linear_Position - base.GoalPoint) <= 0.1){
 80013dc:	4b22      	ldr	r3, [pc, #136]	@ (8001468 <RunPoint+0x118>)
 80013de:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 80013e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001458 <RunPoint+0x108>)
 80013e4:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80013e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ec:	eef0 7ae7 	vabs.f32	s15, s15
 80013f0:	ee17 0a90 	vmov	r0, s15
 80013f4:	f7ff f874 	bl	80004e0 <__aeabi_f2d>
 80013f8:	a313      	add	r3, pc, #76	@ (adr r3, 8001448 <RunPoint+0xf8>)
 80013fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fe:	f7ff fb43 	bl	8000a88 <__aeabi_dcmple>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d100      	bne.n	800140a <RunPoint+0xba>
		temp_pos = base.GoalPoint;
		base.BaseStatus = 0;
		registerFrame[0x01].U16 = 0;
		registerFrame[0x10].U16 = base.BaseStatus;
	}
}
 8001408:	e015      	b.n	8001436 <RunPoint+0xe6>
		elapsedTime = 0;
 800140a:	4b14      	ldr	r3, [pc, #80]	@ (800145c <RunPoint+0x10c>)
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
		Traj.currentPosition = base.GoalPoint;
 8001412:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <RunPoint+0x108>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	4a13      	ldr	r2, [pc, #76]	@ (8001464 <RunPoint+0x114>)
 8001418:	6093      	str	r3, [r2, #8]
		temp_pos = base.GoalPoint;
 800141a:	4b0f      	ldr	r3, [pc, #60]	@ (8001458 <RunPoint+0x108>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	4a10      	ldr	r2, [pc, #64]	@ (8001460 <RunPoint+0x110>)
 8001420:	6013      	str	r3, [r2, #0]
		base.BaseStatus = 0;
 8001422:	4b0d      	ldr	r3, [pc, #52]	@ (8001458 <RunPoint+0x108>)
 8001424:	2200      	movs	r2, #0
 8001426:	801a      	strh	r2, [r3, #0]
		registerFrame[0x01].U16 = 0;
 8001428:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <RunPoint+0x100>)
 800142a:	2200      	movs	r2, #0
 800142c:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = base.BaseStatus;
 800142e:	4b0a      	ldr	r3, [pc, #40]	@ (8001458 <RunPoint+0x108>)
 8001430:	881a      	ldrh	r2, [r3, #0]
 8001432:	4b07      	ldr	r3, [pc, #28]	@ (8001450 <RunPoint+0x100>)
 8001434:	841a      	strh	r2, [r3, #32]
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	f3af 8000 	nop.w
 8001440:	eb1c432d 	.word	0xeb1c432d
 8001444:	3f2a36e2 	.word	0x3f2a36e2
 8001448:	9999999a 	.word	0x9999999a
 800144c:	3fb99999 	.word	0x3fb99999
 8001450:	20001080 	.word	0x20001080
 8001454:	cccccccd 	.word	0xcccccccd
 8001458:	20000b00 	.word	0x20000b00
 800145c:	20001210 	.word	0x20001210
 8001460:	20000298 	.word	0x20000298
 8001464:	200009e0 	.word	0x200009e0
 8001468:	200009f8 	.word	0x200009f8
 800146c:	20000ae4 	.word	0x20000ae4
 8001470:	20000ac8 	.word	0x20000ac8
 8001474:	00000000 	.word	0x00000000

08001478 <SetHome>:

void SetHome() {
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	if(temp_home == 0){
 800147c:	4b48      	ldr	r3, [pc, #288]	@ (80015a0 <SetHome+0x128>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d132      	bne.n	80014ea <SetHome+0x72>
		elapsedTime += 0.0002;
 8001484:	4b47      	ldr	r3, [pc, #284]	@ (80015a4 <SetHome+0x12c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff f829 	bl	80004e0 <__aeabi_f2d>
 800148e:	a342      	add	r3, pc, #264	@ (adr r3, 8001598 <SetHome+0x120>)
 8001490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001494:	f7fe fec6 	bl	8000224 <__adddf3>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	f7ff fb26 	bl	8000af0 <__aeabi_d2f>
 80014a4:	4603      	mov	r3, r0
 80014a6:	4a3f      	ldr	r2, [pc, #252]	@ (80015a4 <SetHome+0x12c>)
 80014a8:	6013      	str	r3, [r2, #0]
		Traject(&Traj, temp_pos, 612); // Update trajectory
 80014aa:	4b3f      	ldr	r3, [pc, #252]	@ (80015a8 <SetHome+0x130>)
 80014ac:	edd3 7a00 	vldr	s15, [r3]
 80014b0:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 80015ac <SetHome+0x134>
 80014b4:	eeb0 0a67 	vmov.f32	s0, s15
 80014b8:	483d      	ldr	r0, [pc, #244]	@ (80015b0 <SetHome+0x138>)
 80014ba:	f001 fe8b 	bl	80031d4 <Traject>
		PID_controller_cascade(&PID_pos, &PID_velo, &AMT, Traj.currentPosition); // Apply PID control
 80014be:	4b3c      	ldr	r3, [pc, #240]	@ (80015b0 <SetHome+0x138>)
 80014c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80014c4:	eeb0 0a67 	vmov.f32	s0, s15
 80014c8:	4a3a      	ldr	r2, [pc, #232]	@ (80015b4 <SetHome+0x13c>)
 80014ca:	493b      	ldr	r1, [pc, #236]	@ (80015b8 <SetHome+0x140>)
 80014cc:	483b      	ldr	r0, [pc, #236]	@ (80015bc <SetHome+0x144>)
 80014ce:	f001 fcc7 	bl	8002e60 <PID_controller_cascade>
		base.MotorHome = PID_velo.out;
 80014d2:	4b39      	ldr	r3, [pc, #228]	@ (80015b8 <SetHome+0x140>)
 80014d4:	edd3 7a06 	vldr	s15, [r3, #24]
 80014d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014dc:	ee17 3a90 	vmov	r3, s15
 80014e0:	b21a      	sxth	r2, r3
 80014e2:	4b37      	ldr	r3, [pc, #220]	@ (80015c0 <SetHome+0x148>)
 80014e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80014e8:	e035      	b.n	8001556 <SetHome+0xde>
	}
	else if(temp_home != 0){
 80014ea:	4b2d      	ldr	r3, [pc, #180]	@ (80015a0 <SetHome+0x128>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d031      	beq.n	8001556 <SetHome+0xde>
		elapsedTime += 0.0002;
 80014f2:	4b2c      	ldr	r3, [pc, #176]	@ (80015a4 <SetHome+0x12c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7fe fff2 	bl	80004e0 <__aeabi_f2d>
 80014fc:	a326      	add	r3, pc, #152	@ (adr r3, 8001598 <SetHome+0x120>)
 80014fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001502:	f7fe fe8f 	bl	8000224 <__adddf3>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4610      	mov	r0, r2
 800150c:	4619      	mov	r1, r3
 800150e:	f7ff faef 	bl	8000af0 <__aeabi_d2f>
 8001512:	4603      	mov	r3, r0
 8001514:	4a23      	ldr	r2, [pc, #140]	@ (80015a4 <SetHome+0x12c>)
 8001516:	6013      	str	r3, [r2, #0]
		Traject(&Traj, temp_pos, 600); // Update trajectory
 8001518:	4b23      	ldr	r3, [pc, #140]	@ (80015a8 <SetHome+0x130>)
 800151a:	edd3 7a00 	vldr	s15, [r3]
 800151e:	eddf 0a29 	vldr	s1, [pc, #164]	@ 80015c4 <SetHome+0x14c>
 8001522:	eeb0 0a67 	vmov.f32	s0, s15
 8001526:	4822      	ldr	r0, [pc, #136]	@ (80015b0 <SetHome+0x138>)
 8001528:	f001 fe54 	bl	80031d4 <Traject>
		PID_controller_cascade(&PID_pos, &PID_velo, &AMT, Traj.currentPosition); // Apply PID control
 800152c:	4b20      	ldr	r3, [pc, #128]	@ (80015b0 <SetHome+0x138>)
 800152e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001532:	eeb0 0a67 	vmov.f32	s0, s15
 8001536:	4a1f      	ldr	r2, [pc, #124]	@ (80015b4 <SetHome+0x13c>)
 8001538:	491f      	ldr	r1, [pc, #124]	@ (80015b8 <SetHome+0x140>)
 800153a:	4820      	ldr	r0, [pc, #128]	@ (80015bc <SetHome+0x144>)
 800153c:	f001 fc90 	bl	8002e60 <PID_controller_cascade>
		base.MotorHome = PID_velo.out;
 8001540:	4b1d      	ldr	r3, [pc, #116]	@ (80015b8 <SetHome+0x140>)
 8001542:	edd3 7a06 	vldr	s15, [r3, #24]
 8001546:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800154a:	ee17 3a90 	vmov	r3, s15
 800154e:	b21a      	sxth	r2, r3
 8001550:	4b1b      	ldr	r3, [pc, #108]	@ (80015c0 <SetHome+0x148>)
 8001552:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
	}

	// Top photo limit was triggered
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_SET) {
 8001556:	2140      	movs	r1, #64	@ 0x40
 8001558:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800155c:	f005 f9b8 	bl	80068d0 <HAL_GPIO_ReadPin>
 8001560:	4603      	mov	r3, r0
 8001562:	2b01      	cmp	r3, #1
 8001564:	d116      	bne.n	8001594 <SetHome+0x11c>
        AMT_encoder_reset(&AMT); // Reset encoder to zero or the desired home position
 8001566:	4813      	ldr	r0, [pc, #76]	@ (80015b4 <SetHome+0x13c>)
 8001568:	f000 fd64 	bl	8002034 <AMT_encoder_reset>
        temp_home = 1;
 800156c:	4b0c      	ldr	r3, [pc, #48]	@ (80015a0 <SetHome+0x128>)
 800156e:	2201      	movs	r2, #1
 8001570:	601a      	str	r2, [r3, #0]
        elapsedTime = 0;
 8001572:	4b0c      	ldr	r3, [pc, #48]	@ (80015a4 <SetHome+0x12c>)
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
        Traj.currentPosition = 600;
 800157a:	4b0d      	ldr	r3, [pc, #52]	@ (80015b0 <SetHome+0x138>)
 800157c:	4a12      	ldr	r2, [pc, #72]	@ (80015c8 <SetHome+0x150>)
 800157e:	609a      	str	r2, [r3, #8]
        base.BaseStatus = 0; // Update the base status
 8001580:	4b0f      	ldr	r3, [pc, #60]	@ (80015c0 <SetHome+0x148>)
 8001582:	2200      	movs	r2, #0
 8001584:	801a      	strh	r2, [r3, #0]
        registerFrame[0x01].U16 = 0;
 8001586:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <SetHome+0x154>)
 8001588:	2200      	movs	r2, #0
 800158a:	805a      	strh	r2, [r3, #2]
        registerFrame[0x10].U16 = base.BaseStatus;
 800158c:	4b0c      	ldr	r3, [pc, #48]	@ (80015c0 <SetHome+0x148>)
 800158e:	881a      	ldrh	r2, [r3, #0]
 8001590:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <SetHome+0x154>)
 8001592:	841a      	strh	r2, [r3, #32]

    }
}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}
 8001598:	eb1c432d 	.word	0xeb1c432d
 800159c:	3f2a36e2 	.word	0x3f2a36e2
 80015a0:	200002a0 	.word	0x200002a0
 80015a4:	20001210 	.word	0x20001210
 80015a8:	20000298 	.word	0x20000298
 80015ac:	44190000 	.word	0x44190000
 80015b0:	200009e0 	.word	0x200009e0
 80015b4:	200009f8 	.word	0x200009f8
 80015b8:	20000ae4 	.word	0x20000ae4
 80015bc:	20000ac8 	.word	0x20000ac8
 80015c0:	20000b00 	.word	0x20000b00
 80015c4:	44160000 	.word	0x44160000
 80015c8:	44160000 	.word	0x44160000
 80015cc:	20001080 	.word	0x20001080

080015d0 <RunJog>:

void RunJog() {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
    // Define Pick shelf
    base.Pick[4] = registerFrame[0x21].U16 % 10;
 80015d6:	4bb7      	ldr	r3, [pc, #732]	@ (80018b4 <RunJog+0x2e4>)
 80015d8:	f8b3 2042 	ldrh.w	r2, [r3, #66]	@ 0x42
 80015dc:	4bb6      	ldr	r3, [pc, #728]	@ (80018b8 <RunJog+0x2e8>)
 80015de:	fba3 1302 	umull	r1, r3, r3, r2
 80015e2:	08d9      	lsrs	r1, r3, #3
 80015e4:	460b      	mov	r3, r1
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	440b      	add	r3, r1
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	4bb2      	ldr	r3, [pc, #712]	@ (80018bc <RunJog+0x2ec>)
 80015f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    base.Pick[3] = ((registerFrame[0x21].U16 - base.Pick[4]) % 100) / 10;
 80015f6:	4baf      	ldr	r3, [pc, #700]	@ (80018b4 <RunJog+0x2e4>)
 80015f8:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80015fc:	461a      	mov	r2, r3
 80015fe:	4baf      	ldr	r3, [pc, #700]	@ (80018bc <RunJog+0x2ec>)
 8001600:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001604:	1ad2      	subs	r2, r2, r3
 8001606:	4bae      	ldr	r3, [pc, #696]	@ (80018c0 <RunJog+0x2f0>)
 8001608:	fb83 1302 	smull	r1, r3, r3, r2
 800160c:	1159      	asrs	r1, r3, #5
 800160e:	17d3      	asrs	r3, r2, #31
 8001610:	1acb      	subs	r3, r1, r3
 8001612:	2164      	movs	r1, #100	@ 0x64
 8001614:	fb01 f303 	mul.w	r3, r1, r3
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	4aaa      	ldr	r2, [pc, #680]	@ (80018c4 <RunJog+0x2f4>)
 800161c:	fb82 1203 	smull	r1, r2, r2, r3
 8001620:	1092      	asrs	r2, r2, #2
 8001622:	17db      	asrs	r3, r3, #31
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	b29a      	uxth	r2, r3
 8001628:	4ba4      	ldr	r3, [pc, #656]	@ (80018bc <RunJog+0x2ec>)
 800162a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    base.Pick[2] = ((registerFrame[0x21].U16 % 1000) - ((base.Pick[3] * 10) + base.Pick[4])) / 100;
 800162c:	4ba1      	ldr	r3, [pc, #644]	@ (80018b4 <RunJog+0x2e4>)
 800162e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001632:	4aa5      	ldr	r2, [pc, #660]	@ (80018c8 <RunJog+0x2f8>)
 8001634:	fba2 1203 	umull	r1, r2, r2, r3
 8001638:	0992      	lsrs	r2, r2, #6
 800163a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800163e:	fb01 f202 	mul.w	r2, r1, r2
 8001642:	1a9b      	subs	r3, r3, r2
 8001644:	b29b      	uxth	r3, r3
 8001646:	4619      	mov	r1, r3
 8001648:	4b9c      	ldr	r3, [pc, #624]	@ (80018bc <RunJog+0x2ec>)
 800164a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800164c:	461a      	mov	r2, r3
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	461a      	mov	r2, r3
 8001658:	4b98      	ldr	r3, [pc, #608]	@ (80018bc <RunJog+0x2ec>)
 800165a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800165e:	4413      	add	r3, r2
 8001660:	1acb      	subs	r3, r1, r3
 8001662:	4a97      	ldr	r2, [pc, #604]	@ (80018c0 <RunJog+0x2f0>)
 8001664:	fb82 1203 	smull	r1, r2, r2, r3
 8001668:	1152      	asrs	r2, r2, #5
 800166a:	17db      	asrs	r3, r3, #31
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	b29a      	uxth	r2, r3
 8001670:	4b92      	ldr	r3, [pc, #584]	@ (80018bc <RunJog+0x2ec>)
 8001672:	879a      	strh	r2, [r3, #60]	@ 0x3c
    base.Pick[1] = ((registerFrame[0x21].U16 % 10000) - (((base.Pick[2] * 100) + (base.Pick[3] * 10) + base.Pick[4]))) / 1000;
 8001674:	4b8f      	ldr	r3, [pc, #572]	@ (80018b4 <RunJog+0x2e4>)
 8001676:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 800167a:	4a94      	ldr	r2, [pc, #592]	@ (80018cc <RunJog+0x2fc>)
 800167c:	fba2 1203 	umull	r1, r2, r2, r3
 8001680:	0b52      	lsrs	r2, r2, #13
 8001682:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001686:	fb01 f202 	mul.w	r2, r1, r2
 800168a:	1a9b      	subs	r3, r3, r2
 800168c:	b29b      	uxth	r3, r3
 800168e:	4618      	mov	r0, r3
 8001690:	4b8a      	ldr	r3, [pc, #552]	@ (80018bc <RunJog+0x2ec>)
 8001692:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8001694:	461a      	mov	r2, r3
 8001696:	2364      	movs	r3, #100	@ 0x64
 8001698:	fb03 f202 	mul.w	r2, r3, r2
 800169c:	4b87      	ldr	r3, [pc, #540]	@ (80018bc <RunJog+0x2ec>)
 800169e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80016a0:	4619      	mov	r1, r3
 80016a2:	460b      	mov	r3, r1
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	440b      	add	r3, r1
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	4413      	add	r3, r2
 80016ac:	4a83      	ldr	r2, [pc, #524]	@ (80018bc <RunJog+0x2ec>)
 80016ae:	f8b2 2040 	ldrh.w	r2, [r2, #64]	@ 0x40
 80016b2:	4413      	add	r3, r2
 80016b4:	1ac3      	subs	r3, r0, r3
 80016b6:	4a84      	ldr	r2, [pc, #528]	@ (80018c8 <RunJog+0x2f8>)
 80016b8:	fb82 1203 	smull	r1, r2, r2, r3
 80016bc:	1192      	asrs	r2, r2, #6
 80016be:	17db      	asrs	r3, r3, #31
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	4b7d      	ldr	r3, [pc, #500]	@ (80018bc <RunJog+0x2ec>)
 80016c6:	875a      	strh	r2, [r3, #58]	@ 0x3a
    base.Pick[0] = (registerFrame[0x21].U16 - ((base.Pick[1] * 1000 + base.Pick[2] * 100 + base.Pick[3] * 10 + base.Pick[4]))) / 10000;
 80016c8:	4b7a      	ldr	r3, [pc, #488]	@ (80018b4 <RunJog+0x2e4>)
 80016ca:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80016ce:	4618      	mov	r0, r3
 80016d0:	4b7a      	ldr	r3, [pc, #488]	@ (80018bc <RunJog+0x2ec>)
 80016d2:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 80016d4:	461a      	mov	r2, r3
 80016d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016da:	fb03 f202 	mul.w	r2, r3, r2
 80016de:	4b77      	ldr	r3, [pc, #476]	@ (80018bc <RunJog+0x2ec>)
 80016e0:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80016e2:	4619      	mov	r1, r3
 80016e4:	2364      	movs	r3, #100	@ 0x64
 80016e6:	fb01 f303 	mul.w	r3, r1, r3
 80016ea:	441a      	add	r2, r3
 80016ec:	4b73      	ldr	r3, [pc, #460]	@ (80018bc <RunJog+0x2ec>)
 80016ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80016f0:	4619      	mov	r1, r3
 80016f2:	460b      	mov	r3, r1
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	440b      	add	r3, r1
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	4413      	add	r3, r2
 80016fc:	4a6f      	ldr	r2, [pc, #444]	@ (80018bc <RunJog+0x2ec>)
 80016fe:	f8b2 2040 	ldrh.w	r2, [r2, #64]	@ 0x40
 8001702:	4413      	add	r3, r2
 8001704:	1ac3      	subs	r3, r0, r3
 8001706:	4a72      	ldr	r2, [pc, #456]	@ (80018d0 <RunJog+0x300>)
 8001708:	fb82 1203 	smull	r1, r2, r2, r3
 800170c:	1312      	asrs	r2, r2, #12
 800170e:	17db      	asrs	r3, r3, #31
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	b29a      	uxth	r2, r3
 8001714:	4b69      	ldr	r3, [pc, #420]	@ (80018bc <RunJog+0x2ec>)
 8001716:	871a      	strh	r2, [r3, #56]	@ 0x38

    // Define Place shelf
    base.Place[4] = registerFrame[0x22].U16 % 10;
 8001718:	4b66      	ldr	r3, [pc, #408]	@ (80018b4 <RunJog+0x2e4>)
 800171a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 800171e:	4b66      	ldr	r3, [pc, #408]	@ (80018b8 <RunJog+0x2e8>)
 8001720:	fba3 1302 	umull	r1, r3, r3, r2
 8001724:	08d9      	lsrs	r1, r3, #3
 8001726:	460b      	mov	r3, r1
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	440b      	add	r3, r1
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	b29a      	uxth	r2, r3
 8001732:	4b62      	ldr	r3, [pc, #392]	@ (80018bc <RunJog+0x2ec>)
 8001734:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
    base.Place[3] = ((registerFrame[0x22].U16 - base.Place[4]) % 100) / 10;
 8001738:	4b5e      	ldr	r3, [pc, #376]	@ (80018b4 <RunJog+0x2e4>)
 800173a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800173e:	461a      	mov	r2, r3
 8001740:	4b5e      	ldr	r3, [pc, #376]	@ (80018bc <RunJog+0x2ec>)
 8001742:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8001746:	1ad2      	subs	r2, r2, r3
 8001748:	4b5d      	ldr	r3, [pc, #372]	@ (80018c0 <RunJog+0x2f0>)
 800174a:	fb83 1302 	smull	r1, r3, r3, r2
 800174e:	1159      	asrs	r1, r3, #5
 8001750:	17d3      	asrs	r3, r2, #31
 8001752:	1acb      	subs	r3, r1, r3
 8001754:	2164      	movs	r1, #100	@ 0x64
 8001756:	fb01 f303 	mul.w	r3, r1, r3
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	4a59      	ldr	r2, [pc, #356]	@ (80018c4 <RunJog+0x2f4>)
 800175e:	fb82 1203 	smull	r1, r2, r2, r3
 8001762:	1092      	asrs	r2, r2, #2
 8001764:	17db      	asrs	r3, r3, #31
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	b29a      	uxth	r2, r3
 800176a:	4b54      	ldr	r3, [pc, #336]	@ (80018bc <RunJog+0x2ec>)
 800176c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    base.Place[2] = ((registerFrame[0x22].U16 % 1000) - ((base.Place[3] * 10) + base.Place[4])) / 100;
 8001770:	4b50      	ldr	r3, [pc, #320]	@ (80018b4 <RunJog+0x2e4>)
 8001772:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001776:	4a54      	ldr	r2, [pc, #336]	@ (80018c8 <RunJog+0x2f8>)
 8001778:	fba2 1203 	umull	r1, r2, r2, r3
 800177c:	0992      	lsrs	r2, r2, #6
 800177e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001782:	fb01 f202 	mul.w	r2, r1, r2
 8001786:	1a9b      	subs	r3, r3, r2
 8001788:	b29b      	uxth	r3, r3
 800178a:	4619      	mov	r1, r3
 800178c:	4b4b      	ldr	r3, [pc, #300]	@ (80018bc <RunJog+0x2ec>)
 800178e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001792:	461a      	mov	r2, r3
 8001794:	4613      	mov	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	461a      	mov	r2, r3
 800179e:	4b47      	ldr	r3, [pc, #284]	@ (80018bc <RunJog+0x2ec>)
 80017a0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80017a4:	4413      	add	r3, r2
 80017a6:	1acb      	subs	r3, r1, r3
 80017a8:	4a45      	ldr	r2, [pc, #276]	@ (80018c0 <RunJog+0x2f0>)
 80017aa:	fb82 1203 	smull	r1, r2, r2, r3
 80017ae:	1152      	asrs	r2, r2, #5
 80017b0:	17db      	asrs	r3, r3, #31
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	4b41      	ldr	r3, [pc, #260]	@ (80018bc <RunJog+0x2ec>)
 80017b8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    base.Place[1] = ((registerFrame[0x22].U16 % 10000) - (((base.Place[2] * 100) + (base.Place[3] * 10) + base.Place[4]))) / 1000;
 80017bc:	4b3d      	ldr	r3, [pc, #244]	@ (80018b4 <RunJog+0x2e4>)
 80017be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80017c2:	4a42      	ldr	r2, [pc, #264]	@ (80018cc <RunJog+0x2fc>)
 80017c4:	fba2 1203 	umull	r1, r2, r2, r3
 80017c8:	0b52      	lsrs	r2, r2, #13
 80017ca:	f242 7110 	movw	r1, #10000	@ 0x2710
 80017ce:	fb01 f202 	mul.w	r2, r1, r2
 80017d2:	1a9b      	subs	r3, r3, r2
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	4618      	mov	r0, r3
 80017d8:	4b38      	ldr	r3, [pc, #224]	@ (80018bc <RunJog+0x2ec>)
 80017da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80017de:	461a      	mov	r2, r3
 80017e0:	2364      	movs	r3, #100	@ 0x64
 80017e2:	fb03 f202 	mul.w	r2, r3, r2
 80017e6:	4b35      	ldr	r3, [pc, #212]	@ (80018bc <RunJog+0x2ec>)
 80017e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80017ec:	4619      	mov	r1, r3
 80017ee:	460b      	mov	r3, r1
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	440b      	add	r3, r1
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	4413      	add	r3, r2
 80017f8:	4a30      	ldr	r2, [pc, #192]	@ (80018bc <RunJog+0x2ec>)
 80017fa:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 80017fe:	4413      	add	r3, r2
 8001800:	1ac3      	subs	r3, r0, r3
 8001802:	4a31      	ldr	r2, [pc, #196]	@ (80018c8 <RunJog+0x2f8>)
 8001804:	fb82 1203 	smull	r1, r2, r2, r3
 8001808:	1192      	asrs	r2, r2, #6
 800180a:	17db      	asrs	r3, r3, #31
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	b29a      	uxth	r2, r3
 8001810:	4b2a      	ldr	r3, [pc, #168]	@ (80018bc <RunJog+0x2ec>)
 8001812:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    base.Place[0] = (registerFrame[0x22].U16 - ((base.Place[1] * 1000 + base.Place[2] * 100 + base.Place[3] * 10 + base.Place[4]))) / 10000;
 8001816:	4b27      	ldr	r3, [pc, #156]	@ (80018b4 <RunJog+0x2e4>)
 8001818:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800181c:	4618      	mov	r0, r3
 800181e:	4b27      	ldr	r3, [pc, #156]	@ (80018bc <RunJog+0x2ec>)
 8001820:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001824:	461a      	mov	r2, r3
 8001826:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800182a:	fb03 f202 	mul.w	r2, r3, r2
 800182e:	4b23      	ldr	r3, [pc, #140]	@ (80018bc <RunJog+0x2ec>)
 8001830:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8001834:	4619      	mov	r1, r3
 8001836:	2364      	movs	r3, #100	@ 0x64
 8001838:	fb01 f303 	mul.w	r3, r1, r3
 800183c:	441a      	add	r2, r3
 800183e:	4b1f      	ldr	r3, [pc, #124]	@ (80018bc <RunJog+0x2ec>)
 8001840:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001844:	4619      	mov	r1, r3
 8001846:	460b      	mov	r3, r1
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	440b      	add	r3, r1
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	4413      	add	r3, r2
 8001850:	4a1a      	ldr	r2, [pc, #104]	@ (80018bc <RunJog+0x2ec>)
 8001852:	f8b2 204a 	ldrh.w	r2, [r2, #74]	@ 0x4a
 8001856:	4413      	add	r3, r2
 8001858:	1ac3      	subs	r3, r0, r3
 800185a:	4a1d      	ldr	r2, [pc, #116]	@ (80018d0 <RunJog+0x300>)
 800185c:	fb82 1203 	smull	r1, r2, r2, r3
 8001860:	1312      	asrs	r2, r2, #12
 8001862:	17db      	asrs	r3, r3, #31
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	b29a      	uxth	r2, r3
 8001868:	4b14      	ldr	r3, [pc, #80]	@ (80018bc <RunJog+0x2ec>)
 800186a:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

    // Manage the jog operation using a state machine
	if(base.Vacuum == 0){
 800186e:	4b13      	ldr	r3, [pc, #76]	@ (80018bc <RunJog+0x2ec>)
 8001870:	8a9b      	ldrh	r3, [r3, #20]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d104      	bne.n	8001880 <RunJog+0x2b0>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, RESET);			// Vacuum off
 8001876:	2200      	movs	r2, #0
 8001878:	2120      	movs	r1, #32
 800187a:	4816      	ldr	r0, [pc, #88]	@ (80018d4 <RunJog+0x304>)
 800187c:	f005 f840 	bl	8006900 <HAL_GPIO_WritePin>
	}
	if(base.Vacuum == 1){
 8001880:	4b0e      	ldr	r3, [pc, #56]	@ (80018bc <RunJog+0x2ec>)
 8001882:	8a9b      	ldrh	r3, [r3, #20]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d104      	bne.n	8001892 <RunJog+0x2c2>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, SET);				// Vacuum on
 8001888:	2201      	movs	r2, #1
 800188a:	2120      	movs	r1, #32
 800188c:	4811      	ldr	r0, [pc, #68]	@ (80018d4 <RunJog+0x304>)
 800188e:	f005 f837 	bl	8006900 <HAL_GPIO_WritePin>
	}
    switch (internalState) {
 8001892:	4b11      	ldr	r3, [pc, #68]	@ (80018d8 <RunJog+0x308>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b03      	cmp	r3, #3
 8001898:	f200 8226 	bhi.w	8001ce8 <RunJog+0x718>
 800189c:	a201      	add	r2, pc, #4	@ (adr r2, 80018a4 <RunJog+0x2d4>)
 800189e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a2:	bf00      	nop
 80018a4:	080018dd 	.word	0x080018dd
 80018a8:	08001a9f 	.word	0x08001a9f
 80018ac:	08001ac1 	.word	0x08001ac1
 80018b0:	08001cb7 	.word	0x08001cb7
 80018b4:	20001080 	.word	0x20001080
 80018b8:	cccccccd 	.word	0xcccccccd
 80018bc:	20000b00 	.word	0x20000b00
 80018c0:	51eb851f 	.word	0x51eb851f
 80018c4:	66666667 	.word	0x66666667
 80018c8:	10624dd3 	.word	0x10624dd3
 80018cc:	d1b71759 	.word	0xd1b71759
 80018d0:	68db8bad 	.word	0x68db8bad
 80018d4:	48000800 	.word	0x48000800
 80018d8:	200002a4 	.word	0x200002a4
        case STATE_CASE_4:
            if (fuCount == 5) {
 80018dc:	4bae      	ldr	r3, [pc, #696]	@ (8001b98 <RunJog+0x5c8>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b05      	cmp	r3, #5
 80018e2:	d11c      	bne.n	800191e <RunJog+0x34e>
                base.BaseStatus = 0;
 80018e4:	4bad      	ldr	r3, [pc, #692]	@ (8001b9c <RunJog+0x5cc>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	801a      	strh	r2, [r3, #0]
                registerFrame[0x01].U16 = base.BaseStatus;
 80018ea:	4bac      	ldr	r3, [pc, #688]	@ (8001b9c <RunJog+0x5cc>)
 80018ec:	881a      	ldrh	r2, [r3, #0]
 80018ee:	4bac      	ldr	r3, [pc, #688]	@ (8001ba0 <RunJog+0x5d0>)
 80018f0:	805a      	strh	r2, [r3, #2]
                registerFrame[0x10].U16 = 0;
 80018f2:	4bab      	ldr	r3, [pc, #684]	@ (8001ba0 <RunJog+0x5d0>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	841a      	strh	r2, [r3, #32]
                base.MotorHome = 150;
 80018f8:	4ba8      	ldr	r3, [pc, #672]	@ (8001b9c <RunJog+0x5cc>)
 80018fa:	2296      	movs	r2, #150	@ 0x96
 80018fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
                internalState = STATE_DELAY_AFTER_4;
 8001900:	4ba8      	ldr	r3, [pc, #672]	@ (8001ba4 <RunJog+0x5d4>)
 8001902:	2201      	movs	r2, #1
 8001904:	701a      	strb	r2, [r3, #0]
                delayStartTime = HAL_GetTick(); 				// Record the start time for delay
 8001906:	f003 f913 	bl	8004b30 <HAL_GetTick>
 800190a:	4603      	mov	r3, r0
 800190c:	4aa6      	ldr	r2, [pc, #664]	@ (8001ba8 <RunJog+0x5d8>)
 800190e:	6013      	str	r3, [r2, #0]
                fuCount = 0;
 8001910:	4ba1      	ldr	r3, [pc, #644]	@ (8001b98 <RunJog+0x5c8>)
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
                base.Vacuum = 0;
 8001916:	4ba1      	ldr	r3, [pc, #644]	@ (8001b9c <RunJog+0x5cc>)
 8001918:	2200      	movs	r2, #0
 800191a:	829a      	strh	r2, [r3, #20]
                break;
 800191c:	e1e4      	b.n	8001ce8 <RunJog+0x718>
            }

            // Calculate the target position for picking
            float pickTarget = base.Shelve[base.Pick[fuCount] - 1] + 6	;
 800191e:	4b9e      	ldr	r3, [pc, #632]	@ (8001b98 <RunJog+0x5c8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a9e      	ldr	r2, [pc, #632]	@ (8001b9c <RunJog+0x5cc>)
 8001924:	331c      	adds	r3, #28
 8001926:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800192a:	3b01      	subs	r3, #1
 800192c:	4a9b      	ldr	r2, [pc, #620]	@ (8001b9c <RunJog+0x5cc>)
 800192e:	3306      	adds	r3, #6
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	3304      	adds	r3, #4
 8001936:	edd3 7a00 	vldr	s15, [r3]
 800193a:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 800193e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001942:	edc7 7a00 	vstr	s15, [r7]
            elapsedTime += 0.0002;
 8001946:	4b99      	ldr	r3, [pc, #612]	@ (8001bac <RunJog+0x5dc>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fdc8 	bl	80004e0 <__aeabi_f2d>
 8001950:	a38f      	add	r3, pc, #572	@ (adr r3, 8001b90 <RunJog+0x5c0>)
 8001952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001956:	f7fe fc65 	bl	8000224 <__adddf3>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4610      	mov	r0, r2
 8001960:	4619      	mov	r1, r3
 8001962:	f7ff f8c5 	bl	8000af0 <__aeabi_d2f>
 8001966:	4603      	mov	r3, r0
 8001968:	4a90      	ldr	r2, [pc, #576]	@ (8001bac <RunJog+0x5dc>)
 800196a:	6013      	str	r3, [r2, #0]
            Traject(&Traj, temp_pos, pickTarget); // Update trajectory
 800196c:	4b90      	ldr	r3, [pc, #576]	@ (8001bb0 <RunJog+0x5e0>)
 800196e:	edd3 7a00 	vldr	s15, [r3]
 8001972:	edd7 0a00 	vldr	s1, [r7]
 8001976:	eeb0 0a67 	vmov.f32	s0, s15
 800197a:	488e      	ldr	r0, [pc, #568]	@ (8001bb4 <RunJog+0x5e4>)
 800197c:	f001 fc2a 	bl	80031d4 <Traject>
            PID_controller_cascade(&PID_pos, &PID_velo, &AMT, Traj.currentPosition); // Apply PID control
 8001980:	4b8c      	ldr	r3, [pc, #560]	@ (8001bb4 <RunJog+0x5e4>)
 8001982:	edd3 7a02 	vldr	s15, [r3, #8]
 8001986:	eeb0 0a67 	vmov.f32	s0, s15
 800198a:	4a8b      	ldr	r2, [pc, #556]	@ (8001bb8 <RunJog+0x5e8>)
 800198c:	498b      	ldr	r1, [pc, #556]	@ (8001bbc <RunJog+0x5ec>)
 800198e:	488c      	ldr	r0, [pc, #560]	@ (8001bc0 <RunJog+0x5f0>)
 8001990:	f001 fa66 	bl	8002e60 <PID_controller_cascade>
            base.MotorHome = PID_velo.out;
 8001994:	4b89      	ldr	r3, [pc, #548]	@ (8001bbc <RunJog+0x5ec>)
 8001996:	edd3 7a06 	vldr	s15, [r3, #24]
 800199a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800199e:	ee17 3a90 	vmov	r3, s15
 80019a2:	b21a      	sxth	r2, r3
 80019a4:	4b7d      	ldr	r3, [pc, #500]	@ (8001b9c <RunJog+0x5cc>)
 80019a6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
            // Check if the position is close enough to the target
            if (fabs(AMT.Linear_Position - pickTarget) < 1.2) {
 80019aa:	4b83      	ldr	r3, [pc, #524]	@ (8001bb8 <RunJog+0x5e8>)
 80019ac:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 80019b0:	edd7 7a00 	vldr	s15, [r7]
 80019b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019b8:	eef0 7ae7 	vabs.f32	s15, s15
 80019bc:	ee17 0a90 	vmov	r0, s15
 80019c0:	f7fe fd8e 	bl	80004e0 <__aeabi_f2d>
 80019c4:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 80019c8:	4b7e      	ldr	r3, [pc, #504]	@ (8001bc4 <RunJog+0x5f4>)
 80019ca:	f7ff f853 	bl	8000a74 <__aeabi_dcmplt>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d100      	bne.n	80019d6 <RunJog+0x406>
                    internalState = STATE_CASE_8; // Move to next state
                    initDelay = 0;
                    temp_cnt = 0;
                }
            }
            break;
 80019d4:	e181      	b.n	8001cda <RunJog+0x70a>
            	base.Vacuum = 1;
 80019d6:	4b71      	ldr	r3, [pc, #452]	@ (8001b9c <RunJog+0x5cc>)
 80019d8:	2201      	movs	r2, #1
 80019da:	829a      	strh	r2, [r3, #20]
            	if(temp_cnt != 1){
 80019dc:	4b7a      	ldr	r3, [pc, #488]	@ (8001bc8 <RunJog+0x5f8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d00b      	beq.n	80019fc <RunJog+0x42c>
            		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);
 80019e4:	2200      	movs	r2, #0
 80019e6:	2110      	movs	r1, #16
 80019e8:	4878      	ldr	r0, [pc, #480]	@ (8001bcc <RunJog+0x5fc>)
 80019ea:	f004 ff89 	bl	8006900 <HAL_GPIO_WritePin>
            		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 80019ee:	2201      	movs	r2, #1
 80019f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80019f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019f8:	f004 ff82 	bl	8006900 <HAL_GPIO_WritePin>
                if (temp_cnt == 0 && base.ReedStatus == 1) {
 80019fc:	4b72      	ldr	r3, [pc, #456]	@ (8001bc8 <RunJog+0x5f8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d128      	bne.n	8001a56 <RunJog+0x486>
 8001a04:	4b65      	ldr	r3, [pc, #404]	@ (8001b9c <RunJog+0x5cc>)
 8001a06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d123      	bne.n	8001a56 <RunJog+0x486>
                    if (initDelay == 0){
 8001a0e:	4b70      	ldr	r3, [pc, #448]	@ (8001bd0 <RunJog+0x600>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d107      	bne.n	8001a26 <RunJog+0x456>
                    	pushDelay = HAL_GetTick();
 8001a16:	f003 f88b 	bl	8004b30 <HAL_GetTick>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4a6d      	ldr	r2, [pc, #436]	@ (8001bd4 <RunJog+0x604>)
 8001a1e:	6013      	str	r3, [r2, #0]
                    	initDelay = 1;
 8001a20:	4b6b      	ldr	r3, [pc, #428]	@ (8001bd0 <RunJog+0x600>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	601a      	str	r2, [r3, #0]
					if (HAL_GetTick() - pushDelay >= 250){
 8001a26:	f003 f883 	bl	8004b30 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	4b69      	ldr	r3, [pc, #420]	@ (8001bd4 <RunJog+0x604>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2bf9      	cmp	r3, #249	@ 0xf9
 8001a34:	d932      	bls.n	8001a9c <RunJog+0x4cc>
	            		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, SET);			// Backward
 8001a36:	2201      	movs	r2, #1
 8001a38:	2110      	movs	r1, #16
 8001a3a:	4864      	ldr	r0, [pc, #400]	@ (8001bcc <RunJog+0x5fc>)
 8001a3c:	f004 ff60 	bl	8006900 <HAL_GPIO_WritePin>
	            		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 8001a40:	2200      	movs	r2, #0
 8001a42:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a4a:	f004 ff59 	bl	8006900 <HAL_GPIO_WritePin>
	            		temp_cnt = 1;
 8001a4e:	4b5e      	ldr	r3, [pc, #376]	@ (8001bc8 <RunJog+0x5f8>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	601a      	str	r2, [r3, #0]
					if (HAL_GetTick() - pushDelay >= 250){
 8001a54:	e022      	b.n	8001a9c <RunJog+0x4cc>
                } else if (temp_cnt == 1 && base.ReedStatus == 2) {
 8001a56:	4b5c      	ldr	r3, [pc, #368]	@ (8001bc8 <RunJog+0x5f8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	f040 813d 	bne.w	8001cda <RunJog+0x70a>
 8001a60:	4b4e      	ldr	r3, [pc, #312]	@ (8001b9c <RunJog+0x5cc>)
 8001a62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	f040 8137 	bne.w	8001cda <RunJog+0x70a>
                    elapsedTime = 0;
 8001a6c:	4b4f      	ldr	r3, [pc, #316]	@ (8001bac <RunJog+0x5dc>)
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
                    temp_pos = AMT.Linear_Position;
 8001a74:	4b50      	ldr	r3, [pc, #320]	@ (8001bb8 <RunJog+0x5e8>)
 8001a76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a78:	4a4d      	ldr	r2, [pc, #308]	@ (8001bb0 <RunJog+0x5e0>)
 8001a7a:	6013      	str	r3, [r2, #0]
                    base.runJogMode = 1;
 8001a7c:	4b47      	ldr	r3, [pc, #284]	@ (8001b9c <RunJog+0x5cc>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	635a      	str	r2, [r3, #52]	@ 0x34
                    Traj.currentPosition = pickTarget;
 8001a82:	4a4c      	ldr	r2, [pc, #304]	@ (8001bb4 <RunJog+0x5e4>)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	6093      	str	r3, [r2, #8]
                    internalState = STATE_CASE_8; // Move to next state
 8001a88:	4b46      	ldr	r3, [pc, #280]	@ (8001ba4 <RunJog+0x5d4>)
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	701a      	strb	r2, [r3, #0]
                    initDelay = 0;
 8001a8e:	4b50      	ldr	r3, [pc, #320]	@ (8001bd0 <RunJog+0x600>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
                    temp_cnt = 0;
 8001a94:	4b4c      	ldr	r3, [pc, #304]	@ (8001bc8 <RunJog+0x5f8>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
            break;
 8001a9a:	e11e      	b.n	8001cda <RunJog+0x70a>
 8001a9c:	e11d      	b.n	8001cda <RunJog+0x70a>

        case STATE_DELAY_AFTER_4:
        	temp_cnt = 0;
 8001a9e:	4b4a      	ldr	r3, [pc, #296]	@ (8001bc8 <RunJog+0x5f8>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
            if (HAL_GetTick() - delayStartTime >= 500) { // Delay of 1 second
 8001aa4:	f003 f844 	bl	8004b30 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	4b3f      	ldr	r3, [pc, #252]	@ (8001ba8 <RunJog+0x5d8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001ab4:	f0c0 8113 	bcc.w	8001cde <RunJog+0x70e>
                internalState = STATE_CASE_4; // Return to pick state after delay
 8001ab8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ba4 <RunJog+0x5d4>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
            }
            break;
 8001abe:	e10e      	b.n	8001cde <RunJog+0x70e>

        case STATE_CASE_8:
            // Calculate the target position for placing
            float placeTarget = base.Shelve[base.Place[fuCount] - 1] + 15;
 8001ac0:	4b35      	ldr	r3, [pc, #212]	@ (8001b98 <RunJog+0x5c8>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a35      	ldr	r2, [pc, #212]	@ (8001b9c <RunJog+0x5cc>)
 8001ac6:	3320      	adds	r3, #32
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	4413      	add	r3, r2
 8001acc:	885b      	ldrh	r3, [r3, #2]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	4a32      	ldr	r2, [pc, #200]	@ (8001b9c <RunJog+0x5cc>)
 8001ad2:	3306      	adds	r3, #6
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	3304      	adds	r3, #4
 8001ada:	edd3 7a00 	vldr	s15, [r3]
 8001ade:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8001ae2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ae6:	edc7 7a01 	vstr	s15, [r7, #4]
            elapsedTime += 0.0002;
 8001aea:	4b30      	ldr	r3, [pc, #192]	@ (8001bac <RunJog+0x5dc>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe fcf6 	bl	80004e0 <__aeabi_f2d>
 8001af4:	a326      	add	r3, pc, #152	@ (adr r3, 8001b90 <RunJog+0x5c0>)
 8001af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afa:	f7fe fb93 	bl	8000224 <__adddf3>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4610      	mov	r0, r2
 8001b04:	4619      	mov	r1, r3
 8001b06:	f7fe fff3 	bl	8000af0 <__aeabi_d2f>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	4a27      	ldr	r2, [pc, #156]	@ (8001bac <RunJog+0x5dc>)
 8001b0e:	6013      	str	r3, [r2, #0]
            Traject(&Traj, temp_pos, placeTarget); // Update trajectory
 8001b10:	4b27      	ldr	r3, [pc, #156]	@ (8001bb0 <RunJog+0x5e0>)
 8001b12:	edd3 7a00 	vldr	s15, [r3]
 8001b16:	edd7 0a01 	vldr	s1, [r7, #4]
 8001b1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b1e:	4825      	ldr	r0, [pc, #148]	@ (8001bb4 <RunJog+0x5e4>)
 8001b20:	f001 fb58 	bl	80031d4 <Traject>
            PID_controller_cascade(&PID_pos, &PID_velo, &AMT, Traj.currentPosition); // Apply PID control
 8001b24:	4b23      	ldr	r3, [pc, #140]	@ (8001bb4 <RunJog+0x5e4>)
 8001b26:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b2e:	4a22      	ldr	r2, [pc, #136]	@ (8001bb8 <RunJog+0x5e8>)
 8001b30:	4922      	ldr	r1, [pc, #136]	@ (8001bbc <RunJog+0x5ec>)
 8001b32:	4823      	ldr	r0, [pc, #140]	@ (8001bc0 <RunJog+0x5f0>)
 8001b34:	f001 f994 	bl	8002e60 <PID_controller_cascade>
            base.MotorHome = PID_velo.out;
 8001b38:	4b20      	ldr	r3, [pc, #128]	@ (8001bbc <RunJog+0x5ec>)
 8001b3a:	edd3 7a06 	vldr	s15, [r3, #24]
 8001b3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b42:	ee17 3a90 	vmov	r3, s15
 8001b46:	b21a      	sxth	r2, r3
 8001b48:	4b14      	ldr	r3, [pc, #80]	@ (8001b9c <RunJog+0x5cc>)
 8001b4a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
            if(vacuumPlace == 0){
 8001b4e:	4b22      	ldr	r3, [pc, #136]	@ (8001bd8 <RunJog+0x608>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d103      	bne.n	8001b5e <RunJog+0x58e>
            	base.Vacuum = 1;
 8001b56:	4b11      	ldr	r3, [pc, #68]	@ (8001b9c <RunJog+0x5cc>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	829a      	strh	r2, [r3, #20]
 8001b5c:	e002      	b.n	8001b64 <RunJog+0x594>
            }
            else{base.Vacuum = 0;}
 8001b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b9c <RunJog+0x5cc>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	829a      	strh	r2, [r3, #20]
            // Check if the position is close enough to the target
            if (fabs(AMT.Linear_Position - placeTarget) < 1.2) {
 8001b64:	4b14      	ldr	r3, [pc, #80]	@ (8001bb8 <RunJog+0x5e8>)
 8001b66:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8001b6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b72:	eef0 7ae7 	vabs.f32	s15, s15
 8001b76:	ee17 0a90 	vmov	r0, s15
 8001b7a:	f7fe fcb1 	bl	80004e0 <__aeabi_f2d>
 8001b7e:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8001b82:	4b10      	ldr	r3, [pc, #64]	@ (8001bc4 <RunJog+0x5f4>)
 8001b84:	f7fe ff76 	bl	8000a74 <__aeabi_dcmplt>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d126      	bne.n	8001bdc <RunJog+0x60c>
                   	temp_cnt = 0;
					initDelay = 0;
					vacuumPlace = 0;
                }
            }
            break;
 8001b8e:	e0a8      	b.n	8001ce2 <RunJog+0x712>
 8001b90:	eb1c432d 	.word	0xeb1c432d
 8001b94:	3f2a36e2 	.word	0x3f2a36e2
 8001b98:	20000294 	.word	0x20000294
 8001b9c:	20000b00 	.word	0x20000b00
 8001ba0:	20001080 	.word	0x20001080
 8001ba4:	200002a4 	.word	0x200002a4
 8001ba8:	200002a8 	.word	0x200002a8
 8001bac:	20001210 	.word	0x20001210
 8001bb0:	20000298 	.word	0x20000298
 8001bb4:	200009e0 	.word	0x200009e0
 8001bb8:	200009f8 	.word	0x200009f8
 8001bbc:	20000ae4 	.word	0x20000ae4
 8001bc0:	20000ac8 	.word	0x20000ac8
 8001bc4:	3ff33333 	.word	0x3ff33333
 8001bc8:	2000029c 	.word	0x2000029c
 8001bcc:	48000800 	.word	0x48000800
 8001bd0:	200002b0 	.word	0x200002b0
 8001bd4:	200002ac 	.word	0x200002ac
 8001bd8:	200002b4 	.word	0x200002b4
            	if(temp_cnt != 1){
 8001bdc:	4b4e      	ldr	r3, [pc, #312]	@ (8001d18 <RunJog+0x748>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d00b      	beq.n	8001bfc <RunJog+0x62c>
            		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);
 8001be4:	2200      	movs	r2, #0
 8001be6:	2110      	movs	r1, #16
 8001be8:	484c      	ldr	r0, [pc, #304]	@ (8001d1c <RunJog+0x74c>)
 8001bea:	f004 fe89 	bl	8006900 <HAL_GPIO_WritePin>
            		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET);
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001bf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bf8:	f004 fe82 	bl	8006900 <HAL_GPIO_WritePin>
                if (temp_cnt == 0 && base.ReedStatus == 1) {
 8001bfc:	4b46      	ldr	r3, [pc, #280]	@ (8001d18 <RunJog+0x748>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d12e      	bne.n	8001c62 <RunJog+0x692>
 8001c04:	4b46      	ldr	r3, [pc, #280]	@ (8001d20 <RunJog+0x750>)
 8001c06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d129      	bne.n	8001c62 <RunJog+0x692>
                	base.Vacuum = 0;
 8001c0e:	4b44      	ldr	r3, [pc, #272]	@ (8001d20 <RunJog+0x750>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	829a      	strh	r2, [r3, #20]
                	vacuumPlace = 1;
 8001c14:	4b43      	ldr	r3, [pc, #268]	@ (8001d24 <RunJog+0x754>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	601a      	str	r2, [r3, #0]
                    if (initDelay == 0){
 8001c1a:	4b43      	ldr	r3, [pc, #268]	@ (8001d28 <RunJog+0x758>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d107      	bne.n	8001c32 <RunJog+0x662>
                    	pushDelay = HAL_GetTick();
 8001c22:	f002 ff85 	bl	8004b30 <HAL_GetTick>
 8001c26:	4603      	mov	r3, r0
 8001c28:	4a40      	ldr	r2, [pc, #256]	@ (8001d2c <RunJog+0x75c>)
 8001c2a:	6013      	str	r3, [r2, #0]
                    	initDelay = 1;
 8001c2c:	4b3e      	ldr	r3, [pc, #248]	@ (8001d28 <RunJog+0x758>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	601a      	str	r2, [r3, #0]
					if (HAL_GetTick() - pushDelay >= 250){
 8001c32:	f002 ff7d 	bl	8004b30 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	4b3c      	ldr	r3, [pc, #240]	@ (8001d2c <RunJog+0x75c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2bf9      	cmp	r3, #249	@ 0xf9
 8001c40:	d938      	bls.n	8001cb4 <RunJog+0x6e4>
	            		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, SET);			// Backward
 8001c42:	2201      	movs	r2, #1
 8001c44:	2110      	movs	r1, #16
 8001c46:	4835      	ldr	r0, [pc, #212]	@ (8001d1c <RunJog+0x74c>)
 8001c48:	f004 fe5a 	bl	8006900 <HAL_GPIO_WritePin>
	            		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c56:	f004 fe53 	bl	8006900 <HAL_GPIO_WritePin>
	            		temp_cnt = 1;
 8001c5a:	4b2f      	ldr	r3, [pc, #188]	@ (8001d18 <RunJog+0x748>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]
					if (HAL_GetTick() - pushDelay >= 250){
 8001c60:	e028      	b.n	8001cb4 <RunJog+0x6e4>
                } else if (temp_cnt == 1 && base.ReedStatus == 2) {
 8001c62:	4b2d      	ldr	r3, [pc, #180]	@ (8001d18 <RunJog+0x748>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d13b      	bne.n	8001ce2 <RunJog+0x712>
 8001c6a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d20 <RunJog+0x750>)
 8001c6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d136      	bne.n	8001ce2 <RunJog+0x712>
                    elapsedTime = 0;
 8001c74:	4b2e      	ldr	r3, [pc, #184]	@ (8001d30 <RunJog+0x760>)
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
                    temp_pos = AMT.Linear_Position;
 8001c7c:	4b2d      	ldr	r3, [pc, #180]	@ (8001d34 <RunJog+0x764>)
 8001c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c80:	4a2d      	ldr	r2, [pc, #180]	@ (8001d38 <RunJog+0x768>)
 8001c82:	6013      	str	r3, [r2, #0]
                    base.runJogMode = 0;
 8001c84:	4b26      	ldr	r3, [pc, #152]	@ (8001d20 <RunJog+0x750>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	635a      	str	r2, [r3, #52]	@ 0x34
                    fuCount++;
 8001c8a:	4b2c      	ldr	r3, [pc, #176]	@ (8001d3c <RunJog+0x76c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	4a2a      	ldr	r2, [pc, #168]	@ (8001d3c <RunJog+0x76c>)
 8001c92:	6013      	str	r3, [r2, #0]
                    Traj.currentPosition = placeTarget;
 8001c94:	4a2a      	ldr	r2, [pc, #168]	@ (8001d40 <RunJog+0x770>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6093      	str	r3, [r2, #8]
                    internalState = STATE_DELAY_AFTER_8; // Move to next state
 8001c9a:	4b2a      	ldr	r3, [pc, #168]	@ (8001d44 <RunJog+0x774>)
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	701a      	strb	r2, [r3, #0]
                   	temp_cnt = 0;
 8001ca0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d18 <RunJog+0x748>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
					initDelay = 0;
 8001ca6:	4b20      	ldr	r3, [pc, #128]	@ (8001d28 <RunJog+0x758>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
					vacuumPlace = 0;
 8001cac:	4b1d      	ldr	r3, [pc, #116]	@ (8001d24 <RunJog+0x754>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
            break;
 8001cb2:	e016      	b.n	8001ce2 <RunJog+0x712>
 8001cb4:	e015      	b.n	8001ce2 <RunJog+0x712>

        case STATE_DELAY_AFTER_8:
            if (HAL_GetTick() - delayStartTime >= 500) { // Delay of 1 second
 8001cb6:	f002 ff3b 	bl	8004b30 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	4b22      	ldr	r3, [pc, #136]	@ (8001d48 <RunJog+0x778>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001cc6:	d30e      	bcc.n	8001ce6 <RunJog+0x716>
                internalState = STATE_CASE_4; // Return to pick state after delay
 8001cc8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d44 <RunJog+0x774>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	701a      	strb	r2, [r3, #0]
                pushDelay = HAL_GetTick();
 8001cce:	f002 ff2f 	bl	8004b30 <HAL_GetTick>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	4a15      	ldr	r2, [pc, #84]	@ (8001d2c <RunJog+0x75c>)
 8001cd6:	6013      	str	r3, [r2, #0]
            }
            break;
 8001cd8:	e005      	b.n	8001ce6 <RunJog+0x716>
            break;
 8001cda:	bf00      	nop
 8001cdc:	e004      	b.n	8001ce8 <RunJog+0x718>
            break;
 8001cde:	bf00      	nop
 8001ce0:	e002      	b.n	8001ce8 <RunJog+0x718>
            break;
 8001ce2:	bf00      	nop
 8001ce4:	e000      	b.n	8001ce8 <RunJog+0x718>
            break;
 8001ce6:	bf00      	nop
    }

    // Pick and place 5 times
    if (base.sp == 1) {
 8001ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8001d20 <RunJog+0x750>)
 8001cea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d10d      	bne.n	8001d0e <RunJog+0x73e>
        base.BaseStatus = 0;
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d20 <RunJog+0x750>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	801a      	strh	r2, [r3, #0]
        registerFrame[0x01].U16 = base.BaseStatus;
 8001cf8:	4b09      	ldr	r3, [pc, #36]	@ (8001d20 <RunJog+0x750>)
 8001cfa:	881a      	ldrh	r2, [r3, #0]
 8001cfc:	4b13      	ldr	r3, [pc, #76]	@ (8001d4c <RunJog+0x77c>)
 8001cfe:	805a      	strh	r2, [r3, #2]
        registerFrame[0x10].U16 = 0;
 8001d00:	4b12      	ldr	r3, [pc, #72]	@ (8001d4c <RunJog+0x77c>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	841a      	strh	r2, [r3, #32]
        base.sp = 0;
 8001d06:	4b06      	ldr	r3, [pc, #24]	@ (8001d20 <RunJog+0x750>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    }
}
 8001d0e:	bf00      	nop
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	2000029c 	.word	0x2000029c
 8001d1c:	48000800 	.word	0x48000800
 8001d20:	20000b00 	.word	0x20000b00
 8001d24:	200002b4 	.word	0x200002b4
 8001d28:	200002b0 	.word	0x200002b0
 8001d2c:	200002ac 	.word	0x200002ac
 8001d30:	20001210 	.word	0x20001210
 8001d34:	200009f8 	.word	0x200009f8
 8001d38:	20000298 	.word	0x20000298
 8001d3c:	20000294 	.word	0x20000294
 8001d40:	200009e0 	.word	0x200009e0
 8001d44:	200002a4 	.word	0x200002a4
 8001d48:	200002a8 	.word	0x200002a8
 8001d4c:	20001080 	.word	0x20001080

08001d50 <Holding_position>:


void Holding_position()
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
	PID_controller_cascade(&PID_pos, &PID_velo, &AMT, Traj.currentPosition);
 8001d54:	4b0d      	ldr	r3, [pc, #52]	@ (8001d8c <Holding_position+0x3c>)
 8001d56:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d5e:	4a0c      	ldr	r2, [pc, #48]	@ (8001d90 <Holding_position+0x40>)
 8001d60:	490c      	ldr	r1, [pc, #48]	@ (8001d94 <Holding_position+0x44>)
 8001d62:	480d      	ldr	r0, [pc, #52]	@ (8001d98 <Holding_position+0x48>)
 8001d64:	f001 f87c 	bl	8002e60 <PID_controller_cascade>
	base.MotorHome = PID_velo.out;
 8001d68:	4b0a      	ldr	r3, [pc, #40]	@ (8001d94 <Holding_position+0x44>)
 8001d6a:	edd3 7a06 	vldr	s15, [r3, #24]
 8001d6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d72:	ee17 3a90 	vmov	r3, s15
 8001d76:	b21a      	sxth	r2, r3
 8001d78:	4b08      	ldr	r3, [pc, #32]	@ (8001d9c <Holding_position+0x4c>)
 8001d7a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
	temp_pos = AMT.Linear_Position;
 8001d7e:	4b04      	ldr	r3, [pc, #16]	@ (8001d90 <Holding_position+0x40>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d82:	4a07      	ldr	r2, [pc, #28]	@ (8001da0 <Holding_position+0x50>)
 8001d84:	6013      	str	r3, [r2, #0]

}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200009e0 	.word	0x200009e0
 8001d90:	200009f8 	.word	0x200009f8
 8001d94:	20000ae4 	.word	0x20000ae4
 8001d98:	20000ac8 	.word	0x20000ac8
 8001d9c:	20000b00 	.word	0x20000b00
 8001da0:	20000298 	.word	0x20000298

08001da4 <AMT_encoder_init>:
//    return kalman_adc;
//}


void AMT_encoder_init(AMT_Encoder *AMT_data,TIM_HandleTypeDef *Encoder_timer)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
	AMT_data->EncoderTIM = Encoder_timer;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	649a      	str	r2, [r3, #72]	@ 0x48
	HAL_TIM_Encoder_Start(AMT_data->EncoderTIM, TIM_CHANNEL_ALL);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001db8:	213c      	movs	r1, #60	@ 0x3c
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f006 fad0 	bl	8008360 <HAL_TIM_Encoder_Start>
	AMT_data->Position[QEI_NOW] = 0.0;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
	AMT_data->Position[QEI_PREV] = 0.0;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	605a      	str	r2, [r3, #4]
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	0000      	movs	r0, r0
	...

08001dd8 <AMT_encoder_update>:
//	AMT_data->TimeStamp[QEI_PREV] = AMT_data->TimeStamp[QEI_NOW];
//	AMT_data->Linear_Velo[QEI_PREV] = AMT_data->Linear_Velo[QEI_NOW];
//}

void AMT_encoder_update(AMT_Encoder *AMT_data, TIM_HandleTypeDef *Encoder_timer, uint64_t current_time)
{
 8001dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ddc:	b08e      	sub	sp, #56	@ 0x38
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6178      	str	r0, [r7, #20]
 8001de2:	6139      	str	r1, [r7, #16]
 8001de4:	e9c7 2302 	strd	r2, r3, [r7, #8]


    // Collect data
    AMT_data->TimeStamp[QEI_NOW] = current_time;
 8001de8:	6979      	ldr	r1, [r7, #20]
 8001dea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001dee:	e9c1 2302 	strd	r2, r3, [r1, #8]
    AMT_data->Position[QEI_NOW] = __HAL_TIM_GET_COUNTER(Encoder_timer);
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	601a      	str	r2, [r3, #0]

    // Position 1 turn calculation
    AMT_data->QEIPostion_1turn = AMT_data->Position[QEI_NOW] % cnt_per_rev;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a83      	ldr	r2, [pc, #524]	@ (8002010 <AMT_encoder_update+0x238>)
 8001e02:	6812      	ldr	r2, [r2, #0]
 8001e04:	fbb3 f1f2 	udiv	r1, r3, r2
 8001e08:	fb01 f202 	mul.w	r2, r1, r2
 8001e0c:	1a9b      	subs	r3, r3, r2
 8001e0e:	461a      	mov	r2, r3
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	631a      	str	r2, [r3, #48]	@ 0x30

    // Calculate dx
    int32_t diffPosition = AMT_data->Position[QEI_NOW] - AMT_data->Position[QEI_PREV];
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	637b      	str	r3, [r7, #52]	@ 0x34

    // Handle wrap-around
    if (diffPosition > 32767)
 8001e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e26:	db04      	blt.n	8001e32 <AMT_encoder_update+0x5a>
        diffPosition -= 65535;
 8001e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e2a:	f5a3 437f 	sub.w	r3, r3, #65280	@ 0xff00
 8001e2e:	3bff      	subs	r3, #255	@ 0xff
 8001e30:	637b      	str	r3, [r7, #52]	@ 0x34
    if (diffPosition < -32767)
 8001e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e34:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8001e38:	dc04      	bgt.n	8001e44 <AMT_encoder_update+0x6c>
        diffPosition += 65535;
 8001e3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e3c:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001e40:	33ff      	adds	r3, #255	@ 0xff
 8001e42:	637b      	str	r3, [r7, #52]	@ 0x34

    // Calculate dt
    uint64_t diffTime = AMT_data->TimeStamp[QEI_NOW] - AMT_data->TimeStamp[QEI_PREV];
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001e50:	ebb0 0802 	subs.w	r8, r0, r2
 8001e54:	eb61 0903 	sbc.w	r9, r1, r3
 8001e58:	e9c7 890a 	strd	r8, r9, [r7, #40]	@ 0x28

    // Calculate angular velocity
    float time_seconds = diffTime * one_million_inv;
 8001e5c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001e60:	f7fe ff5e 	bl	8000d20 <__aeabi_ul2f>
 8001e64:	ee07 0a10 	vmov	s14, r0
 8001e68:	eddf 7a6a 	vldr	s15, [pc, #424]	@ 8002014 <AMT_encoder_update+0x23c>
 8001e6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e70:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    AMT_data->Angular_Velocity = ((diffPosition * 60.0f) * cnt_per_rev_inv / time_seconds); // RPM
 8001e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e76:	ee07 3a90 	vmov	s15, r3
 8001e7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e7e:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8002018 <AMT_encoder_update+0x240>
 8001e82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e86:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 800201c <AMT_encoder_update+0x244>
 8001e8a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001e8e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001e92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

    // Calculate linear position and velocity
    float position_change_mm = (diffPosition * pulley_cir) * cnt_per_rev_inv;
 8001e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e9e:	ee07 3a90 	vmov	s15, r3
 8001ea2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ea6:	4b5e      	ldr	r3, [pc, #376]	@ (8002020 <AMT_encoder_update+0x248>)
 8001ea8:	edd3 7a00 	vldr	s15, [r3]
 8001eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb0:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 800201c <AMT_encoder_update+0x244>
 8001eb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eb8:	edc7 7a08 	vstr	s15, [r7, #32]
    AMT_data->Linear_Position += position_change_mm; // mm
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8001ec2:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ec6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
    AMT_data->Linear_Velocity = kalman_filter(&filtered_velo,(AMT_data->Angular_Velocity / 60.0f * pulley_cir)); // mm/s
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001ed6:	eddf 6a50 	vldr	s13, [pc, #320]	@ 8002018 <AMT_encoder_update+0x240>
 8001eda:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001ede:	4b50      	ldr	r3, [pc, #320]	@ (8002020 <AMT_encoder_update+0x248>)
 8001ee0:	edd3 7a00 	vldr	s15, [r3]
 8001ee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee8:	ee17 0a90 	vmov	r0, s15
 8001eec:	f7fe faf8 	bl	80004e0 <__aeabi_f2d>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	ec43 2b10 	vmov	d0, r2, r3
 8001ef8:	484a      	ldr	r0, [pc, #296]	@ (8002024 <AMT_encoder_update+0x24c>)
 8001efa:	f001 fbf5 	bl	80036e8 <kalman_filter>
 8001efe:	ec53 2b10 	vmov	r2, r3, d0
 8001f02:	4610      	mov	r0, r2
 8001f04:	4619      	mov	r1, r3
 8001f06:	f7fe fdf3 	bl	8000af0 <__aeabi_d2f>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	63da      	str	r2, [r3, #60]	@ 0x3c
    AMT_data->Linear_Velo[QEI_NOW] = AMT_data->Linear_Velocity; // Update Velo
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	629a      	str	r2, [r3, #40]	@ 0x28
    static uint64_t accel_timestamp = 0;
	AMT_data->Accel_TimeStamp[QEI_NOW] = micros();
 8001f18:	f002 fa78 	bl	800440c <micros>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	17da      	asrs	r2, r3, #31
 8001f20:	603b      	str	r3, [r7, #0]
 8001f22:	607a      	str	r2, [r7, #4]
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001f2a:	e9c3 1206 	strd	r1, r2, [r3, #24]
	if(AMT_data->Accel_TimeStamp[QEI_NOW] >= accel_timestamp)
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001f34:	4b3c      	ldr	r3, [pc, #240]	@ (8002028 <AMT_encoder_update+0x250>)
 8001f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3a:	4290      	cmp	r0, r2
 8001f3c:	eb71 0303 	sbcs.w	r3, r1, r3
 8001f40:	d353      	bcc.n	8001fea <AMT_encoder_update+0x212>
	{
		accel_timestamp = AMT_data->Accel_TimeStamp[QEI_NOW] + 10000;//us
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001f48:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001f4c:	1854      	adds	r4, r2, r1
 8001f4e:	f143 0500 	adc.w	r5, r3, #0
 8001f52:	4b35      	ldr	r3, [pc, #212]	@ (8002028 <AMT_encoder_update+0x250>)
 8001f54:	e9c3 4500 	strd	r4, r5, [r3]
		diffTimeAcc = (AMT_data->Accel_TimeStamp[QEI_NOW] - AMT_data->Accel_TimeStamp[QEI_PREV]) * 0.000001;
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001f64:	ebb0 0a02 	subs.w	sl, r0, r2
 8001f68:	eb61 0b03 	sbc.w	fp, r1, r3
 8001f6c:	4650      	mov	r0, sl
 8001f6e:	4659      	mov	r1, fp
 8001f70:	f7fe fad8 	bl	8000524 <__aeabi_ul2d>
 8001f74:	a324      	add	r3, pc, #144	@ (adr r3, 8002008 <AMT_encoder_update+0x230>)
 8001f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7a:	f7fe fb09 	bl	8000590 <__aeabi_dmul>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4610      	mov	r0, r2
 8001f84:	4619      	mov	r1, r3
 8001f86:	f7fe fdb3 	bl	8000af0 <__aeabi_d2f>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	4a27      	ldr	r2, [pc, #156]	@ (800202c <AMT_encoder_update+0x254>)
 8001f8e:	6013      	str	r3, [r2, #0]

		double accel = (AMT_data->Linear_Velo[QEI_NOW] - AMT_data->Linear_Velo[QEI_PREV]) / diffTimeAcc;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001f9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fa0:	4b22      	ldr	r3, [pc, #136]	@ (800202c <AMT_encoder_update+0x254>)
 8001fa2:	edd3 7a00 	vldr	s15, [r3]
 8001fa6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001faa:	ee16 0a90 	vmov	r0, s13
 8001fae:	f7fe fa97 	bl	80004e0 <__aeabi_f2d>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	e9c7 2306 	strd	r2, r3, [r7, #24]
		AMT_data->Linear_Acceleration = kalman_filter(&filtered_accel, accel);
 8001fba:	ed97 0b06 	vldr	d0, [r7, #24]
 8001fbe:	481c      	ldr	r0, [pc, #112]	@ (8002030 <AMT_encoder_update+0x258>)
 8001fc0:	f001 fb92 	bl	80036e8 <kalman_filter>
 8001fc4:	ec53 2b10 	vmov	r2, r3, d0
 8001fc8:	4610      	mov	r0, r2
 8001fca:	4619      	mov	r1, r3
 8001fcc:	f7fe fd90 	bl	8000af0 <__aeabi_d2f>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	639a      	str	r2, [r3, #56]	@ 0x38
		AMT_data->Linear_Velo[QEI_PREV] = AMT_data->Linear_Velo[QEI_NOW];
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	62da      	str	r2, [r3, #44]	@ 0x2c
		AMT_data->Accel_TimeStamp[QEI_PREV] = AMT_data->Accel_TimeStamp[QEI_NOW];
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001fe4:	6979      	ldr	r1, [r7, #20]
 8001fe6:	e9c1 2308 	strd	r2, r3, [r1, #32]
	}
    // Store value for next loop
    AMT_data->Position[QEI_PREV] = AMT_data->Position[QEI_NOW];
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	605a      	str	r2, [r3, #4]
    AMT_data->TimeStamp[QEI_PREV] = AMT_data->TimeStamp[QEI_NOW];
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ff8:	6979      	ldr	r1, [r7, #20]
 8001ffa:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001ffe:	bf00      	nop
 8002000:	3738      	adds	r7, #56	@ 0x38
 8002002:	46bd      	mov	sp, r7
 8002004:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002008:	a0b5ed8d 	.word	0xa0b5ed8d
 800200c:	3eb0c6f7 	.word	0x3eb0c6f7
 8002010:	20000000 	.word	0x20000000
 8002014:	358637bd 	.word	0x358637bd
 8002018:	42700000 	.word	0x42700000
 800201c:	39000000 	.word	0x39000000
 8002020:	20000004 	.word	0x20000004
 8002024:	20001038 	.word	0x20001038
 8002028:	200002c0 	.word	0x200002c0
 800202c:	200002b8 	.word	0x200002b8
 8002030:	20001054 	.word	0x20001054

08002034 <AMT_encoder_reset>:


void AMT_encoder_reset(AMT_Encoder *AMT_data)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
	AMT_data->Linear_Position = 600;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a04      	ldr	r2, [pc, #16]	@ (8002050 <AMT_encoder_reset+0x1c>)
 8002040:	645a      	str	r2, [r3, #68]	@ 0x44
//	AMT_data->Position[QEI_NOW] = 0;

}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	44160000 	.word	0x44160000

08002054 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8002058:	4b0d      	ldr	r3, [pc, #52]	@ (8002090 <modbus_1t5_Timeout+0x3c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2201      	movs	r2, #1
 800205e:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8002060:	4b0b      	ldr	r3, [pc, #44]	@ (8002090 <modbus_1t5_Timeout+0x3c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2200      	movs	r2, #0
 800206a:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 800206c:	4b08      	ldr	r3, [pc, #32]	@ (8002090 <modbus_1t5_Timeout+0x3c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	4b06      	ldr	r3, [pc, #24]	@ (8002090 <modbus_1t5_Timeout+0x3c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 0201 	orr.w	r2, r2, #1
 8002082:	601a      	str	r2, [r3, #0]
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	200002c8 	.word	0x200002c8

08002094 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 800209c:	4b04      	ldr	r3, [pc, #16]	@ (80020b0 <modbus_3t5_Timeout+0x1c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2201      	movs	r2, #1
 80020a2:	755a      	strb	r2, [r3, #21]

}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	200002c8 	.word	0x200002c8

080020b4 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f008 fbcb 	bl	800a858 <HAL_UART_GetError>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b20      	cmp	r3, #32
 80020c6:	d101      	bne.n	80020cc <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 80020c8:	f7ff ffc4 	bl	8002054 <modbus_1t5_Timeout>

	}
}
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80020de:	4a25      	ldr	r2, [pc, #148]	@ (8002174 <Modbus_init+0xa0>)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80020e4:	4b23      	ldr	r3, [pc, #140]	@ (8002174 <Modbus_init+0xa0>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	4a21      	ldr	r2, [pc, #132]	@ (8002178 <Modbus_init+0xa4>)
 80020f2:	210e      	movs	r1, #14
 80020f4:	4618      	mov	r0, r3
 80020f6:	f006 fdbf 	bl	8008c78 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	2110      	movs	r1, #16
 8002100:	4618      	mov	r0, r3
 8002102:	f008 fb53 	bl	800a7ac <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	4618      	mov	r0, r3
 800210c:	f008 fb6a 	bl	800a7e4 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	4a19      	ldr	r2, [pc, #100]	@ (800217c <Modbus_init+0xa8>)
 8002116:	2104      	movs	r1, #4
 8002118:	4618      	mov	r0, r3
 800211a:	f007 fd69 	bl	8009bf0 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 800211e:	4b15      	ldr	r3, [pc, #84]	@ (8002174 <Modbus_init+0xa0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8002124:	4b13      	ldr	r3, [pc, #76]	@ (8002174 <Modbus_init+0xa0>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b12      	ldr	r3, [pc, #72]	@ (8002174 <Modbus_init+0xa0>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8002130:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8002134:	4413      	add	r3, r2
 8002136:	3302      	adds	r3, #2
 8002138:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800213c:	4619      	mov	r1, r3
 800213e:	f007 ff59 	bl	8009ff4 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8002142:	4b0c      	ldr	r3, [pc, #48]	@ (8002174 <Modbus_init+0xa0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b01      	cmp	r3, #1
 8002150:	d10c      	bne.n	800216c <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8002152:	4b08      	ldr	r3, [pc, #32]	@ (8002174 <Modbus_init+0xa0>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	4618      	mov	r0, r3
 800215a:	f005 fd11 	bl	8007b80 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800215e:	4b05      	ldr	r3, [pc, #20]	@ (8002174 <Modbus_init+0xa0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	2100      	movs	r1, #0
 8002166:	4618      	mov	r0, r3
 8002168:	f005 ffb8 	bl	80080dc <HAL_TIM_OnePulse_Start_IT>
    	}

}
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	200002c8 	.word	0x200002c8
 8002178:	08002095 	.word	0x08002095
 800217c:	080020b5 	.word	0x080020b5

08002180 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 800218c:	23ff      	movs	r3, #255	@ 0xff
 800218e:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8002190:	23ff      	movs	r3, #255	@ 0xff
 8002192:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8002194:	e013      	b.n	80021be <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	1c5a      	adds	r2, r3, #1
 800219a:	607a      	str	r2, [r7, #4]
 800219c:	781a      	ldrb	r2, [r3, #0]
 800219e:	7bbb      	ldrb	r3, [r7, #14]
 80021a0:	4053      	eors	r3, r2
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 80021a6:	4a0f      	ldr	r2, [pc, #60]	@ (80021e4 <CRC16+0x64>)
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	4413      	add	r3, r2
 80021ac:	781a      	ldrb	r2, [r3, #0]
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
 80021b0:	4053      	eors	r3, r2
 80021b2:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 80021b4:	4a0c      	ldr	r2, [pc, #48]	@ (80021e8 <CRC16+0x68>)
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	4413      	add	r3, r2
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 80021be:	883b      	ldrh	r3, [r7, #0]
 80021c0:	1e5a      	subs	r2, r3, #1
 80021c2:	803a      	strh	r2, [r7, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1e6      	bne.n	8002196 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	021b      	lsls	r3, r3, #8
 80021cc:	b21a      	sxth	r2, r3
 80021ce:	7bbb      	ldrb	r3, [r7, #14]
 80021d0:	b21b      	sxth	r3, r3
 80021d2:	4313      	orrs	r3, r2
 80021d4:	b21b      	sxth	r3, r3
 80021d6:	b29b      	uxth	r3, r3
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	20000108 	.word	0x20000108
 80021e8:	20000008 	.word	0x20000008

080021ec <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80021f2:	4b7e      	ldr	r3, [pc, #504]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	7ddb      	ldrb	r3, [r3, #23]
 80021f8:	3b01      	subs	r3, #1
 80021fa:	2b03      	cmp	r3, #3
 80021fc:	d80a      	bhi.n	8002214 <Modbus_Protocal_Worker+0x28>
 80021fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002204 <Modbus_Protocal_Worker+0x18>)
 8002200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002204:	0800221f 	.word	0x0800221f
 8002208:	080023b3 	.word	0x080023b3
 800220c:	080022ab 	.word	0x080022ab
 8002210:	080022ef 	.word	0x080022ef
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8002214:	4b75      	ldr	r3, [pc, #468]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2201      	movs	r2, #1
 800221a:	75da      	strb	r2, [r3, #23]
		break;
 800221c:	e0e1      	b.n	80023e2 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 800221e:	4b73      	ldr	r3, [pc, #460]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8002226:	2b00      	cmp	r3, #0
 8002228:	d006      	beq.n	8002238 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 800222a:	4b70      	ldr	r3, [pc, #448]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2202      	movs	r2, #2
 8002230:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 8002232:	f000 f9cd 	bl	80025d0 <Modbus_Emission>
 8002236:	e018      	b.n	800226a <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 8002238:	4b6c      	ldr	r3, [pc, #432]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002242:	4b6a      	ldr	r3, [pc, #424]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800224c:	b29b      	uxth	r3, r3
 800224e:	429a      	cmp	r2, r3
 8002250:	d00b      	beq.n	800226a <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8002252:	4b66      	ldr	r3, [pc, #408]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2200      	movs	r2, #0
 8002258:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800225a:	4b64      	ldr	r3, [pc, #400]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2200      	movs	r2, #0
 8002260:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8002262:	4b62      	ldr	r3, [pc, #392]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2203      	movs	r2, #3
 8002268:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 800226a:	4b60      	ldr	r3, [pc, #384]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002274:	2b20      	cmp	r3, #32
 8002276:	f040 80ad 	bne.w	80023d4 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 800227a:	4b5c      	ldr	r3, [pc, #368]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2200      	movs	r2, #0
 8002280:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8002284:	4b59      	ldr	r3, [pc, #356]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800228a:	4b58      	ldr	r3, [pc, #352]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	4b57      	ldr	r3, [pc, #348]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8002296:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800229a:	4413      	add	r3, r2
 800229c:	3302      	adds	r3, #2
 800229e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80022a2:	4619      	mov	r1, r3
 80022a4:	f007 fea6 	bl	8009ff4 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 80022a8:	e094      	b.n	80023d4 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 80022aa:	4b50      	ldr	r3, [pc, #320]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	7d1b      	ldrb	r3, [r3, #20]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 8091 	beq.w	80023d8 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80022b6:	4b4d      	ldr	r3, [pc, #308]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	22fe      	movs	r2, #254	@ 0xfe
 80022bc:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 80022be:	4b4b      	ldr	r3, [pc, #300]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 80022c8:	4b48      	ldr	r3, [pc, #288]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 80022d8:	4b44      	ldr	r3, [pc, #272]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 80022da:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 80022dc:	1a8a      	subs	r2, r1, r2
 80022de:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 80022e0:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80022e4:	4b41      	ldr	r3, [pc, #260]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2204      	movs	r2, #4
 80022ea:	75da      	strb	r2, [r3, #23]
		}
		break;
 80022ec:	e074      	b.n	80023d8 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80022ee:	4b3f      	ldr	r3, [pc, #252]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80022f6:	f113 0f02 	cmn.w	r3, #2
 80022fa:	d150      	bne.n	800239e <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80022fc:	4b3b      	ldr	r3, [pc, #236]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2200      	movs	r2, #0
 8002302:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8002304:	4b39      	ldr	r3, [pc, #228]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f203 2272 	addw	r2, r3, #626	@ 0x272
 800230c:	4b37      	ldr	r3, [pc, #220]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002314:	3b02      	subs	r3, #2
 8002316:	4619      	mov	r1, r3
 8002318:	4610      	mov	r0, r2
 800231a:	f7ff ff31 	bl	8002180 <CRC16>
 800231e:	4603      	mov	r3, r0
 8002320:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8002322:	793a      	ldrb	r2, [r7, #4]
 8002324:	4b31      	ldr	r3, [pc, #196]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 8002326:	6819      	ldr	r1, [r3, #0]
 8002328:	4b30      	ldr	r3, [pc, #192]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002330:	3b02      	subs	r3, #2
 8002332:	440b      	add	r3, r1
 8002334:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8002338:	429a      	cmp	r2, r3
 800233a:	d10c      	bne.n	8002356 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 800233c:	797a      	ldrb	r2, [r7, #5]
 800233e:	4b2b      	ldr	r3, [pc, #172]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 8002340:	6819      	ldr	r1, [r3, #0]
 8002342:	4b2a      	ldr	r3, [pc, #168]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800234a:	3b01      	subs	r3, #1
 800234c:	440b      	add	r3, r1
 800234e:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8002352:	429a      	cmp	r2, r3
 8002354:	d004      	beq.n	8002360 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8002356:	4b25      	ldr	r3, [pc, #148]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	22ff      	movs	r2, #255	@ 0xff
 800235c:	759a      	strb	r2, [r3, #22]
				break;
 800235e:	e040      	b.n	80023e2 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8002360:	4b22      	ldr	r3, [pc, #136]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8002368:	4b20      	ldr	r3, [pc, #128]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d113      	bne.n	800239a <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8002372:	4b1e      	ldr	r3, [pc, #120]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 800237a:	4b1c      	ldr	r3, [pc, #112]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8002382:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8002384:	4b19      	ldr	r3, [pc, #100]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800238c:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800238e:	461a      	mov	r2, r3
 8002390:	f009 fbbc 	bl	800bb0c <memcpy>

			//execute command
			Modbus_frame_response();
 8002394:	f000 f904 	bl	80025a0 <Modbus_frame_response>
 8002398:	e001      	b.n	800239e <Modbus_Protocal_Worker+0x1b2>
				break;
 800239a:	bf00      	nop
					}
		break;


	}
}
 800239c:	e021      	b.n	80023e2 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 800239e:	4b13      	ldr	r3, [pc, #76]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	7d5b      	ldrb	r3, [r3, #21]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d019      	beq.n	80023dc <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 80023a8:	4b10      	ldr	r3, [pc, #64]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2201      	movs	r2, #1
 80023ae:	75da      	strb	r2, [r3, #23]
		break;
 80023b0:	e014      	b.n	80023dc <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80023b2:	4b0e      	ldr	r3, [pc, #56]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023bc:	2b20      	cmp	r3, #32
 80023be:	d10f      	bne.n	80023e0 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 80023c0:	4b0a      	ldr	r3, [pc, #40]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 80023ca:	4b08      	ldr	r3, [pc, #32]	@ (80023ec <Modbus_Protocal_Worker+0x200>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2201      	movs	r2, #1
 80023d0:	75da      	strb	r2, [r3, #23]
		break;
 80023d2:	e005      	b.n	80023e0 <Modbus_Protocal_Worker+0x1f4>
		break;
 80023d4:	bf00      	nop
 80023d6:	e004      	b.n	80023e2 <Modbus_Protocal_Worker+0x1f6>
		break;
 80023d8:	bf00      	nop
 80023da:	e002      	b.n	80023e2 <Modbus_Protocal_Worker+0x1f6>
		break;
 80023dc:	bf00      	nop
 80023de:	e000      	b.n	80023e2 <Modbus_Protocal_Worker+0x1f6>
		break;
 80023e0:	bf00      	nop
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	200002c8 	.word	0x200002c8

080023f0 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80023f6:	4b1d      	ldr	r3, [pc, #116]	@ (800246c <modbusWrite1Register+0x7c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	7e5b      	ldrb	r3, [r3, #25]
 80023fc:	021b      	lsls	r3, r3, #8
 80023fe:	b29b      	uxth	r3, r3
 8002400:	4a1a      	ldr	r2, [pc, #104]	@ (800246c <modbusWrite1Register+0x7c>)
 8002402:	6812      	ldr	r2, [r2, #0]
 8002404:	7e92      	ldrb	r2, [r2, #26]
 8002406:	4413      	add	r3, r2
 8002408:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800240a:	88fa      	ldrh	r2, [r7, #6]
 800240c:	4b17      	ldr	r3, [pc, #92]	@ (800246c <modbusWrite1Register+0x7c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	429a      	cmp	r2, r3
 8002414:	d903      	bls.n	800241e <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8002416:	2002      	movs	r0, #2
 8002418:	f000 f8a0 	bl	800255c <ModbusErrorReply>
			 return;
 800241c:	e023      	b.n	8002466 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800241e:	4b13      	ldr	r3, [pc, #76]	@ (800246c <modbusWrite1Register+0x7c>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	4b12      	ldr	r3, [pc, #72]	@ (800246c <modbusWrite1Register+0x7c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6859      	ldr	r1, [r3, #4]
 8002428:	88fb      	ldrh	r3, [r7, #6]
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	440b      	add	r3, r1
 800242e:	7ed2      	ldrb	r2, [r2, #27]
 8002430:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8002432:	4b0e      	ldr	r3, [pc, #56]	@ (800246c <modbusWrite1Register+0x7c>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	4b0d      	ldr	r3, [pc, #52]	@ (800246c <modbusWrite1Register+0x7c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6859      	ldr	r1, [r3, #4]
 800243c:	88fb      	ldrh	r3, [r7, #6]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	440b      	add	r3, r1
 8002442:	7f12      	ldrb	r2, [r2, #28]
 8002444:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8002446:	4b09      	ldr	r3, [pc, #36]	@ (800246c <modbusWrite1Register+0x7c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 800244e:	4b07      	ldr	r3, [pc, #28]	@ (800246c <modbusWrite1Register+0x7c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8002454:	2208      	movs	r2, #8
 8002456:	4619      	mov	r1, r3
 8002458:	f009 fb58 	bl	800bb0c <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 800245c:	4b03      	ldr	r3, [pc, #12]	@ (800246c <modbusWrite1Register+0x7c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2205      	movs	r2, #5
 8002462:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	200002c8 	.word	0x200002c8

08002470 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8002470:	b590      	push	{r4, r7, lr}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8002476:	4b38      	ldr	r3, [pc, #224]	@ (8002558 <modbusRead1Register+0xe8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	7edb      	ldrb	r3, [r3, #27]
 800247c:	021b      	lsls	r3, r3, #8
 800247e:	b29b      	uxth	r3, r3
 8002480:	4a35      	ldr	r2, [pc, #212]	@ (8002558 <modbusRead1Register+0xe8>)
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	7f12      	ldrb	r2, [r2, #28]
 8002486:	4413      	add	r3, r2
 8002488:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 800248a:	4b33      	ldr	r3, [pc, #204]	@ (8002558 <modbusRead1Register+0xe8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	7e5b      	ldrb	r3, [r3, #25]
 8002490:	021b      	lsls	r3, r3, #8
 8002492:	b29b      	uxth	r3, r3
 8002494:	4a30      	ldr	r2, [pc, #192]	@ (8002558 <modbusRead1Register+0xe8>)
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	7e92      	ldrb	r2, [r2, #26]
 800249a:	4413      	add	r3, r2
 800249c:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800249e:	88fb      	ldrh	r3, [r7, #6]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d002      	beq.n	80024aa <modbusRead1Register+0x3a>
 80024a4:	88fb      	ldrh	r3, [r7, #6]
 80024a6:	2b7d      	cmp	r3, #125	@ 0x7d
 80024a8:	d903      	bls.n	80024b2 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80024aa:	2003      	movs	r0, #3
 80024ac:	f000 f856 	bl	800255c <ModbusErrorReply>
		 return;
 80024b0:	e04e      	b.n	8002550 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80024b2:	88ba      	ldrh	r2, [r7, #4]
 80024b4:	4b28      	ldr	r3, [pc, #160]	@ (8002558 <modbusRead1Register+0xe8>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d808      	bhi.n	80024d0 <modbusRead1Register+0x60>
 80024be:	88ba      	ldrh	r2, [r7, #4]
 80024c0:	88fb      	ldrh	r3, [r7, #6]
 80024c2:	4413      	add	r3, r2
 80024c4:	461a      	mov	r2, r3
 80024c6:	4b24      	ldr	r3, [pc, #144]	@ (8002558 <modbusRead1Register+0xe8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d903      	bls.n	80024d8 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80024d0:	2002      	movs	r0, #2
 80024d2:	f000 f843 	bl	800255c <ModbusErrorReply>
		 return;
 80024d6:	e03b      	b.n	8002550 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80024d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002558 <modbusRead1Register+0xe8>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2203      	movs	r2, #3
 80024de:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80024e2:	88fb      	ldrh	r3, [r7, #6]
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002558 <modbusRead1Register+0xe8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	0052      	lsls	r2, r2, #1
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80024f2:	2400      	movs	r4, #0
 80024f4:	e020      	b.n	8002538 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80024f6:	4b18      	ldr	r3, [pc, #96]	@ (8002558 <modbusRead1Register+0xe8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	88bb      	ldrh	r3, [r7, #4]
 80024fe:	4423      	add	r3, r4
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	18d1      	adds	r1, r2, r3
 8002504:	4b14      	ldr	r3, [pc, #80]	@ (8002558 <modbusRead1Register+0xe8>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	1c63      	adds	r3, r4, #1
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	7849      	ldrb	r1, [r1, #1]
 800250e:	4413      	add	r3, r2
 8002510:	460a      	mov	r2, r1
 8002512:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8002516:	4b10      	ldr	r3, [pc, #64]	@ (8002558 <modbusRead1Register+0xe8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	88bb      	ldrh	r3, [r7, #4]
 800251e:	4423      	add	r3, r4
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	18d1      	adds	r1, r2, r3
 8002524:	4b0c      	ldr	r3, [pc, #48]	@ (8002558 <modbusRead1Register+0xe8>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	0063      	lsls	r3, r4, #1
 800252a:	3303      	adds	r3, #3
 800252c:	7809      	ldrb	r1, [r1, #0]
 800252e:	4413      	add	r3, r2
 8002530:	460a      	mov	r2, r1
 8002532:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 8002536:	3401      	adds	r4, #1
 8002538:	88fb      	ldrh	r3, [r7, #6]
 800253a:	429c      	cmp	r4, r3
 800253c:	dbdb      	blt.n	80024f6 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800253e:	88fb      	ldrh	r3, [r7, #6]
 8002540:	3301      	adds	r3, #1
 8002542:	b2da      	uxtb	r2, r3
 8002544:	4b04      	ldr	r3, [pc, #16]	@ (8002558 <modbusRead1Register+0xe8>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	0052      	lsls	r2, r2, #1
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	bd90      	pop	{r4, r7, pc}
 8002556:	bf00      	nop
 8002558:	200002c8 	.word	0x200002c8

0800255c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8002566:	4b0d      	ldr	r3, [pc, #52]	@ (800259c <ModbusErrorReply+0x40>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	7e1a      	ldrb	r2, [r3, #24]
 800256c:	4b0b      	ldr	r3, [pc, #44]	@ (800259c <ModbusErrorReply+0x40>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 800257a:	4b08      	ldr	r3, [pc, #32]	@ (800259c <ModbusErrorReply+0x40>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	79fa      	ldrb	r2, [r7, #7]
 8002580:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8002584:	4b05      	ldr	r3, [pc, #20]	@ (800259c <ModbusErrorReply+0x40>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2202      	movs	r2, #2
 800258a:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	200002c8 	.word	0x200002c8

080025a0 <Modbus_frame_response>:

void Modbus_frame_response()
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 80025a4:	4b09      	ldr	r3, [pc, #36]	@ (80025cc <Modbus_frame_response+0x2c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	7e1b      	ldrb	r3, [r3, #24]
 80025aa:	2b03      	cmp	r3, #3
 80025ac:	d004      	beq.n	80025b8 <Modbus_frame_response+0x18>
 80025ae:	2b06      	cmp	r3, #6
 80025b0:	d105      	bne.n	80025be <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80025b2:	f7ff ff1d 	bl	80023f0 <modbusWrite1Register>
		break;
 80025b6:	e006      	b.n	80025c6 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80025b8:	f7ff ff5a 	bl	8002470 <modbusRead1Register>
		break;
 80025bc:	e003      	b.n	80025c6 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80025be:	2001      	movs	r0, #1
 80025c0:	f7ff ffcc 	bl	800255c <ModbusErrorReply>
		break;
 80025c4:	bf00      	nop

	}
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	200002c8 	.word	0x200002c8

080025d0 <Modbus_Emission>:

void Modbus_Emission()
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80025d6:	4b38      	ldr	r3, [pc, #224]	@ (80026b8 <Modbus_Emission+0xe8>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e0:	2b20      	cmp	r3, #32
 80025e2:	d15d      	bne.n	80026a0 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80025e4:	4b34      	ldr	r3, [pc, #208]	@ (80026b8 <Modbus_Emission+0xe8>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	4b33      	ldr	r3, [pc, #204]	@ (80026b8 <Modbus_Emission+0xe8>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	7812      	ldrb	r2, [r2, #0]
 80025ee:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80025f2:	4b31      	ldr	r3, [pc, #196]	@ (80026b8 <Modbus_Emission+0xe8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 80025fa:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80025fc:	4b2e      	ldr	r3, [pc, #184]	@ (80026b8 <Modbus_Emission+0xe8>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8002604:	4b2c      	ldr	r3, [pc, #176]	@ (80026b8 <Modbus_Emission+0xe8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 800260c:	461a      	mov	r2, r3
 800260e:	f009 fa7d 	bl	800bb0c <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8002612:	4b29      	ldr	r3, [pc, #164]	@ (80026b8 <Modbus_Emission+0xe8>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 800261a:	461a      	mov	r2, r3
 800261c:	4b26      	ldr	r3, [pc, #152]	@ (80026b8 <Modbus_Emission+0xe8>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	3203      	adds	r2, #3
 8002622:	b292      	uxth	r2, r2
 8002624:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8002628:	4b23      	ldr	r3, [pc, #140]	@ (80026b8 <Modbus_Emission+0xe8>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8002630:	4b21      	ldr	r3, [pc, #132]	@ (80026b8 <Modbus_Emission+0xe8>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8002638:	3b02      	subs	r3, #2
 800263a:	4619      	mov	r1, r3
 800263c:	4610      	mov	r0, r2
 800263e:	f7ff fd9f 	bl	8002180 <CRC16>
 8002642:	4603      	mov	r3, r0
 8002644:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8002646:	4b1c      	ldr	r3, [pc, #112]	@ (80026b8 <Modbus_Emission+0xe8>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	4b1b      	ldr	r3, [pc, #108]	@ (80026b8 <Modbus_Emission+0xe8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8002652:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8002654:	7939      	ldrb	r1, [r7, #4]
 8002656:	4413      	add	r3, r2
 8002658:	460a      	mov	r2, r1
 800265a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 800265e:	4b16      	ldr	r3, [pc, #88]	@ (80026b8 <Modbus_Emission+0xe8>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	4b15      	ldr	r3, [pc, #84]	@ (80026b8 <Modbus_Emission+0xe8>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800266a:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 800266c:	7979      	ldrb	r1, [r7, #5]
 800266e:	4413      	add	r3, r2
 8002670:	460a      	mov	r2, r1
 8002672:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002676:	4b10      	ldr	r3, [pc, #64]	@ (80026b8 <Modbus_Emission+0xe8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002680:	2b20      	cmp	r3, #32
 8002682:	d10d      	bne.n	80026a0 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8002684:	4b0c      	ldr	r3, [pc, #48]	@ (80026b8 <Modbus_Emission+0xe8>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 800268a:	4b0b      	ldr	r3, [pc, #44]	@ (80026b8 <Modbus_Emission+0xe8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8002692:	4b09      	ldr	r3, [pc, #36]	@ (80026b8 <Modbus_Emission+0xe8>)
 8002694:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8002696:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800269a:	461a      	mov	r2, r3
 800269c:	f007 fc2a 	bl	8009ef4 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 80026a0:	4b05      	ldr	r3, [pc, #20]	@ (80026b8 <Modbus_Emission+0xe8>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2200      	movs	r2, #0
 80026a6:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80026a8:	4b03      	ldr	r3, [pc, #12]	@ (80026b8 <Modbus_Emission+0xe8>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2200      	movs	r2, #0
 80026ae:	755a      	strb	r2, [r3, #21]

}
 80026b0:	bf00      	nop
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	200002c8 	.word	0x200002c8

080026bc <MOTOR_init>:
#include "math.h"

//-------------------------------------------Function Code-------------------------------------------------------//

void MOTOR_init(MOTOR* MT, TIM_HandleTypeDef* htimx, uint16_t timd_chx, uint16_t timp_chx)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	4611      	mov	r1, r2
 80026c8:	461a      	mov	r2, r3
 80026ca:	460b      	mov	r3, r1
 80026cc:	80fb      	strh	r3, [r7, #6]
 80026ce:	4613      	mov	r3, r2
 80026d0:	80bb      	strh	r3, [r7, #4]
    if (MT == NULL || htimx == NULL) {
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d016      	beq.n	8002706 <MOTOR_init+0x4a>
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d013      	beq.n	8002706 <MOTOR_init+0x4a>
        return;
    }
    MT->htimx = htimx;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	601a      	str	r2, [r3, #0]
    MT->timd_chx = timd_chx;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	88fa      	ldrh	r2, [r7, #6]
 80026e8:	809a      	strh	r2, [r3, #4]
    MT->timp_chx = timp_chx;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	88ba      	ldrh	r2, [r7, #4]
 80026ee:	80da      	strh	r2, [r3, #6]

    HAL_TIM_PWM_Start_IT(htimx, timp_chx); // PWM
 80026f0:	88bb      	ldrh	r3, [r7, #4]
 80026f2:	4619      	mov	r1, r3
 80026f4:	68b8      	ldr	r0, [r7, #8]
 80026f6:	f005 fb29 	bl	8007d4c <HAL_TIM_PWM_Start_IT>
    HAL_TIM_PWM_Start_IT(htimx, timd_chx); // Direction
 80026fa:	88fb      	ldrh	r3, [r7, #6]
 80026fc:	4619      	mov	r1, r3
 80026fe:	68b8      	ldr	r0, [r7, #8]
 8002700:	f005 fb24 	bl	8007d4c <HAL_TIM_PWM_Start_IT>
 8002704:	e000      	b.n	8002708 <MOTOR_init+0x4c>
        return;
 8002706:	bf00      	nop
}
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
	...

08002710 <MOTOR_set_duty>:

void MOTOR_set_duty(MOTOR* MT, float percent_duty)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	ed87 0a00 	vstr	s0, [r7]
    if (MT == NULL || MT->htimx == NULL) {
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 81f2 	beq.w	8002b08 <MOTOR_set_duty+0x3f8>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 81ed 	beq.w	8002b08 <MOTOR_set_duty+0x3f8>
        return;
    }

    const float max_duty = 42499.0f;
 800272e:	4b93      	ldr	r3, [pc, #588]	@ (800297c <MOTOR_set_duty+0x26c>)
 8002730:	60bb      	str	r3, [r7, #8]
    float scaled_duty = percent_duty * 42.499f;
 8002732:	edd7 7a00 	vldr	s15, [r7]
 8002736:	ed9f 7a92 	vldr	s14, [pc, #584]	@ 8002980 <MOTOR_set_duty+0x270>
 800273a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800273e:	edc7 7a03 	vstr	s15, [r7, #12]

    if (scaled_duty > max_duty) {
 8002742:	ed97 7a03 	vldr	s14, [r7, #12]
 8002746:	edd7 7a02 	vldr	s15, [r7, #8]
 800274a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800274e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002752:	dd02      	ble.n	800275a <MOTOR_set_duty+0x4a>
        scaled_duty = max_duty;
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	e010      	b.n	800277c <MOTOR_set_duty+0x6c>
    } else if (scaled_duty < -max_duty) {
 800275a:	edd7 7a02 	vldr	s15, [r7, #8]
 800275e:	eef1 7a67 	vneg.f32	s15, s15
 8002762:	ed97 7a03 	vldr	s14, [r7, #12]
 8002766:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800276a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276e:	d505      	bpl.n	800277c <MOTOR_set_duty+0x6c>
        scaled_duty = -max_duty;
 8002770:	edd7 7a02 	vldr	s15, [r7, #8]
 8002774:	eef1 7a67 	vneg.f32	s15, s15
 8002778:	edc7 7a03 	vstr	s15, [r7, #12]
    }

    if (scaled_duty == 0) {
 800277c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002780:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002788:	d16e      	bne.n	8002868 <MOTOR_set_duty+0x158>
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timd_chx, 0);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	889b      	ldrh	r3, [r3, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d105      	bne.n	800279e <MOTOR_set_duty+0x8e>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2200      	movs	r2, #0
 800279a:	635a      	str	r2, [r3, #52]	@ 0x34
 800279c:	e02c      	b.n	80027f8 <MOTOR_set_duty+0xe8>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	889b      	ldrh	r3, [r3, #4]
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	d105      	bne.n	80027b2 <MOTOR_set_duty+0xa2>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	2300      	movs	r3, #0
 80027ae:	6393      	str	r3, [r2, #56]	@ 0x38
 80027b0:	e022      	b.n	80027f8 <MOTOR_set_duty+0xe8>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	889b      	ldrh	r3, [r3, #4]
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d105      	bne.n	80027c6 <MOTOR_set_duty+0xb6>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	2300      	movs	r3, #0
 80027c2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80027c4:	e018      	b.n	80027f8 <MOTOR_set_duty+0xe8>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	889b      	ldrh	r3, [r3, #4]
 80027ca:	2b0c      	cmp	r3, #12
 80027cc:	d105      	bne.n	80027da <MOTOR_set_duty+0xca>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	2300      	movs	r3, #0
 80027d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80027d8:	e00e      	b.n	80027f8 <MOTOR_set_duty+0xe8>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	889b      	ldrh	r3, [r3, #4]
 80027de:	2b10      	cmp	r3, #16
 80027e0:	d105      	bne.n	80027ee <MOTOR_set_duty+0xde>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	2300      	movs	r3, #0
 80027ea:	6493      	str	r3, [r2, #72]	@ 0x48
 80027ec:	e004      	b.n	80027f8 <MOTOR_set_duty+0xe8>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	2300      	movs	r3, #0
 80027f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timp_chx, 0);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	88db      	ldrh	r3, [r3, #6]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d105      	bne.n	800280c <MOTOR_set_duty+0xfc>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2200      	movs	r2, #0
 8002808:	635a      	str	r2, [r3, #52]	@ 0x34
 800280a:	e17e      	b.n	8002b0a <MOTOR_set_duty+0x3fa>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	88db      	ldrh	r3, [r3, #6]
 8002810:	2b04      	cmp	r3, #4
 8002812:	d105      	bne.n	8002820 <MOTOR_set_duty+0x110>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	2300      	movs	r3, #0
 800281c:	6393      	str	r3, [r2, #56]	@ 0x38
 800281e:	e174      	b.n	8002b0a <MOTOR_set_duty+0x3fa>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	88db      	ldrh	r3, [r3, #6]
 8002824:	2b08      	cmp	r3, #8
 8002826:	d105      	bne.n	8002834 <MOTOR_set_duty+0x124>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	2300      	movs	r3, #0
 8002830:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002832:	e16a      	b.n	8002b0a <MOTOR_set_duty+0x3fa>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	88db      	ldrh	r3, [r3, #6]
 8002838:	2b0c      	cmp	r3, #12
 800283a:	d105      	bne.n	8002848 <MOTOR_set_duty+0x138>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	2300      	movs	r3, #0
 8002844:	6413      	str	r3, [r2, #64]	@ 0x40
 8002846:	e160      	b.n	8002b0a <MOTOR_set_duty+0x3fa>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	88db      	ldrh	r3, [r3, #6]
 800284c:	2b10      	cmp	r3, #16
 800284e:	d105      	bne.n	800285c <MOTOR_set_duty+0x14c>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	2300      	movs	r3, #0
 8002858:	6493      	str	r3, [r2, #72]	@ 0x48
 800285a:	e156      	b.n	8002b0a <MOTOR_set_duty+0x3fa>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	2300      	movs	r3, #0
 8002864:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002866:	e150      	b.n	8002b0a <MOTOR_set_duty+0x3fa>
    } else if (scaled_duty > 0) {
 8002868:	edd7 7a03 	vldr	s15, [r7, #12]
 800286c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002874:	f340 8091 	ble.w	800299a <MOTOR_set_duty+0x28a>
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timd_chx, 0);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	889b      	ldrh	r3, [r3, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d105      	bne.n	800288c <MOTOR_set_duty+0x17c>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2200      	movs	r2, #0
 8002888:	635a      	str	r2, [r3, #52]	@ 0x34
 800288a:	e02c      	b.n	80028e6 <MOTOR_set_duty+0x1d6>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	889b      	ldrh	r3, [r3, #4]
 8002890:	2b04      	cmp	r3, #4
 8002892:	d105      	bne.n	80028a0 <MOTOR_set_duty+0x190>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	2300      	movs	r3, #0
 800289c:	6393      	str	r3, [r2, #56]	@ 0x38
 800289e:	e022      	b.n	80028e6 <MOTOR_set_duty+0x1d6>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	889b      	ldrh	r3, [r3, #4]
 80028a4:	2b08      	cmp	r3, #8
 80028a6:	d105      	bne.n	80028b4 <MOTOR_set_duty+0x1a4>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	2300      	movs	r3, #0
 80028b0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80028b2:	e018      	b.n	80028e6 <MOTOR_set_duty+0x1d6>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	889b      	ldrh	r3, [r3, #4]
 80028b8:	2b0c      	cmp	r3, #12
 80028ba:	d105      	bne.n	80028c8 <MOTOR_set_duty+0x1b8>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	2300      	movs	r3, #0
 80028c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80028c6:	e00e      	b.n	80028e6 <MOTOR_set_duty+0x1d6>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	889b      	ldrh	r3, [r3, #4]
 80028cc:	2b10      	cmp	r3, #16
 80028ce:	d105      	bne.n	80028dc <MOTOR_set_duty+0x1cc>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	2300      	movs	r3, #0
 80028d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80028da:	e004      	b.n	80028e6 <MOTOR_set_duty+0x1d6>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	2300      	movs	r3, #0
 80028e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timp_chx, (uint32_t)scaled_duty);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	88db      	ldrh	r3, [r3, #6]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10a      	bne.n	8002904 <MOTOR_set_duty+0x1f4>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80028f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028fc:	ee17 2a90 	vmov	r2, s15
 8002900:	635a      	str	r2, [r3, #52]	@ 0x34
 8002902:	e102      	b.n	8002b0a <MOTOR_set_duty+0x3fa>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	88db      	ldrh	r3, [r3, #6]
 8002908:	2b04      	cmp	r3, #4
 800290a:	d10a      	bne.n	8002922 <MOTOR_set_duty+0x212>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	edd7 7a03 	vldr	s15, [r7, #12]
 8002916:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800291a:	ee17 3a90 	vmov	r3, s15
 800291e:	6393      	str	r3, [r2, #56]	@ 0x38
 8002920:	e0f3      	b.n	8002b0a <MOTOR_set_duty+0x3fa>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	88db      	ldrh	r3, [r3, #6]
 8002926:	2b08      	cmp	r3, #8
 8002928:	d10a      	bne.n	8002940 <MOTOR_set_duty+0x230>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	edd7 7a03 	vldr	s15, [r7, #12]
 8002934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002938:	ee17 3a90 	vmov	r3, s15
 800293c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800293e:	e0e4      	b.n	8002b0a <MOTOR_set_duty+0x3fa>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	88db      	ldrh	r3, [r3, #6]
 8002944:	2b0c      	cmp	r3, #12
 8002946:	d10a      	bne.n	800295e <MOTOR_set_duty+0x24e>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002952:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002956:	ee17 3a90 	vmov	r3, s15
 800295a:	6413      	str	r3, [r2, #64]	@ 0x40
 800295c:	e0d5      	b.n	8002b0a <MOTOR_set_duty+0x3fa>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	88db      	ldrh	r3, [r3, #6]
 8002962:	2b10      	cmp	r3, #16
 8002964:	d10e      	bne.n	8002984 <MOTOR_set_duty+0x274>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002970:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002974:	ee17 3a90 	vmov	r3, s15
 8002978:	6493      	str	r3, [r2, #72]	@ 0x48
 800297a:	e0c6      	b.n	8002b0a <MOTOR_set_duty+0x3fa>
 800297c:	47260300 	.word	0x47260300
 8002980:	4229fefa 	.word	0x4229fefa
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	edd7 7a03 	vldr	s15, [r7, #12]
 800298e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002992:	ee17 3a90 	vmov	r3, s15
 8002996:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002998:	e0b7      	b.n	8002b0a <MOTOR_set_duty+0x3fa>
    } else {
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timd_chx, (uint32_t)max_duty);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	889b      	ldrh	r3, [r3, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10a      	bne.n	80029b8 <MOTOR_set_duty+0x2a8>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80029ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029b0:	ee17 2a90 	vmov	r2, s15
 80029b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80029b6:	e045      	b.n	8002a44 <MOTOR_set_duty+0x334>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	889b      	ldrh	r3, [r3, #4]
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d10a      	bne.n	80029d6 <MOTOR_set_duty+0x2c6>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80029ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029ce:	ee17 3a90 	vmov	r3, s15
 80029d2:	6393      	str	r3, [r2, #56]	@ 0x38
 80029d4:	e036      	b.n	8002a44 <MOTOR_set_duty+0x334>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	889b      	ldrh	r3, [r3, #4]
 80029da:	2b08      	cmp	r3, #8
 80029dc:	d10a      	bne.n	80029f4 <MOTOR_set_duty+0x2e4>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80029e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029ec:	ee17 3a90 	vmov	r3, s15
 80029f0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80029f2:	e027      	b.n	8002a44 <MOTOR_set_duty+0x334>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	889b      	ldrh	r3, [r3, #4]
 80029f8:	2b0c      	cmp	r3, #12
 80029fa:	d10a      	bne.n	8002a12 <MOTOR_set_duty+0x302>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a0a:	ee17 3a90 	vmov	r3, s15
 8002a0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a10:	e018      	b.n	8002a44 <MOTOR_set_duty+0x334>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	889b      	ldrh	r3, [r3, #4]
 8002a16:	2b10      	cmp	r3, #16
 8002a18:	d10a      	bne.n	8002a30 <MOTOR_set_duty+0x320>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a28:	ee17 3a90 	vmov	r3, s15
 8002a2c:	6493      	str	r3, [r2, #72]	@ 0x48
 8002a2e:	e009      	b.n	8002a44 <MOTOR_set_duty+0x334>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a3e:	ee17 3a90 	vmov	r3, s15
 8002a42:	64d3      	str	r3, [r2, #76]	@ 0x4c
        __HAL_TIM_SET_COMPARE(MT->htimx, MT->timp_chx, (uint32_t)fabs(scaled_duty));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	88db      	ldrh	r3, [r3, #6]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d10c      	bne.n	8002a66 <MOTOR_set_duty+0x356>
 8002a4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a50:	eef0 7ae7 	vabs.f32	s15, s15
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a5e:	ee17 2a90 	vmov	r2, s15
 8002a62:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a64:	e051      	b.n	8002b0a <MOTOR_set_duty+0x3fa>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	88db      	ldrh	r3, [r3, #6]
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d10c      	bne.n	8002a88 <MOTOR_set_duty+0x378>
 8002a6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a72:	eef0 7ae7 	vabs.f32	s15, s15
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a80:	ee17 3a90 	vmov	r3, s15
 8002a84:	6393      	str	r3, [r2, #56]	@ 0x38
 8002a86:	e040      	b.n	8002b0a <MOTOR_set_duty+0x3fa>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	88db      	ldrh	r3, [r3, #6]
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d10c      	bne.n	8002aaa <MOTOR_set_duty+0x39a>
 8002a90:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a94:	eef0 7ae7 	vabs.f32	s15, s15
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aa2:	ee17 3a90 	vmov	r3, s15
 8002aa6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002aa8:	e02f      	b.n	8002b0a <MOTOR_set_duty+0x3fa>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	88db      	ldrh	r3, [r3, #6]
 8002aae:	2b0c      	cmp	r3, #12
 8002ab0:	d10c      	bne.n	8002acc <MOTOR_set_duty+0x3bc>
 8002ab2:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ab6:	eef0 7ae7 	vabs.f32	s15, s15
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ac4:	ee17 3a90 	vmov	r3, s15
 8002ac8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aca:	e01e      	b.n	8002b0a <MOTOR_set_duty+0x3fa>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	88db      	ldrh	r3, [r3, #6]
 8002ad0:	2b10      	cmp	r3, #16
 8002ad2:	d10c      	bne.n	8002aee <MOTOR_set_duty+0x3de>
 8002ad4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ad8:	eef0 7ae7 	vabs.f32	s15, s15
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ae6:	ee17 3a90 	vmov	r3, s15
 8002aea:	6493      	str	r3, [r2, #72]	@ 0x48
 8002aec:	e00d      	b.n	8002b0a <MOTOR_set_duty+0x3fa>
 8002aee:	edd7 7a03 	vldr	s15, [r7, #12]
 8002af2:	eef0 7ae7 	vabs.f32	s15, s15
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b00:	ee17 3a90 	vmov	r3, s15
 8002b04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b06:	e000      	b.n	8002b0a <MOTOR_set_duty+0x3fa>
        return;
 8002b08:	bf00      	nop
    }
}
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <PID_controller_init>:
float boundary = 0.05;

//-------------------------------------------Function Code-------------------------------------------------------//

void PID_controller_init(PID_struct* PID,float UP_Kp, float UP_Ki, float UP_Kd)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002b20:	edc7 0a01 	vstr	s1, [r7, #4]
 8002b24:	ed87 1a00 	vstr	s2, [r7]
 PID->Kp = UP_Kp;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	601a      	str	r2, [r3, #0]
 PID->Ki = UP_Ki;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	605a      	str	r2, [r3, #4]
 PID->Kd = UP_Kd;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	609a      	str	r2, [r3, #8]

 PID->Error[n] = 0;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	60da      	str	r2, [r3, #12]
 PID->Error[n_1] = 0;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	611a      	str	r2, [r3, #16]
 PID->Error[n_2] = 0;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	615a      	str	r2, [r3, #20]
 PID->out = 0;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f04f 0200 	mov.w	r2, #0
 8002b58:	619a      	str	r2, [r3, #24]
}
 8002b5a:	bf00      	nop
 8002b5c:	3714      	adds	r7, #20
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <PID_controller_calculate_pos>:
void PID_controller_calculate_pos(PID_struct* PID,AMT_Encoder* Feedback, float setpoint)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	ed87 0a01 	vstr	s0, [r7, #4]
 // Output velocity in boundary of 550mm/s
 PID->Error[n] = setpoint - Feedback->Linear_Position;
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8002b7c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002b80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	edc3 7a03 	vstr	s15, [r3, #12]
 if (!((PID->out >= 550 && PID->Error[n] > 0) || (PID->out <= -550 && PID->Error[n] < 0))) {
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b90:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8002ccc <PID_controller_calculate_pos+0x164>
 8002b94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b9c:	bfac      	ite	ge
 8002b9e:	2301      	movge	r3, #1
 8002ba0:	2300      	movlt	r3, #0
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	f083 0301 	eor.w	r3, r3, #1
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10f      	bne.n	8002bce <PID_controller_calculate_pos+0x66>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	edd3 7a03 	vldr	s15, [r3, #12]
 8002bb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bbc:	bfcc      	ite	gt
 8002bbe:	2301      	movgt	r3, #1
 8002bc0:	2300      	movle	r3, #0
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	f083 0301 	eor.w	r3, r3, #1
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d056      	beq.n	8002c7c <PID_controller_calculate_pos+0x114>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	edd3 7a06 	vldr	s15, [r3, #24]
 8002bd4:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8002cd0 <PID_controller_calculate_pos+0x168>
 8002bd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be0:	bf94      	ite	ls
 8002be2:	2301      	movls	r3, #1
 8002be4:	2300      	movhi	r3, #0
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	f083 0301 	eor.w	r3, r3, #1
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10f      	bne.n	8002c12 <PID_controller_calculate_pos+0xaa>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	edd3 7a03 	vldr	s15, [r3, #12]
 8002bf8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c00:	bf4c      	ite	mi
 8002c02:	2301      	movmi	r3, #1
 8002c04:	2300      	movpl	r3, #0
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	f083 0301 	eor.w	r3, r3, #1
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d034      	beq.n	8002c7c <PID_controller_calculate_pos+0x114>
     PID->out += ((PID->Kp + PID->Ki + PID->Kd) * PID->Error[n])
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	ed93 7a06 	vldr	s14, [r3, #24]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	edd3 6a00 	vldr	s13, [r3]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c24:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c2e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c38:	ee66 6aa7 	vmul.f32	s13, s13, s15
                      - ((PID->Kp + (2 * PID->Kd)) * PID->Error[n_1])
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	ed93 6a00 	vldr	s12, [r3]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c48:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002c4c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c56:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002c5a:	ee76 6ae7 	vsub.f32	s13, s13, s15
                      + (PID->Kd * PID->Error[n_2]);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	ed93 6a02 	vldr	s12, [r3, #8]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	edd3 7a05 	vldr	s15, [r3, #20]
 8002c6a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
     PID->out += ((PID->Kp + PID->Ki + PID->Kd) * PID->Error[n])
 8002c72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	edc3 7a06 	vstr	s15, [r3, #24]
 }
 if(PID->out > 550){
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c82:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002ccc <PID_controller_calculate_pos+0x164>
 8002c86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c8e:	dd02      	ble.n	8002c96 <PID_controller_calculate_pos+0x12e>
	 PID->out = 550;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4a10      	ldr	r2, [pc, #64]	@ (8002cd4 <PID_controller_calculate_pos+0x16c>)
 8002c94:	619a      	str	r2, [r3, #24]
 }
 if(PID->out < -550){
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c9c:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8002cd0 <PID_controller_calculate_pos+0x168>
 8002ca0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca8:	d502      	bpl.n	8002cb0 <PID_controller_calculate_pos+0x148>
	 PID->out = -550;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	4a0a      	ldr	r2, [pc, #40]	@ (8002cd8 <PID_controller_calculate_pos+0x170>)
 8002cae:	619a      	str	r2, [r3, #24]
 }
 PID->Error[n_2] = PID->Error[n_1];
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	691a      	ldr	r2, [r3, #16]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	615a      	str	r2, [r3, #20]
 PID->Error[n_1] = PID->Error[n];
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	68da      	ldr	r2, [r3, #12]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	611a      	str	r2, [r3, #16]
}
 8002cc0:	bf00      	nop
 8002cc2:	3714      	adds	r7, #20
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	44098000 	.word	0x44098000
 8002cd0:	c4098000 	.word	0xc4098000
 8002cd4:	44098000 	.word	0x44098000
 8002cd8:	c4098000 	.word	0xc4098000

08002cdc <PID_controller_calculate_velo>:

void PID_controller_calculate_velo(PID_struct* PID,AMT_Encoder* Feedback, float setpoint)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	ed87 0a01 	vstr	s0, [r7, #4]
 // Output pwm to drive the motor
 PID->Error[n] = setpoint - Feedback->Linear_Velocity + Traj.currentVelocity;
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002cf0:	ed97 7a01 	vldr	s14, [r7, #4]
 8002cf4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002cf8:	4b54      	ldr	r3, [pc, #336]	@ (8002e4c <PID_controller_calculate_velo+0x170>)
 8002cfa:	edd3 7a03 	vldr	s15, [r3, #12]
 8002cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	edc3 7a03 	vstr	s15, [r3, #12]
 if (!((PID->out >= 1000 && PID->Error[n] > 0) || (PID->out <= -1000 && PID->Error[n] < 0))) {
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	edd3 7a06 	vldr	s15, [r3, #24]
 8002d0e:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8002e50 <PID_controller_calculate_velo+0x174>
 8002d12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d1a:	bfac      	ite	ge
 8002d1c:	2301      	movge	r3, #1
 8002d1e:	2300      	movlt	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	f083 0301 	eor.w	r3, r3, #1
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10f      	bne.n	8002d4c <PID_controller_calculate_velo+0x70>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d3a:	bfcc      	ite	gt
 8002d3c:	2301      	movgt	r3, #1
 8002d3e:	2300      	movle	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	f083 0301 	eor.w	r3, r3, #1
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d056      	beq.n	8002dfa <PID_controller_calculate_velo+0x11e>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002d52:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8002e54 <PID_controller_calculate_velo+0x178>
 8002d56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d5e:	bf94      	ite	ls
 8002d60:	2301      	movls	r3, #1
 8002d62:	2300      	movhi	r3, #0
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	f083 0301 	eor.w	r3, r3, #1
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10f      	bne.n	8002d90 <PID_controller_calculate_velo+0xb4>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d7e:	bf4c      	ite	mi
 8002d80:	2301      	movmi	r3, #1
 8002d82:	2300      	movpl	r3, #0
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	f083 0301 	eor.w	r3, r3, #1
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d034      	beq.n	8002dfa <PID_controller_calculate_velo+0x11e>
     PID->out += ((PID->Kp + PID->Ki + PID->Kd) * PID->Error[n])
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	ed93 7a06 	vldr	s14, [r3, #24]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	edd3 6a00 	vldr	s13, [r3]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002da2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dac:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	edd3 7a03 	vldr	s15, [r3, #12]
 8002db6:	ee66 6aa7 	vmul.f32	s13, s13, s15
                      - ((PID->Kp + (2 * PID->Kd)) * PID->Error[n_1])
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	ed93 6a00 	vldr	s12, [r3]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dc6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002dca:	ee36 6a27 	vadd.f32	s12, s12, s15
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	edd3 7a04 	vldr	s15, [r3, #16]
 8002dd4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002dd8:	ee76 6ae7 	vsub.f32	s13, s13, s15
                      + (PID->Kd * PID->Error[n_2]);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	ed93 6a02 	vldr	s12, [r3, #8]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	edd3 7a05 	vldr	s15, [r3, #20]
 8002de8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002dec:	ee76 7aa7 	vadd.f32	s15, s13, s15
     PID->out += ((PID->Kp + PID->Ki + PID->Kd) * PID->Error[n])
 8002df0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	edc3 7a06 	vstr	s15, [r3, #24]
 }
 if(PID->out > 1000){
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e00:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8002e50 <PID_controller_calculate_velo+0x174>
 8002e04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e0c:	dd02      	ble.n	8002e14 <PID_controller_calculate_velo+0x138>
	 PID->out = 1000;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	4a11      	ldr	r2, [pc, #68]	@ (8002e58 <PID_controller_calculate_velo+0x17c>)
 8002e12:	619a      	str	r2, [r3, #24]
 }
 if(PID->out < -1000){
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e1a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002e54 <PID_controller_calculate_velo+0x178>
 8002e1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e26:	d502      	bpl.n	8002e2e <PID_controller_calculate_velo+0x152>
	 PID->out = -1000;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4a0c      	ldr	r2, [pc, #48]	@ (8002e5c <PID_controller_calculate_velo+0x180>)
 8002e2c:	619a      	str	r2, [r3, #24]
 }
 PID->Error[n_2] = PID->Error[n_1];
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	691a      	ldr	r2, [r3, #16]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	615a      	str	r2, [r3, #20]
 PID->Error[n_1] = PID->Error[n];
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	611a      	str	r2, [r3, #16]
}
 8002e3e:	bf00      	nop
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	200009e0 	.word	0x200009e0
 8002e50:	447a0000 	.word	0x447a0000
 8002e54:	c47a0000 	.word	0xc47a0000
 8002e58:	447a0000 	.word	0x447a0000
 8002e5c:	c47a0000 	.word	0xc47a0000

08002e60 <PID_controller_cascade>:

void PID_controller_cascade(PID_struct* PID_pos, PID_struct* PID_vel, AMT_Encoder* QEI, float setpoint)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
 8002e6c:	ed87 0a00 	vstr	s0, [r7]
	PID_controller_calculate_pos(PID_pos, QEI , setpoint);
 8002e70:	ed97 0a00 	vldr	s0, [r7]
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f7ff fe76 	bl	8002b68 <PID_controller_calculate_pos>
	PID_controller_calculate_velo(PID_vel, QEI, ((PID_pos->out)));
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002e82:	eeb0 0a67 	vmov.f32	s0, s15
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	68b8      	ldr	r0, [r7, #8]
 8002e8a:	f7ff ff27 	bl	8002cdc <PID_controller_calculate_velo>
//	PID_controller_calculate_velo(PID_vel, QEI, Traj.currentVelocity);
}
 8002e8e:	bf00      	nop
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
	...

08002e98 <PS2X_Reader>:
//        handle_PIDPos_adjustment();
//    }
//}

void PS2X_Reader()
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
    static uint32_t timestamp = 0;
    if (timestamp < HAL_GetTick()){
 8002e9e:	f001 fe47 	bl	8004b30 <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	4b61      	ldr	r3, [pc, #388]	@ (800302c <PS2X_Reader+0x194>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d908      	bls.n	8002ebe <PS2X_Reader+0x26>
        timestamp = HAL_GetTick() + 25;
 8002eac:	f001 fe40 	bl	8004b30 <HAL_GetTick>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	3319      	adds	r3, #25
 8002eb4:	4a5d      	ldr	r2, [pc, #372]	@ (800302c <PS2X_Reader+0x194>)
 8002eb6:	6013      	str	r3, [r2, #0]
        ps2.ps2RX[0] = 0;
 8002eb8:	4b5d      	ldr	r3, [pc, #372]	@ (8003030 <PS2X_Reader+0x198>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	701a      	strb	r2, [r3, #0]
    }

    // Clear previous state
    memset(ps2.l, 0, sizeof(ps2.l));
 8002ebe:	2218      	movs	r2, #24
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	485c      	ldr	r0, [pc, #368]	@ (8003034 <PS2X_Reader+0x19c>)
 8002ec4:	f008 fdf0 	bl	800baa8 <memset>
    memset(ps2.r, 0, sizeof(ps2.r));
 8002ec8:	2218      	movs	r2, #24
 8002eca:	2100      	movs	r1, #0
 8002ecc:	485a      	ldr	r0, [pc, #360]	@ (8003038 <PS2X_Reader+0x1a0>)
 8002ece:	f008 fdeb 	bl	800baa8 <memset>

    // Set current state
    if (ps2.ps2RX[0] >= 65 && ps2.ps2RX[0] <= 70) {
 8002ed2:	4b57      	ldr	r3, [pc, #348]	@ (8003030 <PS2X_Reader+0x198>)
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	2b40      	cmp	r3, #64	@ 0x40
 8002ed8:	d90b      	bls.n	8002ef2 <PS2X_Reader+0x5a>
 8002eda:	4b55      	ldr	r3, [pc, #340]	@ (8003030 <PS2X_Reader+0x198>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b46      	cmp	r3, #70	@ 0x46
 8002ee0:	d807      	bhi.n	8002ef2 <PS2X_Reader+0x5a>
        ps2.l[ps2.ps2RX[0] - 65] = 1;
 8002ee2:	4b53      	ldr	r3, [pc, #332]	@ (8003030 <PS2X_Reader+0x198>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	3b41      	subs	r3, #65	@ 0x41
 8002ee8:	4a51      	ldr	r2, [pc, #324]	@ (8003030 <PS2X_Reader+0x198>)
 8002eea:	3314      	adds	r3, #20
 8002eec:	2101      	movs	r1, #1
 8002eee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }
    if (ps2.ps2RX[0] >= 73 && ps2.ps2RX[0] <= 78) {
 8002ef2:	4b4f      	ldr	r3, [pc, #316]	@ (8003030 <PS2X_Reader+0x198>)
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	2b48      	cmp	r3, #72	@ 0x48
 8002ef8:	d90b      	bls.n	8002f12 <PS2X_Reader+0x7a>
 8002efa:	4b4d      	ldr	r3, [pc, #308]	@ (8003030 <PS2X_Reader+0x198>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2b4e      	cmp	r3, #78	@ 0x4e
 8002f00:	d807      	bhi.n	8002f12 <PS2X_Reader+0x7a>
        ps2.r[ps2.ps2RX[0] - 73] = 1;
 8002f02:	4b4b      	ldr	r3, [pc, #300]	@ (8003030 <PS2X_Reader+0x198>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	3b49      	subs	r3, #73	@ 0x49
 8002f08:	4a49      	ldr	r2, [pc, #292]	@ (8003030 <PS2X_Reader+0x198>)
 8002f0a:	330e      	adds	r3, #14
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    }

    switch(ps2.ps2RX[0]) {
 8002f12:	4b47      	ldr	r3, [pc, #284]	@ (8003030 <PS2X_Reader+0x198>)
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	2b45      	cmp	r3, #69	@ 0x45
 8002f18:	d002      	beq.n	8002f20 <PS2X_Reader+0x88>
 8002f1a:	2b46      	cmp	r3, #70	@ 0x46
 8002f1c:	d007      	beq.n	8002f2e <PS2X_Reader+0x96>
 8002f1e:	e015      	b.n	8002f4c <PS2X_Reader+0xb4>
        case 69: // Press L4 to switch to use Joystick
            ps2.mode = 1;
 8002f20:	4b43      	ldr	r3, [pc, #268]	@ (8003030 <PS2X_Reader+0x198>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	66da      	str	r2, [r3, #108]	@ 0x6c
            ps2.on = 0;
 8002f26:	4b42      	ldr	r3, [pc, #264]	@ (8003030 <PS2X_Reader+0x198>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	67da      	str	r2, [r3, #124]	@ 0x7c
            break;
 8002f2c:	e00e      	b.n	8002f4c <PS2X_Reader+0xb4>
        case 70: // Press L5 to switch to use Button
            ps2.mode = 2;
 8002f2e:	4b40      	ldr	r3, [pc, #256]	@ (8003030 <PS2X_Reader+0x198>)
 8002f30:	2202      	movs	r2, #2
 8002f32:	66da      	str	r2, [r3, #108]	@ 0x6c
            PID_velo.out = 0;
 8002f34:	4b41      	ldr	r3, [pc, #260]	@ (800303c <PS2X_Reader+0x1a4>)
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	619a      	str	r2, [r3, #24]
            ps2.on = 1;
 8002f3c:	4b3c      	ldr	r3, [pc, #240]	@ (8003030 <PS2X_Reader+0x198>)
 8002f3e:	2201      	movs	r2, #1
 8002f40:	67da      	str	r2, [r3, #124]	@ 0x7c
            ps2.PIDPos = AMT.Linear_Position;
 8002f42:	4b3f      	ldr	r3, [pc, #252]	@ (8003040 <PS2X_Reader+0x1a8>)
 8002f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f46:	4a3a      	ldr	r2, [pc, #232]	@ (8003030 <PS2X_Reader+0x198>)
 8002f48:	6793      	str	r3, [r2, #120]	@ 0x78
            break;
 8002f4a:	bf00      	nop
    }

    if (ps2.mode == 1) {
 8002f4c:	4b38      	ldr	r3, [pc, #224]	@ (8003030 <PS2X_Reader+0x198>)
 8002f4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d148      	bne.n	8002fe6 <PS2X_Reader+0x14e>
        static uint32_t debounce_time = 0;
        uint32_t current_time = HAL_GetTick();
 8002f54:	f001 fdec 	bl	8004b30 <HAL_GetTick>
 8002f58:	6078      	str	r0, [r7, #4]
        if (current_time > debounce_time) {
 8002f5a:	4b3a      	ldr	r3, [pc, #232]	@ (8003044 <PS2X_Reader+0x1ac>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d95e      	bls.n	8003022 <PS2X_Reader+0x18a>
            if (ps2.l[0] == 1) {
 8002f64:	4b32      	ldr	r3, [pc, #200]	@ (8003030 <PS2X_Reader+0x198>)
 8002f66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d108      	bne.n	8002f7e <PS2X_Reader+0xe6>
                ps2.pwmOut = 400; 								// Press button /\ Increase ps2.pwmOut
 8002f6c:	4b30      	ldr	r3, [pc, #192]	@ (8003030 <PS2X_Reader+0x198>)
 8002f6e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002f72:	669a      	str	r2, [r3, #104]	@ 0x68
                debounce_time = current_time + 250;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	33fa      	adds	r3, #250	@ 0xfa
 8002f78:	4a32      	ldr	r2, [pc, #200]	@ (8003044 <PS2X_Reader+0x1ac>)
 8002f7a:	6013      	str	r3, [r2, #0]
 8002f7c:	e00e      	b.n	8002f9c <PS2X_Reader+0x104>
            } else if (ps2.l[1] == 1) {
 8002f7e:	4b2c      	ldr	r3, [pc, #176]	@ (8003030 <PS2X_Reader+0x198>)
 8002f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d107      	bne.n	8002f96 <PS2X_Reader+0xfe>
                ps2.pwmOut = 20; 								// Press button \/ Decrease ps2.pwmOut
 8002f86:	4b2a      	ldr	r3, [pc, #168]	@ (8003030 <PS2X_Reader+0x198>)
 8002f88:	2214      	movs	r2, #20
 8002f8a:	669a      	str	r2, [r3, #104]	@ 0x68
                debounce_time = current_time + 250;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	33fa      	adds	r3, #250	@ 0xfa
 8002f90:	4a2c      	ldr	r2, [pc, #176]	@ (8003044 <PS2X_Reader+0x1ac>)
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	e002      	b.n	8002f9c <PS2X_Reader+0x104>
            } else {
                ps2.pwmOut = 200; 								// Holding position with pwm
 8002f96:	4b26      	ldr	r3, [pc, #152]	@ (8003030 <PS2X_Reader+0x198>)
 8002f98:	22c8      	movs	r2, #200	@ 0xc8
 8002f9a:	669a      	str	r2, [r3, #104]	@ 0x68
            }

            switch(ps2.ps2RX[0]) {
 8002f9c:	4b24      	ldr	r3, [pc, #144]	@ (8003030 <PS2X_Reader+0x198>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b4a      	cmp	r3, #74	@ 0x4a
 8002fa2:	d002      	beq.n	8002faa <PS2X_Reader+0x112>
 8002fa4:	2b4b      	cmp	r3, #75	@ 0x4b
 8002fa6:	d00f      	beq.n	8002fc8 <PS2X_Reader+0x130>
        }

        handle_shelve_mode();
        handle_PIDPos_adjustment();
    }
}
 8002fa8:	e03b      	b.n	8003022 <PS2X_Reader+0x18a>
                    x_pos += 1;
 8002faa:	4b27      	ldr	r3, [pc, #156]	@ (8003048 <PS2X_Reader+0x1b0>)
 8002fac:	edd3 7a00 	vldr	s15, [r3]
 8002fb0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002fb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fb8:	4b23      	ldr	r3, [pc, #140]	@ (8003048 <PS2X_Reader+0x1b0>)
 8002fba:	edc3 7a00 	vstr	s15, [r3]
                    debounce_time = current_time + 250;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	33fa      	adds	r3, #250	@ 0xfa
 8002fc2:	4a20      	ldr	r2, [pc, #128]	@ (8003044 <PS2X_Reader+0x1ac>)
 8002fc4:	6013      	str	r3, [r2, #0]
                    break;
 8002fc6:	e02c      	b.n	8003022 <PS2X_Reader+0x18a>
                    x_pos -= 1;
 8002fc8:	4b1f      	ldr	r3, [pc, #124]	@ (8003048 <PS2X_Reader+0x1b0>)
 8002fca:	edd3 7a00 	vldr	s15, [r3]
 8002fce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002fd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8003048 <PS2X_Reader+0x1b0>)
 8002fd8:	edc3 7a00 	vstr	s15, [r3]
                    debounce_time = current_time + 250;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	33fa      	adds	r3, #250	@ 0xfa
 8002fe0:	4a18      	ldr	r2, [pc, #96]	@ (8003044 <PS2X_Reader+0x1ac>)
 8002fe2:	6013      	str	r3, [r2, #0]
                    break;
 8002fe4:	e01d      	b.n	8003022 <PS2X_Reader+0x18a>
    } else if (ps2.mode == 2) {
 8002fe6:	4b12      	ldr	r3, [pc, #72]	@ (8003030 <PS2X_Reader+0x198>)
 8002fe8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d119      	bne.n	8003022 <PS2X_Reader+0x18a>
        ps2.on = 1;
 8002fee:	4b10      	ldr	r3, [pc, #64]	@ (8003030 <PS2X_Reader+0x198>)
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	67da      	str	r2, [r3, #124]	@ 0x7c
        ps2.ps2Y = 0;
 8002ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8003030 <PS2X_Reader+0x198>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	61da      	str	r2, [r3, #28]
        if (ps2.ps2RX[0] == 67) {
 8002ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8003030 <PS2X_Reader+0x198>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	2b43      	cmp	r3, #67	@ 0x43
 8003000:	d103      	bne.n	800300a <PS2X_Reader+0x172>
            ps2.l[2] = 1;
 8003002:	4b0b      	ldr	r3, [pc, #44]	@ (8003030 <PS2X_Reader+0x198>)
 8003004:	2201      	movs	r2, #1
 8003006:	659a      	str	r2, [r3, #88]	@ 0x58
 8003008:	e006      	b.n	8003018 <PS2X_Reader+0x180>
        } else if (ps2.ps2RX[0] == 68) {
 800300a:	4b09      	ldr	r3, [pc, #36]	@ (8003030 <PS2X_Reader+0x198>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b44      	cmp	r3, #68	@ 0x44
 8003010:	d102      	bne.n	8003018 <PS2X_Reader+0x180>
            ps2.l[3] = 1;
 8003012:	4b07      	ldr	r3, [pc, #28]	@ (8003030 <PS2X_Reader+0x198>)
 8003014:	2201      	movs	r2, #1
 8003016:	65da      	str	r2, [r3, #92]	@ 0x5c
        handle_shelve_mode();
 8003018:	f000 f818 	bl	800304c <handle_shelve_mode>
        handle_PIDPos_adjustment();
 800301c:	f000 f882 	bl	8003124 <handle_PIDPos_adjustment>
}
 8003020:	e7ff      	b.n	8003022 <PS2X_Reader+0x18a>
 8003022:	bf00      	nop
 8003024:	3708      	adds	r7, #8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	200002d4 	.word	0x200002d4
 8003030:	20000a48 	.word	0x20000a48
 8003034:	20000a98 	.word	0x20000a98
 8003038:	20000a80 	.word	0x20000a80
 800303c:	20000ae4 	.word	0x20000ae4
 8003040:	200009f8 	.word	0x200009f8
 8003044:	200002d8 	.word	0x200002d8
 8003048:	200002d0 	.word	0x200002d0

0800304c <handle_shelve_mode>:


void handle_shelve_mode()
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
    static uint32_t debounce_time = 0;
    uint32_t current_time = HAL_GetTick();
 8003052:	f001 fd6d 	bl	8004b30 <HAL_GetTick>
 8003056:	6078      	str	r0, [r7, #4]
    if (base.ShelveMode == 1)
 8003058:	4b2b      	ldr	r3, [pc, #172]	@ (8003108 <handle_shelve_mode+0xbc>)
 800305a:	8b1b      	ldrh	r3, [r3, #24]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d14e      	bne.n	80030fe <handle_shelve_mode+0xb2>
    {
        if (ps2.ps2RX[0] == 76 && current_time > debounce_time)
 8003060:	4b2a      	ldr	r3, [pc, #168]	@ (800310c <handle_shelve_mode+0xc0>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b4c      	cmp	r3, #76	@ 0x4c
 8003066:	d118      	bne.n	800309a <handle_shelve_mode+0x4e>
 8003068:	4b29      	ldr	r3, [pc, #164]	@ (8003110 <handle_shelve_mode+0xc4>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	429a      	cmp	r2, r3
 8003070:	d913      	bls.n	800309a <handle_shelve_mode+0x4e>
        {
            // Press Circle to save shelve
            base.Shelve[count] = AMT.Linear_Position;
 8003072:	4b28      	ldr	r3, [pc, #160]	@ (8003114 <handle_shelve_mode+0xc8>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a28      	ldr	r2, [pc, #160]	@ (8003118 <handle_shelve_mode+0xcc>)
 8003078:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800307a:	4923      	ldr	r1, [pc, #140]	@ (8003108 <handle_shelve_mode+0xbc>)
 800307c:	3306      	adds	r3, #6
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	3304      	adds	r3, #4
 8003084:	601a      	str	r2, [r3, #0]
            count += 1;
 8003086:	4b23      	ldr	r3, [pc, #140]	@ (8003114 <handle_shelve_mode+0xc8>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	3301      	adds	r3, #1
 800308c:	4a21      	ldr	r2, [pc, #132]	@ (8003114 <handle_shelve_mode+0xc8>)
 800308e:	6013      	str	r3, [r2, #0]
            debounce_time = current_time + 250; // Debounce delay of 250ms
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	33fa      	adds	r3, #250	@ 0xfa
 8003094:	4a1e      	ldr	r2, [pc, #120]	@ (8003110 <handle_shelve_mode+0xc4>)
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	e031      	b.n	80030fe <handle_shelve_mode+0xb2>
        }
        else if (ps2.ps2RX[0] == 73 && current_time > debounce_time)
 800309a:	4b1c      	ldr	r3, [pc, #112]	@ (800310c <handle_shelve_mode+0xc0>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	2b49      	cmp	r3, #73	@ 0x49
 80030a0:	d119      	bne.n	80030d6 <handle_shelve_mode+0x8a>
 80030a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003110 <handle_shelve_mode+0xc4>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d914      	bls.n	80030d6 <handle_shelve_mode+0x8a>
        {
            // Press Triangle to delete old array
            base.Shelve[count - 1] = 0;
 80030ac:	4b19      	ldr	r3, [pc, #100]	@ (8003114 <handle_shelve_mode+0xc8>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	3b01      	subs	r3, #1
 80030b2:	4a15      	ldr	r2, [pc, #84]	@ (8003108 <handle_shelve_mode+0xbc>)
 80030b4:	3306      	adds	r3, #6
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	3304      	adds	r3, #4
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	601a      	str	r2, [r3, #0]
            count -= 1;
 80030c2:	4b14      	ldr	r3, [pc, #80]	@ (8003114 <handle_shelve_mode+0xc8>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	3b01      	subs	r3, #1
 80030c8:	4a12      	ldr	r2, [pc, #72]	@ (8003114 <handle_shelve_mode+0xc8>)
 80030ca:	6013      	str	r3, [r2, #0]
            debounce_time = current_time + 250; // Debounce delay of 250ms
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	33fa      	adds	r3, #250	@ 0xfa
 80030d0:	4a0f      	ldr	r2, [pc, #60]	@ (8003110 <handle_shelve_mode+0xc4>)
 80030d2:	6013      	str	r3, [r2, #0]
 80030d4:	e013      	b.n	80030fe <handle_shelve_mode+0xb2>
        }
        else if (ps2.ps2RX[0] == 72 && base.ShelveMode == 1)
 80030d6:	4b0d      	ldr	r3, [pc, #52]	@ (800310c <handle_shelve_mode+0xc0>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b48      	cmp	r3, #72	@ 0x48
 80030dc:	d10f      	bne.n	80030fe <handle_shelve_mode+0xb2>
 80030de:	4b0a      	ldr	r3, [pc, #40]	@ (8003108 <handle_shelve_mode+0xbc>)
 80030e0:	8b1b      	ldrh	r3, [r3, #24]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d10b      	bne.n	80030fe <handle_shelve_mode+0xb2>
        {
            // Press Start to finish set shelves and send data to basesystem
            base.ShelveMode = 0;
 80030e6:	4b08      	ldr	r3, [pc, #32]	@ (8003108 <handle_shelve_mode+0xbc>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	831a      	strh	r2, [r3, #24]
            Traj.currentPosition = AMT.Linear_Position;
 80030ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003118 <handle_shelve_mode+0xcc>)
 80030ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f0:	4a0a      	ldr	r2, [pc, #40]	@ (800311c <handle_shelve_mode+0xd0>)
 80030f2:	6093      	str	r3, [r2, #8]
            temp_pos = AMT.Linear_Position;
 80030f4:	4b08      	ldr	r3, [pc, #32]	@ (8003118 <handle_shelve_mode+0xcc>)
 80030f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f8:	4a09      	ldr	r2, [pc, #36]	@ (8003120 <handle_shelve_mode+0xd4>)
 80030fa:	6013      	str	r3, [r2, #0]

        }
    }
}
 80030fc:	e7ff      	b.n	80030fe <handle_shelve_mode+0xb2>
 80030fe:	bf00      	nop
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20000b00 	.word	0x20000b00
 800310c:	20000a48 	.word	0x20000a48
 8003110:	200002dc 	.word	0x200002dc
 8003114:	200002cc 	.word	0x200002cc
 8003118:	200009f8 	.word	0x200009f8
 800311c:	200009e0 	.word	0x200009e0
 8003120:	20000298 	.word	0x20000298

08003124 <handle_PIDPos_adjustment>:

void handle_PIDPos_adjustment()
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
    static uint32_t debounce_time = 0;
    uint32_t current_time = HAL_GetTick();
 800312a:	f001 fd01 	bl	8004b30 <HAL_GetTick>
 800312e:	6078      	str	r0, [r7, #4]

    if (current_time > debounce_time)
 8003130:	4b16      	ldr	r3, [pc, #88]	@ (800318c <handle_PIDPos_adjustment+0x68>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	429a      	cmp	r2, r3
 8003138:	d924      	bls.n	8003184 <handle_PIDPos_adjustment+0x60>
    {
        if (ps2.l[2] == 1)
 800313a:	4b15      	ldr	r3, [pc, #84]	@ (8003190 <handle_PIDPos_adjustment+0x6c>)
 800313c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800313e:	2b01      	cmp	r3, #1
 8003140:	d10e      	bne.n	8003160 <handle_PIDPos_adjustment+0x3c>
        {
            // Press button < Increase ps2.PIDPos
            ps2.PIDPos += 0.5;
 8003142:	4b13      	ldr	r3, [pc, #76]	@ (8003190 <handle_PIDPos_adjustment+0x6c>)
 8003144:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 8003148:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800314c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003150:	4b0f      	ldr	r3, [pc, #60]	@ (8003190 <handle_PIDPos_adjustment+0x6c>)
 8003152:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
            debounce_time = current_time + 250; // Debounce delay of 250ms
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	33fa      	adds	r3, #250	@ 0xfa
 800315a:	4a0c      	ldr	r2, [pc, #48]	@ (800318c <handle_PIDPos_adjustment+0x68>)
 800315c:	6013      	str	r3, [r2, #0]
            // Press button > Decrease ps2.PIDPos
            ps2.PIDPos -= 0.5;
            debounce_time = current_time + 250; // Debounce delay of 250ms
        }
    }
}
 800315e:	e011      	b.n	8003184 <handle_PIDPos_adjustment+0x60>
        else if (ps2.l[3] == 1)
 8003160:	4b0b      	ldr	r3, [pc, #44]	@ (8003190 <handle_PIDPos_adjustment+0x6c>)
 8003162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003164:	2b01      	cmp	r3, #1
 8003166:	d10d      	bne.n	8003184 <handle_PIDPos_adjustment+0x60>
            ps2.PIDPos -= 0.5;
 8003168:	4b09      	ldr	r3, [pc, #36]	@ (8003190 <handle_PIDPos_adjustment+0x6c>)
 800316a:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 800316e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003172:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003176:	4b06      	ldr	r3, [pc, #24]	@ (8003190 <handle_PIDPos_adjustment+0x6c>)
 8003178:	edc3 7a1e 	vstr	s15, [r3, #120]	@ 0x78
            debounce_time = current_time + 250; // Debounce delay of 250ms
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	33fa      	adds	r3, #250	@ 0xfa
 8003180:	4a02      	ldr	r2, [pc, #8]	@ (800318c <handle_PIDPos_adjustment+0x68>)
 8003182:	6013      	str	r3, [r2, #0]
}
 8003184:	bf00      	nop
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	200002e0 	.word	0x200002e0
 8003190:	20000a48 	.word	0x20000a48

08003194 <Traject_init>:
static float Time_acc_under;

//-------------------------------------------Function Code-------------------------------------------------------//

void Traject_init(Trap_Traj* Traj, float v_max, float a_max)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	ed87 0a02 	vstr	s0, [r7, #8]
 80031a0:	edc7 0a01 	vstr	s1, [r7, #4]
	Traj->Velo_max = v_max;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	601a      	str	r2, [r3, #0]
	Traj->Accel_max = a_max;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	605a      	str	r2, [r3, #4]

	Traj->currentAcceleration = 0;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f04f 0200 	mov.w	r2, #0
 80031b6:	611a      	str	r2, [r3, #16]
	Traj->currentVelocity = 0;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f04f 0200 	mov.w	r2, #0
 80031be:	60da      	str	r2, [r3, #12]
	Traj->currentPosition = 0;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f04f 0200 	mov.w	r2, #0
 80031c6:	609a      	str	r2, [r3, #8]
}
 80031c8:	bf00      	nop
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <Traject>:

void Traject(Trap_Traj* Traj, float Pos_initial, float Pos_final)
{
 80031d4:	b5b0      	push	{r4, r5, r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	ed87 0a02 	vstr	s0, [r7, #8]
 80031e0:	edc7 0a01 	vstr	s1, [r7, #4]

	Distance = Pos_final - Pos_initial;
 80031e4:	ed97 7a01 	vldr	s14, [r7, #4]
 80031e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80031ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031f0:	4ba2      	ldr	r3, [pc, #648]	@ (800347c <Traject+0x2a8>)
 80031f2:	edc3 7a00 	vstr	s15, [r3]
	Time_acc = Traj->Velo_max / Traj->Accel_max;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	edd3 6a00 	vldr	s13, [r3]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	ed93 7a01 	vldr	s14, [r3, #4]
 8003202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003206:	4b9e      	ldr	r3, [pc, #632]	@ (8003480 <Traject+0x2ac>)
 8003208:	edc3 7a00 	vstr	s15, [r3]
	Time_dec = Time_acc;
 800320c:	4b9c      	ldr	r3, [pc, #624]	@ (8003480 <Traject+0x2ac>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a9c      	ldr	r2, [pc, #624]	@ (8003484 <Traject+0x2b0>)
 8003212:	6013      	str	r3, [r2, #0]

	if (Distance >0)
 8003214:	4b99      	ldr	r3, [pc, #612]	@ (800347c <Traject+0x2a8>)
 8003216:	edd3 7a00 	vldr	s15, [r3]
 800321a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800321e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003222:	dd08      	ble.n	8003236 <Traject+0x62>
	{
	  Acc_max = Traj->Accel_max;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	4a97      	ldr	r2, [pc, #604]	@ (8003488 <Traject+0x2b4>)
 800322a:	6013      	str	r3, [r2, #0]
	  Vel_max = Traj->Velo_max;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a96      	ldr	r2, [pc, #600]	@ (800348c <Traject+0x2b8>)
 8003232:	6013      	str	r3, [r2, #0]
 8003234:	e024      	b.n	8003280 <Traject+0xac>

	}
	else if(Distance < 0)
 8003236:	4b91      	ldr	r3, [pc, #580]	@ (800347c <Traject+0x2a8>)
 8003238:	edd3 7a00 	vldr	s15, [r3]
 800323c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003244:	d510      	bpl.n	8003268 <Traject+0x94>
	{
	  Acc_max = -Traj->Accel_max;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	edd3 7a01 	vldr	s15, [r3, #4]
 800324c:	eef1 7a67 	vneg.f32	s15, s15
 8003250:	4b8d      	ldr	r3, [pc, #564]	@ (8003488 <Traject+0x2b4>)
 8003252:	edc3 7a00 	vstr	s15, [r3]
	  Vel_max = -Traj->Velo_max;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	edd3 7a00 	vldr	s15, [r3]
 800325c:	eef1 7a67 	vneg.f32	s15, s15
 8003260:	4b8a      	ldr	r3, [pc, #552]	@ (800348c <Traject+0x2b8>)
 8003262:	edc3 7a00 	vstr	s15, [r3]
 8003266:	e00b      	b.n	8003280 <Traject+0xac>

	}
	else
	{
	  // No movement required
	  Traj->currentAcceleration = 0;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f04f 0200 	mov.w	r2, #0
 800326e:	611a      	str	r2, [r3, #16]
	  Traj->currentVelocity = 0;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	60da      	str	r2, [r3, #12]
	  Traj->currentPosition = Pos_initial;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	609a      	str	r2, [r3, #8]
	  return;
 800327e:	e1f9      	b.n	8003674 <Traject+0x4a0>
	}

	Distance_Velo_Max = Distance - (Vel_max * Time_acc);
 8003280:	4b7e      	ldr	r3, [pc, #504]	@ (800347c <Traject+0x2a8>)
 8003282:	ed93 7a00 	vldr	s14, [r3]
 8003286:	4b81      	ldr	r3, [pc, #516]	@ (800348c <Traject+0x2b8>)
 8003288:	edd3 6a00 	vldr	s13, [r3]
 800328c:	4b7c      	ldr	r3, [pc, #496]	@ (8003480 <Traject+0x2ac>)
 800328e:	edd3 7a00 	vldr	s15, [r3]
 8003292:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003296:	ee77 7a67 	vsub.f32	s15, s14, s15
 800329a:	4b7d      	ldr	r3, [pc, #500]	@ (8003490 <Traject+0x2bc>)
 800329c:	edc3 7a00 	vstr	s15, [r3]
	Time_Velo_const = Distance_Velo_Max / Vel_max;
 80032a0:	4b7b      	ldr	r3, [pc, #492]	@ (8003490 <Traject+0x2bc>)
 80032a2:	edd3 6a00 	vldr	s13, [r3]
 80032a6:	4b79      	ldr	r3, [pc, #484]	@ (800348c <Traject+0x2b8>)
 80032a8:	ed93 7a00 	vldr	s14, [r3]
 80032ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032b0:	4b78      	ldr	r3, [pc, #480]	@ (8003494 <Traject+0x2c0>)
 80032b2:	edc3 7a00 	vstr	s15, [r3]

	// Update trajectory phase
	time_ref1 = Time_acc + Time_Velo_const;
 80032b6:	4b72      	ldr	r3, [pc, #456]	@ (8003480 <Traject+0x2ac>)
 80032b8:	ed93 7a00 	vldr	s14, [r3]
 80032bc:	4b75      	ldr	r3, [pc, #468]	@ (8003494 <Traject+0x2c0>)
 80032be:	edd3 7a00 	vldr	s15, [r3]
 80032c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c6:	4b74      	ldr	r3, [pc, #464]	@ (8003498 <Traject+0x2c4>)
 80032c8:	edc3 7a00 	vstr	s15, [r3]
	time_ref2 = time_ref1 + Time_dec;
 80032cc:	4b72      	ldr	r3, [pc, #456]	@ (8003498 <Traject+0x2c4>)
 80032ce:	ed93 7a00 	vldr	s14, [r3]
 80032d2:	4b6c      	ldr	r3, [pc, #432]	@ (8003484 <Traject+0x2b0>)
 80032d4:	edd3 7a00 	vldr	s15, [r3]
 80032d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032dc:	4b6f      	ldr	r3, [pc, #444]	@ (800349c <Traject+0x2c8>)
 80032de:	edc3 7a00 	vstr	s15, [r3]

	if(Time_Velo_const >0)
 80032e2:	4b6c      	ldr	r3, [pc, #432]	@ (8003494 <Traject+0x2c0>)
 80032e4:	edd3 7a00 	vldr	s15, [r3]
 80032e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032f0:	f340 80e7 	ble.w	80034c2 <Traject+0x2ee>
	{
	  if (elapsedTime < Time_acc)
 80032f4:	4b6a      	ldr	r3, [pc, #424]	@ (80034a0 <Traject+0x2cc>)
 80032f6:	ed93 7a00 	vldr	s14, [r3]
 80032fa:	4b61      	ldr	r3, [pc, #388]	@ (8003480 <Traject+0x2ac>)
 80032fc:	edd3 7a00 	vldr	s15, [r3]
 8003300:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003308:	d52f      	bpl.n	800336a <Traject+0x196>
	  {
		  // Acceleration phase
		  Traj->currentAcceleration = Acc_max;
 800330a:	4b5f      	ldr	r3, [pc, #380]	@ (8003488 <Traject+0x2b4>)
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	611a      	str	r2, [r3, #16]
		  Traj->currentVelocity = Acc_max * elapsedTime;
 8003312:	4b5d      	ldr	r3, [pc, #372]	@ (8003488 <Traject+0x2b4>)
 8003314:	ed93 7a00 	vldr	s14, [r3]
 8003318:	4b61      	ldr	r3, [pc, #388]	@ (80034a0 <Traject+0x2cc>)
 800331a:	edd3 7a00 	vldr	s15, [r3]
 800331e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	edc3 7a03 	vstr	s15, [r3, #12]
		  Traj->currentPosition = 0.5f * Acc_max * elapsedTime * elapsedTime + Pos_initial;
 8003328:	4b57      	ldr	r3, [pc, #348]	@ (8003488 <Traject+0x2b4>)
 800332a:	edd3 7a00 	vldr	s15, [r3]
 800332e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003332:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003336:	4b5a      	ldr	r3, [pc, #360]	@ (80034a0 <Traject+0x2cc>)
 8003338:	edd3 7a00 	vldr	s15, [r3]
 800333c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003340:	4b57      	ldr	r3, [pc, #348]	@ (80034a0 <Traject+0x2cc>)
 8003342:	edd3 7a00 	vldr	s15, [r3]
 8003346:	ee27 7a27 	vmul.f32	s14, s14, s15
 800334a:	edd7 7a02 	vldr	s15, [r7, #8]
 800334e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	edc3 7a02 	vstr	s15, [r3, #8]
		  temp_pos_acc = Traj->currentPosition;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	4a51      	ldr	r2, [pc, #324]	@ (80034a4 <Traject+0x2d0>)
 800335e:	6013      	str	r3, [r2, #0]
		  temp_pos_const = Traj->currentPosition;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	4a50      	ldr	r2, [pc, #320]	@ (80034a8 <Traject+0x2d4>)
 8003366:	6013      	str	r3, [r2, #0]
 8003368:	e0ab      	b.n	80034c2 <Traject+0x2ee>
	  }
	  else if (elapsedTime < time_ref1)
 800336a:	4b4d      	ldr	r3, [pc, #308]	@ (80034a0 <Traject+0x2cc>)
 800336c:	ed93 7a00 	vldr	s14, [r3]
 8003370:	4b49      	ldr	r3, [pc, #292]	@ (8003498 <Traject+0x2c4>)
 8003372:	edd3 7a00 	vldr	s15, [r3]
 8003376:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800337a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800337e:	d521      	bpl.n	80033c4 <Traject+0x1f0>
	  {
		  // Constant velocity phase
		  Traj->currentAcceleration = 0;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	611a      	str	r2, [r3, #16]
		  Traj->currentVelocity = Vel_max;
 8003388:	4b40      	ldr	r3, [pc, #256]	@ (800348c <Traject+0x2b8>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	60da      	str	r2, [r3, #12]
		  Traj->currentPosition = (Vel_max * (elapsedTime-Time_acc)) + temp_pos_acc;
 8003390:	4b43      	ldr	r3, [pc, #268]	@ (80034a0 <Traject+0x2cc>)
 8003392:	ed93 7a00 	vldr	s14, [r3]
 8003396:	4b3a      	ldr	r3, [pc, #232]	@ (8003480 <Traject+0x2ac>)
 8003398:	edd3 7a00 	vldr	s15, [r3]
 800339c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033a0:	4b3a      	ldr	r3, [pc, #232]	@ (800348c <Traject+0x2b8>)
 80033a2:	edd3 7a00 	vldr	s15, [r3]
 80033a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033aa:	4b3e      	ldr	r3, [pc, #248]	@ (80034a4 <Traject+0x2d0>)
 80033ac:	edd3 7a00 	vldr	s15, [r3]
 80033b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	edc3 7a02 	vstr	s15, [r3, #8]
		  temp_pos_const = Traj->currentPosition;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	4a3a      	ldr	r2, [pc, #232]	@ (80034a8 <Traject+0x2d4>)
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	e07e      	b.n	80034c2 <Traject+0x2ee>
	  }
	  else if (elapsedTime < time_ref2)
 80033c4:	4b36      	ldr	r3, [pc, #216]	@ (80034a0 <Traject+0x2cc>)
 80033c6:	ed93 7a00 	vldr	s14, [r3]
 80033ca:	4b34      	ldr	r3, [pc, #208]	@ (800349c <Traject+0x2c8>)
 80033cc:	edd3 7a00 	vldr	s15, [r3]
 80033d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d8:	d568      	bpl.n	80034ac <Traject+0x2d8>
	  {
		  // Deceleration phase
		  Traj->currentAcceleration = -Acc_max;
 80033da:	4b2b      	ldr	r3, [pc, #172]	@ (8003488 <Traject+0x2b4>)
 80033dc:	edd3 7a00 	vldr	s15, [r3]
 80033e0:	eef1 7a67 	vneg.f32	s15, s15
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	edc3 7a04 	vstr	s15, [r3, #16]
		  Traj->currentVelocity = -(Acc_max * (elapsedTime-time_ref1)) + Vel_max;
 80033ea:	4b28      	ldr	r3, [pc, #160]	@ (800348c <Traject+0x2b8>)
 80033ec:	ed93 7a00 	vldr	s14, [r3]
 80033f0:	4b2b      	ldr	r3, [pc, #172]	@ (80034a0 <Traject+0x2cc>)
 80033f2:	edd3 6a00 	vldr	s13, [r3]
 80033f6:	4b28      	ldr	r3, [pc, #160]	@ (8003498 <Traject+0x2c4>)
 80033f8:	edd3 7a00 	vldr	s15, [r3]
 80033fc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003400:	4b21      	ldr	r3, [pc, #132]	@ (8003488 <Traject+0x2b4>)
 8003402:	edd3 7a00 	vldr	s15, [r3]
 8003406:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800340a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	edc3 7a03 	vstr	s15, [r3, #12]
		  Traj->currentPosition = Traj->currentVelocity*(elapsedTime-time_ref1)+(0.5f*Acc_max*(elapsedTime-time_ref1)*(elapsedTime-time_ref1))+temp_pos_const ;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	ed93 7a03 	vldr	s14, [r3, #12]
 800341a:	4b21      	ldr	r3, [pc, #132]	@ (80034a0 <Traject+0x2cc>)
 800341c:	edd3 6a00 	vldr	s13, [r3]
 8003420:	4b1d      	ldr	r3, [pc, #116]	@ (8003498 <Traject+0x2c4>)
 8003422:	edd3 7a00 	vldr	s15, [r3]
 8003426:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800342a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800342e:	4b16      	ldr	r3, [pc, #88]	@ (8003488 <Traject+0x2b4>)
 8003430:	edd3 7a00 	vldr	s15, [r3]
 8003434:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8003438:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800343c:	4b18      	ldr	r3, [pc, #96]	@ (80034a0 <Traject+0x2cc>)
 800343e:	ed93 6a00 	vldr	s12, [r3]
 8003442:	4b15      	ldr	r3, [pc, #84]	@ (8003498 <Traject+0x2c4>)
 8003444:	edd3 7a00 	vldr	s15, [r3]
 8003448:	ee76 7a67 	vsub.f32	s15, s12, s15
 800344c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003450:	4b13      	ldr	r3, [pc, #76]	@ (80034a0 <Traject+0x2cc>)
 8003452:	ed93 6a00 	vldr	s12, [r3]
 8003456:	4b10      	ldr	r3, [pc, #64]	@ (8003498 <Traject+0x2c4>)
 8003458:	edd3 7a00 	vldr	s15, [r3]
 800345c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003460:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003464:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003468:	4b0f      	ldr	r3, [pc, #60]	@ (80034a8 <Traject+0x2d4>)
 800346a:	edd3 7a00 	vldr	s15, [r3]
 800346e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	edc3 7a02 	vstr	s15, [r3, #8]
 8003478:	e023      	b.n	80034c2 <Traject+0x2ee>
 800347a:	bf00      	nop
 800347c:	200002fc 	.word	0x200002fc
 8003480:	20000300 	.word	0x20000300
 8003484:	20000304 	.word	0x20000304
 8003488:	200002e4 	.word	0x200002e4
 800348c:	200002e8 	.word	0x200002e8
 8003490:	200002ec 	.word	0x200002ec
 8003494:	200002f0 	.word	0x200002f0
 8003498:	200002f4 	.word	0x200002f4
 800349c:	200002f8 	.word	0x200002f8
 80034a0:	20001210 	.word	0x20001210
 80034a4:	20000308 	.word	0x20000308
 80034a8:	2000030c 	.word	0x2000030c
	  }
	  else {
		  // Trajectory complete
		  Traj->currentAcceleration = 0.0f;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	611a      	str	r2, [r3, #16]
		  Traj->currentVelocity = 0.0f;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	60da      	str	r2, [r3, #12]
		  Traj->currentPosition = Pos_final;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	609a      	str	r2, [r3, #8]
	  }
	}
	if (Time_Velo_const <= 0)
 80034c2:	4b6e      	ldr	r3, [pc, #440]	@ (800367c <Traject+0x4a8>)
 80034c4:	edd3 7a00 	vldr	s15, [r3]
 80034c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d0:	f200 80d0 	bhi.w	8003674 <Traject+0x4a0>
	{
	  Time_acc_under = sqrt(fabs(Distance)/fabs(Acc_max));
 80034d4:	4b6a      	ldr	r3, [pc, #424]	@ (8003680 <Traject+0x4ac>)
 80034d6:	edd3 7a00 	vldr	s15, [r3]
 80034da:	eef0 7ae7 	vabs.f32	s15, s15
 80034de:	ee17 0a90 	vmov	r0, s15
 80034e2:	f7fc fffd 	bl	80004e0 <__aeabi_f2d>
 80034e6:	4604      	mov	r4, r0
 80034e8:	460d      	mov	r5, r1
 80034ea:	4b66      	ldr	r3, [pc, #408]	@ (8003684 <Traject+0x4b0>)
 80034ec:	edd3 7a00 	vldr	s15, [r3]
 80034f0:	eef0 7ae7 	vabs.f32	s15, s15
 80034f4:	ee17 0a90 	vmov	r0, s15
 80034f8:	f7fc fff2 	bl	80004e0 <__aeabi_f2d>
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	4620      	mov	r0, r4
 8003502:	4629      	mov	r1, r5
 8003504:	f7fd f96e 	bl	80007e4 <__aeabi_ddiv>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	ec43 2b17 	vmov	d7, r2, r3
 8003510:	eeb0 0a47 	vmov.f32	s0, s14
 8003514:	eef0 0a67 	vmov.f32	s1, s15
 8003518:	f008 fb06 	bl	800bb28 <sqrt>
 800351c:	ec53 2b10 	vmov	r2, r3, d0
 8003520:	4610      	mov	r0, r2
 8003522:	4619      	mov	r1, r3
 8003524:	f7fd fae4 	bl	8000af0 <__aeabi_d2f>
 8003528:	4603      	mov	r3, r0
 800352a:	4a57      	ldr	r2, [pc, #348]	@ (8003688 <Traject+0x4b4>)
 800352c:	6013      	str	r3, [r2, #0]
	  if (elapsedTime < Time_acc_under)
 800352e:	4b57      	ldr	r3, [pc, #348]	@ (800368c <Traject+0x4b8>)
 8003530:	ed93 7a00 	vldr	s14, [r3]
 8003534:	4b54      	ldr	r3, [pc, #336]	@ (8003688 <Traject+0x4b4>)
 8003536:	edd3 7a00 	vldr	s15, [r3]
 800353a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800353e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003542:	d52f      	bpl.n	80035a4 <Traject+0x3d0>
	  {
		  Traj->currentAcceleration = Acc_max;
 8003544:	4b4f      	ldr	r3, [pc, #316]	@ (8003684 <Traject+0x4b0>)
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	611a      	str	r2, [r3, #16]
		  Traj->currentVelocity = Acc_max * elapsedTime;
 800354c:	4b4d      	ldr	r3, [pc, #308]	@ (8003684 <Traject+0x4b0>)
 800354e:	ed93 7a00 	vldr	s14, [r3]
 8003552:	4b4e      	ldr	r3, [pc, #312]	@ (800368c <Traject+0x4b8>)
 8003554:	edd3 7a00 	vldr	s15, [r3]
 8003558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	edc3 7a03 	vstr	s15, [r3, #12]
		  Traj->currentPosition = Pos_initial + 0.5f * Acc_max * elapsedTime * elapsedTime;
 8003562:	4b48      	ldr	r3, [pc, #288]	@ (8003684 <Traject+0x4b0>)
 8003564:	edd3 7a00 	vldr	s15, [r3]
 8003568:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800356c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003570:	4b46      	ldr	r3, [pc, #280]	@ (800368c <Traject+0x4b8>)
 8003572:	edd3 7a00 	vldr	s15, [r3]
 8003576:	ee27 7a27 	vmul.f32	s14, s14, s15
 800357a:	4b44      	ldr	r3, [pc, #272]	@ (800368c <Traject+0x4b8>)
 800357c:	edd3 7a00 	vldr	s15, [r3]
 8003580:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003584:	edd7 7a02 	vldr	s15, [r7, #8]
 8003588:	ee77 7a27 	vadd.f32	s15, s14, s15
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	edc3 7a02 	vstr	s15, [r3, #8]
		  temp_pos_acc = Traj->currentPosition;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	4a3e      	ldr	r2, [pc, #248]	@ (8003690 <Traject+0x4bc>)
 8003598:	6013      	str	r3, [r2, #0]
		  temp_velo_acc = Traj->currentVelocity;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	4a3d      	ldr	r2, [pc, #244]	@ (8003694 <Traject+0x4c0>)
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	e067      	b.n	8003674 <Traject+0x4a0>
	  }
	  else if (elapsedTime < 2 * Time_acc_under)
 80035a4:	4b38      	ldr	r3, [pc, #224]	@ (8003688 <Traject+0x4b4>)
 80035a6:	edd3 7a00 	vldr	s15, [r3]
 80035aa:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80035ae:	4b37      	ldr	r3, [pc, #220]	@ (800368c <Traject+0x4b8>)
 80035b0:	edd3 7a00 	vldr	s15, [r3]
 80035b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035bc:	dd4f      	ble.n	800365e <Traject+0x48a>
	  {
		  Traj->currentAcceleration = -Acc_max;
 80035be:	4b31      	ldr	r3, [pc, #196]	@ (8003684 <Traject+0x4b0>)
 80035c0:	edd3 7a00 	vldr	s15, [r3]
 80035c4:	eef1 7a67 	vneg.f32	s15, s15
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	edc3 7a04 	vstr	s15, [r3, #16]
		  Traj->currentVelocity = temp_velo_acc - Acc_max*(elapsedTime-Time_acc_under);
 80035ce:	4b31      	ldr	r3, [pc, #196]	@ (8003694 <Traject+0x4c0>)
 80035d0:	ed93 7a00 	vldr	s14, [r3]
 80035d4:	4b2d      	ldr	r3, [pc, #180]	@ (800368c <Traject+0x4b8>)
 80035d6:	edd3 6a00 	vldr	s13, [r3]
 80035da:	4b2b      	ldr	r3, [pc, #172]	@ (8003688 <Traject+0x4b4>)
 80035dc:	edd3 7a00 	vldr	s15, [r3]
 80035e0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80035e4:	4b27      	ldr	r3, [pc, #156]	@ (8003684 <Traject+0x4b0>)
 80035e6:	edd3 7a00 	vldr	s15, [r3]
 80035ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	edc3 7a03 	vstr	s15, [r3, #12]
		  Traj->currentPosition = temp_pos_acc + Traj->currentVelocity *(elapsedTime-Time_acc_under)+(0.5f*Acc_max*(elapsedTime-Time_acc_under)*(elapsedTime-Time_acc_under));
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	ed93 7a03 	vldr	s14, [r3, #12]
 80035fe:	4b23      	ldr	r3, [pc, #140]	@ (800368c <Traject+0x4b8>)
 8003600:	edd3 6a00 	vldr	s13, [r3]
 8003604:	4b20      	ldr	r3, [pc, #128]	@ (8003688 <Traject+0x4b4>)
 8003606:	edd3 7a00 	vldr	s15, [r3]
 800360a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800360e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003612:	4b1f      	ldr	r3, [pc, #124]	@ (8003690 <Traject+0x4bc>)
 8003614:	edd3 7a00 	vldr	s15, [r3]
 8003618:	ee37 7a27 	vadd.f32	s14, s14, s15
 800361c:	4b19      	ldr	r3, [pc, #100]	@ (8003684 <Traject+0x4b0>)
 800361e:	edd3 7a00 	vldr	s15, [r3]
 8003622:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8003626:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800362a:	4b18      	ldr	r3, [pc, #96]	@ (800368c <Traject+0x4b8>)
 800362c:	ed93 6a00 	vldr	s12, [r3]
 8003630:	4b15      	ldr	r3, [pc, #84]	@ (8003688 <Traject+0x4b4>)
 8003632:	edd3 7a00 	vldr	s15, [r3]
 8003636:	ee76 7a67 	vsub.f32	s15, s12, s15
 800363a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800363e:	4b13      	ldr	r3, [pc, #76]	@ (800368c <Traject+0x4b8>)
 8003640:	ed93 6a00 	vldr	s12, [r3]
 8003644:	4b10      	ldr	r3, [pc, #64]	@ (8003688 <Traject+0x4b4>)
 8003646:	edd3 7a00 	vldr	s15, [r3]
 800364a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800364e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003652:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	edc3 7a02 	vstr	s15, [r3, #8]
 800365c:	e00a      	b.n	8003674 <Traject+0x4a0>
	  }
	  else
	  {
		  Traj->currentAcceleration = 0.0f;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f04f 0200 	mov.w	r2, #0
 8003664:	611a      	str	r2, [r3, #16]
		  Traj->currentVelocity = 0.0f;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	60da      	str	r2, [r3, #12]
		  Traj->currentPosition = Pos_final;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	609a      	str	r2, [r3, #8]
	  }
	}
}
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bdb0      	pop	{r4, r5, r7, pc}
 800367a:	bf00      	nop
 800367c:	200002f0 	.word	0x200002f0
 8003680:	200002fc 	.word	0x200002fc
 8003684:	200002e4 	.word	0x200002e4
 8003688:	20000314 	.word	0x20000314
 800368c:	20001210 	.word	0x20001210
 8003690:	20000308 	.word	0x20000308
 8003694:	20000310 	.word	0x20000310

08003698 <kalman_filter_init>:
 */
#include "main.h"
#include "Kalman.h"

void kalman_filter_init(KalmanState *state, float Q, float R)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80036a4:	edc7 0a01 	vstr	s1, [r7, #4]
	state->Q = Q;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	609a      	str	r2, [r3, #8]
	state->R = R;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	60da      	str	r2, [r3, #12]
	state->x_k1_k1 = 0;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]
	state->P_k1_k1 = 1;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80036c2:	605a      	str	r2, [r3, #4]
	state->Kg = 0;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	611a      	str	r2, [r3, #16]
	state->P_k_k1 = 1;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80036d2:	615a      	str	r2, [r3, #20]
	state->kalman_adc_old = 0;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f04f 0200 	mov.w	r2, #0
 80036da:	619a      	str	r2, [r3, #24]
}
 80036dc:	bf00      	nop
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <kalman_filter>:

double kalman_filter(KalmanState *state, double Accel ) {
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	ed87 0b00 	vstr	d0, [r7]
    float Z_k = Accel;
 80036f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80036f8:	f7fd f9fa 	bl	8000af0 <__aeabi_d2f>
 80036fc:	4603      	mov	r3, r0
 80036fe:	61fb      	str	r3, [r7, #28]
    float x_k_k1 = state->kalman_adc_old;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	61bb      	str	r3, [r7, #24]
    state->P_k_k1 = state->P_k1_k1 + state->Q;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	ed93 7a01 	vldr	s14, [r3, #4]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003712:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	edc3 7a05 	vstr	s15, [r3, #20]

    state->Kg = state->P_k_k1 / (state->P_k_k1 + state->R);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	edd3 6a05 	vldr	s13, [r3, #20]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	ed93 7a05 	vldr	s14, [r3, #20]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	edd3 7a03 	vldr	s15, [r3, #12]
 800372e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003732:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	edc3 7a04 	vstr	s15, [r3, #16]
    float kalman_adc = x_k_k1 + state->Kg * (Z_k - state->kalman_adc_old);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	ed93 7a04 	vldr	s14, [r3, #16]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	edd3 7a06 	vldr	s15, [r3, #24]
 8003748:	edd7 6a07 	vldr	s13, [r7, #28]
 800374c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003754:	ed97 7a06 	vldr	s14, [r7, #24]
 8003758:	ee77 7a27 	vadd.f32	s15, s14, s15
 800375c:	edc7 7a05 	vstr	s15, [r7, #20]
    state->P_k1_k1 = (1 - state->Kg) * state->P_k_k1;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	edd3 7a04 	vldr	s15, [r3, #16]
 8003766:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800376a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	edd3 7a05 	vldr	s15, [r3, #20]
 8003774:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	edc3 7a01 	vstr	s15, [r3, #4]

    state->kalman_adc_old = kalman_adc;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	619a      	str	r2, [r3, #24]
    return kalman_adc;
 8003784:	6978      	ldr	r0, [r7, #20]
 8003786:	f7fc feab 	bl	80004e0 <__aeabi_f2d>
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	ec43 2b17 	vmov	d7, r2, r3
}
 8003792:	eeb0 0a47 	vmov.f32	s0, s14
 8003796:	eef0 0a67 	vmov.f32	s1, s15
 800379a:	3720      	adds	r7, #32
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80037a4:	b086      	sub	sp, #24
 80037a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037a8:	f001 f95d 	bl	8004a66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037ac:	f000 f8f2 	bl	8003994 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037b0:	f000 fc24 	bl	8003ffc <MX_GPIO_Init>
  MX_DMA_Init();
 80037b4:	f000 fbf0 	bl	8003f98 <MX_DMA_Init>
  MX_TIM2_Init();
 80037b8:	f000 f9b0 	bl	8003b1c <MX_TIM2_Init>
  MX_TIM3_Init();
 80037bc:	f000 fa02 	bl	8003bc4 <MX_TIM3_Init>
  MX_TIM5_Init();
 80037c0:	f000 fad0 	bl	8003d64 <MX_TIM5_Init>
  MX_UART4_Init();
 80037c4:	f000 fb4c 	bl	8003e60 <MX_UART4_Init>
  MX_TIM4_Init();
 80037c8:	f000 fa7e 	bl	8003cc8 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80037cc:	f000 fb96 	bl	8003efc <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80037d0:	f000 fb16 	bl	8003e00 <MX_TIM16_Init>
  MX_ADC1_Init();
 80037d4:	f000 f92a 	bl	8003a2c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);								// AMT Encoder
 80037d8:	4852      	ldr	r0, [pc, #328]	@ (8003924 <main+0x184>)
 80037da:	f004 f961 	bl	8007aa0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);								// Motor Output compare
 80037de:	4852      	ldr	r0, [pc, #328]	@ (8003928 <main+0x188>)
 80037e0:	f004 f95e 	bl	8007aa0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim4);							// System Clock control
 80037e4:	4851      	ldr	r0, [pc, #324]	@ (800392c <main+0x18c>)
 80037e6:	f004 f9cb 	bl	8007b80 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);							// Microsecond Function
 80037ea:	4851      	ldr	r0, [pc, #324]	@ (8003930 <main+0x190>)
 80037ec:	f004 f9c8 	bl	8007b80 <HAL_TIM_Base_Start_IT>
  // Velocity 450 mm/s
//  float PID_pos_K[3] = {17 ,0.002, 0.0001};
//  float PID_velo_K[3] = {9 ,0.00002, 0.0};

// Initialize ASRS
	AMT_encoder_init(&AMT, &htim2);
 80037f0:	494c      	ldr	r1, [pc, #304]	@ (8003924 <main+0x184>)
 80037f2:	4850      	ldr	r0, [pc, #320]	@ (8003934 <main+0x194>)
 80037f4:	f7fe fad6 	bl	8001da4 <AMT_encoder_init>
	MOTOR_init(&MT, &htim3,TIM_CHANNEL_2, TIM_CHANNEL_1);
 80037f8:	2300      	movs	r3, #0
 80037fa:	2204      	movs	r2, #4
 80037fc:	494a      	ldr	r1, [pc, #296]	@ (8003928 <main+0x188>)
 80037fe:	484e      	ldr	r0, [pc, #312]	@ (8003938 <main+0x198>)
 8003800:	f7fe ff5c 	bl	80026bc <MOTOR_init>
	hmodbus.huart = &huart2;
 8003804:	4b4d      	ldr	r3, [pc, #308]	@ (800393c <main+0x19c>)
 8003806:	4a4e      	ldr	r2, [pc, #312]	@ (8003940 <main+0x1a0>)
 8003808:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim16;
 800380a:	4b4c      	ldr	r3, [pc, #304]	@ (800393c <main+0x19c>)
 800380c:	4a4d      	ldr	r2, [pc, #308]	@ (8003944 <main+0x1a4>)
 800380e:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 8003810:	4b4a      	ldr	r3, [pc, #296]	@ (800393c <main+0x19c>)
 8003812:	2215      	movs	r2, #21
 8003814:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize =200;
 8003816:	4b49      	ldr	r3, [pc, #292]	@ (800393c <main+0x19c>)
 8003818:	22c8      	movs	r2, #200	@ 0xc8
 800381a:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 800381c:	494a      	ldr	r1, [pc, #296]	@ (8003948 <main+0x1a8>)
 800381e:	4847      	ldr	r0, [pc, #284]	@ (800393c <main+0x19c>)
 8003820:	f7fe fc58 	bl	80020d4 <Modbus_init>
	//--------------------------Initialize Controller Parameter------------------------------------//

	// System Max Velocity and Max Acceleration
	Traject_init(&Traj, 800 , 800);
 8003824:	eddf 0a49 	vldr	s1, [pc, #292]	@ 800394c <main+0x1ac>
 8003828:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 800394c <main+0x1ac>
 800382c:	4848      	ldr	r0, [pc, #288]	@ (8003950 <main+0x1b0>)
 800382e:	f7ff fcb1 	bl	8003194 <Traject_init>

	// Constant P I D for Position & Velocity Control
	//  float PID_pos_K[3] = {12 ,0.002, 0.001};
	//  float PID_velo_K[3] = {7.0 ,0.0022, 0.0001};
	float PID_pos_K[3] = {7 ,0.00000025, 0.00006};
 8003832:	4a48      	ldr	r2, [pc, #288]	@ (8003954 <main+0x1b4>)
 8003834:	f107 030c 	add.w	r3, r7, #12
 8003838:	ca07      	ldmia	r2, {r0, r1, r2}
 800383a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float PID_velo_K[3] = {7.0 ,0.0022, 0.0001};
 800383e:	4a46      	ldr	r2, [pc, #280]	@ (8003958 <main+0x1b8>)
 8003840:	463b      	mov	r3, r7
 8003842:	ca07      	ldmia	r2, {r0, r1, r2}
 8003844:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	PID_controller_init(&PID_pos,PID_pos_K[0],PID_pos_K[1],PID_pos_K[2]);
 8003848:	edd7 7a03 	vldr	s15, [r7, #12]
 800384c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003850:	edd7 6a05 	vldr	s13, [r7, #20]
 8003854:	eeb0 1a66 	vmov.f32	s2, s13
 8003858:	eef0 0a47 	vmov.f32	s1, s14
 800385c:	eeb0 0a67 	vmov.f32	s0, s15
 8003860:	483e      	ldr	r0, [pc, #248]	@ (800395c <main+0x1bc>)
 8003862:	f7ff f957 	bl	8002b14 <PID_controller_init>
	PID_controller_init(&PID_velo,PID_velo_K[0],PID_velo_K[1],PID_velo_K[3]);
 8003866:	edd7 7a00 	vldr	s15, [r7]
 800386a:	ed97 7a01 	vldr	s14, [r7, #4]
 800386e:	edd7 6a03 	vldr	s13, [r7, #12]
 8003872:	eeb0 1a66 	vmov.f32	s2, s13
 8003876:	eef0 0a47 	vmov.f32	s1, s14
 800387a:	eeb0 0a67 	vmov.f32	s0, s15
 800387e:	4838      	ldr	r0, [pc, #224]	@ (8003960 <main+0x1c0>)
 8003880:	f7ff f948 	bl	8002b14 <PID_controller_init>

	// Constant Q R for Kalman Filter in Velocity and Acceleration
	kalman_filter_init(&filtered_velo, 0.0005,0.6);
 8003884:	eddf 0a37 	vldr	s1, [pc, #220]	@ 8003964 <main+0x1c4>
 8003888:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 8003968 <main+0x1c8>
 800388c:	4837      	ldr	r0, [pc, #220]	@ (800396c <main+0x1cc>)
 800388e:	f7ff ff03 	bl	8003698 <kalman_filter_init>
	kalman_filter_init(&filtered_accel, 0.002,0.2);
 8003892:	eddf 0a37 	vldr	s1, [pc, #220]	@ 8003970 <main+0x1d0>
 8003896:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 8003974 <main+0x1d4>
 800389a:	4837      	ldr	r0, [pc, #220]	@ (8003978 <main+0x1d8>)
 800389c:	f7ff fefc 	bl	8003698 <kalman_filter_init>

    /* USER CODE BEGIN 3 */

	  // Heartbeat function 5 Hz
	  static uint64_t timestamps =0;
	  if(HAL_GetTick() > timestamps && emer == 0 ){
 80038a0:	f001 f946 	bl	8004b30 <HAL_GetTick>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2200      	movs	r2, #0
 80038a8:	461c      	mov	r4, r3
 80038aa:	4615      	mov	r5, r2
 80038ac:	4b33      	ldr	r3, [pc, #204]	@ (800397c <main+0x1dc>)
 80038ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b2:	42a2      	cmp	r2, r4
 80038b4:	41ab      	sbcs	r3, r5
 80038b6:	d20f      	bcs.n	80038d8 <main+0x138>
 80038b8:	4b31      	ldr	r3, [pc, #196]	@ (8003980 <main+0x1e0>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10b      	bne.n	80038d8 <main+0x138>
		  timestamps =HAL_GetTick() + 100;		//ms
 80038c0:	f001 f936 	bl	8004b30 <HAL_GetTick>
 80038c4:	4603      	mov	r3, r0
 80038c6:	3364      	adds	r3, #100	@ 0x64
 80038c8:	2200      	movs	r2, #0
 80038ca:	4698      	mov	r8, r3
 80038cc:	4691      	mov	r9, r2
 80038ce:	4b2b      	ldr	r3, [pc, #172]	@ (800397c <main+0x1dc>)
 80038d0:	e9c3 8900 	strd	r8, r9, [r3]
	  	  Heartbeat();
 80038d4:	f7fd fbfc 	bl	80010d0 <Heartbeat>
	  }

	  // Feedback to BaseSystem
	  Vacuum();
 80038d8:	f7fd fc62 	bl	80011a0 <Vacuum>
	  GripperMovement();
 80038dc:	f7fd fc7c 	bl	80011d8 <GripperMovement>
	  Modbus_Protocal_Worker();
 80038e0:	f7fe fc84 	bl	80021ec <Modbus_Protocal_Worker>
	  Routine();
 80038e4:	f7fd fc02 	bl	80010ec <Routine>

	  // Uart Receive Joystick
	  HAL_UART_Receive(&huart4,ps2.ps2RX, 10 ,10);
 80038e8:	230a      	movs	r3, #10
 80038ea:	220a      	movs	r2, #10
 80038ec:	4925      	ldr	r1, [pc, #148]	@ (8003984 <main+0x1e4>)
 80038ee:	4826      	ldr	r0, [pc, #152]	@ (8003988 <main+0x1e8>)
 80038f0:	f006 fa38 	bl	8009d64 <HAL_UART_Receive>

	  if (base.BaseStatus == 1 && emer == 0){
 80038f4:	4b25      	ldr	r3, [pc, #148]	@ (800398c <main+0x1ec>)
 80038f6:	881b      	ldrh	r3, [r3, #0]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d105      	bne.n	8003908 <main+0x168>
 80038fc:	4b20      	ldr	r3, [pc, #128]	@ (8003980 <main+0x1e0>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <main+0x168>
		  SetShelves();
 8003904:	f7fd fc9a 	bl	800123c <SetShelves>
	  }

	  // Emergency Button was triggered
	  emer = (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7) == GPIO_PIN_SET) ? 1 : emer;
 8003908:	2180      	movs	r1, #128	@ 0x80
 800390a:	4821      	ldr	r0, [pc, #132]	@ (8003990 <main+0x1f0>)
 800390c:	f002 ffe0 	bl	80068d0 <HAL_GPIO_ReadPin>
 8003910:	4603      	mov	r3, r0
 8003912:	2b01      	cmp	r3, #1
 8003914:	d002      	beq.n	800391c <main+0x17c>
 8003916:	4b1a      	ldr	r3, [pc, #104]	@ (8003980 <main+0x1e0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	e000      	b.n	800391e <main+0x17e>
 800391c:	2301      	movs	r3, #1
 800391e:	4a18      	ldr	r2, [pc, #96]	@ (8003980 <main+0x1e0>)
 8003920:	6013      	str	r3, [r2, #0]
  {
 8003922:	e7bd      	b.n	80038a0 <main+0x100>
 8003924:	20000384 	.word	0x20000384
 8003928:	20000450 	.word	0x20000450
 800392c:	2000051c 	.word	0x2000051c
 8003930:	200005e8 	.word	0x200005e8
 8003934:	200009f8 	.word	0x200009f8
 8003938:	200009d8 	.word	0x200009d8
 800393c:	20000b60 	.word	0x20000b60
 8003940:	2000084c 	.word	0x2000084c
 8003944:	200006b4 	.word	0x200006b4
 8003948:	20001080 	.word	0x20001080
 800394c:	44480000 	.word	0x44480000
 8003950:	200009e0 	.word	0x200009e0
 8003954:	0800bd4c 	.word	0x0800bd4c
 8003958:	0800bd58 	.word	0x0800bd58
 800395c:	20000ac8 	.word	0x20000ac8
 8003960:	20000ae4 	.word	0x20000ae4
 8003964:	3f19999a 	.word	0x3f19999a
 8003968:	3a03126f 	.word	0x3a03126f
 800396c:	20001038 	.word	0x20001038
 8003970:	3e4ccccd 	.word	0x3e4ccccd
 8003974:	3b03126f 	.word	0x3b03126f
 8003978:	20001054 	.word	0x20001054
 800397c:	20001218 	.word	0x20001218
 8003980:	20001070 	.word	0x20001070
 8003984:	20000a48 	.word	0x20000a48
 8003988:	20000780 	.word	0x20000780
 800398c:	20000b00 	.word	0x20000b00
 8003990:	48000800 	.word	0x48000800

08003994 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b094      	sub	sp, #80	@ 0x50
 8003998:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800399a:	f107 0318 	add.w	r3, r7, #24
 800399e:	2238      	movs	r2, #56	@ 0x38
 80039a0:	2100      	movs	r1, #0
 80039a2:	4618      	mov	r0, r3
 80039a4:	f008 f880 	bl	800baa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039a8:	1d3b      	adds	r3, r7, #4
 80039aa:	2200      	movs	r2, #0
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	605a      	str	r2, [r3, #4]
 80039b0:	609a      	str	r2, [r3, #8]
 80039b2:	60da      	str	r2, [r3, #12]
 80039b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80039b6:	2000      	movs	r0, #0
 80039b8:	f002 ffde 	bl	8006978 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80039bc:	2302      	movs	r3, #2
 80039be:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80039c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80039c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80039c6:	2340      	movs	r3, #64	@ 0x40
 80039c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039ca:	2302      	movs	r3, #2
 80039cc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80039ce:	2302      	movs	r3, #2
 80039d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80039d2:	2304      	movs	r3, #4
 80039d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80039d6:	2355      	movs	r3, #85	@ 0x55
 80039d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80039da:	2302      	movs	r3, #2
 80039dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80039de:	2302      	movs	r3, #2
 80039e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80039e2:	2302      	movs	r3, #2
 80039e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039e6:	f107 0318 	add.w	r3, r7, #24
 80039ea:	4618      	mov	r0, r3
 80039ec:	f003 f878 	bl	8006ae0 <HAL_RCC_OscConfig>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80039f6:	f000 fd23 	bl	8004440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039fa:	230f      	movs	r3, #15
 80039fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039fe:	2303      	movs	r3, #3
 8003a00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a02:	2300      	movs	r3, #0
 8003a04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a06:	2300      	movs	r3, #0
 8003a08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003a0e:	1d3b      	adds	r3, r7, #4
 8003a10:	2104      	movs	r1, #4
 8003a12:	4618      	mov	r0, r3
 8003a14:	f003 fb76 	bl	8007104 <HAL_RCC_ClockConfig>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8003a1e:	f000 fd0f 	bl	8004440 <Error_Handler>
  }
}
 8003a22:	bf00      	nop
 8003a24:	3750      	adds	r7, #80	@ 0x50
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
	...

08003a2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b08c      	sub	sp, #48	@ 0x30
 8003a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8003a32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	605a      	str	r2, [r3, #4]
 8003a3c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003a3e:	1d3b      	adds	r3, r7, #4
 8003a40:	2220      	movs	r2, #32
 8003a42:	2100      	movs	r1, #0
 8003a44:	4618      	mov	r0, r3
 8003a46:	f008 f82f 	bl	800baa8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003a4a:	4b32      	ldr	r3, [pc, #200]	@ (8003b14 <MX_ADC1_Init+0xe8>)
 8003a4c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8003a50:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003a52:	4b30      	ldr	r3, [pc, #192]	@ (8003b14 <MX_ADC1_Init+0xe8>)
 8003a54:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003a58:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003a5a:	4b2e      	ldr	r3, [pc, #184]	@ (8003b14 <MX_ADC1_Init+0xe8>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003a60:	4b2c      	ldr	r3, [pc, #176]	@ (8003b14 <MX_ADC1_Init+0xe8>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8003a66:	4b2b      	ldr	r3, [pc, #172]	@ (8003b14 <MX_ADC1_Init+0xe8>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003a6c:	4b29      	ldr	r3, [pc, #164]	@ (8003b14 <MX_ADC1_Init+0xe8>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003a72:	4b28      	ldr	r3, [pc, #160]	@ (8003b14 <MX_ADC1_Init+0xe8>)
 8003a74:	2204      	movs	r2, #4
 8003a76:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003a78:	4b26      	ldr	r3, [pc, #152]	@ (8003b14 <MX_ADC1_Init+0xe8>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003a7e:	4b25      	ldr	r3, [pc, #148]	@ (8003b14 <MX_ADC1_Init+0xe8>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8003a84:	4b23      	ldr	r3, [pc, #140]	@ (8003b14 <MX_ADC1_Init+0xe8>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003a8a:	4b22      	ldr	r3, [pc, #136]	@ (8003b14 <MX_ADC1_Init+0xe8>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003a92:	4b20      	ldr	r3, [pc, #128]	@ (8003b14 <MX_ADC1_Init+0xe8>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003a98:	4b1e      	ldr	r3, [pc, #120]	@ (8003b14 <MX_ADC1_Init+0xe8>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8003b14 <MX_ADC1_Init+0xe8>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8003b14 <MX_ADC1_Init+0xe8>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8003aac:	4b19      	ldr	r3, [pc, #100]	@ (8003b14 <MX_ADC1_Init+0xe8>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003ab4:	4817      	ldr	r0, [pc, #92]	@ (8003b14 <MX_ADC1_Init+0xe8>)
 8003ab6:	f001 fa1d 	bl	8004ef4 <HAL_ADC_Init>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8003ac0:	f000 fcbe 	bl	8004440 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003ac8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003acc:	4619      	mov	r1, r3
 8003ace:	4811      	ldr	r0, [pc, #68]	@ (8003b14 <MX_ADC1_Init+0xe8>)
 8003ad0:	f002 f832 	bl	8005b38 <HAL_ADCEx_MultiModeConfigChannel>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8003ada:	f000 fcb1 	bl	8004440 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003ade:	4b0e      	ldr	r3, [pc, #56]	@ (8003b18 <MX_ADC1_Init+0xec>)
 8003ae0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003ae2:	2306      	movs	r3, #6
 8003ae4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003aea:	237f      	movs	r3, #127	@ 0x7f
 8003aec:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003aee:	2304      	movs	r3, #4
 8003af0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003af2:	2300      	movs	r3, #0
 8003af4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003af6:	1d3b      	adds	r3, r7, #4
 8003af8:	4619      	mov	r1, r3
 8003afa:	4806      	ldr	r0, [pc, #24]	@ (8003b14 <MX_ADC1_Init+0xe8>)
 8003afc:	f001 fbb6 	bl	800526c <HAL_ADC_ConfigChannel>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8003b06:	f000 fc9b 	bl	8004440 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003b0a:	bf00      	nop
 8003b0c:	3730      	adds	r7, #48	@ 0x30
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	20000318 	.word	0x20000318
 8003b18:	19200040 	.word	0x19200040

08003b1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b08c      	sub	sp, #48	@ 0x30
 8003b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003b22:	f107 030c 	add.w	r3, r7, #12
 8003b26:	2224      	movs	r2, #36	@ 0x24
 8003b28:	2100      	movs	r1, #0
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f007 ffbc 	bl	800baa8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b30:	463b      	mov	r3, r7
 8003b32:	2200      	movs	r2, #0
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	605a      	str	r2, [r3, #4]
 8003b38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003b3a:	4b21      	ldr	r3, [pc, #132]	@ (8003bc0 <MX_TIM2_Init+0xa4>)
 8003b3c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003b40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003b42:	4b1f      	ldr	r3, [pc, #124]	@ (8003bc0 <MX_TIM2_Init+0xa4>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b48:	4b1d      	ldr	r3, [pc, #116]	@ (8003bc0 <MX_TIM2_Init+0xa4>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65534;
 8003b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8003bc0 <MX_TIM2_Init+0xa4>)
 8003b50:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003b54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b56:	4b1a      	ldr	r3, [pc, #104]	@ (8003bc0 <MX_TIM2_Init+0xa4>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b5c:	4b18      	ldr	r3, [pc, #96]	@ (8003bc0 <MX_TIM2_Init+0xa4>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003b62:	2303      	movs	r3, #3
 8003b64:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003b66:	2300      	movs	r3, #0
 8003b68:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 3;
 8003b72:	2303      	movs	r3, #3
 8003b74:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003b76:	2300      	movs	r3, #0
 8003b78:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 3;
 8003b82:	2303      	movs	r3, #3
 8003b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003b86:	f107 030c 	add.w	r3, r7, #12
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	480c      	ldr	r0, [pc, #48]	@ (8003bc0 <MX_TIM2_Init+0xa4>)
 8003b8e:	f004 fb33 	bl	80081f8 <HAL_TIM_Encoder_Init>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8003b98:	f000 fc52 	bl	8004440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003ba4:	463b      	mov	r3, r7
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	4805      	ldr	r0, [pc, #20]	@ (8003bc0 <MX_TIM2_Init+0xa4>)
 8003baa:	f005 fedb 	bl	8009964 <HAL_TIMEx_MasterConfigSynchronization>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8003bb4:	f000 fc44 	bl	8004440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003bb8:	bf00      	nop
 8003bba:	3730      	adds	r7, #48	@ 0x30
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	20000384 	.word	0x20000384

08003bc4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b08e      	sub	sp, #56	@ 0x38
 8003bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003bce:	2200      	movs	r2, #0
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	605a      	str	r2, [r3, #4]
 8003bd4:	609a      	str	r2, [r3, #8]
 8003bd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bd8:	f107 031c 	add.w	r3, r7, #28
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	605a      	str	r2, [r3, #4]
 8003be2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003be4:	463b      	mov	r3, r7
 8003be6:	2200      	movs	r2, #0
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	605a      	str	r2, [r3, #4]
 8003bec:	609a      	str	r2, [r3, #8]
 8003bee:	60da      	str	r2, [r3, #12]
 8003bf0:	611a      	str	r2, [r3, #16]
 8003bf2:	615a      	str	r2, [r3, #20]
 8003bf4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003bf6:	4b32      	ldr	r3, [pc, #200]	@ (8003cc0 <MX_TIM3_Init+0xfc>)
 8003bf8:	4a32      	ldr	r2, [pc, #200]	@ (8003cc4 <MX_TIM3_Init+0x100>)
 8003bfa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8003bfc:	4b30      	ldr	r3, [pc, #192]	@ (8003cc0 <MX_TIM3_Init+0xfc>)
 8003bfe:	2201      	movs	r2, #1
 8003c00:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c02:	4b2f      	ldr	r3, [pc, #188]	@ (8003cc0 <MX_TIM3_Init+0xfc>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 42499;
 8003c08:	4b2d      	ldr	r3, [pc, #180]	@ (8003cc0 <MX_TIM3_Init+0xfc>)
 8003c0a:	f24a 6203 	movw	r2, #42499	@ 0xa603
 8003c0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c10:	4b2b      	ldr	r3, [pc, #172]	@ (8003cc0 <MX_TIM3_Init+0xfc>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c16:	4b2a      	ldr	r3, [pc, #168]	@ (8003cc0 <MX_TIM3_Init+0xfc>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003c1c:	4828      	ldr	r0, [pc, #160]	@ (8003cc0 <MX_TIM3_Init+0xfc>)
 8003c1e:	f003 fedb 	bl	80079d8 <HAL_TIM_Base_Init>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003c28:	f000 fc0a 	bl	8004440 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c30:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003c32:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003c36:	4619      	mov	r1, r3
 8003c38:	4821      	ldr	r0, [pc, #132]	@ (8003cc0 <MX_TIM3_Init+0xfc>)
 8003c3a:	f004 fead 	bl	8008998 <HAL_TIM_ConfigClockSource>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003c44:	f000 fbfc 	bl	8004440 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003c48:	481d      	ldr	r0, [pc, #116]	@ (8003cc0 <MX_TIM3_Init+0xfc>)
 8003c4a:	f004 f811 	bl	8007c70 <HAL_TIM_PWM_Init>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003c54:	f000 fbf4 	bl	8004440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003c60:	f107 031c 	add.w	r3, r7, #28
 8003c64:	4619      	mov	r1, r3
 8003c66:	4816      	ldr	r0, [pc, #88]	@ (8003cc0 <MX_TIM3_Init+0xfc>)
 8003c68:	f005 fe7c 	bl	8009964 <HAL_TIMEx_MasterConfigSynchronization>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003c72:	f000 fbe5 	bl	8004440 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c76:	2360      	movs	r3, #96	@ 0x60
 8003c78:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c82:	2300      	movs	r3, #0
 8003c84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c86:	463b      	mov	r3, r7
 8003c88:	2200      	movs	r2, #0
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	480c      	ldr	r0, [pc, #48]	@ (8003cc0 <MX_TIM3_Init+0xfc>)
 8003c8e:	f004 fd6f 	bl	8008770 <HAL_TIM_PWM_ConfigChannel>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003c98:	f000 fbd2 	bl	8004440 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c9c:	463b      	mov	r3, r7
 8003c9e:	2204      	movs	r2, #4
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	4807      	ldr	r0, [pc, #28]	@ (8003cc0 <MX_TIM3_Init+0xfc>)
 8003ca4:	f004 fd64 	bl	8008770 <HAL_TIM_PWM_ConfigChannel>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8003cae:	f000 fbc7 	bl	8004440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003cb2:	4803      	ldr	r0, [pc, #12]	@ (8003cc0 <MX_TIM3_Init+0xfc>)
 8003cb4:	f000 fcf4 	bl	80046a0 <HAL_TIM_MspPostInit>

}
 8003cb8:	bf00      	nop
 8003cba:	3738      	adds	r7, #56	@ 0x38
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	20000450 	.word	0x20000450
 8003cc4:	40000400 	.word	0x40000400

08003cc8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b088      	sub	sp, #32
 8003ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003cce:	f107 0310 	add.w	r3, r7, #16
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	605a      	str	r2, [r3, #4]
 8003cd8:	609a      	str	r2, [r3, #8]
 8003cda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cdc:	1d3b      	adds	r3, r7, #4
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	605a      	str	r2, [r3, #4]
 8003ce4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8003d5c <MX_TIM4_Init+0x94>)
 8003ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8003d60 <MX_TIM4_Init+0x98>)
 8003cea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8003cec:	4b1b      	ldr	r3, [pc, #108]	@ (8003d5c <MX_TIM4_Init+0x94>)
 8003cee:	22a9      	movs	r2, #169	@ 0xa9
 8003cf0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8003d5c <MX_TIM4_Init+0x94>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50;
 8003cf8:	4b18      	ldr	r3, [pc, #96]	@ (8003d5c <MX_TIM4_Init+0x94>)
 8003cfa:	2232      	movs	r2, #50	@ 0x32
 8003cfc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cfe:	4b17      	ldr	r3, [pc, #92]	@ (8003d5c <MX_TIM4_Init+0x94>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d04:	4b15      	ldr	r3, [pc, #84]	@ (8003d5c <MX_TIM4_Init+0x94>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003d0a:	4814      	ldr	r0, [pc, #80]	@ (8003d5c <MX_TIM4_Init+0x94>)
 8003d0c:	f003 fe64 	bl	80079d8 <HAL_TIM_Base_Init>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8003d16:	f000 fb93 	bl	8004440 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003d20:	f107 0310 	add.w	r3, r7, #16
 8003d24:	4619      	mov	r1, r3
 8003d26:	480d      	ldr	r0, [pc, #52]	@ (8003d5c <MX_TIM4_Init+0x94>)
 8003d28:	f004 fe36 	bl	8008998 <HAL_TIM_ConfigClockSource>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8003d32:	f000 fb85 	bl	8004440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d36:	2300      	movs	r3, #0
 8003d38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003d3e:	1d3b      	adds	r3, r7, #4
 8003d40:	4619      	mov	r1, r3
 8003d42:	4806      	ldr	r0, [pc, #24]	@ (8003d5c <MX_TIM4_Init+0x94>)
 8003d44:	f005 fe0e 	bl	8009964 <HAL_TIMEx_MasterConfigSynchronization>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8003d4e:	f000 fb77 	bl	8004440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003d52:	bf00      	nop
 8003d54:	3720      	adds	r7, #32
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	2000051c 	.word	0x2000051c
 8003d60:	40000800 	.word	0x40000800

08003d64 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b088      	sub	sp, #32
 8003d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d6a:	f107 0310 	add.w	r3, r7, #16
 8003d6e:	2200      	movs	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	605a      	str	r2, [r3, #4]
 8003d74:	609a      	str	r2, [r3, #8]
 8003d76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d78:	1d3b      	adds	r3, r7, #4
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	605a      	str	r2, [r3, #4]
 8003d80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003d82:	4b1d      	ldr	r3, [pc, #116]	@ (8003df8 <MX_TIM5_Init+0x94>)
 8003d84:	4a1d      	ldr	r2, [pc, #116]	@ (8003dfc <MX_TIM5_Init+0x98>)
 8003d86:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8003d88:	4b1b      	ldr	r3, [pc, #108]	@ (8003df8 <MX_TIM5_Init+0x94>)
 8003d8a:	22a9      	movs	r2, #169	@ 0xa9
 8003d8c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8003df8 <MX_TIM5_Init+0x94>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003d94:	4b18      	ldr	r3, [pc, #96]	@ (8003df8 <MX_TIM5_Init+0x94>)
 8003d96:	f04f 32ff 	mov.w	r2, #4294967295
 8003d9a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d9c:	4b16      	ldr	r3, [pc, #88]	@ (8003df8 <MX_TIM5_Init+0x94>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003da2:	4b15      	ldr	r3, [pc, #84]	@ (8003df8 <MX_TIM5_Init+0x94>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003da8:	4813      	ldr	r0, [pc, #76]	@ (8003df8 <MX_TIM5_Init+0x94>)
 8003daa:	f003 fe15 	bl	80079d8 <HAL_TIM_Base_Init>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003db4:	f000 fb44 	bl	8004440 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003db8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003dbc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003dbe:	f107 0310 	add.w	r3, r7, #16
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	480c      	ldr	r0, [pc, #48]	@ (8003df8 <MX_TIM5_Init+0x94>)
 8003dc6:	f004 fde7 	bl	8008998 <HAL_TIM_ConfigClockSource>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003dd0:	f000 fb36 	bl	8004440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003ddc:	1d3b      	adds	r3, r7, #4
 8003dde:	4619      	mov	r1, r3
 8003de0:	4805      	ldr	r0, [pc, #20]	@ (8003df8 <MX_TIM5_Init+0x94>)
 8003de2:	f005 fdbf 	bl	8009964 <HAL_TIMEx_MasterConfigSynchronization>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003dec:	f000 fb28 	bl	8004440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003df0:	bf00      	nop
 8003df2:	3720      	adds	r7, #32
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	200005e8 	.word	0x200005e8
 8003dfc:	40000c00 	.word	0x40000c00

08003e00 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003e04:	4b14      	ldr	r3, [pc, #80]	@ (8003e58 <MX_TIM16_Init+0x58>)
 8003e06:	4a15      	ldr	r2, [pc, #84]	@ (8003e5c <MX_TIM16_Init+0x5c>)
 8003e08:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8003e0a:	4b13      	ldr	r3, [pc, #76]	@ (8003e58 <MX_TIM16_Init+0x58>)
 8003e0c:	22a9      	movs	r2, #169	@ 0xa9
 8003e0e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e10:	4b11      	ldr	r3, [pc, #68]	@ (8003e58 <MX_TIM16_Init+0x58>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8003e16:	4b10      	ldr	r3, [pc, #64]	@ (8003e58 <MX_TIM16_Init+0x58>)
 8003e18:	f240 4279 	movw	r2, #1145	@ 0x479
 8003e1c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8003e58 <MX_TIM16_Init+0x58>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003e24:	4b0c      	ldr	r3, [pc, #48]	@ (8003e58 <MX_TIM16_Init+0x58>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e58 <MX_TIM16_Init+0x58>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003e30:	4809      	ldr	r0, [pc, #36]	@ (8003e58 <MX_TIM16_Init+0x58>)
 8003e32:	f003 fdd1 	bl	80079d8 <HAL_TIM_Base_Init>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8003e3c:	f000 fb00 	bl	8004440 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8003e40:	2108      	movs	r1, #8
 8003e42:	4805      	ldr	r0, [pc, #20]	@ (8003e58 <MX_TIM16_Init+0x58>)
 8003e44:	f004 f8e2 	bl	800800c <HAL_TIM_OnePulse_Init>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8003e4e:	f000 faf7 	bl	8004440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003e52:	bf00      	nop
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	200006b4 	.word	0x200006b4
 8003e5c:	40014400 	.word	0x40014400

08003e60 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003e64:	4b23      	ldr	r3, [pc, #140]	@ (8003ef4 <MX_UART4_Init+0x94>)
 8003e66:	4a24      	ldr	r2, [pc, #144]	@ (8003ef8 <MX_UART4_Init+0x98>)
 8003e68:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8003e6a:	4b22      	ldr	r3, [pc, #136]	@ (8003ef4 <MX_UART4_Init+0x94>)
 8003e6c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003e70:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003e72:	4b20      	ldr	r3, [pc, #128]	@ (8003ef4 <MX_UART4_Init+0x94>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003e78:	4b1e      	ldr	r3, [pc, #120]	@ (8003ef4 <MX_UART4_Init+0x94>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ef4 <MX_UART4_Init+0x94>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003e84:	4b1b      	ldr	r3, [pc, #108]	@ (8003ef4 <MX_UART4_Init+0x94>)
 8003e86:	220c      	movs	r2, #12
 8003e88:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ef4 <MX_UART4_Init+0x94>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e90:	4b18      	ldr	r3, [pc, #96]	@ (8003ef4 <MX_UART4_Init+0x94>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_ENABLE;
 8003e96:	4b17      	ldr	r3, [pc, #92]	@ (8003ef4 <MX_UART4_Init+0x94>)
 8003e98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e9c:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003e9e:	4b15      	ldr	r3, [pc, #84]	@ (8003ef4 <MX_UART4_Init+0x94>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ea4:	4b13      	ldr	r3, [pc, #76]	@ (8003ef4 <MX_UART4_Init+0x94>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003eaa:	4812      	ldr	r0, [pc, #72]	@ (8003ef4 <MX_UART4_Init+0x94>)
 8003eac:	f005 fe40 	bl	8009b30 <HAL_UART_Init>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <MX_UART4_Init+0x5a>
  {
    Error_Handler();
 8003eb6:	f000 fac3 	bl	8004440 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003eba:	2100      	movs	r1, #0
 8003ebc:	480d      	ldr	r0, [pc, #52]	@ (8003ef4 <MX_UART4_Init+0x94>)
 8003ebe:	f007 fd28 	bl	800b912 <HAL_UARTEx_SetTxFifoThreshold>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <MX_UART4_Init+0x6c>
  {
    Error_Handler();
 8003ec8:	f000 faba 	bl	8004440 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8003ecc:	f04f 6120 	mov.w	r1, #167772160	@ 0xa000000
 8003ed0:	4808      	ldr	r0, [pc, #32]	@ (8003ef4 <MX_UART4_Init+0x94>)
 8003ed2:	f007 fd5c 	bl	800b98e <HAL_UARTEx_SetRxFifoThreshold>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <MX_UART4_Init+0x80>
  {
    Error_Handler();
 8003edc:	f000 fab0 	bl	8004440 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8003ee0:	4804      	ldr	r0, [pc, #16]	@ (8003ef4 <MX_UART4_Init+0x94>)
 8003ee2:	f007 fcdd 	bl	800b8a0 <HAL_UARTEx_DisableFifoMode>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <MX_UART4_Init+0x90>
  {
    Error_Handler();
 8003eec:	f000 faa8 	bl	8004440 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003ef0:	bf00      	nop
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	20000780 	.word	0x20000780
 8003ef8:	40004c00 	.word	0x40004c00

08003efc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003f00:	4b23      	ldr	r3, [pc, #140]	@ (8003f90 <MX_USART2_UART_Init+0x94>)
 8003f02:	4a24      	ldr	r2, [pc, #144]	@ (8003f94 <MX_USART2_UART_Init+0x98>)
 8003f04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8003f06:	4b22      	ldr	r3, [pc, #136]	@ (8003f90 <MX_USART2_UART_Init+0x94>)
 8003f08:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8003f0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8003f0e:	4b20      	ldr	r3, [pc, #128]	@ (8003f90 <MX_USART2_UART_Init+0x94>)
 8003f10:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003f14:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003f16:	4b1e      	ldr	r3, [pc, #120]	@ (8003f90 <MX_USART2_UART_Init+0x94>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8003f1c:	4b1c      	ldr	r3, [pc, #112]	@ (8003f90 <MX_USART2_UART_Init+0x94>)
 8003f1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003f24:	4b1a      	ldr	r3, [pc, #104]	@ (8003f90 <MX_USART2_UART_Init+0x94>)
 8003f26:	220c      	movs	r2, #12
 8003f28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f2a:	4b19      	ldr	r3, [pc, #100]	@ (8003f90 <MX_USART2_UART_Init+0x94>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f30:	4b17      	ldr	r3, [pc, #92]	@ (8003f90 <MX_USART2_UART_Init+0x94>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f36:	4b16      	ldr	r3, [pc, #88]	@ (8003f90 <MX_USART2_UART_Init+0x94>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003f3c:	4b14      	ldr	r3, [pc, #80]	@ (8003f90 <MX_USART2_UART_Init+0x94>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f42:	4b13      	ldr	r3, [pc, #76]	@ (8003f90 <MX_USART2_UART_Init+0x94>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003f48:	4811      	ldr	r0, [pc, #68]	@ (8003f90 <MX_USART2_UART_Init+0x94>)
 8003f4a:	f005 fdf1 	bl	8009b30 <HAL_UART_Init>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8003f54:	f000 fa74 	bl	8004440 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f58:	2100      	movs	r1, #0
 8003f5a:	480d      	ldr	r0, [pc, #52]	@ (8003f90 <MX_USART2_UART_Init+0x94>)
 8003f5c:	f007 fcd9 	bl	800b912 <HAL_UARTEx_SetTxFifoThreshold>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8003f66:	f000 fa6b 	bl	8004440 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	4808      	ldr	r0, [pc, #32]	@ (8003f90 <MX_USART2_UART_Init+0x94>)
 8003f6e:	f007 fd0e 	bl	800b98e <HAL_UARTEx_SetRxFifoThreshold>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8003f78:	f000 fa62 	bl	8004440 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003f7c:	4804      	ldr	r0, [pc, #16]	@ (8003f90 <MX_USART2_UART_Init+0x94>)
 8003f7e:	f007 fc8f 	bl	800b8a0 <HAL_UARTEx_DisableFifoMode>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8003f88:	f000 fa5a 	bl	8004440 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003f8c:	bf00      	nop
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	2000084c 	.word	0x2000084c
 8003f94:	40004400 	.word	0x40004400

08003f98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003f9e:	4b16      	ldr	r3, [pc, #88]	@ (8003ff8 <MX_DMA_Init+0x60>)
 8003fa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fa2:	4a15      	ldr	r2, [pc, #84]	@ (8003ff8 <MX_DMA_Init+0x60>)
 8003fa4:	f043 0304 	orr.w	r3, r3, #4
 8003fa8:	6493      	str	r3, [r2, #72]	@ 0x48
 8003faa:	4b13      	ldr	r3, [pc, #76]	@ (8003ff8 <MX_DMA_Init+0x60>)
 8003fac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fae:	f003 0304 	and.w	r3, r3, #4
 8003fb2:	607b      	str	r3, [r7, #4]
 8003fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003fb6:	4b10      	ldr	r3, [pc, #64]	@ (8003ff8 <MX_DMA_Init+0x60>)
 8003fb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fba:	4a0f      	ldr	r2, [pc, #60]	@ (8003ff8 <MX_DMA_Init+0x60>)
 8003fbc:	f043 0301 	orr.w	r3, r3, #1
 8003fc0:	6493      	str	r3, [r2, #72]	@ 0x48
 8003fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff8 <MX_DMA_Init+0x60>)
 8003fc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	603b      	str	r3, [r7, #0]
 8003fcc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003fce:	2200      	movs	r2, #0
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	200b      	movs	r0, #11
 8003fd4:	f001 ff93 	bl	8005efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003fd8:	200b      	movs	r0, #11
 8003fda:	f001 ffaa 	bl	8005f32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003fde:	2200      	movs	r2, #0
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	200c      	movs	r0, #12
 8003fe4:	f001 ff8b 	bl	8005efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003fe8:	200c      	movs	r0, #12
 8003fea:	f001 ffa2 	bl	8005f32 <HAL_NVIC_EnableIRQ>

}
 8003fee:	bf00      	nop
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	40021000 	.word	0x40021000

08003ffc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08a      	sub	sp, #40	@ 0x28
 8004000:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004002:	f107 0314 	add.w	r3, r7, #20
 8004006:	2200      	movs	r2, #0
 8004008:	601a      	str	r2, [r3, #0]
 800400a:	605a      	str	r2, [r3, #4]
 800400c:	609a      	str	r2, [r3, #8]
 800400e:	60da      	str	r2, [r3, #12]
 8004010:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004012:	4b4c      	ldr	r3, [pc, #304]	@ (8004144 <MX_GPIO_Init+0x148>)
 8004014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004016:	4a4b      	ldr	r2, [pc, #300]	@ (8004144 <MX_GPIO_Init+0x148>)
 8004018:	f043 0304 	orr.w	r3, r3, #4
 800401c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800401e:	4b49      	ldr	r3, [pc, #292]	@ (8004144 <MX_GPIO_Init+0x148>)
 8004020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004022:	f003 0304 	and.w	r3, r3, #4
 8004026:	613b      	str	r3, [r7, #16]
 8004028:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800402a:	4b46      	ldr	r3, [pc, #280]	@ (8004144 <MX_GPIO_Init+0x148>)
 800402c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800402e:	4a45      	ldr	r2, [pc, #276]	@ (8004144 <MX_GPIO_Init+0x148>)
 8004030:	f043 0320 	orr.w	r3, r3, #32
 8004034:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004036:	4b43      	ldr	r3, [pc, #268]	@ (8004144 <MX_GPIO_Init+0x148>)
 8004038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800403a:	f003 0320 	and.w	r3, r3, #32
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004042:	4b40      	ldr	r3, [pc, #256]	@ (8004144 <MX_GPIO_Init+0x148>)
 8004044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004046:	4a3f      	ldr	r2, [pc, #252]	@ (8004144 <MX_GPIO_Init+0x148>)
 8004048:	f043 0301 	orr.w	r3, r3, #1
 800404c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800404e:	4b3d      	ldr	r3, [pc, #244]	@ (8004144 <MX_GPIO_Init+0x148>)
 8004050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	60bb      	str	r3, [r7, #8]
 8004058:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800405a:	4b3a      	ldr	r3, [pc, #232]	@ (8004144 <MX_GPIO_Init+0x148>)
 800405c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800405e:	4a39      	ldr	r2, [pc, #228]	@ (8004144 <MX_GPIO_Init+0x148>)
 8004060:	f043 0302 	orr.w	r3, r3, #2
 8004064:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004066:	4b37      	ldr	r3, [pc, #220]	@ (8004144 <MX_GPIO_Init+0x148>)
 8004068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	607b      	str	r3, [r7, #4]
 8004070:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Push_solenoid_Pin, GPIO_PIN_RESET);
 8004072:	2200      	movs	r2, #0
 8004074:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8004078:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800407c:	f002 fc40 	bl	8006900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Pull_solenoid_Pin|Suck_solenoid_Pin, GPIO_PIN_RESET);
 8004080:	2200      	movs	r2, #0
 8004082:	2130      	movs	r1, #48	@ 0x30
 8004084:	4830      	ldr	r0, [pc, #192]	@ (8004148 <MX_GPIO_Init+0x14c>)
 8004086:	f002 fc3b 	bl	8006900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800408a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800408e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004090:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004094:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004096:	2300      	movs	r3, #0
 8004098:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800409a:	f107 0314 	add.w	r3, r7, #20
 800409e:	4619      	mov	r1, r3
 80040a0:	4829      	ldr	r0, [pc, #164]	@ (8004148 <MX_GPIO_Init+0x14c>)
 80040a2:	f002 fa93 	bl	80065cc <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Base_Pin Limit_Top_Pin Reed_pull_Pin */
  GPIO_InitStruct.Pin = Limit_Base_Pin|Limit_Top_Pin|Reed_pull_Pin;
 80040a6:	23d0      	movs	r3, #208	@ 0xd0
 80040a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040aa:	2300      	movs	r3, #0
 80040ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80040ae:	2302      	movs	r3, #2
 80040b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040b2:	f107 0314 	add.w	r3, r7, #20
 80040b6:	4619      	mov	r1, r3
 80040b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80040bc:	f002 fa86 	bl	80065cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Push_solenoid_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Push_solenoid_Pin;
 80040c0:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 80040c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040c6:	2301      	movs	r3, #1
 80040c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ca:	2300      	movs	r3, #0
 80040cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ce:	2300      	movs	r3, #0
 80040d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040d2:	f107 0314 	add.w	r3, r7, #20
 80040d6:	4619      	mov	r1, r3
 80040d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80040dc:	f002 fa76 	bl	80065cc <HAL_GPIO_Init>

  /*Configure GPIO pins : Pull_solenoid_Pin Suck_solenoid_Pin */
  GPIO_InitStruct.Pin = Pull_solenoid_Pin|Suck_solenoid_Pin;
 80040e0:	2330      	movs	r3, #48	@ 0x30
 80040e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040e4:	2301      	movs	r3, #1
 80040e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e8:	2300      	movs	r3, #0
 80040ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ec:	2300      	movs	r3, #0
 80040ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040f0:	f107 0314 	add.w	r3, r7, #20
 80040f4:	4619      	mov	r1, r3
 80040f6:	4814      	ldr	r0, [pc, #80]	@ (8004148 <MX_GPIO_Init+0x14c>)
 80040f8:	f002 fa68 	bl	80065cc <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Signal_Pin */
  GPIO_InitStruct.Pin = Emergency_Signal_Pin;
 80040fc:	2380      	movs	r3, #128	@ 0x80
 80040fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004100:	2300      	movs	r3, #0
 8004102:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004104:	2302      	movs	r3, #2
 8004106:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_Signal_GPIO_Port, &GPIO_InitStruct);
 8004108:	f107 0314 	add.w	r3, r7, #20
 800410c:	4619      	mov	r1, r3
 800410e:	480e      	ldr	r0, [pc, #56]	@ (8004148 <MX_GPIO_Init+0x14c>)
 8004110:	f002 fa5c 	bl	80065cc <HAL_GPIO_Init>

  /*Configure GPIO pin : Reed_push_Pin */
  GPIO_InitStruct.Pin = Reed_push_Pin;
 8004114:	2340      	movs	r3, #64	@ 0x40
 8004116:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004118:	2300      	movs	r3, #0
 800411a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800411c:	2302      	movs	r3, #2
 800411e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Reed_push_GPIO_Port, &GPIO_InitStruct);
 8004120:	f107 0314 	add.w	r3, r7, #20
 8004124:	4619      	mov	r1, r3
 8004126:	4809      	ldr	r0, [pc, #36]	@ (800414c <MX_GPIO_Init+0x150>)
 8004128:	f002 fa50 	bl	80065cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800412c:	2200      	movs	r2, #0
 800412e:	2100      	movs	r1, #0
 8004130:	2028      	movs	r0, #40	@ 0x28
 8004132:	f001 fee4 	bl	8005efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004136:	2028      	movs	r0, #40	@ 0x28
 8004138:	f001 fefb 	bl	8005f32 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800413c:	bf00      	nop
 800413e:	3728      	adds	r7, #40	@ 0x28
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40021000 	.word	0x40021000
 8004148:	48000800 	.word	0x48000800
 800414c:	48000400 	.word	0x48000400

08004150 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */
volatile uint32_t interrupt_counter = 0;			// Interurupt counter

// Timer Interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
 8004150:	b5b0      	push	{r4, r5, r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
		// Timer 5 Interrupt for Micros()
		if(htim == &htim5){_micros += UINT32_MAX;}
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a98      	ldr	r2, [pc, #608]	@ (80043bc <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d108      	bne.n	8004172 <HAL_TIM_PeriodElapsedCallback+0x22>
 8004160:	4b97      	ldr	r3, [pc, #604]	@ (80043c0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8004162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004166:	1e54      	subs	r4, r2, #1
 8004168:	f143 0500 	adc.w	r5, r3, #0
 800416c:	4b94      	ldr	r3, [pc, #592]	@ (80043c0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800416e:	e9c3 4500 	strd	r4, r5, [r3]

		// Timer 4 Interrupt for System Clock
		if(htim == &htim4){
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a93      	ldr	r2, [pc, #588]	@ (80043c4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8004176:	4293      	cmp	r3, r2
 8004178:	f040 811c 	bne.w	80043b4 <HAL_TIM_PeriodElapsedCallback+0x264>

			interrupt_counter++;
 800417c:	4b92      	ldr	r3, [pc, #584]	@ (80043c8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	3301      	adds	r3, #1
 8004182:	4a91      	ldr	r2, [pc, #580]	@ (80043c8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8004184:	6013      	str	r3, [r2, #0]

			// For 5 KHz
			//---------------- Check Case & PID & Trajectory ----------------//
			if(interrupt_counter % 4 == 0 && emer == 0){
 8004186:	4b90      	ldr	r3, [pc, #576]	@ (80043c8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	2b00      	cmp	r3, #0
 8004190:	f040 80a8 	bne.w	80042e4 <HAL_TIM_PeriodElapsedCallback+0x194>
 8004194:	4b8d      	ldr	r3, [pc, #564]	@ (80043cc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	f040 80a3 	bne.w	80042e4 <HAL_TIM_PeriodElapsedCallback+0x194>

				// Check Case From Base System
				easyCase();
 800419e:	f7fc ff7d 	bl	800109c <easyCase>
				switch(base.Base_case){
 80041a2:	4b8b      	ldr	r3, [pc, #556]	@ (80043d0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80041a4:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 80041a8:	3b01      	subs	r3, #1
 80041aa:	2b07      	cmp	r3, #7
 80041ac:	d835      	bhi.n	800421a <HAL_TIM_PeriodElapsedCallback+0xca>
 80041ae:	a201      	add	r2, pc, #4	@ (adr r2, 80041b4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80041b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b4:	080041d5 	.word	0x080041d5
 80041b8:	080041dd 	.word	0x080041dd
 80041bc:	0800421b 	.word	0x0800421b
 80041c0:	080041e9 	.word	0x080041e9
 80041c4:	0800421b 	.word	0x0800421b
 80041c8:	0800421b 	.word	0x0800421b
 80041cc:	0800421b 	.word	0x0800421b
 80041d0:	0800420f 	.word	0x0800420f
					case 1:
						base.BaseStatus = 1;
 80041d4:	4b7e      	ldr	r3, [pc, #504]	@ (80043d0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80041d6:	2201      	movs	r2, #1
 80041d8:	801a      	strh	r2, [r3, #0]
						break;
 80041da:	e02c      	b.n	8004236 <HAL_TIM_PeriodElapsedCallback+0xe6>
					case 2:
						base.BaseStatus = 2;
 80041dc:	4b7c      	ldr	r3, [pc, #496]	@ (80043d0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80041de:	2202      	movs	r2, #2
 80041e0:	801a      	strh	r2, [r3, #0]
						SetHome();
 80041e2:	f7fd f949 	bl	8001478 <SetHome>
						break;
 80041e6:	e026      	b.n	8004236 <HAL_TIM_PeriodElapsedCallback+0xe6>
					case 4:
						base.BaseStatus = (base.runJogMode == 0) ? 4 : ((base.runJogMode == 1) ? 8 : base.BaseStatus);
 80041e8:	4b79      	ldr	r3, [pc, #484]	@ (80043d0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80041ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d008      	beq.n	8004202 <HAL_TIM_PeriodElapsedCallback+0xb2>
 80041f0:	4b77      	ldr	r3, [pc, #476]	@ (80043d0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80041f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d002      	beq.n	80041fe <HAL_TIM_PeriodElapsedCallback+0xae>
 80041f8:	4b75      	ldr	r3, [pc, #468]	@ (80043d0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80041fa:	881b      	ldrh	r3, [r3, #0]
 80041fc:	e002      	b.n	8004204 <HAL_TIM_PeriodElapsedCallback+0xb4>
 80041fe:	2308      	movs	r3, #8
 8004200:	e000      	b.n	8004204 <HAL_TIM_PeriodElapsedCallback+0xb4>
 8004202:	2304      	movs	r3, #4
 8004204:	4a72      	ldr	r2, [pc, #456]	@ (80043d0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8004206:	8013      	strh	r3, [r2, #0]
						RunJog();
 8004208:	f7fd f9e2 	bl	80015d0 <RunJog>
						break;
 800420c:	e013      	b.n	8004236 <HAL_TIM_PeriodElapsedCallback+0xe6>
					case 8:
						base.BaseStatus = 16;
 800420e:	4b70      	ldr	r3, [pc, #448]	@ (80043d0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8004210:	2210      	movs	r2, #16
 8004212:	801a      	strh	r2, [r3, #0]
						RunPoint();
 8004214:	f7fd f89c 	bl	8001350 <RunPoint>
						break;
 8004218:	e00d      	b.n	8004236 <HAL_TIM_PeriodElapsedCallback+0xe6>
					default :
						base.BaseStatus = 0;
 800421a:	4b6d      	ldr	r3, [pc, #436]	@ (80043d0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800421c:	2200      	movs	r2, #0
 800421e:	801a      	strh	r2, [r3, #0]
						if(temp_home != 0){
 8004220:	4b6c      	ldr	r3, [pc, #432]	@ (80043d4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d002      	beq.n	800422e <HAL_TIM_PeriodElapsedCallback+0xde>
							Holding_position();
 8004228:	f7fd fd92 	bl	8001d50 <Holding_position>
 800422c:	e003      	b.n	8004236 <HAL_TIM_PeriodElapsedCallback+0xe6>
						}
						else{
							base.MotorHome = 0;
 800422e:	4b68      	ldr	r3, [pc, #416]	@ (80043d0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8004230:	2200      	movs	r2, #0
 8004232:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
						}
				}

				// Reed Switch Status
				int pinCombination = (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) << 1) | HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 8004236:	2140      	movs	r1, #64	@ 0x40
 8004238:	4867      	ldr	r0, [pc, #412]	@ (80043d8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800423a:	f002 fb49 	bl	80068d0 <HAL_GPIO_ReadPin>
 800423e:	4603      	mov	r3, r0
 8004240:	005c      	lsls	r4, r3, #1
 8004242:	2180      	movs	r1, #128	@ 0x80
 8004244:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004248:	f002 fb42 	bl	80068d0 <HAL_GPIO_ReadPin>
 800424c:	4603      	mov	r3, r0
 800424e:	4323      	orrs	r3, r4
 8004250:	60fb      	str	r3, [r7, #12]
				switch(pinCombination) {
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d007      	beq.n	8004268 <HAL_TIM_PeriodElapsedCallback+0x118>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2b02      	cmp	r3, #2
 800425c:	d109      	bne.n	8004272 <HAL_TIM_PeriodElapsedCallback+0x122>
					case 2: // Binary 10: B is SET, A is RESET
						base.ReedStatus = 0b0001;
 800425e:	4b5c      	ldr	r3, [pc, #368]	@ (80043d0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8004260:	2201      	movs	r2, #1
 8004262:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
						break;
 8004266:	e008      	b.n	800427a <HAL_TIM_PeriodElapsedCallback+0x12a>
					case 1: // Binary 01: B is RESET, A is SET
						base.ReedStatus = 0b0010;
 8004268:	4b59      	ldr	r3, [pc, #356]	@ (80043d0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800426a:	2202      	movs	r2, #2
 800426c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
						break;
 8004270:	e003      	b.n	800427a <HAL_TIM_PeriodElapsedCallback+0x12a>
					default:
						base.ReedStatus = 0b0000;
 8004272:	4b57      	ldr	r3, [pc, #348]	@ (80043d0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8004274:	2200      	movs	r2, #0
 8004276:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
				}

				// Coarse Step Joy
				if (ps2.mode == 1 && emer == 0 && base.ShelveMode == 1) {base.MotorHome = (ps2.pwmOut < 0) ? 0 : ps2.pwmOut;}
 800427a:	4b58      	ldr	r3, [pc, #352]	@ (80043dc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800427c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800427e:	2b01      	cmp	r3, #1
 8004280:	d10f      	bne.n	80042a2 <HAL_TIM_PeriodElapsedCallback+0x152>
 8004282:	4b52      	ldr	r3, [pc, #328]	@ (80043cc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10b      	bne.n	80042a2 <HAL_TIM_PeriodElapsedCallback+0x152>
 800428a:	4b51      	ldr	r3, [pc, #324]	@ (80043d0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800428c:	8b1b      	ldrh	r3, [r3, #24]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d107      	bne.n	80042a2 <HAL_TIM_PeriodElapsedCallback+0x152>
 8004292:	4b52      	ldr	r3, [pc, #328]	@ (80043dc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8004294:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004296:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800429a:	b21a      	sxth	r2, r3
 800429c:	4b4c      	ldr	r3, [pc, #304]	@ (80043d0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800429e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
				// Fine Step Joy
				if (ps2.mode == 2 && emer == 0 && base.ShelveMode == 1) {
 80042a2:	4b4e      	ldr	r3, [pc, #312]	@ (80043dc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80042a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d11c      	bne.n	80042e4 <HAL_TIM_PeriodElapsedCallback+0x194>
 80042aa:	4b48      	ldr	r3, [pc, #288]	@ (80043cc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d118      	bne.n	80042e4 <HAL_TIM_PeriodElapsedCallback+0x194>
 80042b2:	4b47      	ldr	r3, [pc, #284]	@ (80043d0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80042b4:	8b1b      	ldrh	r3, [r3, #24]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d114      	bne.n	80042e4 <HAL_TIM_PeriodElapsedCallback+0x194>
				    PID_controller_cascade(&PID_pos, &PID_velo, &AMT, ps2.PIDPos);
 80042ba:	4b48      	ldr	r3, [pc, #288]	@ (80043dc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80042bc:	edd3 7a1e 	vldr	s15, [r3, #120]	@ 0x78
 80042c0:	eeb0 0a67 	vmov.f32	s0, s15
 80042c4:	4a46      	ldr	r2, [pc, #280]	@ (80043e0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80042c6:	4947      	ldr	r1, [pc, #284]	@ (80043e4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80042c8:	4847      	ldr	r0, [pc, #284]	@ (80043e8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80042ca:	f7fe fdc9 	bl	8002e60 <PID_controller_cascade>
				    base.MotorHome = PID_velo.out;
 80042ce:	4b45      	ldr	r3, [pc, #276]	@ (80043e4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80042d0:	edd3 7a06 	vldr	s15, [r3, #24]
 80042d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042d8:	ee17 3a90 	vmov	r3, s15
 80042dc:	b21a      	sxth	r2, r3
 80042de:	4b3c      	ldr	r3, [pc, #240]	@ (80043d0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80042e0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
				}
			}

			// For 2 kHz
			//---------------------------For control PWM---------------------------//
			if(interrupt_counter % 10 == 0 && emer == 0){
 80042e4:	4b38      	ldr	r3, [pc, #224]	@ (80043c8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80042e6:	6819      	ldr	r1, [r3, #0]
 80042e8:	4b40      	ldr	r3, [pc, #256]	@ (80043ec <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80042ea:	fba3 2301 	umull	r2, r3, r3, r1
 80042ee:	08da      	lsrs	r2, r3, #3
 80042f0:	4613      	mov	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	1aca      	subs	r2, r1, r3
 80042fa:	2a00      	cmp	r2, #0
 80042fc:	d110      	bne.n	8004320 <HAL_TIM_PeriodElapsedCallback+0x1d0>
 80042fe:	4b33      	ldr	r3, [pc, #204]	@ (80043cc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10c      	bne.n	8004320 <HAL_TIM_PeriodElapsedCallback+0x1d0>
				MOTOR_set_duty(&MT, base.MotorHome);
 8004306:	4b32      	ldr	r3, [pc, #200]	@ (80043d0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8004308:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	@ 0x5c
 800430c:	ee07 3a90 	vmov	s15, r3
 8004310:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004314:	eeb0 0a67 	vmov.f32	s0, s15
 8004318:	4835      	ldr	r0, [pc, #212]	@ (80043f0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800431a:	f7fe f9f9 	bl	8002710 <MOTOR_set_duty>
 800431e:	e034      	b.n	800438a <HAL_TIM_PeriodElapsedCallback+0x23a>
			}
			else if(emer == 1){
 8004320:	4b2a      	ldr	r3, [pc, #168]	@ (80043cc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d130      	bne.n	800438a <HAL_TIM_PeriodElapsedCallback+0x23a>
				MOTOR_set_duty(&MT, 0);
 8004328:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 80043f4 <HAL_TIM_PeriodElapsedCallback+0x2a4>
 800432c:	4830      	ldr	r0, [pc, #192]	@ (80043f0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800432e:	f7fe f9ef 	bl	8002710 <MOTOR_set_duty>
				base.MotorHome = 0;
 8004332:	4b27      	ldr	r3, [pc, #156]	@ (80043d0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8004334:	2200      	movs	r2, #0
 8004336:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

				if(ps2.ps2RX[0] == 78){
 800433a:	4b28      	ldr	r3, [pc, #160]	@ (80043dc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	2b4e      	cmp	r3, #78	@ 0x4e
 8004340:	d123      	bne.n	800438a <HAL_TIM_PeriodElapsedCallback+0x23a>
					emer = 0;
 8004342:	4b22      	ldr	r3, [pc, #136]	@ (80043cc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]
					AMT.Linear_Position = 0;
 8004348:	4b25      	ldr	r3, [pc, #148]	@ (80043e0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800434a:	f04f 0200 	mov.w	r2, #0
 800434e:	645a      	str	r2, [r3, #68]	@ 0x44
					PID_pos.out = 0;
 8004350:	4b25      	ldr	r3, [pc, #148]	@ (80043e8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	619a      	str	r2, [r3, #24]
					PID_velo.out = 0;
 8004358:	4b22      	ldr	r3, [pc, #136]	@ (80043e4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800435a:	f04f 0200 	mov.w	r2, #0
 800435e:	619a      	str	r2, [r3, #24]
					Traj.currentPosition = AMT.Linear_Position;
 8004360:	4b1f      	ldr	r3, [pc, #124]	@ (80043e0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8004362:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004364:	4a24      	ldr	r2, [pc, #144]	@ (80043f8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8004366:	6093      	str	r3, [r2, #8]
					temp_pos = 0;
 8004368:	4b24      	ldr	r3, [pc, #144]	@ (80043fc <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800436a:	f04f 0200 	mov.w	r2, #0
 800436e:	601a      	str	r2, [r3, #0]
					temp_home = 0;
 8004370:	4b18      	ldr	r3, [pc, #96]	@ (80043d4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8004372:	2200      	movs	r2, #0
 8004374:	601a      	str	r2, [r3, #0]
					temp_cnt = 0;
 8004376:	4b22      	ldr	r3, [pc, #136]	@ (8004400 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]
					base.MotorHome = 0;
 800437c:	4b14      	ldr	r3, [pc, #80]	@ (80043d0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800437e:	2200      	movs	r2, #0
 8004380:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
					fuCount = 0;
 8004384:	4b1f      	ldr	r3, [pc, #124]	@ (8004404 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8004386:	2200      	movs	r2, #0
 8004388:	601a      	str	r2, [r3, #0]
				}
			}

			// For 1 kHz
			//----------------------For AMT Encoder------------------------//
			if(interrupt_counter % 20 == 0){
 800438a:	4b0f      	ldr	r3, [pc, #60]	@ (80043c8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800438c:	6819      	ldr	r1, [r3, #0]
 800438e:	4b17      	ldr	r3, [pc, #92]	@ (80043ec <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8004390:	fba3 2301 	umull	r2, r3, r3, r1
 8004394:	091a      	lsrs	r2, r3, #4
 8004396:	4613      	mov	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4413      	add	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	1aca      	subs	r2, r1, r3
 80043a0:	2a00      	cmp	r2, #0
 80043a2:	d107      	bne.n	80043b4 <HAL_TIM_PeriodElapsedCallback+0x264>
			    AMT_encoder_update(&AMT, &htim2, micros());}
 80043a4:	f000 f832 	bl	800440c <micros>
 80043a8:	4602      	mov	r2, r0
 80043aa:	460b      	mov	r3, r1
 80043ac:	4916      	ldr	r1, [pc, #88]	@ (8004408 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80043ae:	480c      	ldr	r0, [pc, #48]	@ (80043e0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80043b0:	f7fd fd12 	bl	8001dd8 <AMT_encoder_update>
		}
	}
 80043b4:	bf00      	nop
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bdb0      	pop	{r4, r5, r7, pc}
 80043bc:	200005e8 	.word	0x200005e8
 80043c0:	20001078 	.word	0x20001078
 80043c4:	2000051c 	.word	0x2000051c
 80043c8:	20001214 	.word	0x20001214
 80043cc:	20001070 	.word	0x20001070
 80043d0:	20000b00 	.word	0x20000b00
 80043d4:	200002a0 	.word	0x200002a0
 80043d8:	48000400 	.word	0x48000400
 80043dc:	20000a48 	.word	0x20000a48
 80043e0:	200009f8 	.word	0x200009f8
 80043e4:	20000ae4 	.word	0x20000ae4
 80043e8:	20000ac8 	.word	0x20000ac8
 80043ec:	cccccccd 	.word	0xcccccccd
 80043f0:	200009d8 	.word	0x200009d8
 80043f4:	00000000 	.word	0x00000000
 80043f8:	200009e0 	.word	0x200009e0
 80043fc:	20000298 	.word	0x20000298
 8004400:	2000029c 	.word	0x2000029c
 8004404:	20000294 	.word	0x20000294
 8004408:	20000384 	.word	0x20000384

0800440c <micros>:

uint64_t micros(){return __HAL_TIM_GET_COUNTER(&htim5)+_micros;}
 800440c:	b4b0      	push	{r4, r5, r7}
 800440e:	af00      	add	r7, sp, #0
 8004410:	4b09      	ldr	r3, [pc, #36]	@ (8004438 <micros+0x2c>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004416:	2200      	movs	r2, #0
 8004418:	4618      	mov	r0, r3
 800441a:	4611      	mov	r1, r2
 800441c:	4b07      	ldr	r3, [pc, #28]	@ (800443c <micros+0x30>)
 800441e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004422:	1884      	adds	r4, r0, r2
 8004424:	eb41 0503 	adc.w	r5, r1, r3
 8004428:	4622      	mov	r2, r4
 800442a:	462b      	mov	r3, r5
 800442c:	4610      	mov	r0, r2
 800442e:	4619      	mov	r1, r3
 8004430:	46bd      	mov	sp, r7
 8004432:	bcb0      	pop	{r4, r5, r7}
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	200005e8 	.word	0x200005e8
 800443c:	20001078 	.word	0x20001078

08004440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004444:	b672      	cpsid	i
}
 8004446:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004448:	bf00      	nop
 800444a:	e7fd      	b.n	8004448 <Error_Handler+0x8>

0800444c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004452:	4b0f      	ldr	r3, [pc, #60]	@ (8004490 <HAL_MspInit+0x44>)
 8004454:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004456:	4a0e      	ldr	r2, [pc, #56]	@ (8004490 <HAL_MspInit+0x44>)
 8004458:	f043 0301 	orr.w	r3, r3, #1
 800445c:	6613      	str	r3, [r2, #96]	@ 0x60
 800445e:	4b0c      	ldr	r3, [pc, #48]	@ (8004490 <HAL_MspInit+0x44>)
 8004460:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	607b      	str	r3, [r7, #4]
 8004468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800446a:	4b09      	ldr	r3, [pc, #36]	@ (8004490 <HAL_MspInit+0x44>)
 800446c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800446e:	4a08      	ldr	r2, [pc, #32]	@ (8004490 <HAL_MspInit+0x44>)
 8004470:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004474:	6593      	str	r3, [r2, #88]	@ 0x58
 8004476:	4b06      	ldr	r3, [pc, #24]	@ (8004490 <HAL_MspInit+0x44>)
 8004478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800447a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800447e:	603b      	str	r3, [r7, #0]
 8004480:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004482:	f002 fb1d 	bl	8006ac0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004486:	bf00      	nop
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	40021000 	.word	0x40021000

08004494 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b09e      	sub	sp, #120	@ 0x78
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800449c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80044a0:	2200      	movs	r2, #0
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	605a      	str	r2, [r3, #4]
 80044a6:	609a      	str	r2, [r3, #8]
 80044a8:	60da      	str	r2, [r3, #12]
 80044aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80044ac:	f107 0310 	add.w	r3, r7, #16
 80044b0:	2254      	movs	r2, #84	@ 0x54
 80044b2:	2100      	movs	r1, #0
 80044b4:	4618      	mov	r0, r3
 80044b6:	f007 faf7 	bl	800baa8 <memset>
  if(hadc->Instance==ADC1)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044c2:	d133      	bne.n	800452c <HAL_ADC_MspInit+0x98>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80044c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044c8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80044ca:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80044ce:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80044d0:	f107 0310 	add.w	r3, r7, #16
 80044d4:	4618      	mov	r0, r3
 80044d6:	f003 f831 	bl	800753c <HAL_RCCEx_PeriphCLKConfig>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d001      	beq.n	80044e4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80044e0:	f7ff ffae 	bl	8004440 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80044e4:	4b13      	ldr	r3, [pc, #76]	@ (8004534 <HAL_ADC_MspInit+0xa0>)
 80044e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044e8:	4a12      	ldr	r2, [pc, #72]	@ (8004534 <HAL_ADC_MspInit+0xa0>)
 80044ea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80044ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044f0:	4b10      	ldr	r3, [pc, #64]	@ (8004534 <HAL_ADC_MspInit+0xa0>)
 80044f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044fc:	4b0d      	ldr	r3, [pc, #52]	@ (8004534 <HAL_ADC_MspInit+0xa0>)
 80044fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004500:	4a0c      	ldr	r2, [pc, #48]	@ (8004534 <HAL_ADC_MspInit+0xa0>)
 8004502:	f043 0304 	orr.w	r3, r3, #4
 8004506:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004508:	4b0a      	ldr	r3, [pc, #40]	@ (8004534 <HAL_ADC_MspInit+0xa0>)
 800450a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	60bb      	str	r3, [r7, #8]
 8004512:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Current_sensor_Pin;
 8004514:	2301      	movs	r3, #1
 8004516:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004518:	2303      	movs	r3, #3
 800451a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800451c:	2300      	movs	r3, #0
 800451e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(Current_sensor_GPIO_Port, &GPIO_InitStruct);
 8004520:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004524:	4619      	mov	r1, r3
 8004526:	4804      	ldr	r0, [pc, #16]	@ (8004538 <HAL_ADC_MspInit+0xa4>)
 8004528:	f002 f850 	bl	80065cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800452c:	bf00      	nop
 800452e:	3778      	adds	r7, #120	@ 0x78
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	40021000 	.word	0x40021000
 8004538:	48000800 	.word	0x48000800

0800453c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b08a      	sub	sp, #40	@ 0x28
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004544:	f107 0314 	add.w	r3, r7, #20
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	605a      	str	r2, [r3, #4]
 800454e:	609a      	str	r2, [r3, #8]
 8004550:	60da      	str	r2, [r3, #12]
 8004552:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800455c:	d128      	bne.n	80045b0 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800455e:	4b16      	ldr	r3, [pc, #88]	@ (80045b8 <HAL_TIM_Encoder_MspInit+0x7c>)
 8004560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004562:	4a15      	ldr	r2, [pc, #84]	@ (80045b8 <HAL_TIM_Encoder_MspInit+0x7c>)
 8004564:	f043 0301 	orr.w	r3, r3, #1
 8004568:	6593      	str	r3, [r2, #88]	@ 0x58
 800456a:	4b13      	ldr	r3, [pc, #76]	@ (80045b8 <HAL_TIM_Encoder_MspInit+0x7c>)
 800456c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	613b      	str	r3, [r7, #16]
 8004574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004576:	4b10      	ldr	r3, [pc, #64]	@ (80045b8 <HAL_TIM_Encoder_MspInit+0x7c>)
 8004578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800457a:	4a0f      	ldr	r2, [pc, #60]	@ (80045b8 <HAL_TIM_Encoder_MspInit+0x7c>)
 800457c:	f043 0301 	orr.w	r3, r3, #1
 8004580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004582:	4b0d      	ldr	r3, [pc, #52]	@ (80045b8 <HAL_TIM_Encoder_MspInit+0x7c>)
 8004584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800458e:	2303      	movs	r3, #3
 8004590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004592:	2302      	movs	r3, #2
 8004594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004596:	2300      	movs	r3, #0
 8004598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800459a:	2300      	movs	r3, #0
 800459c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800459e:	2301      	movs	r3, #1
 80045a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045a2:	f107 0314 	add.w	r3, r7, #20
 80045a6:	4619      	mov	r1, r3
 80045a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80045ac:	f002 f80e 	bl	80065cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80045b0:	bf00      	nop
 80045b2:	3728      	adds	r7, #40	@ 0x28
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40021000 	.word	0x40021000

080045bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a30      	ldr	r2, [pc, #192]	@ (800468c <HAL_TIM_Base_MspInit+0xd0>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d10c      	bne.n	80045e8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80045ce:	4b30      	ldr	r3, [pc, #192]	@ (8004690 <HAL_TIM_Base_MspInit+0xd4>)
 80045d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045d2:	4a2f      	ldr	r2, [pc, #188]	@ (8004690 <HAL_TIM_Base_MspInit+0xd4>)
 80045d4:	f043 0302 	orr.w	r3, r3, #2
 80045d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80045da:	4b2d      	ldr	r3, [pc, #180]	@ (8004690 <HAL_TIM_Base_MspInit+0xd4>)
 80045dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	617b      	str	r3, [r7, #20]
 80045e4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80045e6:	e04c      	b.n	8004682 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a29      	ldr	r2, [pc, #164]	@ (8004694 <HAL_TIM_Base_MspInit+0xd8>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d114      	bne.n	800461c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80045f2:	4b27      	ldr	r3, [pc, #156]	@ (8004690 <HAL_TIM_Base_MspInit+0xd4>)
 80045f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045f6:	4a26      	ldr	r2, [pc, #152]	@ (8004690 <HAL_TIM_Base_MspInit+0xd4>)
 80045f8:	f043 0304 	orr.w	r3, r3, #4
 80045fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80045fe:	4b24      	ldr	r3, [pc, #144]	@ (8004690 <HAL_TIM_Base_MspInit+0xd4>)
 8004600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004602:	f003 0304 	and.w	r3, r3, #4
 8004606:	613b      	str	r3, [r7, #16]
 8004608:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800460a:	2200      	movs	r2, #0
 800460c:	2100      	movs	r1, #0
 800460e:	201e      	movs	r0, #30
 8004610:	f001 fc75 	bl	8005efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004614:	201e      	movs	r0, #30
 8004616:	f001 fc8c 	bl	8005f32 <HAL_NVIC_EnableIRQ>
}
 800461a:	e032      	b.n	8004682 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM5)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a1d      	ldr	r2, [pc, #116]	@ (8004698 <HAL_TIM_Base_MspInit+0xdc>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d114      	bne.n	8004650 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004626:	4b1a      	ldr	r3, [pc, #104]	@ (8004690 <HAL_TIM_Base_MspInit+0xd4>)
 8004628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800462a:	4a19      	ldr	r2, [pc, #100]	@ (8004690 <HAL_TIM_Base_MspInit+0xd4>)
 800462c:	f043 0308 	orr.w	r3, r3, #8
 8004630:	6593      	str	r3, [r2, #88]	@ 0x58
 8004632:	4b17      	ldr	r3, [pc, #92]	@ (8004690 <HAL_TIM_Base_MspInit+0xd4>)
 8004634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004636:	f003 0308 	and.w	r3, r3, #8
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800463e:	2200      	movs	r2, #0
 8004640:	2100      	movs	r1, #0
 8004642:	2032      	movs	r0, #50	@ 0x32
 8004644:	f001 fc5b 	bl	8005efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004648:	2032      	movs	r0, #50	@ 0x32
 800464a:	f001 fc72 	bl	8005f32 <HAL_NVIC_EnableIRQ>
}
 800464e:	e018      	b.n	8004682 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM16)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a11      	ldr	r2, [pc, #68]	@ (800469c <HAL_TIM_Base_MspInit+0xe0>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d113      	bne.n	8004682 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800465a:	4b0d      	ldr	r3, [pc, #52]	@ (8004690 <HAL_TIM_Base_MspInit+0xd4>)
 800465c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800465e:	4a0c      	ldr	r2, [pc, #48]	@ (8004690 <HAL_TIM_Base_MspInit+0xd4>)
 8004660:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004664:	6613      	str	r3, [r2, #96]	@ 0x60
 8004666:	4b0a      	ldr	r3, [pc, #40]	@ (8004690 <HAL_TIM_Base_MspInit+0xd4>)
 8004668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800466a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800466e:	60bb      	str	r3, [r7, #8]
 8004670:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004672:	2200      	movs	r2, #0
 8004674:	2100      	movs	r1, #0
 8004676:	2019      	movs	r0, #25
 8004678:	f001 fc41 	bl	8005efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800467c:	2019      	movs	r0, #25
 800467e:	f001 fc58 	bl	8005f32 <HAL_NVIC_EnableIRQ>
}
 8004682:	bf00      	nop
 8004684:	3718      	adds	r7, #24
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	40000400 	.word	0x40000400
 8004690:	40021000 	.word	0x40021000
 8004694:	40000800 	.word	0x40000800
 8004698:	40000c00 	.word	0x40000c00
 800469c:	40014400 	.word	0x40014400

080046a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b088      	sub	sp, #32
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046a8:	f107 030c 	add.w	r3, r7, #12
 80046ac:	2200      	movs	r2, #0
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	605a      	str	r2, [r3, #4]
 80046b2:	609a      	str	r2, [r3, #8]
 80046b4:	60da      	str	r2, [r3, #12]
 80046b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a11      	ldr	r2, [pc, #68]	@ (8004704 <HAL_TIM_MspPostInit+0x64>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d11b      	bne.n	80046fa <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046c2:	4b11      	ldr	r3, [pc, #68]	@ (8004708 <HAL_TIM_MspPostInit+0x68>)
 80046c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046c6:	4a10      	ldr	r2, [pc, #64]	@ (8004708 <HAL_TIM_MspPostInit+0x68>)
 80046c8:	f043 0302 	orr.w	r3, r3, #2
 80046cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004708 <HAL_TIM_MspPostInit+0x68>)
 80046d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	60bb      	str	r3, [r7, #8]
 80046d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80046da:	2330      	movs	r3, #48	@ 0x30
 80046dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046de:	2302      	movs	r3, #2
 80046e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e2:	2300      	movs	r3, #0
 80046e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046e6:	2300      	movs	r3, #0
 80046e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80046ea:	2302      	movs	r3, #2
 80046ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046ee:	f107 030c 	add.w	r3, r7, #12
 80046f2:	4619      	mov	r1, r3
 80046f4:	4805      	ldr	r0, [pc, #20]	@ (800470c <HAL_TIM_MspPostInit+0x6c>)
 80046f6:	f001 ff69 	bl	80065cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80046fa:	bf00      	nop
 80046fc:	3720      	adds	r7, #32
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	40000400 	.word	0x40000400
 8004708:	40021000 	.word	0x40021000
 800470c:	48000400 	.word	0x48000400

08004710 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b0a0      	sub	sp, #128	@ 0x80
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004718:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800471c:	2200      	movs	r2, #0
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	605a      	str	r2, [r3, #4]
 8004722:	609a      	str	r2, [r3, #8]
 8004724:	60da      	str	r2, [r3, #12]
 8004726:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004728:	f107 0318 	add.w	r3, r7, #24
 800472c:	2254      	movs	r2, #84	@ 0x54
 800472e:	2100      	movs	r1, #0
 8004730:	4618      	mov	r0, r3
 8004732:	f007 f9b9 	bl	800baa8 <memset>
  if(huart->Instance==UART4)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a6b      	ldr	r2, [pc, #428]	@ (80048e8 <HAL_UART_MspInit+0x1d8>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d137      	bne.n	80047b0 <HAL_UART_MspInit+0xa0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8004740:	2308      	movs	r3, #8
 8004742:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8004744:	2300      	movs	r3, #0
 8004746:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004748:	f107 0318 	add.w	r3, r7, #24
 800474c:	4618      	mov	r0, r3
 800474e:	f002 fef5 	bl	800753c <HAL_RCCEx_PeriphCLKConfig>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004758:	f7ff fe72 	bl	8004440 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800475c:	4b63      	ldr	r3, [pc, #396]	@ (80048ec <HAL_UART_MspInit+0x1dc>)
 800475e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004760:	4a62      	ldr	r2, [pc, #392]	@ (80048ec <HAL_UART_MspInit+0x1dc>)
 8004762:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004766:	6593      	str	r3, [r2, #88]	@ 0x58
 8004768:	4b60      	ldr	r3, [pc, #384]	@ (80048ec <HAL_UART_MspInit+0x1dc>)
 800476a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800476c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004770:	617b      	str	r3, [r7, #20]
 8004772:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004774:	4b5d      	ldr	r3, [pc, #372]	@ (80048ec <HAL_UART_MspInit+0x1dc>)
 8004776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004778:	4a5c      	ldr	r2, [pc, #368]	@ (80048ec <HAL_UART_MspInit+0x1dc>)
 800477a:	f043 0304 	orr.w	r3, r3, #4
 800477e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004780:	4b5a      	ldr	r3, [pc, #360]	@ (80048ec <HAL_UART_MspInit+0x1dc>)
 8004782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	613b      	str	r3, [r7, #16]
 800478a:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800478c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004790:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004792:	2302      	movs	r3, #2
 8004794:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004796:	2300      	movs	r3, #0
 8004798:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800479a:	2300      	movs	r3, #0
 800479c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 800479e:	2305      	movs	r3, #5
 80047a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047a2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80047a6:	4619      	mov	r1, r3
 80047a8:	4851      	ldr	r0, [pc, #324]	@ (80048f0 <HAL_UART_MspInit+0x1e0>)
 80047aa:	f001 ff0f 	bl	80065cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80047ae:	e097      	b.n	80048e0 <HAL_UART_MspInit+0x1d0>
  else if(huart->Instance==USART2)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a4f      	ldr	r2, [pc, #316]	@ (80048f4 <HAL_UART_MspInit+0x1e4>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	f040 8092 	bne.w	80048e0 <HAL_UART_MspInit+0x1d0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80047bc:	2302      	movs	r3, #2
 80047be:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80047c0:	2300      	movs	r3, #0
 80047c2:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80047c4:	f107 0318 	add.w	r3, r7, #24
 80047c8:	4618      	mov	r0, r3
 80047ca:	f002 feb7 	bl	800753c <HAL_RCCEx_PeriphCLKConfig>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 80047d4:	f7ff fe34 	bl	8004440 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80047d8:	4b44      	ldr	r3, [pc, #272]	@ (80048ec <HAL_UART_MspInit+0x1dc>)
 80047da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047dc:	4a43      	ldr	r2, [pc, #268]	@ (80048ec <HAL_UART_MspInit+0x1dc>)
 80047de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80047e4:	4b41      	ldr	r3, [pc, #260]	@ (80048ec <HAL_UART_MspInit+0x1dc>)
 80047e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ec:	60fb      	str	r3, [r7, #12]
 80047ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047f0:	4b3e      	ldr	r3, [pc, #248]	@ (80048ec <HAL_UART_MspInit+0x1dc>)
 80047f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047f4:	4a3d      	ldr	r2, [pc, #244]	@ (80048ec <HAL_UART_MspInit+0x1dc>)
 80047f6:	f043 0301 	orr.w	r3, r3, #1
 80047fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80047fc:	4b3b      	ldr	r3, [pc, #236]	@ (80048ec <HAL_UART_MspInit+0x1dc>)
 80047fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	60bb      	str	r3, [r7, #8]
 8004806:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004808:	230c      	movs	r3, #12
 800480a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800480c:	2302      	movs	r3, #2
 800480e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004810:	2300      	movs	r3, #0
 8004812:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004814:	2300      	movs	r3, #0
 8004816:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004818:	2307      	movs	r3, #7
 800481a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800481c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004820:	4619      	mov	r1, r3
 8004822:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004826:	f001 fed1 	bl	80065cc <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel1;
 800482a:	4b33      	ldr	r3, [pc, #204]	@ (80048f8 <HAL_UART_MspInit+0x1e8>)
 800482c:	4a33      	ldr	r2, [pc, #204]	@ (80048fc <HAL_UART_MspInit+0x1ec>)
 800482e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004830:	4b31      	ldr	r3, [pc, #196]	@ (80048f8 <HAL_UART_MspInit+0x1e8>)
 8004832:	221b      	movs	r2, #27
 8004834:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004836:	4b30      	ldr	r3, [pc, #192]	@ (80048f8 <HAL_UART_MspInit+0x1e8>)
 8004838:	2210      	movs	r2, #16
 800483a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800483c:	4b2e      	ldr	r3, [pc, #184]	@ (80048f8 <HAL_UART_MspInit+0x1e8>)
 800483e:	2200      	movs	r2, #0
 8004840:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004842:	4b2d      	ldr	r3, [pc, #180]	@ (80048f8 <HAL_UART_MspInit+0x1e8>)
 8004844:	2280      	movs	r2, #128	@ 0x80
 8004846:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004848:	4b2b      	ldr	r3, [pc, #172]	@ (80048f8 <HAL_UART_MspInit+0x1e8>)
 800484a:	2200      	movs	r2, #0
 800484c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800484e:	4b2a      	ldr	r3, [pc, #168]	@ (80048f8 <HAL_UART_MspInit+0x1e8>)
 8004850:	2200      	movs	r2, #0
 8004852:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004854:	4b28      	ldr	r3, [pc, #160]	@ (80048f8 <HAL_UART_MspInit+0x1e8>)
 8004856:	2200      	movs	r2, #0
 8004858:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800485a:	4b27      	ldr	r3, [pc, #156]	@ (80048f8 <HAL_UART_MspInit+0x1e8>)
 800485c:	2200      	movs	r2, #0
 800485e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004860:	4825      	ldr	r0, [pc, #148]	@ (80048f8 <HAL_UART_MspInit+0x1e8>)
 8004862:	f001 fb81 	bl	8005f68 <HAL_DMA_Init>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <HAL_UART_MspInit+0x160>
      Error_Handler();
 800486c:	f7ff fde8 	bl	8004440 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a21      	ldr	r2, [pc, #132]	@ (80048f8 <HAL_UART_MspInit+0x1e8>)
 8004874:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004876:	4a20      	ldr	r2, [pc, #128]	@ (80048f8 <HAL_UART_MspInit+0x1e8>)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_rx.Instance = DMA1_Channel2;
 800487c:	4b20      	ldr	r3, [pc, #128]	@ (8004900 <HAL_UART_MspInit+0x1f0>)
 800487e:	4a21      	ldr	r2, [pc, #132]	@ (8004904 <HAL_UART_MspInit+0x1f4>)
 8004880:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004882:	4b1f      	ldr	r3, [pc, #124]	@ (8004900 <HAL_UART_MspInit+0x1f0>)
 8004884:	221a      	movs	r2, #26
 8004886:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004888:	4b1d      	ldr	r3, [pc, #116]	@ (8004900 <HAL_UART_MspInit+0x1f0>)
 800488a:	2200      	movs	r2, #0
 800488c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800488e:	4b1c      	ldr	r3, [pc, #112]	@ (8004900 <HAL_UART_MspInit+0x1f0>)
 8004890:	2200      	movs	r2, #0
 8004892:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004894:	4b1a      	ldr	r3, [pc, #104]	@ (8004900 <HAL_UART_MspInit+0x1f0>)
 8004896:	2280      	movs	r2, #128	@ 0x80
 8004898:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800489a:	4b19      	ldr	r3, [pc, #100]	@ (8004900 <HAL_UART_MspInit+0x1f0>)
 800489c:	2200      	movs	r2, #0
 800489e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048a0:	4b17      	ldr	r3, [pc, #92]	@ (8004900 <HAL_UART_MspInit+0x1f0>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80048a6:	4b16      	ldr	r3, [pc, #88]	@ (8004900 <HAL_UART_MspInit+0x1f0>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80048ac:	4b14      	ldr	r3, [pc, #80]	@ (8004900 <HAL_UART_MspInit+0x1f0>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80048b2:	4813      	ldr	r0, [pc, #76]	@ (8004900 <HAL_UART_MspInit+0x1f0>)
 80048b4:	f001 fb58 	bl	8005f68 <HAL_DMA_Init>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <HAL_UART_MspInit+0x1b2>
      Error_Handler();
 80048be:	f7ff fdbf 	bl	8004440 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a0e      	ldr	r2, [pc, #56]	@ (8004900 <HAL_UART_MspInit+0x1f0>)
 80048c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80048ca:	4a0d      	ldr	r2, [pc, #52]	@ (8004900 <HAL_UART_MspInit+0x1f0>)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80048d0:	2200      	movs	r2, #0
 80048d2:	2100      	movs	r1, #0
 80048d4:	2026      	movs	r0, #38	@ 0x26
 80048d6:	f001 fb12 	bl	8005efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80048da:	2026      	movs	r0, #38	@ 0x26
 80048dc:	f001 fb29 	bl	8005f32 <HAL_NVIC_EnableIRQ>
}
 80048e0:	bf00      	nop
 80048e2:	3780      	adds	r7, #128	@ 0x80
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40004c00 	.word	0x40004c00
 80048ec:	40021000 	.word	0x40021000
 80048f0:	48000800 	.word	0x48000800
 80048f4:	40004400 	.word	0x40004400
 80048f8:	20000918 	.word	0x20000918
 80048fc:	40020008 	.word	0x40020008
 8004900:	20000978 	.word	0x20000978
 8004904:	4002001c 	.word	0x4002001c

08004908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004908:	b480      	push	{r7}
 800490a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800490c:	bf00      	nop
 800490e:	e7fd      	b.n	800490c <NMI_Handler+0x4>

08004910 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004914:	bf00      	nop
 8004916:	e7fd      	b.n	8004914 <HardFault_Handler+0x4>

08004918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004918:	b480      	push	{r7}
 800491a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800491c:	bf00      	nop
 800491e:	e7fd      	b.n	800491c <MemManage_Handler+0x4>

08004920 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004924:	bf00      	nop
 8004926:	e7fd      	b.n	8004924 <BusFault_Handler+0x4>

08004928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800492c:	bf00      	nop
 800492e:	e7fd      	b.n	800492c <UsageFault_Handler+0x4>

08004930 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004930:	b480      	push	{r7}
 8004932:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004934:	bf00      	nop
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800493e:	b480      	push	{r7}
 8004940:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004942:	bf00      	nop
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004950:	bf00      	nop
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800495e:	f000 f8d5 	bl	8004b0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004962:	bf00      	nop
 8004964:	bd80      	pop	{r7, pc}
	...

08004968 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800496c:	4802      	ldr	r0, [pc, #8]	@ (8004978 <DMA1_Channel1_IRQHandler+0x10>)
 800496e:	f001 fcde 	bl	800632e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004972:	bf00      	nop
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	20000918 	.word	0x20000918

0800497c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004980:	4802      	ldr	r0, [pc, #8]	@ (800498c <DMA1_Channel2_IRQHandler+0x10>)
 8004982:	f001 fcd4 	bl	800632e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004986:	bf00      	nop
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	20000978 	.word	0x20000978

08004990 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004994:	4802      	ldr	r0, [pc, #8]	@ (80049a0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8004996:	f003 fd71 	bl	800847c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800499a:	bf00      	nop
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	200006b4 	.word	0x200006b4

080049a4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80049a8:	4802      	ldr	r0, [pc, #8]	@ (80049b4 <TIM4_IRQHandler+0x10>)
 80049aa:	f003 fd67 	bl	800847c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80049ae:	bf00      	nop
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	2000051c 	.word	0x2000051c

080049b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80049bc:	4802      	ldr	r0, [pc, #8]	@ (80049c8 <USART2_IRQHandler+0x10>)
 80049be:	f005 fb65 	bl	800a08c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80049c2:	bf00      	nop
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	2000084c 	.word	0x2000084c

080049cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80049d0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80049d4:	f001 ffac 	bl	8006930 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80049d8:	bf00      	nop
 80049da:	bd80      	pop	{r7, pc}

080049dc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80049e0:	4802      	ldr	r0, [pc, #8]	@ (80049ec <TIM5_IRQHandler+0x10>)
 80049e2:	f003 fd4b 	bl	800847c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80049e6:	bf00      	nop
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	200005e8 	.word	0x200005e8

080049f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80049f4:	4b06      	ldr	r3, [pc, #24]	@ (8004a10 <SystemInit+0x20>)
 80049f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049fa:	4a05      	ldr	r2, [pc, #20]	@ (8004a10 <SystemInit+0x20>)
 80049fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004a00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a04:	bf00      	nop
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	e000ed00 	.word	0xe000ed00

08004a14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
	  ldr   r0, =_estack
 8004a14:	480d      	ldr	r0, [pc, #52]	@ (8004a4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004a16:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004a18:	f7ff ffea 	bl	80049f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004a1c:	480c      	ldr	r0, [pc, #48]	@ (8004a50 <LoopForever+0x6>)
  ldr r1, =_edata
 8004a1e:	490d      	ldr	r1, [pc, #52]	@ (8004a54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004a20:	4a0d      	ldr	r2, [pc, #52]	@ (8004a58 <LoopForever+0xe>)
  movs r3, #0
 8004a22:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004a24:	e002      	b.n	8004a2c <LoopCopyDataInit>

08004a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a2a:	3304      	adds	r3, #4

08004a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a30:	d3f9      	bcc.n	8004a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a32:	4a0a      	ldr	r2, [pc, #40]	@ (8004a5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004a34:	4c0a      	ldr	r4, [pc, #40]	@ (8004a60 <LoopForever+0x16>)
  movs r3, #0
 8004a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a38:	e001      	b.n	8004a3e <LoopFillZerobss>

08004a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a3c:	3204      	adds	r2, #4

08004a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a40:	d3fb      	bcc.n	8004a3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004a42:	f007 f83f 	bl	800bac4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004a46:	f7fe feab 	bl	80037a0 <main>

08004a4a <LoopForever>:

LoopForever:
    b LoopForever
 8004a4a:	e7fe      	b.n	8004a4a <LoopForever>
	  ldr   r0, =_estack
 8004a4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a54:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 8004a58:	0800bdb4 	.word	0x0800bdb4
  ldr r2, =_sbss
 8004a5c:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8004a60:	2000135c 	.word	0x2000135c

08004a64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004a64:	e7fe      	b.n	8004a64 <ADC1_2_IRQHandler>

08004a66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b082      	sub	sp, #8
 8004a6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a70:	2003      	movs	r0, #3
 8004a72:	f001 fa39 	bl	8005ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a76:	2000      	movs	r0, #0
 8004a78:	f000 f80e 	bl	8004a98 <HAL_InitTick>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d002      	beq.n	8004a88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	71fb      	strb	r3, [r7, #7]
 8004a86:	e001      	b.n	8004a8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004a88:	f7ff fce0 	bl	800444c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004a8c:	79fb      	ldrb	r3, [r7, #7]

}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004aa4:	4b16      	ldr	r3, [pc, #88]	@ (8004b00 <HAL_InitTick+0x68>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d022      	beq.n	8004af2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004aac:	4b15      	ldr	r3, [pc, #84]	@ (8004b04 <HAL_InitTick+0x6c>)
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	4b13      	ldr	r3, [pc, #76]	@ (8004b00 <HAL_InitTick+0x68>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004ab8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f001 fa44 	bl	8005f4e <HAL_SYSTICK_Config>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10f      	bne.n	8004aec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b0f      	cmp	r3, #15
 8004ad0:	d809      	bhi.n	8004ae6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	6879      	ldr	r1, [r7, #4]
 8004ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8004ada:	f001 fa10 	bl	8005efe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004ade:	4a0a      	ldr	r2, [pc, #40]	@ (8004b08 <HAL_InitTick+0x70>)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6013      	str	r3, [r2, #0]
 8004ae4:	e007      	b.n	8004af6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	73fb      	strb	r3, [r7, #15]
 8004aea:	e004      	b.n	8004af6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	73fb      	strb	r3, [r7, #15]
 8004af0:	e001      	b.n	8004af6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	20000210 	.word	0x20000210
 8004b04:	20000208 	.word	0x20000208
 8004b08:	2000020c 	.word	0x2000020c

08004b0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b10:	4b05      	ldr	r3, [pc, #20]	@ (8004b28 <HAL_IncTick+0x1c>)
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	4b05      	ldr	r3, [pc, #20]	@ (8004b2c <HAL_IncTick+0x20>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4413      	add	r3, r2
 8004b1a:	4a03      	ldr	r2, [pc, #12]	@ (8004b28 <HAL_IncTick+0x1c>)
 8004b1c:	6013      	str	r3, [r2, #0]
}
 8004b1e:	bf00      	nop
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr
 8004b28:	20001220 	.word	0x20001220
 8004b2c:	20000210 	.word	0x20000210

08004b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b30:	b480      	push	{r7}
 8004b32:	af00      	add	r7, sp, #0
  return uwTick;
 8004b34:	4b03      	ldr	r3, [pc, #12]	@ (8004b44 <HAL_GetTick+0x14>)
 8004b36:	681b      	ldr	r3, [r3, #0]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	20001220 	.word	0x20001220

08004b48 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	609a      	str	r2, [r3, #8]
}
 8004b62:	bf00      	nop
 8004b64:	370c      	adds	r7, #12
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr

08004b6e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004b6e:	b480      	push	{r7}
 8004b70:	b083      	sub	sp, #12
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
 8004b76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	609a      	str	r2, [r3, #8]
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
 8004bbc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	3360      	adds	r3, #96	@ 0x60
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	4b08      	ldr	r3, [pc, #32]	@ (8004bf4 <LL_ADC_SetOffset+0x44>)
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	4313      	orrs	r3, r2
 8004be0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004be8:	bf00      	nop
 8004bea:	371c      	adds	r7, #28
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	03fff000 	.word	0x03fff000

08004bf8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	3360      	adds	r3, #96	@ 0x60
 8004c06:	461a      	mov	r2, r3
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3714      	adds	r7, #20
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b087      	sub	sp, #28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	3360      	adds	r3, #96	@ 0x60
 8004c34:	461a      	mov	r2, r3
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4413      	add	r3, r2
 8004c3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004c4e:	bf00      	nop
 8004c50:	371c      	adds	r7, #28
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b087      	sub	sp, #28
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	60f8      	str	r0, [r7, #12]
 8004c62:	60b9      	str	r1, [r7, #8]
 8004c64:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	3360      	adds	r3, #96	@ 0x60
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004c84:	bf00      	nop
 8004c86:	371c      	adds	r7, #28
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	3360      	adds	r3, #96	@ 0x60
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4413      	add	r3, r2
 8004ca8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004cba:	bf00      	nop
 8004cbc:	371c      	adds	r7, #28
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b083      	sub	sp, #12
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
 8004cce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	615a      	str	r2, [r3, #20]
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b087      	sub	sp, #28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	3330      	adds	r3, #48	@ 0x30
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	0a1b      	lsrs	r3, r3, #8
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	f003 030c 	and.w	r3, r3, #12
 8004d08:	4413      	add	r3, r2
 8004d0a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	f003 031f 	and.w	r3, r3, #31
 8004d16:	211f      	movs	r1, #31
 8004d18:	fa01 f303 	lsl.w	r3, r1, r3
 8004d1c:	43db      	mvns	r3, r3
 8004d1e:	401a      	ands	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	0e9b      	lsrs	r3, r3, #26
 8004d24:	f003 011f 	and.w	r1, r3, #31
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f003 031f 	and.w	r3, r3, #31
 8004d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d32:	431a      	orrs	r2, r3
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004d38:	bf00      	nop
 8004d3a:	371c      	adds	r7, #28
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	3314      	adds	r3, #20
 8004d54:	461a      	mov	r2, r3
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	0e5b      	lsrs	r3, r3, #25
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	4413      	add	r3, r2
 8004d62:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	0d1b      	lsrs	r3, r3, #20
 8004d6c:	f003 031f 	and.w	r3, r3, #31
 8004d70:	2107      	movs	r1, #7
 8004d72:	fa01 f303 	lsl.w	r3, r1, r3
 8004d76:	43db      	mvns	r3, r3
 8004d78:	401a      	ands	r2, r3
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	0d1b      	lsrs	r3, r3, #20
 8004d7e:	f003 031f 	and.w	r3, r3, #31
 8004d82:	6879      	ldr	r1, [r7, #4]
 8004d84:	fa01 f303 	lsl.w	r3, r1, r3
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004d8e:	bf00      	nop
 8004d90:	371c      	adds	r7, #28
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
	...

08004d9c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004db4:	43db      	mvns	r3, r3
 8004db6:	401a      	ands	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f003 0318 	and.w	r3, r3, #24
 8004dbe:	4908      	ldr	r1, [pc, #32]	@ (8004de0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004dc0:	40d9      	lsrs	r1, r3
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	400b      	ands	r3, r1
 8004dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004dd2:	bf00      	nop
 8004dd4:	3714      	adds	r7, #20
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	0007ffff 	.word	0x0007ffff

08004de4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004df4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	6093      	str	r3, [r2, #8]
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e1c:	d101      	bne.n	8004e22 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e000      	b.n	8004e24 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004e40:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004e44:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e6c:	d101      	bne.n	8004e72 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e000      	b.n	8004e74 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d101      	bne.n	8004e98 <LL_ADC_IsEnabled+0x18>
 8004e94:	2301      	movs	r3, #1
 8004e96:	e000      	b.n	8004e9a <LL_ADC_IsEnabled+0x1a>
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 0304 	and.w	r3, r3, #4
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d101      	bne.n	8004ebe <LL_ADC_REG_IsConversionOngoing+0x18>
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e000      	b.n	8004ec0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f003 0308 	and.w	r3, r3, #8
 8004edc:	2b08      	cmp	r3, #8
 8004ede:	d101      	bne.n	8004ee4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e000      	b.n	8004ee6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
	...

08004ef4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004ef4:	b590      	push	{r4, r7, lr}
 8004ef6:	b089      	sub	sp, #36	@ 0x24
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004efc:	2300      	movs	r3, #0
 8004efe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004f00:	2300      	movs	r3, #0
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e1a9      	b.n	8005262 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d109      	bne.n	8004f30 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f7ff fab9 	bl	8004494 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7ff ff67 	bl	8004e08 <LL_ADC_IsDeepPowerDownEnabled>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d004      	beq.n	8004f4a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7ff ff4d 	bl	8004de4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f7ff ff82 	bl	8004e58 <LL_ADC_IsInternalRegulatorEnabled>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d115      	bne.n	8004f86 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7ff ff66 	bl	8004e30 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f64:	4b9c      	ldr	r3, [pc, #624]	@ (80051d8 <HAL_ADC_Init+0x2e4>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	099b      	lsrs	r3, r3, #6
 8004f6a:	4a9c      	ldr	r2, [pc, #624]	@ (80051dc <HAL_ADC_Init+0x2e8>)
 8004f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f70:	099b      	lsrs	r3, r3, #6
 8004f72:	3301      	adds	r3, #1
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004f78:	e002      	b.n	8004f80 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1f9      	bne.n	8004f7a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7ff ff64 	bl	8004e58 <LL_ADC_IsInternalRegulatorEnabled>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10d      	bne.n	8004fb2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f9a:	f043 0210 	orr.w	r2, r3, #16
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fa6:	f043 0201 	orr.w	r2, r3, #1
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7ff ff75 	bl	8004ea6 <LL_ADC_REG_IsConversionOngoing>
 8004fbc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fc2:	f003 0310 	and.w	r3, r3, #16
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f040 8142 	bne.w	8005250 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f040 813e 	bne.w	8005250 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fd8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004fdc:	f043 0202 	orr.w	r2, r3, #2
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7ff ff49 	bl	8004e80 <LL_ADC_IsEnabled>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d141      	bne.n	8005078 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ffc:	d004      	beq.n	8005008 <HAL_ADC_Init+0x114>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a77      	ldr	r2, [pc, #476]	@ (80051e0 <HAL_ADC_Init+0x2ec>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d10f      	bne.n	8005028 <HAL_ADC_Init+0x134>
 8005008:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800500c:	f7ff ff38 	bl	8004e80 <LL_ADC_IsEnabled>
 8005010:	4604      	mov	r4, r0
 8005012:	4873      	ldr	r0, [pc, #460]	@ (80051e0 <HAL_ADC_Init+0x2ec>)
 8005014:	f7ff ff34 	bl	8004e80 <LL_ADC_IsEnabled>
 8005018:	4603      	mov	r3, r0
 800501a:	4323      	orrs	r3, r4
 800501c:	2b00      	cmp	r3, #0
 800501e:	bf0c      	ite	eq
 8005020:	2301      	moveq	r3, #1
 8005022:	2300      	movne	r3, #0
 8005024:	b2db      	uxtb	r3, r3
 8005026:	e012      	b.n	800504e <HAL_ADC_Init+0x15a>
 8005028:	486e      	ldr	r0, [pc, #440]	@ (80051e4 <HAL_ADC_Init+0x2f0>)
 800502a:	f7ff ff29 	bl	8004e80 <LL_ADC_IsEnabled>
 800502e:	4604      	mov	r4, r0
 8005030:	486d      	ldr	r0, [pc, #436]	@ (80051e8 <HAL_ADC_Init+0x2f4>)
 8005032:	f7ff ff25 	bl	8004e80 <LL_ADC_IsEnabled>
 8005036:	4603      	mov	r3, r0
 8005038:	431c      	orrs	r4, r3
 800503a:	486c      	ldr	r0, [pc, #432]	@ (80051ec <HAL_ADC_Init+0x2f8>)
 800503c:	f7ff ff20 	bl	8004e80 <LL_ADC_IsEnabled>
 8005040:	4603      	mov	r3, r0
 8005042:	4323      	orrs	r3, r4
 8005044:	2b00      	cmp	r3, #0
 8005046:	bf0c      	ite	eq
 8005048:	2301      	moveq	r3, #1
 800504a:	2300      	movne	r3, #0
 800504c:	b2db      	uxtb	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d012      	beq.n	8005078 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800505a:	d004      	beq.n	8005066 <HAL_ADC_Init+0x172>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a5f      	ldr	r2, [pc, #380]	@ (80051e0 <HAL_ADC_Init+0x2ec>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d101      	bne.n	800506a <HAL_ADC_Init+0x176>
 8005066:	4a62      	ldr	r2, [pc, #392]	@ (80051f0 <HAL_ADC_Init+0x2fc>)
 8005068:	e000      	b.n	800506c <HAL_ADC_Init+0x178>
 800506a:	4a62      	ldr	r2, [pc, #392]	@ (80051f4 <HAL_ADC_Init+0x300>)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	4619      	mov	r1, r3
 8005072:	4610      	mov	r0, r2
 8005074:	f7ff fd68 	bl	8004b48 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	7f5b      	ldrb	r3, [r3, #29]
 800507c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005082:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005088:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800508e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005096:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005098:	4313      	orrs	r3, r2
 800509a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d106      	bne.n	80050b4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050aa:	3b01      	subs	r3, #1
 80050ac:	045b      	lsls	r3, r3, #17
 80050ae:	69ba      	ldr	r2, [r7, #24]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d009      	beq.n	80050d0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80050ca:	69ba      	ldr	r2, [r7, #24]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	4b48      	ldr	r3, [pc, #288]	@ (80051f8 <HAL_ADC_Init+0x304>)
 80050d8:	4013      	ands	r3, r2
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	6812      	ldr	r2, [r2, #0]
 80050de:	69b9      	ldr	r1, [r7, #24]
 80050e0:	430b      	orrs	r3, r1
 80050e2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4618      	mov	r0, r3
 8005100:	f7ff fee4 	bl	8004ecc <LL_ADC_INJ_IsConversionOngoing>
 8005104:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d17f      	bne.n	800520c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d17c      	bne.n	800520c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005116:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800511e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005120:	4313      	orrs	r3, r2
 8005122:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800512e:	f023 0302 	bic.w	r3, r3, #2
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	6812      	ldr	r2, [r2, #0]
 8005136:	69b9      	ldr	r1, [r7, #24]
 8005138:	430b      	orrs	r3, r1
 800513a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d017      	beq.n	8005174 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	691a      	ldr	r2, [r3, #16]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005152:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800515c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005160:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6911      	ldr	r1, [r2, #16]
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	6812      	ldr	r2, [r2, #0]
 800516c:	430b      	orrs	r3, r1
 800516e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8005172:	e013      	b.n	800519c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	691a      	ldr	r2, [r3, #16]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005182:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6812      	ldr	r2, [r2, #0]
 8005190:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005194:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005198:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d12a      	bne.n	80051fc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80051b0:	f023 0304 	bic.w	r3, r3, #4
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80051bc:	4311      	orrs	r1, r2
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80051c2:	4311      	orrs	r1, r2
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80051c8:	430a      	orrs	r2, r1
 80051ca:	431a      	orrs	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f042 0201 	orr.w	r2, r2, #1
 80051d4:	611a      	str	r2, [r3, #16]
 80051d6:	e019      	b.n	800520c <HAL_ADC_Init+0x318>
 80051d8:	20000208 	.word	0x20000208
 80051dc:	053e2d63 	.word	0x053e2d63
 80051e0:	50000100 	.word	0x50000100
 80051e4:	50000400 	.word	0x50000400
 80051e8:	50000500 	.word	0x50000500
 80051ec:	50000600 	.word	0x50000600
 80051f0:	50000300 	.word	0x50000300
 80051f4:	50000700 	.word	0x50000700
 80051f8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	691a      	ldr	r2, [r3, #16]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 0201 	bic.w	r2, r2, #1
 800520a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d10c      	bne.n	800522e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800521a:	f023 010f 	bic.w	r1, r3, #15
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	1e5a      	subs	r2, r3, #1
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	430a      	orrs	r2, r1
 800522a:	631a      	str	r2, [r3, #48]	@ 0x30
 800522c:	e007      	b.n	800523e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 020f 	bic.w	r2, r2, #15
 800523c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005242:	f023 0303 	bic.w	r3, r3, #3
 8005246:	f043 0201 	orr.w	r2, r3, #1
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800524e:	e007      	b.n	8005260 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005254:	f043 0210 	orr.w	r2, r3, #16
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005260:	7ffb      	ldrb	r3, [r7, #31]
}
 8005262:	4618      	mov	r0, r3
 8005264:	3724      	adds	r7, #36	@ 0x24
 8005266:	46bd      	mov	sp, r7
 8005268:	bd90      	pop	{r4, r7, pc}
 800526a:	bf00      	nop

0800526c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b0b6      	sub	sp, #216	@ 0xd8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800527c:	2300      	movs	r3, #0
 800527e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005286:	2b01      	cmp	r3, #1
 8005288:	d102      	bne.n	8005290 <HAL_ADC_ConfigChannel+0x24>
 800528a:	2302      	movs	r3, #2
 800528c:	f000 bc13 	b.w	8005ab6 <HAL_ADC_ConfigChannel+0x84a>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4618      	mov	r0, r3
 800529e:	f7ff fe02 	bl	8004ea6 <LL_ADC_REG_IsConversionOngoing>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f040 83f3 	bne.w	8005a90 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6818      	ldr	r0, [r3, #0]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	6859      	ldr	r1, [r3, #4]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	461a      	mov	r2, r3
 80052b8:	f7ff fd18 	bl	8004cec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7ff fdf0 	bl	8004ea6 <LL_ADC_REG_IsConversionOngoing>
 80052c6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7ff fdfc 	bl	8004ecc <LL_ADC_INJ_IsConversionOngoing>
 80052d4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80052d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f040 81d9 	bne.w	8005694 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80052e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f040 81d4 	bne.w	8005694 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052f4:	d10f      	bne.n	8005316 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6818      	ldr	r0, [r3, #0]
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2200      	movs	r2, #0
 8005300:	4619      	mov	r1, r3
 8005302:	f7ff fd1f 	bl	8004d44 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800530e:	4618      	mov	r0, r3
 8005310:	f7ff fcd9 	bl	8004cc6 <LL_ADC_SetSamplingTimeCommonConfig>
 8005314:	e00e      	b.n	8005334 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6818      	ldr	r0, [r3, #0]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	6819      	ldr	r1, [r3, #0]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	461a      	mov	r2, r3
 8005324:	f7ff fd0e 	bl	8004d44 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2100      	movs	r1, #0
 800532e:	4618      	mov	r0, r3
 8005330:	f7ff fcc9 	bl	8004cc6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	695a      	ldr	r2, [r3, #20]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	08db      	lsrs	r3, r3, #3
 8005340:	f003 0303 	and.w	r3, r3, #3
 8005344:	005b      	lsls	r3, r3, #1
 8005346:	fa02 f303 	lsl.w	r3, r2, r3
 800534a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	2b04      	cmp	r3, #4
 8005354:	d022      	beq.n	800539c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6818      	ldr	r0, [r3, #0]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	6919      	ldr	r1, [r3, #16]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005366:	f7ff fc23 	bl	8004bb0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6818      	ldr	r0, [r3, #0]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	6919      	ldr	r1, [r3, #16]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	461a      	mov	r2, r3
 8005378:	f7ff fc6f 	bl	8004c5a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6818      	ldr	r0, [r3, #0]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005388:	2b01      	cmp	r3, #1
 800538a:	d102      	bne.n	8005392 <HAL_ADC_ConfigChannel+0x126>
 800538c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005390:	e000      	b.n	8005394 <HAL_ADC_ConfigChannel+0x128>
 8005392:	2300      	movs	r3, #0
 8005394:	461a      	mov	r2, r3
 8005396:	f7ff fc7b 	bl	8004c90 <LL_ADC_SetOffsetSaturation>
 800539a:	e17b      	b.n	8005694 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2100      	movs	r1, #0
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7ff fc28 	bl	8004bf8 <LL_ADC_GetOffsetChannel>
 80053a8:	4603      	mov	r3, r0
 80053aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10a      	bne.n	80053c8 <HAL_ADC_ConfigChannel+0x15c>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2100      	movs	r1, #0
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7ff fc1d 	bl	8004bf8 <LL_ADC_GetOffsetChannel>
 80053be:	4603      	mov	r3, r0
 80053c0:	0e9b      	lsrs	r3, r3, #26
 80053c2:	f003 021f 	and.w	r2, r3, #31
 80053c6:	e01e      	b.n	8005406 <HAL_ADC_ConfigChannel+0x19a>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2100      	movs	r1, #0
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7ff fc12 	bl	8004bf8 <LL_ADC_GetOffsetChannel>
 80053d4:	4603      	mov	r3, r0
 80053d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80053de:	fa93 f3a3 	rbit	r3, r3
 80053e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80053e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80053ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80053ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80053f6:	2320      	movs	r3, #32
 80053f8:	e004      	b.n	8005404 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80053fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80053fe:	fab3 f383 	clz	r3, r3
 8005402:	b2db      	uxtb	r3, r3
 8005404:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800540e:	2b00      	cmp	r3, #0
 8005410:	d105      	bne.n	800541e <HAL_ADC_ConfigChannel+0x1b2>
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	0e9b      	lsrs	r3, r3, #26
 8005418:	f003 031f 	and.w	r3, r3, #31
 800541c:	e018      	b.n	8005450 <HAL_ADC_ConfigChannel+0x1e4>
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005426:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800542a:	fa93 f3a3 	rbit	r3, r3
 800542e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8005432:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005436:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800543a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8005442:	2320      	movs	r3, #32
 8005444:	e004      	b.n	8005450 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8005446:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800544a:	fab3 f383 	clz	r3, r3
 800544e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005450:	429a      	cmp	r2, r3
 8005452:	d106      	bne.n	8005462 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2200      	movs	r2, #0
 800545a:	2100      	movs	r1, #0
 800545c:	4618      	mov	r0, r3
 800545e:	f7ff fbe1 	bl	8004c24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2101      	movs	r1, #1
 8005468:	4618      	mov	r0, r3
 800546a:	f7ff fbc5 	bl	8004bf8 <LL_ADC_GetOffsetChannel>
 800546e:	4603      	mov	r3, r0
 8005470:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10a      	bne.n	800548e <HAL_ADC_ConfigChannel+0x222>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2101      	movs	r1, #1
 800547e:	4618      	mov	r0, r3
 8005480:	f7ff fbba 	bl	8004bf8 <LL_ADC_GetOffsetChannel>
 8005484:	4603      	mov	r3, r0
 8005486:	0e9b      	lsrs	r3, r3, #26
 8005488:	f003 021f 	and.w	r2, r3, #31
 800548c:	e01e      	b.n	80054cc <HAL_ADC_ConfigChannel+0x260>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2101      	movs	r1, #1
 8005494:	4618      	mov	r0, r3
 8005496:	f7ff fbaf 	bl	8004bf8 <LL_ADC_GetOffsetChannel>
 800549a:	4603      	mov	r3, r0
 800549c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80054a4:	fa93 f3a3 	rbit	r3, r3
 80054a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80054ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80054b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80054b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80054bc:	2320      	movs	r3, #32
 80054be:	e004      	b.n	80054ca <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80054c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80054c4:	fab3 f383 	clz	r3, r3
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d105      	bne.n	80054e4 <HAL_ADC_ConfigChannel+0x278>
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	0e9b      	lsrs	r3, r3, #26
 80054de:	f003 031f 	and.w	r3, r3, #31
 80054e2:	e018      	b.n	8005516 <HAL_ADC_ConfigChannel+0x2aa>
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80054f0:	fa93 f3a3 	rbit	r3, r3
 80054f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80054f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80054fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005500:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005504:	2b00      	cmp	r3, #0
 8005506:	d101      	bne.n	800550c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005508:	2320      	movs	r3, #32
 800550a:	e004      	b.n	8005516 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800550c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005510:	fab3 f383 	clz	r3, r3
 8005514:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005516:	429a      	cmp	r2, r3
 8005518:	d106      	bne.n	8005528 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2200      	movs	r2, #0
 8005520:	2101      	movs	r1, #1
 8005522:	4618      	mov	r0, r3
 8005524:	f7ff fb7e 	bl	8004c24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2102      	movs	r1, #2
 800552e:	4618      	mov	r0, r3
 8005530:	f7ff fb62 	bl	8004bf8 <LL_ADC_GetOffsetChannel>
 8005534:	4603      	mov	r3, r0
 8005536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10a      	bne.n	8005554 <HAL_ADC_ConfigChannel+0x2e8>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2102      	movs	r1, #2
 8005544:	4618      	mov	r0, r3
 8005546:	f7ff fb57 	bl	8004bf8 <LL_ADC_GetOffsetChannel>
 800554a:	4603      	mov	r3, r0
 800554c:	0e9b      	lsrs	r3, r3, #26
 800554e:	f003 021f 	and.w	r2, r3, #31
 8005552:	e01e      	b.n	8005592 <HAL_ADC_ConfigChannel+0x326>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2102      	movs	r1, #2
 800555a:	4618      	mov	r0, r3
 800555c:	f7ff fb4c 	bl	8004bf8 <LL_ADC_GetOffsetChannel>
 8005560:	4603      	mov	r3, r0
 8005562:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005566:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800556a:	fa93 f3a3 	rbit	r3, r3
 800556e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8005572:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005576:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800557a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8005582:	2320      	movs	r3, #32
 8005584:	e004      	b.n	8005590 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8005586:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800558a:	fab3 f383 	clz	r3, r3
 800558e:	b2db      	uxtb	r3, r3
 8005590:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800559a:	2b00      	cmp	r3, #0
 800559c:	d105      	bne.n	80055aa <HAL_ADC_ConfigChannel+0x33e>
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	0e9b      	lsrs	r3, r3, #26
 80055a4:	f003 031f 	and.w	r3, r3, #31
 80055a8:	e016      	b.n	80055d8 <HAL_ADC_ConfigChannel+0x36c>
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80055b6:	fa93 f3a3 	rbit	r3, r3
 80055ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80055bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80055be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80055c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80055ca:	2320      	movs	r3, #32
 80055cc:	e004      	b.n	80055d8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80055ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055d2:	fab3 f383 	clz	r3, r3
 80055d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80055d8:	429a      	cmp	r2, r3
 80055da:	d106      	bne.n	80055ea <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2200      	movs	r2, #0
 80055e2:	2102      	movs	r1, #2
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7ff fb1d 	bl	8004c24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2103      	movs	r1, #3
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7ff fb01 	bl	8004bf8 <LL_ADC_GetOffsetChannel>
 80055f6:	4603      	mov	r3, r0
 80055f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10a      	bne.n	8005616 <HAL_ADC_ConfigChannel+0x3aa>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2103      	movs	r1, #3
 8005606:	4618      	mov	r0, r3
 8005608:	f7ff faf6 	bl	8004bf8 <LL_ADC_GetOffsetChannel>
 800560c:	4603      	mov	r3, r0
 800560e:	0e9b      	lsrs	r3, r3, #26
 8005610:	f003 021f 	and.w	r2, r3, #31
 8005614:	e017      	b.n	8005646 <HAL_ADC_ConfigChannel+0x3da>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2103      	movs	r1, #3
 800561c:	4618      	mov	r0, r3
 800561e:	f7ff faeb 	bl	8004bf8 <LL_ADC_GetOffsetChannel>
 8005622:	4603      	mov	r3, r0
 8005624:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005626:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005628:	fa93 f3a3 	rbit	r3, r3
 800562c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800562e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005630:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8005632:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005634:	2b00      	cmp	r3, #0
 8005636:	d101      	bne.n	800563c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8005638:	2320      	movs	r3, #32
 800563a:	e003      	b.n	8005644 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800563c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800563e:	fab3 f383 	clz	r3, r3
 8005642:	b2db      	uxtb	r3, r3
 8005644:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800564e:	2b00      	cmp	r3, #0
 8005650:	d105      	bne.n	800565e <HAL_ADC_ConfigChannel+0x3f2>
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	0e9b      	lsrs	r3, r3, #26
 8005658:	f003 031f 	and.w	r3, r3, #31
 800565c:	e011      	b.n	8005682 <HAL_ADC_ConfigChannel+0x416>
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005664:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005666:	fa93 f3a3 	rbit	r3, r3
 800566a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800566c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800566e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005670:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8005676:	2320      	movs	r3, #32
 8005678:	e003      	b.n	8005682 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800567a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800567c:	fab3 f383 	clz	r3, r3
 8005680:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005682:	429a      	cmp	r2, r3
 8005684:	d106      	bne.n	8005694 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2200      	movs	r2, #0
 800568c:	2103      	movs	r1, #3
 800568e:	4618      	mov	r0, r3
 8005690:	f7ff fac8 	bl	8004c24 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4618      	mov	r0, r3
 800569a:	f7ff fbf1 	bl	8004e80 <LL_ADC_IsEnabled>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f040 813d 	bne.w	8005920 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6818      	ldr	r0, [r3, #0]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	6819      	ldr	r1, [r3, #0]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	461a      	mov	r2, r3
 80056b4:	f7ff fb72 	bl	8004d9c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	4aa2      	ldr	r2, [pc, #648]	@ (8005948 <HAL_ADC_ConfigChannel+0x6dc>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	f040 812e 	bne.w	8005920 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10b      	bne.n	80056ec <HAL_ADC_ConfigChannel+0x480>
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	0e9b      	lsrs	r3, r3, #26
 80056da:	3301      	adds	r3, #1
 80056dc:	f003 031f 	and.w	r3, r3, #31
 80056e0:	2b09      	cmp	r3, #9
 80056e2:	bf94      	ite	ls
 80056e4:	2301      	movls	r3, #1
 80056e6:	2300      	movhi	r3, #0
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	e019      	b.n	8005720 <HAL_ADC_ConfigChannel+0x4b4>
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056f4:	fa93 f3a3 	rbit	r3, r3
 80056f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80056fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80056fc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80056fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005704:	2320      	movs	r3, #32
 8005706:	e003      	b.n	8005710 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005708:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800570a:	fab3 f383 	clz	r3, r3
 800570e:	b2db      	uxtb	r3, r3
 8005710:	3301      	adds	r3, #1
 8005712:	f003 031f 	and.w	r3, r3, #31
 8005716:	2b09      	cmp	r3, #9
 8005718:	bf94      	ite	ls
 800571a:	2301      	movls	r3, #1
 800571c:	2300      	movhi	r3, #0
 800571e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005720:	2b00      	cmp	r3, #0
 8005722:	d079      	beq.n	8005818 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800572c:	2b00      	cmp	r3, #0
 800572e:	d107      	bne.n	8005740 <HAL_ADC_ConfigChannel+0x4d4>
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	0e9b      	lsrs	r3, r3, #26
 8005736:	3301      	adds	r3, #1
 8005738:	069b      	lsls	r3, r3, #26
 800573a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800573e:	e015      	b.n	800576c <HAL_ADC_ConfigChannel+0x500>
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005746:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005748:	fa93 f3a3 	rbit	r3, r3
 800574c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800574e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005750:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005754:	2b00      	cmp	r3, #0
 8005756:	d101      	bne.n	800575c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005758:	2320      	movs	r3, #32
 800575a:	e003      	b.n	8005764 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800575c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800575e:	fab3 f383 	clz	r3, r3
 8005762:	b2db      	uxtb	r3, r3
 8005764:	3301      	adds	r3, #1
 8005766:	069b      	lsls	r3, r3, #26
 8005768:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005774:	2b00      	cmp	r3, #0
 8005776:	d109      	bne.n	800578c <HAL_ADC_ConfigChannel+0x520>
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	0e9b      	lsrs	r3, r3, #26
 800577e:	3301      	adds	r3, #1
 8005780:	f003 031f 	and.w	r3, r3, #31
 8005784:	2101      	movs	r1, #1
 8005786:	fa01 f303 	lsl.w	r3, r1, r3
 800578a:	e017      	b.n	80057bc <HAL_ADC_ConfigChannel+0x550>
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005792:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005794:	fa93 f3a3 	rbit	r3, r3
 8005798:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800579a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800579c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800579e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d101      	bne.n	80057a8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80057a4:	2320      	movs	r3, #32
 80057a6:	e003      	b.n	80057b0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80057a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057aa:	fab3 f383 	clz	r3, r3
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	3301      	adds	r3, #1
 80057b2:	f003 031f 	and.w	r3, r3, #31
 80057b6:	2101      	movs	r1, #1
 80057b8:	fa01 f303 	lsl.w	r3, r1, r3
 80057bc:	ea42 0103 	orr.w	r1, r2, r3
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10a      	bne.n	80057e2 <HAL_ADC_ConfigChannel+0x576>
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	0e9b      	lsrs	r3, r3, #26
 80057d2:	3301      	adds	r3, #1
 80057d4:	f003 021f 	and.w	r2, r3, #31
 80057d8:	4613      	mov	r3, r2
 80057da:	005b      	lsls	r3, r3, #1
 80057dc:	4413      	add	r3, r2
 80057de:	051b      	lsls	r3, r3, #20
 80057e0:	e018      	b.n	8005814 <HAL_ADC_ConfigChannel+0x5a8>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ea:	fa93 f3a3 	rbit	r3, r3
 80057ee:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80057f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80057f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80057fa:	2320      	movs	r3, #32
 80057fc:	e003      	b.n	8005806 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80057fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005800:	fab3 f383 	clz	r3, r3
 8005804:	b2db      	uxtb	r3, r3
 8005806:	3301      	adds	r3, #1
 8005808:	f003 021f 	and.w	r2, r3, #31
 800580c:	4613      	mov	r3, r2
 800580e:	005b      	lsls	r3, r3, #1
 8005810:	4413      	add	r3, r2
 8005812:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005814:	430b      	orrs	r3, r1
 8005816:	e07e      	b.n	8005916 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005820:	2b00      	cmp	r3, #0
 8005822:	d107      	bne.n	8005834 <HAL_ADC_ConfigChannel+0x5c8>
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	0e9b      	lsrs	r3, r3, #26
 800582a:	3301      	adds	r3, #1
 800582c:	069b      	lsls	r3, r3, #26
 800582e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005832:	e015      	b.n	8005860 <HAL_ADC_ConfigChannel+0x5f4>
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800583a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800583c:	fa93 f3a3 	rbit	r3, r3
 8005840:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005844:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800584c:	2320      	movs	r3, #32
 800584e:	e003      	b.n	8005858 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005852:	fab3 f383 	clz	r3, r3
 8005856:	b2db      	uxtb	r3, r3
 8005858:	3301      	adds	r3, #1
 800585a:	069b      	lsls	r3, r3, #26
 800585c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005868:	2b00      	cmp	r3, #0
 800586a:	d109      	bne.n	8005880 <HAL_ADC_ConfigChannel+0x614>
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	0e9b      	lsrs	r3, r3, #26
 8005872:	3301      	adds	r3, #1
 8005874:	f003 031f 	and.w	r3, r3, #31
 8005878:	2101      	movs	r1, #1
 800587a:	fa01 f303 	lsl.w	r3, r1, r3
 800587e:	e017      	b.n	80058b0 <HAL_ADC_ConfigChannel+0x644>
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005886:	6a3b      	ldr	r3, [r7, #32]
 8005888:	fa93 f3a3 	rbit	r3, r3
 800588c:	61fb      	str	r3, [r7, #28]
  return result;
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005898:	2320      	movs	r3, #32
 800589a:	e003      	b.n	80058a4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800589c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589e:	fab3 f383 	clz	r3, r3
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	3301      	adds	r3, #1
 80058a6:	f003 031f 	and.w	r3, r3, #31
 80058aa:	2101      	movs	r1, #1
 80058ac:	fa01 f303 	lsl.w	r3, r1, r3
 80058b0:	ea42 0103 	orr.w	r1, r2, r3
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10d      	bne.n	80058dc <HAL_ADC_ConfigChannel+0x670>
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	0e9b      	lsrs	r3, r3, #26
 80058c6:	3301      	adds	r3, #1
 80058c8:	f003 021f 	and.w	r2, r3, #31
 80058cc:	4613      	mov	r3, r2
 80058ce:	005b      	lsls	r3, r3, #1
 80058d0:	4413      	add	r3, r2
 80058d2:	3b1e      	subs	r3, #30
 80058d4:	051b      	lsls	r3, r3, #20
 80058d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80058da:	e01b      	b.n	8005914 <HAL_ADC_ConfigChannel+0x6a8>
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	fa93 f3a3 	rbit	r3, r3
 80058e8:	613b      	str	r3, [r7, #16]
  return result;
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80058f4:	2320      	movs	r3, #32
 80058f6:	e003      	b.n	8005900 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	fab3 f383 	clz	r3, r3
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	3301      	adds	r3, #1
 8005902:	f003 021f 	and.w	r2, r3, #31
 8005906:	4613      	mov	r3, r2
 8005908:	005b      	lsls	r3, r3, #1
 800590a:	4413      	add	r3, r2
 800590c:	3b1e      	subs	r3, #30
 800590e:	051b      	lsls	r3, r3, #20
 8005910:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005914:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005916:	683a      	ldr	r2, [r7, #0]
 8005918:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800591a:	4619      	mov	r1, r3
 800591c:	f7ff fa12 	bl	8004d44 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	4b09      	ldr	r3, [pc, #36]	@ (800594c <HAL_ADC_ConfigChannel+0x6e0>)
 8005926:	4013      	ands	r3, r2
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 80be 	beq.w	8005aaa <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005936:	d004      	beq.n	8005942 <HAL_ADC_ConfigChannel+0x6d6>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a04      	ldr	r2, [pc, #16]	@ (8005950 <HAL_ADC_ConfigChannel+0x6e4>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d10a      	bne.n	8005958 <HAL_ADC_ConfigChannel+0x6ec>
 8005942:	4b04      	ldr	r3, [pc, #16]	@ (8005954 <HAL_ADC_ConfigChannel+0x6e8>)
 8005944:	e009      	b.n	800595a <HAL_ADC_ConfigChannel+0x6ee>
 8005946:	bf00      	nop
 8005948:	407f0000 	.word	0x407f0000
 800594c:	80080000 	.word	0x80080000
 8005950:	50000100 	.word	0x50000100
 8005954:	50000300 	.word	0x50000300
 8005958:	4b59      	ldr	r3, [pc, #356]	@ (8005ac0 <HAL_ADC_ConfigChannel+0x854>)
 800595a:	4618      	mov	r0, r3
 800595c:	f7ff f91a 	bl	8004b94 <LL_ADC_GetCommonPathInternalCh>
 8005960:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a56      	ldr	r2, [pc, #344]	@ (8005ac4 <HAL_ADC_ConfigChannel+0x858>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d004      	beq.n	8005978 <HAL_ADC_ConfigChannel+0x70c>
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a55      	ldr	r2, [pc, #340]	@ (8005ac8 <HAL_ADC_ConfigChannel+0x85c>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d13a      	bne.n	80059ee <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005978:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800597c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d134      	bne.n	80059ee <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800598c:	d005      	beq.n	800599a <HAL_ADC_ConfigChannel+0x72e>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a4e      	ldr	r2, [pc, #312]	@ (8005acc <HAL_ADC_ConfigChannel+0x860>)
 8005994:	4293      	cmp	r3, r2
 8005996:	f040 8085 	bne.w	8005aa4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059a2:	d004      	beq.n	80059ae <HAL_ADC_ConfigChannel+0x742>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a49      	ldr	r2, [pc, #292]	@ (8005ad0 <HAL_ADC_ConfigChannel+0x864>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d101      	bne.n	80059b2 <HAL_ADC_ConfigChannel+0x746>
 80059ae:	4a49      	ldr	r2, [pc, #292]	@ (8005ad4 <HAL_ADC_ConfigChannel+0x868>)
 80059b0:	e000      	b.n	80059b4 <HAL_ADC_ConfigChannel+0x748>
 80059b2:	4a43      	ldr	r2, [pc, #268]	@ (8005ac0 <HAL_ADC_ConfigChannel+0x854>)
 80059b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80059b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80059bc:	4619      	mov	r1, r3
 80059be:	4610      	mov	r0, r2
 80059c0:	f7ff f8d5 	bl	8004b6e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80059c4:	4b44      	ldr	r3, [pc, #272]	@ (8005ad8 <HAL_ADC_ConfigChannel+0x86c>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	099b      	lsrs	r3, r3, #6
 80059ca:	4a44      	ldr	r2, [pc, #272]	@ (8005adc <HAL_ADC_ConfigChannel+0x870>)
 80059cc:	fba2 2303 	umull	r2, r3, r2, r3
 80059d0:	099b      	lsrs	r3, r3, #6
 80059d2:	1c5a      	adds	r2, r3, #1
 80059d4:	4613      	mov	r3, r2
 80059d6:	005b      	lsls	r3, r3, #1
 80059d8:	4413      	add	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80059de:	e002      	b.n	80059e6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	3b01      	subs	r3, #1
 80059e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d1f9      	bne.n	80059e0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80059ec:	e05a      	b.n	8005aa4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a3b      	ldr	r2, [pc, #236]	@ (8005ae0 <HAL_ADC_ConfigChannel+0x874>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d125      	bne.n	8005a44 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80059f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80059fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d11f      	bne.n	8005a44 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a31      	ldr	r2, [pc, #196]	@ (8005ad0 <HAL_ADC_ConfigChannel+0x864>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d104      	bne.n	8005a18 <HAL_ADC_ConfigChannel+0x7ac>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a34      	ldr	r2, [pc, #208]	@ (8005ae4 <HAL_ADC_ConfigChannel+0x878>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d047      	beq.n	8005aa8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a20:	d004      	beq.n	8005a2c <HAL_ADC_ConfigChannel+0x7c0>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a2a      	ldr	r2, [pc, #168]	@ (8005ad0 <HAL_ADC_ConfigChannel+0x864>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d101      	bne.n	8005a30 <HAL_ADC_ConfigChannel+0x7c4>
 8005a2c:	4a29      	ldr	r2, [pc, #164]	@ (8005ad4 <HAL_ADC_ConfigChannel+0x868>)
 8005a2e:	e000      	b.n	8005a32 <HAL_ADC_ConfigChannel+0x7c6>
 8005a30:	4a23      	ldr	r2, [pc, #140]	@ (8005ac0 <HAL_ADC_ConfigChannel+0x854>)
 8005a32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	4610      	mov	r0, r2
 8005a3e:	f7ff f896 	bl	8004b6e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005a42:	e031      	b.n	8005aa8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a27      	ldr	r2, [pc, #156]	@ (8005ae8 <HAL_ADC_ConfigChannel+0x87c>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d12d      	bne.n	8005aaa <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005a4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d127      	bne.n	8005aaa <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ad0 <HAL_ADC_ConfigChannel+0x864>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d022      	beq.n	8005aaa <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a6c:	d004      	beq.n	8005a78 <HAL_ADC_ConfigChannel+0x80c>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a17      	ldr	r2, [pc, #92]	@ (8005ad0 <HAL_ADC_ConfigChannel+0x864>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d101      	bne.n	8005a7c <HAL_ADC_ConfigChannel+0x810>
 8005a78:	4a16      	ldr	r2, [pc, #88]	@ (8005ad4 <HAL_ADC_ConfigChannel+0x868>)
 8005a7a:	e000      	b.n	8005a7e <HAL_ADC_ConfigChannel+0x812>
 8005a7c:	4a10      	ldr	r2, [pc, #64]	@ (8005ac0 <HAL_ADC_ConfigChannel+0x854>)
 8005a7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a82:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005a86:	4619      	mov	r1, r3
 8005a88:	4610      	mov	r0, r2
 8005a8a:	f7ff f870 	bl	8004b6e <LL_ADC_SetCommonPathInternalCh>
 8005a8e:	e00c      	b.n	8005aaa <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a94:	f043 0220 	orr.w	r2, r3, #32
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005aa2:	e002      	b.n	8005aaa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005aa4:	bf00      	nop
 8005aa6:	e000      	b.n	8005aaa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005aa8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005ab2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	37d8      	adds	r7, #216	@ 0xd8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	50000700 	.word	0x50000700
 8005ac4:	c3210000 	.word	0xc3210000
 8005ac8:	90c00010 	.word	0x90c00010
 8005acc:	50000600 	.word	0x50000600
 8005ad0:	50000100 	.word	0x50000100
 8005ad4:	50000300 	.word	0x50000300
 8005ad8:	20000208 	.word	0x20000208
 8005adc:	053e2d63 	.word	0x053e2d63
 8005ae0:	c7520000 	.word	0xc7520000
 8005ae4:	50000500 	.word	0x50000500
 8005ae8:	cb840000 	.word	0xcb840000

08005aec <LL_ADC_IsEnabled>:
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f003 0301 	and.w	r3, r3, #1
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d101      	bne.n	8005b04 <LL_ADC_IsEnabled+0x18>
 8005b00:	2301      	movs	r3, #1
 8005b02:	e000      	b.n	8005b06 <LL_ADC_IsEnabled+0x1a>
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <LL_ADC_REG_IsConversionOngoing>:
{
 8005b12:	b480      	push	{r7}
 8005b14:	b083      	sub	sp, #12
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f003 0304 	and.w	r3, r3, #4
 8005b22:	2b04      	cmp	r3, #4
 8005b24:	d101      	bne.n	8005b2a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005b26:	2301      	movs	r3, #1
 8005b28:	e000      	b.n	8005b2c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005b38:	b590      	push	{r4, r7, lr}
 8005b3a:	b0a1      	sub	sp, #132	@ 0x84
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b42:	2300      	movs	r3, #0
 8005b44:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d101      	bne.n	8005b56 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005b52:	2302      	movs	r3, #2
 8005b54:	e0e7      	b.n	8005d26 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005b5e:	2300      	movs	r3, #0
 8005b60:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005b62:	2300      	movs	r3, #0
 8005b64:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b6e:	d102      	bne.n	8005b76 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005b70:	4b6f      	ldr	r3, [pc, #444]	@ (8005d30 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005b72:	60bb      	str	r3, [r7, #8]
 8005b74:	e009      	b.n	8005b8a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a6e      	ldr	r2, [pc, #440]	@ (8005d34 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d102      	bne.n	8005b86 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005b80:	4b6d      	ldr	r3, [pc, #436]	@ (8005d38 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005b82:	60bb      	str	r3, [r7, #8]
 8005b84:	e001      	b.n	8005b8a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005b86:	2300      	movs	r3, #0
 8005b88:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10b      	bne.n	8005ba8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b94:	f043 0220 	orr.w	r2, r3, #32
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e0be      	b.n	8005d26 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7ff ffb1 	bl	8005b12 <LL_ADC_REG_IsConversionOngoing>
 8005bb0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7ff ffab 	bl	8005b12 <LL_ADC_REG_IsConversionOngoing>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f040 80a0 	bne.w	8005d04 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005bc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	f040 809c 	bne.w	8005d04 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005bd4:	d004      	beq.n	8005be0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a55      	ldr	r2, [pc, #340]	@ (8005d30 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d101      	bne.n	8005be4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005be0:	4b56      	ldr	r3, [pc, #344]	@ (8005d3c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005be2:	e000      	b.n	8005be6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005be4:	4b56      	ldr	r3, [pc, #344]	@ (8005d40 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005be6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d04b      	beq.n	8005c88 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005bf0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	6859      	ldr	r1, [r3, #4]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005c02:	035b      	lsls	r3, r3, #13
 8005c04:	430b      	orrs	r3, r1
 8005c06:	431a      	orrs	r2, r3
 8005c08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c0a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c14:	d004      	beq.n	8005c20 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a45      	ldr	r2, [pc, #276]	@ (8005d30 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d10f      	bne.n	8005c40 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005c20:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005c24:	f7ff ff62 	bl	8005aec <LL_ADC_IsEnabled>
 8005c28:	4604      	mov	r4, r0
 8005c2a:	4841      	ldr	r0, [pc, #260]	@ (8005d30 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005c2c:	f7ff ff5e 	bl	8005aec <LL_ADC_IsEnabled>
 8005c30:	4603      	mov	r3, r0
 8005c32:	4323      	orrs	r3, r4
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	bf0c      	ite	eq
 8005c38:	2301      	moveq	r3, #1
 8005c3a:	2300      	movne	r3, #0
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	e012      	b.n	8005c66 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005c40:	483c      	ldr	r0, [pc, #240]	@ (8005d34 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005c42:	f7ff ff53 	bl	8005aec <LL_ADC_IsEnabled>
 8005c46:	4604      	mov	r4, r0
 8005c48:	483b      	ldr	r0, [pc, #236]	@ (8005d38 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005c4a:	f7ff ff4f 	bl	8005aec <LL_ADC_IsEnabled>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	431c      	orrs	r4, r3
 8005c52:	483c      	ldr	r0, [pc, #240]	@ (8005d44 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005c54:	f7ff ff4a 	bl	8005aec <LL_ADC_IsEnabled>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	4323      	orrs	r3, r4
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	bf0c      	ite	eq
 8005c60:	2301      	moveq	r3, #1
 8005c62:	2300      	movne	r3, #0
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d056      	beq.n	8005d18 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005c6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005c72:	f023 030f 	bic.w	r3, r3, #15
 8005c76:	683a      	ldr	r2, [r7, #0]
 8005c78:	6811      	ldr	r1, [r2, #0]
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	6892      	ldr	r2, [r2, #8]
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	431a      	orrs	r2, r3
 8005c82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c84:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005c86:	e047      	b.n	8005d18 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005c88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005c90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c92:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c9c:	d004      	beq.n	8005ca8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a23      	ldr	r2, [pc, #140]	@ (8005d30 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d10f      	bne.n	8005cc8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005ca8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005cac:	f7ff ff1e 	bl	8005aec <LL_ADC_IsEnabled>
 8005cb0:	4604      	mov	r4, r0
 8005cb2:	481f      	ldr	r0, [pc, #124]	@ (8005d30 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005cb4:	f7ff ff1a 	bl	8005aec <LL_ADC_IsEnabled>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	4323      	orrs	r3, r4
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	bf0c      	ite	eq
 8005cc0:	2301      	moveq	r3, #1
 8005cc2:	2300      	movne	r3, #0
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	e012      	b.n	8005cee <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005cc8:	481a      	ldr	r0, [pc, #104]	@ (8005d34 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005cca:	f7ff ff0f 	bl	8005aec <LL_ADC_IsEnabled>
 8005cce:	4604      	mov	r4, r0
 8005cd0:	4819      	ldr	r0, [pc, #100]	@ (8005d38 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005cd2:	f7ff ff0b 	bl	8005aec <LL_ADC_IsEnabled>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	431c      	orrs	r4, r3
 8005cda:	481a      	ldr	r0, [pc, #104]	@ (8005d44 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005cdc:	f7ff ff06 	bl	8005aec <LL_ADC_IsEnabled>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	4323      	orrs	r3, r4
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	bf0c      	ite	eq
 8005ce8:	2301      	moveq	r3, #1
 8005cea:	2300      	movne	r3, #0
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d012      	beq.n	8005d18 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005cf2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005cfa:	f023 030f 	bic.w	r3, r3, #15
 8005cfe:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005d00:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005d02:	e009      	b.n	8005d18 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d08:	f043 0220 	orr.w	r2, r3, #32
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005d16:	e000      	b.n	8005d1a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005d18:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005d22:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3784      	adds	r7, #132	@ 0x84
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd90      	pop	{r4, r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	50000100 	.word	0x50000100
 8005d34:	50000400 	.word	0x50000400
 8005d38:	50000500 	.word	0x50000500
 8005d3c:	50000300 	.word	0x50000300
 8005d40:	50000700 	.word	0x50000700
 8005d44:	50000600 	.word	0x50000600

08005d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f003 0307 	and.w	r3, r3, #7
 8005d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d58:	4b0c      	ldr	r3, [pc, #48]	@ (8005d8c <__NVIC_SetPriorityGrouping+0x44>)
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005d64:	4013      	ands	r3, r2
 8005d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005d70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005d74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d7a:	4a04      	ldr	r2, [pc, #16]	@ (8005d8c <__NVIC_SetPriorityGrouping+0x44>)
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	60d3      	str	r3, [r2, #12]
}
 8005d80:	bf00      	nop
 8005d82:	3714      	adds	r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	e000ed00 	.word	0xe000ed00

08005d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d90:	b480      	push	{r7}
 8005d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d94:	4b04      	ldr	r3, [pc, #16]	@ (8005da8 <__NVIC_GetPriorityGrouping+0x18>)
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	0a1b      	lsrs	r3, r3, #8
 8005d9a:	f003 0307 	and.w	r3, r3, #7
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr
 8005da8:	e000ed00 	.word	0xe000ed00

08005dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	4603      	mov	r3, r0
 8005db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	db0b      	blt.n	8005dd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005dbe:	79fb      	ldrb	r3, [r7, #7]
 8005dc0:	f003 021f 	and.w	r2, r3, #31
 8005dc4:	4907      	ldr	r1, [pc, #28]	@ (8005de4 <__NVIC_EnableIRQ+0x38>)
 8005dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dca:	095b      	lsrs	r3, r3, #5
 8005dcc:	2001      	movs	r0, #1
 8005dce:	fa00 f202 	lsl.w	r2, r0, r2
 8005dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005dd6:	bf00      	nop
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	e000e100 	.word	0xe000e100

08005de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	4603      	mov	r3, r0
 8005df0:	6039      	str	r1, [r7, #0]
 8005df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	db0a      	blt.n	8005e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	b2da      	uxtb	r2, r3
 8005e00:	490c      	ldr	r1, [pc, #48]	@ (8005e34 <__NVIC_SetPriority+0x4c>)
 8005e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e06:	0112      	lsls	r2, r2, #4
 8005e08:	b2d2      	uxtb	r2, r2
 8005e0a:	440b      	add	r3, r1
 8005e0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005e10:	e00a      	b.n	8005e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	b2da      	uxtb	r2, r3
 8005e16:	4908      	ldr	r1, [pc, #32]	@ (8005e38 <__NVIC_SetPriority+0x50>)
 8005e18:	79fb      	ldrb	r3, [r7, #7]
 8005e1a:	f003 030f 	and.w	r3, r3, #15
 8005e1e:	3b04      	subs	r3, #4
 8005e20:	0112      	lsls	r2, r2, #4
 8005e22:	b2d2      	uxtb	r2, r2
 8005e24:	440b      	add	r3, r1
 8005e26:	761a      	strb	r2, [r3, #24]
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	e000e100 	.word	0xe000e100
 8005e38:	e000ed00 	.word	0xe000ed00

08005e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b089      	sub	sp, #36	@ 0x24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f003 0307 	and.w	r3, r3, #7
 8005e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	f1c3 0307 	rsb	r3, r3, #7
 8005e56:	2b04      	cmp	r3, #4
 8005e58:	bf28      	it	cs
 8005e5a:	2304      	movcs	r3, #4
 8005e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	3304      	adds	r3, #4
 8005e62:	2b06      	cmp	r3, #6
 8005e64:	d902      	bls.n	8005e6c <NVIC_EncodePriority+0x30>
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	3b03      	subs	r3, #3
 8005e6a:	e000      	b.n	8005e6e <NVIC_EncodePriority+0x32>
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e70:	f04f 32ff 	mov.w	r2, #4294967295
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7a:	43da      	mvns	r2, r3
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	401a      	ands	r2, r3
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e84:	f04f 31ff 	mov.w	r1, #4294967295
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e8e:	43d9      	mvns	r1, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e94:	4313      	orrs	r3, r2
         );
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3724      	adds	r7, #36	@ 0x24
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
	...

08005ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005eb4:	d301      	bcc.n	8005eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e00f      	b.n	8005eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005eba:	4a0a      	ldr	r2, [pc, #40]	@ (8005ee4 <SysTick_Config+0x40>)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ec2:	210f      	movs	r1, #15
 8005ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec8:	f7ff ff8e 	bl	8005de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ecc:	4b05      	ldr	r3, [pc, #20]	@ (8005ee4 <SysTick_Config+0x40>)
 8005ece:	2200      	movs	r2, #0
 8005ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005ed2:	4b04      	ldr	r3, [pc, #16]	@ (8005ee4 <SysTick_Config+0x40>)
 8005ed4:	2207      	movs	r2, #7
 8005ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3708      	adds	r7, #8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	e000e010 	.word	0xe000e010

08005ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f7ff ff29 	bl	8005d48 <__NVIC_SetPriorityGrouping>
}
 8005ef6:	bf00      	nop
 8005ef8:	3708      	adds	r7, #8
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b086      	sub	sp, #24
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	4603      	mov	r3, r0
 8005f06:	60b9      	str	r1, [r7, #8]
 8005f08:	607a      	str	r2, [r7, #4]
 8005f0a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005f0c:	f7ff ff40 	bl	8005d90 <__NVIC_GetPriorityGrouping>
 8005f10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	68b9      	ldr	r1, [r7, #8]
 8005f16:	6978      	ldr	r0, [r7, #20]
 8005f18:	f7ff ff90 	bl	8005e3c <NVIC_EncodePriority>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f22:	4611      	mov	r1, r2
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7ff ff5f 	bl	8005de8 <__NVIC_SetPriority>
}
 8005f2a:	bf00      	nop
 8005f2c:	3718      	adds	r7, #24
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b082      	sub	sp, #8
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	4603      	mov	r3, r0
 8005f3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7ff ff33 	bl	8005dac <__NVIC_EnableIRQ>
}
 8005f46:	bf00      	nop
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b082      	sub	sp, #8
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7ff ffa4 	bl	8005ea4 <SysTick_Config>
 8005f5c:	4603      	mov	r3, r0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3708      	adds	r7, #8
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
	...

08005f68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d101      	bne.n	8005f7a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e08d      	b.n	8006096 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	4b47      	ldr	r3, [pc, #284]	@ (80060a0 <HAL_DMA_Init+0x138>)
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d80f      	bhi.n	8005fa6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	4b45      	ldr	r3, [pc, #276]	@ (80060a4 <HAL_DMA_Init+0x13c>)
 8005f8e:	4413      	add	r3, r2
 8005f90:	4a45      	ldr	r2, [pc, #276]	@ (80060a8 <HAL_DMA_Init+0x140>)
 8005f92:	fba2 2303 	umull	r2, r3, r2, r3
 8005f96:	091b      	lsrs	r3, r3, #4
 8005f98:	009a      	lsls	r2, r3, #2
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a42      	ldr	r2, [pc, #264]	@ (80060ac <HAL_DMA_Init+0x144>)
 8005fa2:	641a      	str	r2, [r3, #64]	@ 0x40
 8005fa4:	e00e      	b.n	8005fc4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	461a      	mov	r2, r3
 8005fac:	4b40      	ldr	r3, [pc, #256]	@ (80060b0 <HAL_DMA_Init+0x148>)
 8005fae:	4413      	add	r3, r2
 8005fb0:	4a3d      	ldr	r2, [pc, #244]	@ (80060a8 <HAL_DMA_Init+0x140>)
 8005fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb6:	091b      	lsrs	r3, r3, #4
 8005fb8:	009a      	lsls	r2, r3, #2
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a3c      	ldr	r2, [pc, #240]	@ (80060b4 <HAL_DMA_Init+0x14c>)
 8005fc2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fde:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005fe8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ff4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006000:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	4313      	orrs	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 fa76 	bl	8006508 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006024:	d102      	bne.n	800602c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685a      	ldr	r2, [r3, #4]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006034:	b2d2      	uxtb	r2, r2
 8006036:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006040:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d010      	beq.n	800606c <HAL_DMA_Init+0x104>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	2b04      	cmp	r3, #4
 8006050:	d80c      	bhi.n	800606c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fa96 	bl	8006584 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800605c:	2200      	movs	r2, #0
 800605e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006068:	605a      	str	r2, [r3, #4]
 800606a:	e008      	b.n	800607e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	40020407 	.word	0x40020407
 80060a4:	bffdfff8 	.word	0xbffdfff8
 80060a8:	cccccccd 	.word	0xcccccccd
 80060ac:	40020000 	.word	0x40020000
 80060b0:	bffdfbf8 	.word	0xbffdfbf8
 80060b4:	40020400 	.word	0x40020400

080060b8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b086      	sub	sp, #24
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]
 80060c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060c6:	2300      	movs	r3, #0
 80060c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d101      	bne.n	80060d8 <HAL_DMA_Start_IT+0x20>
 80060d4:	2302      	movs	r3, #2
 80060d6:	e066      	b.n	80061a6 <HAL_DMA_Start_IT+0xee>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d155      	bne.n	8006198 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2202      	movs	r2, #2
 80060f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f022 0201 	bic.w	r2, r2, #1
 8006108:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	68b9      	ldr	r1, [r7, #8]
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 f9bb 	bl	800648c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800611a:	2b00      	cmp	r3, #0
 800611c:	d008      	beq.n	8006130 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f042 020e 	orr.w	r2, r2, #14
 800612c:	601a      	str	r2, [r3, #0]
 800612e:	e00f      	b.n	8006150 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f022 0204 	bic.w	r2, r2, #4
 800613e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f042 020a 	orr.w	r2, r2, #10
 800614e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800615a:	2b00      	cmp	r3, #0
 800615c:	d007      	beq.n	800616e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006168:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800616c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006172:	2b00      	cmp	r3, #0
 8006174:	d007      	beq.n	8006186 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006180:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006184:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f042 0201 	orr.w	r2, r2, #1
 8006194:	601a      	str	r2, [r3, #0]
 8006196:	e005      	b.n	80061a4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80061a0:	2302      	movs	r3, #2
 80061a2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80061a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3718      	adds	r7, #24
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b085      	sub	sp, #20
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061b6:	2300      	movs	r3, #0
 80061b8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d005      	beq.n	80061d2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2204      	movs	r2, #4
 80061ca:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	73fb      	strb	r3, [r7, #15]
 80061d0:	e037      	b.n	8006242 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f022 020e 	bic.w	r2, r2, #14
 80061e0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80061f0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f022 0201 	bic.w	r2, r2, #1
 8006200:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006206:	f003 021f 	and.w	r2, r3, #31
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800620e:	2101      	movs	r1, #1
 8006210:	fa01 f202 	lsl.w	r2, r1, r2
 8006214:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800621e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00c      	beq.n	8006242 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006232:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006236:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006240:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8006252:	7bfb      	ldrb	r3, [r7, #15]
}
 8006254:	4618      	mov	r0, r3
 8006256:	3714      	adds	r7, #20
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006268:	2300      	movs	r3, #0
 800626a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b02      	cmp	r3, #2
 8006276:	d00d      	beq.n	8006294 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2204      	movs	r2, #4
 800627c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	73fb      	strb	r3, [r7, #15]
 8006292:	e047      	b.n	8006324 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f022 020e 	bic.w	r2, r2, #14
 80062a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f022 0201 	bic.w	r2, r2, #1
 80062b2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062be:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062c8:	f003 021f 	and.w	r2, r3, #31
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d0:	2101      	movs	r1, #1
 80062d2:	fa01 f202 	lsl.w	r2, r1, r2
 80062d6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80062e0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00c      	beq.n	8006304 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80062f8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006302:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006318:	2b00      	cmp	r3, #0
 800631a:	d003      	beq.n	8006324 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	4798      	blx	r3
    }
  }
  return status;
 8006324:	7bfb      	ldrb	r3, [r7, #15]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b084      	sub	sp, #16
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800634a:	f003 031f 	and.w	r3, r3, #31
 800634e:	2204      	movs	r2, #4
 8006350:	409a      	lsls	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	4013      	ands	r3, r2
 8006356:	2b00      	cmp	r3, #0
 8006358:	d026      	beq.n	80063a8 <HAL_DMA_IRQHandler+0x7a>
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	f003 0304 	and.w	r3, r3, #4
 8006360:	2b00      	cmp	r3, #0
 8006362:	d021      	beq.n	80063a8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0320 	and.w	r3, r3, #32
 800636e:	2b00      	cmp	r3, #0
 8006370:	d107      	bne.n	8006382 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f022 0204 	bic.w	r2, r2, #4
 8006380:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006386:	f003 021f 	and.w	r2, r3, #31
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800638e:	2104      	movs	r1, #4
 8006390:	fa01 f202 	lsl.w	r2, r1, r2
 8006394:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800639a:	2b00      	cmp	r3, #0
 800639c:	d071      	beq.n	8006482 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80063a6:	e06c      	b.n	8006482 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ac:	f003 031f 	and.w	r3, r3, #31
 80063b0:	2202      	movs	r2, #2
 80063b2:	409a      	lsls	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	4013      	ands	r3, r2
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d02e      	beq.n	800641a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	f003 0302 	and.w	r3, r3, #2
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d029      	beq.n	800641a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0320 	and.w	r3, r3, #32
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d10b      	bne.n	80063ec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f022 020a 	bic.w	r2, r2, #10
 80063e2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063f0:	f003 021f 	and.w	r2, r3, #31
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f8:	2102      	movs	r1, #2
 80063fa:	fa01 f202 	lsl.w	r2, r1, r2
 80063fe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800640c:	2b00      	cmp	r3, #0
 800640e:	d038      	beq.n	8006482 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006418:	e033      	b.n	8006482 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800641e:	f003 031f 	and.w	r3, r3, #31
 8006422:	2208      	movs	r2, #8
 8006424:	409a      	lsls	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	4013      	ands	r3, r2
 800642a:	2b00      	cmp	r3, #0
 800642c:	d02a      	beq.n	8006484 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	f003 0308 	and.w	r3, r3, #8
 8006434:	2b00      	cmp	r3, #0
 8006436:	d025      	beq.n	8006484 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f022 020e 	bic.w	r2, r2, #14
 8006446:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800644c:	f003 021f 	and.w	r2, r3, #31
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006454:	2101      	movs	r1, #1
 8006456:	fa01 f202 	lsl.w	r2, r1, r2
 800645a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006476:	2b00      	cmp	r3, #0
 8006478:	d004      	beq.n	8006484 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006482:	bf00      	nop
 8006484:	bf00      	nop
}
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
 8006498:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80064a2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d004      	beq.n	80064b6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80064b4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ba:	f003 021f 	and.w	r2, r3, #31
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c2:	2101      	movs	r1, #1
 80064c4:	fa01 f202 	lsl.w	r2, r1, r2
 80064c8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	683a      	ldr	r2, [r7, #0]
 80064d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	2b10      	cmp	r3, #16
 80064d8:	d108      	bne.n	80064ec <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80064ea:	e007      	b.n	80064fc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	60da      	str	r2, [r3, #12]
}
 80064fc:	bf00      	nop
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	461a      	mov	r2, r3
 8006516:	4b16      	ldr	r3, [pc, #88]	@ (8006570 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006518:	429a      	cmp	r2, r3
 800651a:	d802      	bhi.n	8006522 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800651c:	4b15      	ldr	r3, [pc, #84]	@ (8006574 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800651e:	617b      	str	r3, [r7, #20]
 8006520:	e001      	b.n	8006526 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006522:	4b15      	ldr	r3, [pc, #84]	@ (8006578 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006524:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	b2db      	uxtb	r3, r3
 8006530:	3b08      	subs	r3, #8
 8006532:	4a12      	ldr	r2, [pc, #72]	@ (800657c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006534:	fba2 2303 	umull	r2, r3, r2, r3
 8006538:	091b      	lsrs	r3, r3, #4
 800653a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006540:	089b      	lsrs	r3, r3, #2
 8006542:	009a      	lsls	r2, r3, #2
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	4413      	add	r3, r2
 8006548:	461a      	mov	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a0b      	ldr	r2, [pc, #44]	@ (8006580 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006552:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f003 031f 	and.w	r3, r3, #31
 800655a:	2201      	movs	r2, #1
 800655c:	409a      	lsls	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006562:	bf00      	nop
 8006564:	371c      	adds	r7, #28
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	40020407 	.word	0x40020407
 8006574:	40020800 	.word	0x40020800
 8006578:	40020820 	.word	0x40020820
 800657c:	cccccccd 	.word	0xcccccccd
 8006580:	40020880 	.word	0x40020880

08006584 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006584:	b480      	push	{r7}
 8006586:	b085      	sub	sp, #20
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	b2db      	uxtb	r3, r3
 8006592:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	4b0b      	ldr	r3, [pc, #44]	@ (80065c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006598:	4413      	add	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	461a      	mov	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a08      	ldr	r2, [pc, #32]	@ (80065c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80065a6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	3b01      	subs	r3, #1
 80065ac:	f003 031f 	and.w	r3, r3, #31
 80065b0:	2201      	movs	r2, #1
 80065b2:	409a      	lsls	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80065b8:	bf00      	nop
 80065ba:	3714      	adds	r7, #20
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr
 80065c4:	1000823f 	.word	0x1000823f
 80065c8:	40020940 	.word	0x40020940

080065cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b087      	sub	sp, #28
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80065d6:	2300      	movs	r3, #0
 80065d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80065da:	e15a      	b.n	8006892 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	2101      	movs	r1, #1
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	fa01 f303 	lsl.w	r3, r1, r3
 80065e8:	4013      	ands	r3, r2
 80065ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f000 814c 	beq.w	800688c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	f003 0303 	and.w	r3, r3, #3
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d005      	beq.n	800660c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006608:	2b02      	cmp	r3, #2
 800660a:	d130      	bne.n	800666e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	005b      	lsls	r3, r3, #1
 8006616:	2203      	movs	r2, #3
 8006618:	fa02 f303 	lsl.w	r3, r2, r3
 800661c:	43db      	mvns	r3, r3
 800661e:	693a      	ldr	r2, [r7, #16]
 8006620:	4013      	ands	r3, r2
 8006622:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	68da      	ldr	r2, [r3, #12]
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	005b      	lsls	r3, r3, #1
 800662c:	fa02 f303 	lsl.w	r3, r2, r3
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	4313      	orrs	r3, r2
 8006634:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006642:	2201      	movs	r2, #1
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	fa02 f303 	lsl.w	r3, r2, r3
 800664a:	43db      	mvns	r3, r3
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	4013      	ands	r3, r2
 8006650:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	091b      	lsrs	r3, r3, #4
 8006658:	f003 0201 	and.w	r2, r3, #1
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	fa02 f303 	lsl.w	r3, r2, r3
 8006662:	693a      	ldr	r2, [r7, #16]
 8006664:	4313      	orrs	r3, r2
 8006666:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f003 0303 	and.w	r3, r3, #3
 8006676:	2b03      	cmp	r3, #3
 8006678:	d017      	beq.n	80066aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	005b      	lsls	r3, r3, #1
 8006684:	2203      	movs	r2, #3
 8006686:	fa02 f303 	lsl.w	r3, r2, r3
 800668a:	43db      	mvns	r3, r3
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	4013      	ands	r3, r2
 8006690:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	689a      	ldr	r2, [r3, #8]
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	005b      	lsls	r3, r3, #1
 800669a:	fa02 f303 	lsl.w	r3, r2, r3
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f003 0303 	and.w	r3, r3, #3
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	d123      	bne.n	80066fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	08da      	lsrs	r2, r3, #3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	3208      	adds	r2, #8
 80066be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	f003 0307 	and.w	r3, r3, #7
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	220f      	movs	r2, #15
 80066ce:	fa02 f303 	lsl.w	r3, r2, r3
 80066d2:	43db      	mvns	r3, r3
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	4013      	ands	r3, r2
 80066d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	691a      	ldr	r2, [r3, #16]
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f003 0307 	and.w	r3, r3, #7
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	08da      	lsrs	r2, r3, #3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	3208      	adds	r2, #8
 80066f8:	6939      	ldr	r1, [r7, #16]
 80066fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	005b      	lsls	r3, r3, #1
 8006708:	2203      	movs	r2, #3
 800670a:	fa02 f303 	lsl.w	r3, r2, r3
 800670e:	43db      	mvns	r3, r3
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	4013      	ands	r3, r2
 8006714:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f003 0203 	and.w	r2, r3, #3
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	005b      	lsls	r3, r3, #1
 8006722:	fa02 f303 	lsl.w	r3, r2, r3
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	4313      	orrs	r3, r2
 800672a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800673a:	2b00      	cmp	r3, #0
 800673c:	f000 80a6 	beq.w	800688c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006740:	4b5b      	ldr	r3, [pc, #364]	@ (80068b0 <HAL_GPIO_Init+0x2e4>)
 8006742:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006744:	4a5a      	ldr	r2, [pc, #360]	@ (80068b0 <HAL_GPIO_Init+0x2e4>)
 8006746:	f043 0301 	orr.w	r3, r3, #1
 800674a:	6613      	str	r3, [r2, #96]	@ 0x60
 800674c:	4b58      	ldr	r3, [pc, #352]	@ (80068b0 <HAL_GPIO_Init+0x2e4>)
 800674e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006750:	f003 0301 	and.w	r3, r3, #1
 8006754:	60bb      	str	r3, [r7, #8]
 8006756:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006758:	4a56      	ldr	r2, [pc, #344]	@ (80068b4 <HAL_GPIO_Init+0x2e8>)
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	089b      	lsrs	r3, r3, #2
 800675e:	3302      	adds	r3, #2
 8006760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006764:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	f003 0303 	and.w	r3, r3, #3
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	220f      	movs	r2, #15
 8006770:	fa02 f303 	lsl.w	r3, r2, r3
 8006774:	43db      	mvns	r3, r3
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	4013      	ands	r3, r2
 800677a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006782:	d01f      	beq.n	80067c4 <HAL_GPIO_Init+0x1f8>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a4c      	ldr	r2, [pc, #304]	@ (80068b8 <HAL_GPIO_Init+0x2ec>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d019      	beq.n	80067c0 <HAL_GPIO_Init+0x1f4>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a4b      	ldr	r2, [pc, #300]	@ (80068bc <HAL_GPIO_Init+0x2f0>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d013      	beq.n	80067bc <HAL_GPIO_Init+0x1f0>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a4a      	ldr	r2, [pc, #296]	@ (80068c0 <HAL_GPIO_Init+0x2f4>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d00d      	beq.n	80067b8 <HAL_GPIO_Init+0x1ec>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a49      	ldr	r2, [pc, #292]	@ (80068c4 <HAL_GPIO_Init+0x2f8>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d007      	beq.n	80067b4 <HAL_GPIO_Init+0x1e8>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a48      	ldr	r2, [pc, #288]	@ (80068c8 <HAL_GPIO_Init+0x2fc>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d101      	bne.n	80067b0 <HAL_GPIO_Init+0x1e4>
 80067ac:	2305      	movs	r3, #5
 80067ae:	e00a      	b.n	80067c6 <HAL_GPIO_Init+0x1fa>
 80067b0:	2306      	movs	r3, #6
 80067b2:	e008      	b.n	80067c6 <HAL_GPIO_Init+0x1fa>
 80067b4:	2304      	movs	r3, #4
 80067b6:	e006      	b.n	80067c6 <HAL_GPIO_Init+0x1fa>
 80067b8:	2303      	movs	r3, #3
 80067ba:	e004      	b.n	80067c6 <HAL_GPIO_Init+0x1fa>
 80067bc:	2302      	movs	r3, #2
 80067be:	e002      	b.n	80067c6 <HAL_GPIO_Init+0x1fa>
 80067c0:	2301      	movs	r3, #1
 80067c2:	e000      	b.n	80067c6 <HAL_GPIO_Init+0x1fa>
 80067c4:	2300      	movs	r3, #0
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	f002 0203 	and.w	r2, r2, #3
 80067cc:	0092      	lsls	r2, r2, #2
 80067ce:	4093      	lsls	r3, r2
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80067d6:	4937      	ldr	r1, [pc, #220]	@ (80068b4 <HAL_GPIO_Init+0x2e8>)
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	089b      	lsrs	r3, r3, #2
 80067dc:	3302      	adds	r3, #2
 80067de:	693a      	ldr	r2, [r7, #16]
 80067e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80067e4:	4b39      	ldr	r3, [pc, #228]	@ (80068cc <HAL_GPIO_Init+0x300>)
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	43db      	mvns	r3, r3
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	4013      	ands	r3, r2
 80067f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d003      	beq.n	8006808 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	4313      	orrs	r3, r2
 8006806:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006808:	4a30      	ldr	r2, [pc, #192]	@ (80068cc <HAL_GPIO_Init+0x300>)
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800680e:	4b2f      	ldr	r3, [pc, #188]	@ (80068cc <HAL_GPIO_Init+0x300>)
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	43db      	mvns	r3, r3
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	4013      	ands	r3, r2
 800681c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	4313      	orrs	r3, r2
 8006830:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006832:	4a26      	ldr	r2, [pc, #152]	@ (80068cc <HAL_GPIO_Init+0x300>)
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006838:	4b24      	ldr	r3, [pc, #144]	@ (80068cc <HAL_GPIO_Init+0x300>)
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	43db      	mvns	r3, r3
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	4013      	ands	r3, r2
 8006846:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d003      	beq.n	800685c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	4313      	orrs	r3, r2
 800685a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800685c:	4a1b      	ldr	r2, [pc, #108]	@ (80068cc <HAL_GPIO_Init+0x300>)
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006862:	4b1a      	ldr	r3, [pc, #104]	@ (80068cc <HAL_GPIO_Init+0x300>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	43db      	mvns	r3, r3
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	4013      	ands	r3, r2
 8006870:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d003      	beq.n	8006886 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	4313      	orrs	r3, r2
 8006884:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006886:	4a11      	ldr	r2, [pc, #68]	@ (80068cc <HAL_GPIO_Init+0x300>)
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	3301      	adds	r3, #1
 8006890:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	fa22 f303 	lsr.w	r3, r2, r3
 800689c:	2b00      	cmp	r3, #0
 800689e:	f47f ae9d 	bne.w	80065dc <HAL_GPIO_Init+0x10>
  }
}
 80068a2:	bf00      	nop
 80068a4:	bf00      	nop
 80068a6:	371c      	adds	r7, #28
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr
 80068b0:	40021000 	.word	0x40021000
 80068b4:	40010000 	.word	0x40010000
 80068b8:	48000400 	.word	0x48000400
 80068bc:	48000800 	.word	0x48000800
 80068c0:	48000c00 	.word	0x48000c00
 80068c4:	48001000 	.word	0x48001000
 80068c8:	48001400 	.word	0x48001400
 80068cc:	40010400 	.word	0x40010400

080068d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	460b      	mov	r3, r1
 80068da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	691a      	ldr	r2, [r3, #16]
 80068e0:	887b      	ldrh	r3, [r7, #2]
 80068e2:	4013      	ands	r3, r2
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d002      	beq.n	80068ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80068e8:	2301      	movs	r3, #1
 80068ea:	73fb      	strb	r3, [r7, #15]
 80068ec:	e001      	b.n	80068f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80068ee:	2300      	movs	r3, #0
 80068f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80068f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3714      	adds	r7, #20
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	460b      	mov	r3, r1
 800690a:	807b      	strh	r3, [r7, #2]
 800690c:	4613      	mov	r3, r2
 800690e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006910:	787b      	ldrb	r3, [r7, #1]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006916:	887a      	ldrh	r2, [r7, #2]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800691c:	e002      	b.n	8006924 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800691e:	887a      	ldrh	r2, [r7, #2]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006924:	bf00      	nop
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	4603      	mov	r3, r0
 8006938:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800693a:	4b08      	ldr	r3, [pc, #32]	@ (800695c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800693c:	695a      	ldr	r2, [r3, #20]
 800693e:	88fb      	ldrh	r3, [r7, #6]
 8006940:	4013      	ands	r3, r2
 8006942:	2b00      	cmp	r3, #0
 8006944:	d006      	beq.n	8006954 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006946:	4a05      	ldr	r2, [pc, #20]	@ (800695c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006948:	88fb      	ldrh	r3, [r7, #6]
 800694a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800694c:	88fb      	ldrh	r3, [r7, #6]
 800694e:	4618      	mov	r0, r3
 8006950:	f000 f806 	bl	8006960 <HAL_GPIO_EXTI_Callback>
  }
}
 8006954:	bf00      	nop
 8006956:	3708      	adds	r7, #8
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	40010400 	.word	0x40010400

08006960 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	4603      	mov	r3, r0
 8006968:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800696a:	bf00      	nop
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
	...

08006978 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d141      	bne.n	8006a0a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006986:	4b4b      	ldr	r3, [pc, #300]	@ (8006ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800698e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006992:	d131      	bne.n	80069f8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006994:	4b47      	ldr	r3, [pc, #284]	@ (8006ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006996:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800699a:	4a46      	ldr	r2, [pc, #280]	@ (8006ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800699c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80069a4:	4b43      	ldr	r3, [pc, #268]	@ (8006ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80069ac:	4a41      	ldr	r2, [pc, #260]	@ (8006ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80069b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80069b4:	4b40      	ldr	r3, [pc, #256]	@ (8006ab8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2232      	movs	r2, #50	@ 0x32
 80069ba:	fb02 f303 	mul.w	r3, r2, r3
 80069be:	4a3f      	ldr	r2, [pc, #252]	@ (8006abc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80069c0:	fba2 2303 	umull	r2, r3, r2, r3
 80069c4:	0c9b      	lsrs	r3, r3, #18
 80069c6:	3301      	adds	r3, #1
 80069c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80069ca:	e002      	b.n	80069d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	3b01      	subs	r3, #1
 80069d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80069d2:	4b38      	ldr	r3, [pc, #224]	@ (8006ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069de:	d102      	bne.n	80069e6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1f2      	bne.n	80069cc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80069e6:	4b33      	ldr	r3, [pc, #204]	@ (8006ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069e8:	695b      	ldr	r3, [r3, #20]
 80069ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069f2:	d158      	bne.n	8006aa6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e057      	b.n	8006aa8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80069f8:	4b2e      	ldr	r3, [pc, #184]	@ (8006ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069fe:	4a2d      	ldr	r2, [pc, #180]	@ (8006ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a04:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006a08:	e04d      	b.n	8006aa6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a10:	d141      	bne.n	8006a96 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006a12:	4b28      	ldr	r3, [pc, #160]	@ (8006ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006a1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a1e:	d131      	bne.n	8006a84 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006a20:	4b24      	ldr	r3, [pc, #144]	@ (8006ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a26:	4a23      	ldr	r2, [pc, #140]	@ (8006ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006a30:	4b20      	ldr	r3, [pc, #128]	@ (8006ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006a38:	4a1e      	ldr	r2, [pc, #120]	@ (8006ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006a3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006a40:	4b1d      	ldr	r3, [pc, #116]	@ (8006ab8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2232      	movs	r2, #50	@ 0x32
 8006a46:	fb02 f303 	mul.w	r3, r2, r3
 8006a4a:	4a1c      	ldr	r2, [pc, #112]	@ (8006abc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a50:	0c9b      	lsrs	r3, r3, #18
 8006a52:	3301      	adds	r3, #1
 8006a54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a56:	e002      	b.n	8006a5e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006a5e:	4b15      	ldr	r3, [pc, #84]	@ (8006ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a6a:	d102      	bne.n	8006a72 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1f2      	bne.n	8006a58 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006a72:	4b10      	ldr	r3, [pc, #64]	@ (8006ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a7e:	d112      	bne.n	8006aa6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e011      	b.n	8006aa8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006a84:	4b0b      	ldr	r3, [pc, #44]	@ (8006ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8006ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a90:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006a94:	e007      	b.n	8006aa6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006a96:	4b07      	ldr	r3, [pc, #28]	@ (8006ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006a9e:	4a05      	ldr	r2, [pc, #20]	@ (8006ab4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006aa0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006aa4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3714      	adds	r7, #20
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr
 8006ab4:	40007000 	.word	0x40007000
 8006ab8:	20000208 	.word	0x20000208
 8006abc:	431bde83 	.word	0x431bde83

08006ac0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006ac4:	4b05      	ldr	r3, [pc, #20]	@ (8006adc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	4a04      	ldr	r2, [pc, #16]	@ (8006adc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006aca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006ace:	6093      	str	r3, [r2, #8]
}
 8006ad0:	bf00      	nop
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	40007000 	.word	0x40007000

08006ae0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b088      	sub	sp, #32
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e2fe      	b.n	80070f0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 0301 	and.w	r3, r3, #1
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d075      	beq.n	8006bea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006afe:	4b97      	ldr	r3, [pc, #604]	@ (8006d5c <HAL_RCC_OscConfig+0x27c>)
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f003 030c 	and.w	r3, r3, #12
 8006b06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b08:	4b94      	ldr	r3, [pc, #592]	@ (8006d5c <HAL_RCC_OscConfig+0x27c>)
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	f003 0303 	and.w	r3, r3, #3
 8006b10:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	2b0c      	cmp	r3, #12
 8006b16:	d102      	bne.n	8006b1e <HAL_RCC_OscConfig+0x3e>
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	2b03      	cmp	r3, #3
 8006b1c:	d002      	beq.n	8006b24 <HAL_RCC_OscConfig+0x44>
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	2b08      	cmp	r3, #8
 8006b22:	d10b      	bne.n	8006b3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b24:	4b8d      	ldr	r3, [pc, #564]	@ (8006d5c <HAL_RCC_OscConfig+0x27c>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d05b      	beq.n	8006be8 <HAL_RCC_OscConfig+0x108>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d157      	bne.n	8006be8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e2d9      	b.n	80070f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b44:	d106      	bne.n	8006b54 <HAL_RCC_OscConfig+0x74>
 8006b46:	4b85      	ldr	r3, [pc, #532]	@ (8006d5c <HAL_RCC_OscConfig+0x27c>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a84      	ldr	r2, [pc, #528]	@ (8006d5c <HAL_RCC_OscConfig+0x27c>)
 8006b4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b50:	6013      	str	r3, [r2, #0]
 8006b52:	e01d      	b.n	8006b90 <HAL_RCC_OscConfig+0xb0>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b5c:	d10c      	bne.n	8006b78 <HAL_RCC_OscConfig+0x98>
 8006b5e:	4b7f      	ldr	r3, [pc, #508]	@ (8006d5c <HAL_RCC_OscConfig+0x27c>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a7e      	ldr	r2, [pc, #504]	@ (8006d5c <HAL_RCC_OscConfig+0x27c>)
 8006b64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b68:	6013      	str	r3, [r2, #0]
 8006b6a:	4b7c      	ldr	r3, [pc, #496]	@ (8006d5c <HAL_RCC_OscConfig+0x27c>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a7b      	ldr	r2, [pc, #492]	@ (8006d5c <HAL_RCC_OscConfig+0x27c>)
 8006b70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b74:	6013      	str	r3, [r2, #0]
 8006b76:	e00b      	b.n	8006b90 <HAL_RCC_OscConfig+0xb0>
 8006b78:	4b78      	ldr	r3, [pc, #480]	@ (8006d5c <HAL_RCC_OscConfig+0x27c>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a77      	ldr	r2, [pc, #476]	@ (8006d5c <HAL_RCC_OscConfig+0x27c>)
 8006b7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b82:	6013      	str	r3, [r2, #0]
 8006b84:	4b75      	ldr	r3, [pc, #468]	@ (8006d5c <HAL_RCC_OscConfig+0x27c>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a74      	ldr	r2, [pc, #464]	@ (8006d5c <HAL_RCC_OscConfig+0x27c>)
 8006b8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d013      	beq.n	8006bc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b98:	f7fd ffca 	bl	8004b30 <HAL_GetTick>
 8006b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b9e:	e008      	b.n	8006bb2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ba0:	f7fd ffc6 	bl	8004b30 <HAL_GetTick>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	2b64      	cmp	r3, #100	@ 0x64
 8006bac:	d901      	bls.n	8006bb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e29e      	b.n	80070f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006bb2:	4b6a      	ldr	r3, [pc, #424]	@ (8006d5c <HAL_RCC_OscConfig+0x27c>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d0f0      	beq.n	8006ba0 <HAL_RCC_OscConfig+0xc0>
 8006bbe:	e014      	b.n	8006bea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bc0:	f7fd ffb6 	bl	8004b30 <HAL_GetTick>
 8006bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006bc6:	e008      	b.n	8006bda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bc8:	f7fd ffb2 	bl	8004b30 <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	2b64      	cmp	r3, #100	@ 0x64
 8006bd4:	d901      	bls.n	8006bda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e28a      	b.n	80070f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006bda:	4b60      	ldr	r3, [pc, #384]	@ (8006d5c <HAL_RCC_OscConfig+0x27c>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1f0      	bne.n	8006bc8 <HAL_RCC_OscConfig+0xe8>
 8006be6:	e000      	b.n	8006bea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 0302 	and.w	r3, r3, #2
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d075      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bf6:	4b59      	ldr	r3, [pc, #356]	@ (8006d5c <HAL_RCC_OscConfig+0x27c>)
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	f003 030c 	and.w	r3, r3, #12
 8006bfe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c00:	4b56      	ldr	r3, [pc, #344]	@ (8006d5c <HAL_RCC_OscConfig+0x27c>)
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	f003 0303 	and.w	r3, r3, #3
 8006c08:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	2b0c      	cmp	r3, #12
 8006c0e:	d102      	bne.n	8006c16 <HAL_RCC_OscConfig+0x136>
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d002      	beq.n	8006c1c <HAL_RCC_OscConfig+0x13c>
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	2b04      	cmp	r3, #4
 8006c1a:	d11f      	bne.n	8006c5c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c1c:	4b4f      	ldr	r3, [pc, #316]	@ (8006d5c <HAL_RCC_OscConfig+0x27c>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d005      	beq.n	8006c34 <HAL_RCC_OscConfig+0x154>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d101      	bne.n	8006c34 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e25d      	b.n	80070f0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c34:	4b49      	ldr	r3, [pc, #292]	@ (8006d5c <HAL_RCC_OscConfig+0x27c>)
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	061b      	lsls	r3, r3, #24
 8006c42:	4946      	ldr	r1, [pc, #280]	@ (8006d5c <HAL_RCC_OscConfig+0x27c>)
 8006c44:	4313      	orrs	r3, r2
 8006c46:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006c48:	4b45      	ldr	r3, [pc, #276]	@ (8006d60 <HAL_RCC_OscConfig+0x280>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7fd ff23 	bl	8004a98 <HAL_InitTick>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d043      	beq.n	8006ce0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e249      	b.n	80070f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d023      	beq.n	8006cac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c64:	4b3d      	ldr	r3, [pc, #244]	@ (8006d5c <HAL_RCC_OscConfig+0x27c>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a3c      	ldr	r2, [pc, #240]	@ (8006d5c <HAL_RCC_OscConfig+0x27c>)
 8006c6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c70:	f7fd ff5e 	bl	8004b30 <HAL_GetTick>
 8006c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c76:	e008      	b.n	8006c8a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c78:	f7fd ff5a 	bl	8004b30 <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d901      	bls.n	8006c8a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e232      	b.n	80070f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c8a:	4b34      	ldr	r3, [pc, #208]	@ (8006d5c <HAL_RCC_OscConfig+0x27c>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d0f0      	beq.n	8006c78 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c96:	4b31      	ldr	r3, [pc, #196]	@ (8006d5c <HAL_RCC_OscConfig+0x27c>)
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	061b      	lsls	r3, r3, #24
 8006ca4:	492d      	ldr	r1, [pc, #180]	@ (8006d5c <HAL_RCC_OscConfig+0x27c>)
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	604b      	str	r3, [r1, #4]
 8006caa:	e01a      	b.n	8006ce2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cac:	4b2b      	ldr	r3, [pc, #172]	@ (8006d5c <HAL_RCC_OscConfig+0x27c>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a2a      	ldr	r2, [pc, #168]	@ (8006d5c <HAL_RCC_OscConfig+0x27c>)
 8006cb2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb8:	f7fd ff3a 	bl	8004b30 <HAL_GetTick>
 8006cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006cbe:	e008      	b.n	8006cd2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cc0:	f7fd ff36 	bl	8004b30 <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d901      	bls.n	8006cd2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e20e      	b.n	80070f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006cd2:	4b22      	ldr	r3, [pc, #136]	@ (8006d5c <HAL_RCC_OscConfig+0x27c>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1f0      	bne.n	8006cc0 <HAL_RCC_OscConfig+0x1e0>
 8006cde:	e000      	b.n	8006ce2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ce0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0308 	and.w	r3, r3, #8
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d041      	beq.n	8006d72 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	695b      	ldr	r3, [r3, #20]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d01c      	beq.n	8006d30 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cf6:	4b19      	ldr	r3, [pc, #100]	@ (8006d5c <HAL_RCC_OscConfig+0x27c>)
 8006cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006cfc:	4a17      	ldr	r2, [pc, #92]	@ (8006d5c <HAL_RCC_OscConfig+0x27c>)
 8006cfe:	f043 0301 	orr.w	r3, r3, #1
 8006d02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d06:	f7fd ff13 	bl	8004b30 <HAL_GetTick>
 8006d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006d0c:	e008      	b.n	8006d20 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d0e:	f7fd ff0f 	bl	8004b30 <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d901      	bls.n	8006d20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e1e7      	b.n	80070f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006d20:	4b0e      	ldr	r3, [pc, #56]	@ (8006d5c <HAL_RCC_OscConfig+0x27c>)
 8006d22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d26:	f003 0302 	and.w	r3, r3, #2
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d0ef      	beq.n	8006d0e <HAL_RCC_OscConfig+0x22e>
 8006d2e:	e020      	b.n	8006d72 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d30:	4b0a      	ldr	r3, [pc, #40]	@ (8006d5c <HAL_RCC_OscConfig+0x27c>)
 8006d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d36:	4a09      	ldr	r2, [pc, #36]	@ (8006d5c <HAL_RCC_OscConfig+0x27c>)
 8006d38:	f023 0301 	bic.w	r3, r3, #1
 8006d3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d40:	f7fd fef6 	bl	8004b30 <HAL_GetTick>
 8006d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006d46:	e00d      	b.n	8006d64 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d48:	f7fd fef2 	bl	8004b30 <HAL_GetTick>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d906      	bls.n	8006d64 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e1ca      	b.n	80070f0 <HAL_RCC_OscConfig+0x610>
 8006d5a:	bf00      	nop
 8006d5c:	40021000 	.word	0x40021000
 8006d60:	2000020c 	.word	0x2000020c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006d64:	4b8c      	ldr	r3, [pc, #560]	@ (8006f98 <HAL_RCC_OscConfig+0x4b8>)
 8006d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006d6a:	f003 0302 	and.w	r3, r3, #2
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d1ea      	bne.n	8006d48 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0304 	and.w	r3, r3, #4
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f000 80a6 	beq.w	8006ecc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d80:	2300      	movs	r3, #0
 8006d82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006d84:	4b84      	ldr	r3, [pc, #528]	@ (8006f98 <HAL_RCC_OscConfig+0x4b8>)
 8006d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d101      	bne.n	8006d94 <HAL_RCC_OscConfig+0x2b4>
 8006d90:	2301      	movs	r3, #1
 8006d92:	e000      	b.n	8006d96 <HAL_RCC_OscConfig+0x2b6>
 8006d94:	2300      	movs	r3, #0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00d      	beq.n	8006db6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d9a:	4b7f      	ldr	r3, [pc, #508]	@ (8006f98 <HAL_RCC_OscConfig+0x4b8>)
 8006d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d9e:	4a7e      	ldr	r2, [pc, #504]	@ (8006f98 <HAL_RCC_OscConfig+0x4b8>)
 8006da0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006da4:	6593      	str	r3, [r2, #88]	@ 0x58
 8006da6:	4b7c      	ldr	r3, [pc, #496]	@ (8006f98 <HAL_RCC_OscConfig+0x4b8>)
 8006da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dae:	60fb      	str	r3, [r7, #12]
 8006db0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006db2:	2301      	movs	r3, #1
 8006db4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006db6:	4b79      	ldr	r3, [pc, #484]	@ (8006f9c <HAL_RCC_OscConfig+0x4bc>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d118      	bne.n	8006df4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006dc2:	4b76      	ldr	r3, [pc, #472]	@ (8006f9c <HAL_RCC_OscConfig+0x4bc>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a75      	ldr	r2, [pc, #468]	@ (8006f9c <HAL_RCC_OscConfig+0x4bc>)
 8006dc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006dcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006dce:	f7fd feaf 	bl	8004b30 <HAL_GetTick>
 8006dd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006dd4:	e008      	b.n	8006de8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dd6:	f7fd feab 	bl	8004b30 <HAL_GetTick>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	d901      	bls.n	8006de8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006de4:	2303      	movs	r3, #3
 8006de6:	e183      	b.n	80070f0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006de8:	4b6c      	ldr	r3, [pc, #432]	@ (8006f9c <HAL_RCC_OscConfig+0x4bc>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d0f0      	beq.n	8006dd6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d108      	bne.n	8006e0e <HAL_RCC_OscConfig+0x32e>
 8006dfc:	4b66      	ldr	r3, [pc, #408]	@ (8006f98 <HAL_RCC_OscConfig+0x4b8>)
 8006dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e02:	4a65      	ldr	r2, [pc, #404]	@ (8006f98 <HAL_RCC_OscConfig+0x4b8>)
 8006e04:	f043 0301 	orr.w	r3, r3, #1
 8006e08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006e0c:	e024      	b.n	8006e58 <HAL_RCC_OscConfig+0x378>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	2b05      	cmp	r3, #5
 8006e14:	d110      	bne.n	8006e38 <HAL_RCC_OscConfig+0x358>
 8006e16:	4b60      	ldr	r3, [pc, #384]	@ (8006f98 <HAL_RCC_OscConfig+0x4b8>)
 8006e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e1c:	4a5e      	ldr	r2, [pc, #376]	@ (8006f98 <HAL_RCC_OscConfig+0x4b8>)
 8006e1e:	f043 0304 	orr.w	r3, r3, #4
 8006e22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006e26:	4b5c      	ldr	r3, [pc, #368]	@ (8006f98 <HAL_RCC_OscConfig+0x4b8>)
 8006e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e2c:	4a5a      	ldr	r2, [pc, #360]	@ (8006f98 <HAL_RCC_OscConfig+0x4b8>)
 8006e2e:	f043 0301 	orr.w	r3, r3, #1
 8006e32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006e36:	e00f      	b.n	8006e58 <HAL_RCC_OscConfig+0x378>
 8006e38:	4b57      	ldr	r3, [pc, #348]	@ (8006f98 <HAL_RCC_OscConfig+0x4b8>)
 8006e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e3e:	4a56      	ldr	r2, [pc, #344]	@ (8006f98 <HAL_RCC_OscConfig+0x4b8>)
 8006e40:	f023 0301 	bic.w	r3, r3, #1
 8006e44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006e48:	4b53      	ldr	r3, [pc, #332]	@ (8006f98 <HAL_RCC_OscConfig+0x4b8>)
 8006e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e4e:	4a52      	ldr	r2, [pc, #328]	@ (8006f98 <HAL_RCC_OscConfig+0x4b8>)
 8006e50:	f023 0304 	bic.w	r3, r3, #4
 8006e54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d016      	beq.n	8006e8e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e60:	f7fd fe66 	bl	8004b30 <HAL_GetTick>
 8006e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e66:	e00a      	b.n	8006e7e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e68:	f7fd fe62 	bl	8004b30 <HAL_GetTick>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d901      	bls.n	8006e7e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e138      	b.n	80070f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e7e:	4b46      	ldr	r3, [pc, #280]	@ (8006f98 <HAL_RCC_OscConfig+0x4b8>)
 8006e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e84:	f003 0302 	and.w	r3, r3, #2
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d0ed      	beq.n	8006e68 <HAL_RCC_OscConfig+0x388>
 8006e8c:	e015      	b.n	8006eba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e8e:	f7fd fe4f 	bl	8004b30 <HAL_GetTick>
 8006e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e94:	e00a      	b.n	8006eac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e96:	f7fd fe4b 	bl	8004b30 <HAL_GetTick>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	1ad3      	subs	r3, r2, r3
 8006ea0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d901      	bls.n	8006eac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e121      	b.n	80070f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006eac:	4b3a      	ldr	r3, [pc, #232]	@ (8006f98 <HAL_RCC_OscConfig+0x4b8>)
 8006eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006eb2:	f003 0302 	and.w	r3, r3, #2
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1ed      	bne.n	8006e96 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006eba:	7ffb      	ldrb	r3, [r7, #31]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d105      	bne.n	8006ecc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ec0:	4b35      	ldr	r3, [pc, #212]	@ (8006f98 <HAL_RCC_OscConfig+0x4b8>)
 8006ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ec4:	4a34      	ldr	r2, [pc, #208]	@ (8006f98 <HAL_RCC_OscConfig+0x4b8>)
 8006ec6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006eca:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0320 	and.w	r3, r3, #32
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d03c      	beq.n	8006f52 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	699b      	ldr	r3, [r3, #24]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d01c      	beq.n	8006f1a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006ee0:	4b2d      	ldr	r3, [pc, #180]	@ (8006f98 <HAL_RCC_OscConfig+0x4b8>)
 8006ee2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ee6:	4a2c      	ldr	r2, [pc, #176]	@ (8006f98 <HAL_RCC_OscConfig+0x4b8>)
 8006ee8:	f043 0301 	orr.w	r3, r3, #1
 8006eec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ef0:	f7fd fe1e 	bl	8004b30 <HAL_GetTick>
 8006ef4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006ef6:	e008      	b.n	8006f0a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ef8:	f7fd fe1a 	bl	8004b30 <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	d901      	bls.n	8006f0a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e0f2      	b.n	80070f0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006f0a:	4b23      	ldr	r3, [pc, #140]	@ (8006f98 <HAL_RCC_OscConfig+0x4b8>)
 8006f0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f10:	f003 0302 	and.w	r3, r3, #2
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d0ef      	beq.n	8006ef8 <HAL_RCC_OscConfig+0x418>
 8006f18:	e01b      	b.n	8006f52 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006f1a:	4b1f      	ldr	r3, [pc, #124]	@ (8006f98 <HAL_RCC_OscConfig+0x4b8>)
 8006f1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f20:	4a1d      	ldr	r2, [pc, #116]	@ (8006f98 <HAL_RCC_OscConfig+0x4b8>)
 8006f22:	f023 0301 	bic.w	r3, r3, #1
 8006f26:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f2a:	f7fd fe01 	bl	8004b30 <HAL_GetTick>
 8006f2e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006f30:	e008      	b.n	8006f44 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f32:	f7fd fdfd 	bl	8004b30 <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d901      	bls.n	8006f44 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e0d5      	b.n	80070f0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006f44:	4b14      	ldr	r3, [pc, #80]	@ (8006f98 <HAL_RCC_OscConfig+0x4b8>)
 8006f46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006f4a:	f003 0302 	and.w	r3, r3, #2
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1ef      	bne.n	8006f32 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	69db      	ldr	r3, [r3, #28]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f000 80c9 	beq.w	80070ee <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8006f98 <HAL_RCC_OscConfig+0x4b8>)
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	f003 030c 	and.w	r3, r3, #12
 8006f64:	2b0c      	cmp	r3, #12
 8006f66:	f000 8083 	beq.w	8007070 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	69db      	ldr	r3, [r3, #28]
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d15e      	bne.n	8007030 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f72:	4b09      	ldr	r3, [pc, #36]	@ (8006f98 <HAL_RCC_OscConfig+0x4b8>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a08      	ldr	r2, [pc, #32]	@ (8006f98 <HAL_RCC_OscConfig+0x4b8>)
 8006f78:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f7e:	f7fd fdd7 	bl	8004b30 <HAL_GetTick>
 8006f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f84:	e00c      	b.n	8006fa0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f86:	f7fd fdd3 	bl	8004b30 <HAL_GetTick>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	1ad3      	subs	r3, r2, r3
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d905      	bls.n	8006fa0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006f94:	2303      	movs	r3, #3
 8006f96:	e0ab      	b.n	80070f0 <HAL_RCC_OscConfig+0x610>
 8006f98:	40021000 	.word	0x40021000
 8006f9c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fa0:	4b55      	ldr	r3, [pc, #340]	@ (80070f8 <HAL_RCC_OscConfig+0x618>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1ec      	bne.n	8006f86 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006fac:	4b52      	ldr	r3, [pc, #328]	@ (80070f8 <HAL_RCC_OscConfig+0x618>)
 8006fae:	68da      	ldr	r2, [r3, #12]
 8006fb0:	4b52      	ldr	r3, [pc, #328]	@ (80070fc <HAL_RCC_OscConfig+0x61c>)
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	6a11      	ldr	r1, [r2, #32]
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006fbc:	3a01      	subs	r2, #1
 8006fbe:	0112      	lsls	r2, r2, #4
 8006fc0:	4311      	orrs	r1, r2
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006fc6:	0212      	lsls	r2, r2, #8
 8006fc8:	4311      	orrs	r1, r2
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006fce:	0852      	lsrs	r2, r2, #1
 8006fd0:	3a01      	subs	r2, #1
 8006fd2:	0552      	lsls	r2, r2, #21
 8006fd4:	4311      	orrs	r1, r2
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006fda:	0852      	lsrs	r2, r2, #1
 8006fdc:	3a01      	subs	r2, #1
 8006fde:	0652      	lsls	r2, r2, #25
 8006fe0:	4311      	orrs	r1, r2
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006fe6:	06d2      	lsls	r2, r2, #27
 8006fe8:	430a      	orrs	r2, r1
 8006fea:	4943      	ldr	r1, [pc, #268]	@ (80070f8 <HAL_RCC_OscConfig+0x618>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ff0:	4b41      	ldr	r3, [pc, #260]	@ (80070f8 <HAL_RCC_OscConfig+0x618>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a40      	ldr	r2, [pc, #256]	@ (80070f8 <HAL_RCC_OscConfig+0x618>)
 8006ff6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006ffa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006ffc:	4b3e      	ldr	r3, [pc, #248]	@ (80070f8 <HAL_RCC_OscConfig+0x618>)
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	4a3d      	ldr	r2, [pc, #244]	@ (80070f8 <HAL_RCC_OscConfig+0x618>)
 8007002:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007006:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007008:	f7fd fd92 	bl	8004b30 <HAL_GetTick>
 800700c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800700e:	e008      	b.n	8007022 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007010:	f7fd fd8e 	bl	8004b30 <HAL_GetTick>
 8007014:	4602      	mov	r2, r0
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	2b02      	cmp	r3, #2
 800701c:	d901      	bls.n	8007022 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	e066      	b.n	80070f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007022:	4b35      	ldr	r3, [pc, #212]	@ (80070f8 <HAL_RCC_OscConfig+0x618>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800702a:	2b00      	cmp	r3, #0
 800702c:	d0f0      	beq.n	8007010 <HAL_RCC_OscConfig+0x530>
 800702e:	e05e      	b.n	80070ee <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007030:	4b31      	ldr	r3, [pc, #196]	@ (80070f8 <HAL_RCC_OscConfig+0x618>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a30      	ldr	r2, [pc, #192]	@ (80070f8 <HAL_RCC_OscConfig+0x618>)
 8007036:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800703a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800703c:	f7fd fd78 	bl	8004b30 <HAL_GetTick>
 8007040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007042:	e008      	b.n	8007056 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007044:	f7fd fd74 	bl	8004b30 <HAL_GetTick>
 8007048:	4602      	mov	r2, r0
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	2b02      	cmp	r3, #2
 8007050:	d901      	bls.n	8007056 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	e04c      	b.n	80070f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007056:	4b28      	ldr	r3, [pc, #160]	@ (80070f8 <HAL_RCC_OscConfig+0x618>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1f0      	bne.n	8007044 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007062:	4b25      	ldr	r3, [pc, #148]	@ (80070f8 <HAL_RCC_OscConfig+0x618>)
 8007064:	68da      	ldr	r2, [r3, #12]
 8007066:	4924      	ldr	r1, [pc, #144]	@ (80070f8 <HAL_RCC_OscConfig+0x618>)
 8007068:	4b25      	ldr	r3, [pc, #148]	@ (8007100 <HAL_RCC_OscConfig+0x620>)
 800706a:	4013      	ands	r3, r2
 800706c:	60cb      	str	r3, [r1, #12]
 800706e:	e03e      	b.n	80070ee <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	69db      	ldr	r3, [r3, #28]
 8007074:	2b01      	cmp	r3, #1
 8007076:	d101      	bne.n	800707c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	e039      	b.n	80070f0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800707c:	4b1e      	ldr	r3, [pc, #120]	@ (80070f8 <HAL_RCC_OscConfig+0x618>)
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	f003 0203 	and.w	r2, r3, #3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a1b      	ldr	r3, [r3, #32]
 800708c:	429a      	cmp	r2, r3
 800708e:	d12c      	bne.n	80070ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709a:	3b01      	subs	r3, #1
 800709c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800709e:	429a      	cmp	r2, r3
 80070a0:	d123      	bne.n	80070ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d11b      	bne.n	80070ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070bc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80070be:	429a      	cmp	r2, r3
 80070c0:	d113      	bne.n	80070ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070cc:	085b      	lsrs	r3, r3, #1
 80070ce:	3b01      	subs	r3, #1
 80070d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d109      	bne.n	80070ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070e0:	085b      	lsrs	r3, r3, #1
 80070e2:	3b01      	subs	r3, #1
 80070e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d001      	beq.n	80070ee <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e000      	b.n	80070f0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3720      	adds	r7, #32
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	40021000 	.word	0x40021000
 80070fc:	019f800c 	.word	0x019f800c
 8007100:	feeefffc 	.word	0xfeeefffc

08007104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b086      	sub	sp, #24
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800710e:	2300      	movs	r3, #0
 8007110:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d101      	bne.n	800711c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e11e      	b.n	800735a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800711c:	4b91      	ldr	r3, [pc, #580]	@ (8007364 <HAL_RCC_ClockConfig+0x260>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 030f 	and.w	r3, r3, #15
 8007124:	683a      	ldr	r2, [r7, #0]
 8007126:	429a      	cmp	r2, r3
 8007128:	d910      	bls.n	800714c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800712a:	4b8e      	ldr	r3, [pc, #568]	@ (8007364 <HAL_RCC_ClockConfig+0x260>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f023 020f 	bic.w	r2, r3, #15
 8007132:	498c      	ldr	r1, [pc, #560]	@ (8007364 <HAL_RCC_ClockConfig+0x260>)
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	4313      	orrs	r3, r2
 8007138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800713a:	4b8a      	ldr	r3, [pc, #552]	@ (8007364 <HAL_RCC_ClockConfig+0x260>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 030f 	and.w	r3, r3, #15
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	429a      	cmp	r2, r3
 8007146:	d001      	beq.n	800714c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e106      	b.n	800735a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0301 	and.w	r3, r3, #1
 8007154:	2b00      	cmp	r3, #0
 8007156:	d073      	beq.n	8007240 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	2b03      	cmp	r3, #3
 800715e:	d129      	bne.n	80071b4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007160:	4b81      	ldr	r3, [pc, #516]	@ (8007368 <HAL_RCC_ClockConfig+0x264>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d101      	bne.n	8007170 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e0f4      	b.n	800735a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007170:	f000 f99e 	bl	80074b0 <RCC_GetSysClockFreqFromPLLSource>
 8007174:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	4a7c      	ldr	r2, [pc, #496]	@ (800736c <HAL_RCC_ClockConfig+0x268>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d93f      	bls.n	80071fe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800717e:	4b7a      	ldr	r3, [pc, #488]	@ (8007368 <HAL_RCC_ClockConfig+0x264>)
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d009      	beq.n	800719e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007192:	2b00      	cmp	r3, #0
 8007194:	d033      	beq.n	80071fe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800719a:	2b00      	cmp	r3, #0
 800719c:	d12f      	bne.n	80071fe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800719e:	4b72      	ldr	r3, [pc, #456]	@ (8007368 <HAL_RCC_ClockConfig+0x264>)
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80071a6:	4a70      	ldr	r2, [pc, #448]	@ (8007368 <HAL_RCC_ClockConfig+0x264>)
 80071a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80071ae:	2380      	movs	r3, #128	@ 0x80
 80071b0:	617b      	str	r3, [r7, #20]
 80071b2:	e024      	b.n	80071fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d107      	bne.n	80071cc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80071bc:	4b6a      	ldr	r3, [pc, #424]	@ (8007368 <HAL_RCC_ClockConfig+0x264>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d109      	bne.n	80071dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e0c6      	b.n	800735a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071cc:	4b66      	ldr	r3, [pc, #408]	@ (8007368 <HAL_RCC_ClockConfig+0x264>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d101      	bne.n	80071dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e0be      	b.n	800735a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80071dc:	f000 f8ce 	bl	800737c <HAL_RCC_GetSysClockFreq>
 80071e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	4a61      	ldr	r2, [pc, #388]	@ (800736c <HAL_RCC_ClockConfig+0x268>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d909      	bls.n	80071fe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80071ea:	4b5f      	ldr	r3, [pc, #380]	@ (8007368 <HAL_RCC_ClockConfig+0x264>)
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80071f2:	4a5d      	ldr	r2, [pc, #372]	@ (8007368 <HAL_RCC_ClockConfig+0x264>)
 80071f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80071fa:	2380      	movs	r3, #128	@ 0x80
 80071fc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80071fe:	4b5a      	ldr	r3, [pc, #360]	@ (8007368 <HAL_RCC_ClockConfig+0x264>)
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	f023 0203 	bic.w	r2, r3, #3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	4957      	ldr	r1, [pc, #348]	@ (8007368 <HAL_RCC_ClockConfig+0x264>)
 800720c:	4313      	orrs	r3, r2
 800720e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007210:	f7fd fc8e 	bl	8004b30 <HAL_GetTick>
 8007214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007216:	e00a      	b.n	800722e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007218:	f7fd fc8a 	bl	8004b30 <HAL_GetTick>
 800721c:	4602      	mov	r2, r0
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	1ad3      	subs	r3, r2, r3
 8007222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007226:	4293      	cmp	r3, r2
 8007228:	d901      	bls.n	800722e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e095      	b.n	800735a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800722e:	4b4e      	ldr	r3, [pc, #312]	@ (8007368 <HAL_RCC_ClockConfig+0x264>)
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	f003 020c 	and.w	r2, r3, #12
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	429a      	cmp	r2, r3
 800723e:	d1eb      	bne.n	8007218 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0302 	and.w	r3, r3, #2
 8007248:	2b00      	cmp	r3, #0
 800724a:	d023      	beq.n	8007294 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0304 	and.w	r3, r3, #4
 8007254:	2b00      	cmp	r3, #0
 8007256:	d005      	beq.n	8007264 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007258:	4b43      	ldr	r3, [pc, #268]	@ (8007368 <HAL_RCC_ClockConfig+0x264>)
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	4a42      	ldr	r2, [pc, #264]	@ (8007368 <HAL_RCC_ClockConfig+0x264>)
 800725e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007262:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 0308 	and.w	r3, r3, #8
 800726c:	2b00      	cmp	r3, #0
 800726e:	d007      	beq.n	8007280 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007270:	4b3d      	ldr	r3, [pc, #244]	@ (8007368 <HAL_RCC_ClockConfig+0x264>)
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007278:	4a3b      	ldr	r2, [pc, #236]	@ (8007368 <HAL_RCC_ClockConfig+0x264>)
 800727a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800727e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007280:	4b39      	ldr	r3, [pc, #228]	@ (8007368 <HAL_RCC_ClockConfig+0x264>)
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	4936      	ldr	r1, [pc, #216]	@ (8007368 <HAL_RCC_ClockConfig+0x264>)
 800728e:	4313      	orrs	r3, r2
 8007290:	608b      	str	r3, [r1, #8]
 8007292:	e008      	b.n	80072a6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	2b80      	cmp	r3, #128	@ 0x80
 8007298:	d105      	bne.n	80072a6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800729a:	4b33      	ldr	r3, [pc, #204]	@ (8007368 <HAL_RCC_ClockConfig+0x264>)
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	4a32      	ldr	r2, [pc, #200]	@ (8007368 <HAL_RCC_ClockConfig+0x264>)
 80072a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80072a4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80072a6:	4b2f      	ldr	r3, [pc, #188]	@ (8007364 <HAL_RCC_ClockConfig+0x260>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 030f 	and.w	r3, r3, #15
 80072ae:	683a      	ldr	r2, [r7, #0]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d21d      	bcs.n	80072f0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072b4:	4b2b      	ldr	r3, [pc, #172]	@ (8007364 <HAL_RCC_ClockConfig+0x260>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f023 020f 	bic.w	r2, r3, #15
 80072bc:	4929      	ldr	r1, [pc, #164]	@ (8007364 <HAL_RCC_ClockConfig+0x260>)
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80072c4:	f7fd fc34 	bl	8004b30 <HAL_GetTick>
 80072c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072ca:	e00a      	b.n	80072e2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072cc:	f7fd fc30 	bl	8004b30 <HAL_GetTick>
 80072d0:	4602      	mov	r2, r0
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072da:	4293      	cmp	r3, r2
 80072dc:	d901      	bls.n	80072e2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80072de:	2303      	movs	r3, #3
 80072e0:	e03b      	b.n	800735a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072e2:	4b20      	ldr	r3, [pc, #128]	@ (8007364 <HAL_RCC_ClockConfig+0x260>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 030f 	and.w	r3, r3, #15
 80072ea:	683a      	ldr	r2, [r7, #0]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d1ed      	bne.n	80072cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0304 	and.w	r3, r3, #4
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d008      	beq.n	800730e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072fc:	4b1a      	ldr	r3, [pc, #104]	@ (8007368 <HAL_RCC_ClockConfig+0x264>)
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	4917      	ldr	r1, [pc, #92]	@ (8007368 <HAL_RCC_ClockConfig+0x264>)
 800730a:	4313      	orrs	r3, r2
 800730c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f003 0308 	and.w	r3, r3, #8
 8007316:	2b00      	cmp	r3, #0
 8007318:	d009      	beq.n	800732e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800731a:	4b13      	ldr	r3, [pc, #76]	@ (8007368 <HAL_RCC_ClockConfig+0x264>)
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	00db      	lsls	r3, r3, #3
 8007328:	490f      	ldr	r1, [pc, #60]	@ (8007368 <HAL_RCC_ClockConfig+0x264>)
 800732a:	4313      	orrs	r3, r2
 800732c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800732e:	f000 f825 	bl	800737c <HAL_RCC_GetSysClockFreq>
 8007332:	4602      	mov	r2, r0
 8007334:	4b0c      	ldr	r3, [pc, #48]	@ (8007368 <HAL_RCC_ClockConfig+0x264>)
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	091b      	lsrs	r3, r3, #4
 800733a:	f003 030f 	and.w	r3, r3, #15
 800733e:	490c      	ldr	r1, [pc, #48]	@ (8007370 <HAL_RCC_ClockConfig+0x26c>)
 8007340:	5ccb      	ldrb	r3, [r1, r3]
 8007342:	f003 031f 	and.w	r3, r3, #31
 8007346:	fa22 f303 	lsr.w	r3, r2, r3
 800734a:	4a0a      	ldr	r2, [pc, #40]	@ (8007374 <HAL_RCC_ClockConfig+0x270>)
 800734c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800734e:	4b0a      	ldr	r3, [pc, #40]	@ (8007378 <HAL_RCC_ClockConfig+0x274>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4618      	mov	r0, r3
 8007354:	f7fd fba0 	bl	8004a98 <HAL_InitTick>
 8007358:	4603      	mov	r3, r0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3718      	adds	r7, #24
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	40022000 	.word	0x40022000
 8007368:	40021000 	.word	0x40021000
 800736c:	04c4b400 	.word	0x04c4b400
 8007370:	0800bd64 	.word	0x0800bd64
 8007374:	20000208 	.word	0x20000208
 8007378:	2000020c 	.word	0x2000020c

0800737c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800737c:	b480      	push	{r7}
 800737e:	b087      	sub	sp, #28
 8007380:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007382:	4b2c      	ldr	r3, [pc, #176]	@ (8007434 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	f003 030c 	and.w	r3, r3, #12
 800738a:	2b04      	cmp	r3, #4
 800738c:	d102      	bne.n	8007394 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800738e:	4b2a      	ldr	r3, [pc, #168]	@ (8007438 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007390:	613b      	str	r3, [r7, #16]
 8007392:	e047      	b.n	8007424 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007394:	4b27      	ldr	r3, [pc, #156]	@ (8007434 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	f003 030c 	and.w	r3, r3, #12
 800739c:	2b08      	cmp	r3, #8
 800739e:	d102      	bne.n	80073a6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80073a0:	4b26      	ldr	r3, [pc, #152]	@ (800743c <HAL_RCC_GetSysClockFreq+0xc0>)
 80073a2:	613b      	str	r3, [r7, #16]
 80073a4:	e03e      	b.n	8007424 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80073a6:	4b23      	ldr	r3, [pc, #140]	@ (8007434 <HAL_RCC_GetSysClockFreq+0xb8>)
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f003 030c 	and.w	r3, r3, #12
 80073ae:	2b0c      	cmp	r3, #12
 80073b0:	d136      	bne.n	8007420 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80073b2:	4b20      	ldr	r3, [pc, #128]	@ (8007434 <HAL_RCC_GetSysClockFreq+0xb8>)
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	f003 0303 	and.w	r3, r3, #3
 80073ba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80073bc:	4b1d      	ldr	r3, [pc, #116]	@ (8007434 <HAL_RCC_GetSysClockFreq+0xb8>)
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	091b      	lsrs	r3, r3, #4
 80073c2:	f003 030f 	and.w	r3, r3, #15
 80073c6:	3301      	adds	r3, #1
 80073c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2b03      	cmp	r3, #3
 80073ce:	d10c      	bne.n	80073ea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80073d0:	4a1a      	ldr	r2, [pc, #104]	@ (800743c <HAL_RCC_GetSysClockFreq+0xc0>)
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d8:	4a16      	ldr	r2, [pc, #88]	@ (8007434 <HAL_RCC_GetSysClockFreq+0xb8>)
 80073da:	68d2      	ldr	r2, [r2, #12]
 80073dc:	0a12      	lsrs	r2, r2, #8
 80073de:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80073e2:	fb02 f303 	mul.w	r3, r2, r3
 80073e6:	617b      	str	r3, [r7, #20]
      break;
 80073e8:	e00c      	b.n	8007404 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80073ea:	4a13      	ldr	r2, [pc, #76]	@ (8007438 <HAL_RCC_GetSysClockFreq+0xbc>)
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f2:	4a10      	ldr	r2, [pc, #64]	@ (8007434 <HAL_RCC_GetSysClockFreq+0xb8>)
 80073f4:	68d2      	ldr	r2, [r2, #12]
 80073f6:	0a12      	lsrs	r2, r2, #8
 80073f8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80073fc:	fb02 f303 	mul.w	r3, r2, r3
 8007400:	617b      	str	r3, [r7, #20]
      break;
 8007402:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007404:	4b0b      	ldr	r3, [pc, #44]	@ (8007434 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	0e5b      	lsrs	r3, r3, #25
 800740a:	f003 0303 	and.w	r3, r3, #3
 800740e:	3301      	adds	r3, #1
 8007410:	005b      	lsls	r3, r3, #1
 8007412:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007414:	697a      	ldr	r2, [r7, #20]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	fbb2 f3f3 	udiv	r3, r2, r3
 800741c:	613b      	str	r3, [r7, #16]
 800741e:	e001      	b.n	8007424 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007420:	2300      	movs	r3, #0
 8007422:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007424:	693b      	ldr	r3, [r7, #16]
}
 8007426:	4618      	mov	r0, r3
 8007428:	371c      	adds	r7, #28
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	40021000 	.word	0x40021000
 8007438:	00f42400 	.word	0x00f42400
 800743c:	016e3600 	.word	0x016e3600

08007440 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007440:	b480      	push	{r7}
 8007442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007444:	4b03      	ldr	r3, [pc, #12]	@ (8007454 <HAL_RCC_GetHCLKFreq+0x14>)
 8007446:	681b      	ldr	r3, [r3, #0]
}
 8007448:	4618      	mov	r0, r3
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	20000208 	.word	0x20000208

08007458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800745c:	f7ff fff0 	bl	8007440 <HAL_RCC_GetHCLKFreq>
 8007460:	4602      	mov	r2, r0
 8007462:	4b06      	ldr	r3, [pc, #24]	@ (800747c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	0a1b      	lsrs	r3, r3, #8
 8007468:	f003 0307 	and.w	r3, r3, #7
 800746c:	4904      	ldr	r1, [pc, #16]	@ (8007480 <HAL_RCC_GetPCLK1Freq+0x28>)
 800746e:	5ccb      	ldrb	r3, [r1, r3]
 8007470:	f003 031f 	and.w	r3, r3, #31
 8007474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007478:	4618      	mov	r0, r3
 800747a:	bd80      	pop	{r7, pc}
 800747c:	40021000 	.word	0x40021000
 8007480:	0800bd74 	.word	0x0800bd74

08007484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007488:	f7ff ffda 	bl	8007440 <HAL_RCC_GetHCLKFreq>
 800748c:	4602      	mov	r2, r0
 800748e:	4b06      	ldr	r3, [pc, #24]	@ (80074a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	0adb      	lsrs	r3, r3, #11
 8007494:	f003 0307 	and.w	r3, r3, #7
 8007498:	4904      	ldr	r1, [pc, #16]	@ (80074ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800749a:	5ccb      	ldrb	r3, [r1, r3]
 800749c:	f003 031f 	and.w	r3, r3, #31
 80074a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	40021000 	.word	0x40021000
 80074ac:	0800bd74 	.word	0x0800bd74

080074b0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b087      	sub	sp, #28
 80074b4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80074b6:	4b1e      	ldr	r3, [pc, #120]	@ (8007530 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	f003 0303 	and.w	r3, r3, #3
 80074be:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80074c0:	4b1b      	ldr	r3, [pc, #108]	@ (8007530 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	091b      	lsrs	r3, r3, #4
 80074c6:	f003 030f 	and.w	r3, r3, #15
 80074ca:	3301      	adds	r3, #1
 80074cc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	2b03      	cmp	r3, #3
 80074d2:	d10c      	bne.n	80074ee <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80074d4:	4a17      	ldr	r2, [pc, #92]	@ (8007534 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074dc:	4a14      	ldr	r2, [pc, #80]	@ (8007530 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80074de:	68d2      	ldr	r2, [r2, #12]
 80074e0:	0a12      	lsrs	r2, r2, #8
 80074e2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80074e6:	fb02 f303 	mul.w	r3, r2, r3
 80074ea:	617b      	str	r3, [r7, #20]
    break;
 80074ec:	e00c      	b.n	8007508 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80074ee:	4a12      	ldr	r2, [pc, #72]	@ (8007538 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074f6:	4a0e      	ldr	r2, [pc, #56]	@ (8007530 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80074f8:	68d2      	ldr	r2, [r2, #12]
 80074fa:	0a12      	lsrs	r2, r2, #8
 80074fc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007500:	fb02 f303 	mul.w	r3, r2, r3
 8007504:	617b      	str	r3, [r7, #20]
    break;
 8007506:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007508:	4b09      	ldr	r3, [pc, #36]	@ (8007530 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	0e5b      	lsrs	r3, r3, #25
 800750e:	f003 0303 	and.w	r3, r3, #3
 8007512:	3301      	adds	r3, #1
 8007514:	005b      	lsls	r3, r3, #1
 8007516:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007520:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007522:	687b      	ldr	r3, [r7, #4]
}
 8007524:	4618      	mov	r0, r3
 8007526:	371c      	adds	r7, #28
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr
 8007530:	40021000 	.word	0x40021000
 8007534:	016e3600 	.word	0x016e3600
 8007538:	00f42400 	.word	0x00f42400

0800753c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b086      	sub	sp, #24
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007544:	2300      	movs	r3, #0
 8007546:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007548:	2300      	movs	r3, #0
 800754a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007554:	2b00      	cmp	r3, #0
 8007556:	f000 8098 	beq.w	800768a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800755a:	2300      	movs	r3, #0
 800755c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800755e:	4b43      	ldr	r3, [pc, #268]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d10d      	bne.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800756a:	4b40      	ldr	r3, [pc, #256]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800756c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800756e:	4a3f      	ldr	r2, [pc, #252]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007570:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007574:	6593      	str	r3, [r2, #88]	@ 0x58
 8007576:	4b3d      	ldr	r3, [pc, #244]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800757a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800757e:	60bb      	str	r3, [r7, #8]
 8007580:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007582:	2301      	movs	r3, #1
 8007584:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007586:	4b3a      	ldr	r3, [pc, #232]	@ (8007670 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a39      	ldr	r2, [pc, #228]	@ (8007670 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800758c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007590:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007592:	f7fd facd 	bl	8004b30 <HAL_GetTick>
 8007596:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007598:	e009      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800759a:	f7fd fac9 	bl	8004b30 <HAL_GetTick>
 800759e:	4602      	mov	r2, r0
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d902      	bls.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80075a8:	2303      	movs	r3, #3
 80075aa:	74fb      	strb	r3, [r7, #19]
        break;
 80075ac:	e005      	b.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075ae:	4b30      	ldr	r3, [pc, #192]	@ (8007670 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d0ef      	beq.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80075ba:	7cfb      	ldrb	r3, [r7, #19]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d159      	bne.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80075c0:	4b2a      	ldr	r3, [pc, #168]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075ca:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d01e      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075d6:	697a      	ldr	r2, [r7, #20]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d019      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80075dc:	4b23      	ldr	r3, [pc, #140]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80075e8:	4b20      	ldr	r3, [pc, #128]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075ee:	4a1f      	ldr	r2, [pc, #124]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80075f8:	4b1c      	ldr	r3, [pc, #112]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075fe:	4a1b      	ldr	r2, [pc, #108]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007600:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007604:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007608:	4a18      	ldr	r2, [pc, #96]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	2b00      	cmp	r3, #0
 8007618:	d016      	beq.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800761a:	f7fd fa89 	bl	8004b30 <HAL_GetTick>
 800761e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007620:	e00b      	b.n	800763a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007622:	f7fd fa85 	bl	8004b30 <HAL_GetTick>
 8007626:	4602      	mov	r2, r0
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	1ad3      	subs	r3, r2, r3
 800762c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007630:	4293      	cmp	r3, r2
 8007632:	d902      	bls.n	800763a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	74fb      	strb	r3, [r7, #19]
            break;
 8007638:	e006      	b.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800763a:	4b0c      	ldr	r3, [pc, #48]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800763c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007640:	f003 0302 	and.w	r3, r3, #2
 8007644:	2b00      	cmp	r3, #0
 8007646:	d0ec      	beq.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007648:	7cfb      	ldrb	r3, [r7, #19]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d10b      	bne.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800764e:	4b07      	ldr	r3, [pc, #28]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007650:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007654:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800765c:	4903      	ldr	r1, [pc, #12]	@ (800766c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800765e:	4313      	orrs	r3, r2
 8007660:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007664:	e008      	b.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007666:	7cfb      	ldrb	r3, [r7, #19]
 8007668:	74bb      	strb	r3, [r7, #18]
 800766a:	e005      	b.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800766c:	40021000 	.word	0x40021000
 8007670:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007674:	7cfb      	ldrb	r3, [r7, #19]
 8007676:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007678:	7c7b      	ldrb	r3, [r7, #17]
 800767a:	2b01      	cmp	r3, #1
 800767c:	d105      	bne.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800767e:	4ba7      	ldr	r3, [pc, #668]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007682:	4aa6      	ldr	r2, [pc, #664]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007684:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007688:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0301 	and.w	r3, r3, #1
 8007692:	2b00      	cmp	r3, #0
 8007694:	d00a      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007696:	4ba1      	ldr	r3, [pc, #644]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800769c:	f023 0203 	bic.w	r2, r3, #3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	499d      	ldr	r1, [pc, #628]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076a6:	4313      	orrs	r3, r2
 80076a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0302 	and.w	r3, r3, #2
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d00a      	beq.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80076b8:	4b98      	ldr	r3, [pc, #608]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076be:	f023 020c 	bic.w	r2, r3, #12
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	4995      	ldr	r1, [pc, #596]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076c8:	4313      	orrs	r3, r2
 80076ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 0304 	and.w	r3, r3, #4
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00a      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80076da:	4b90      	ldr	r3, [pc, #576]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076e0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	498c      	ldr	r1, [pc, #560]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076ea:	4313      	orrs	r3, r2
 80076ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 0308 	and.w	r3, r3, #8
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00a      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80076fc:	4b87      	ldr	r3, [pc, #540]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007702:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	4984      	ldr	r1, [pc, #528]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800770c:	4313      	orrs	r3, r2
 800770e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 0310 	and.w	r3, r3, #16
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00a      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800771e:	4b7f      	ldr	r3, [pc, #508]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007720:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007724:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	695b      	ldr	r3, [r3, #20]
 800772c:	497b      	ldr	r1, [pc, #492]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800772e:	4313      	orrs	r3, r2
 8007730:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0320 	and.w	r3, r3, #32
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00a      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007740:	4b76      	ldr	r3, [pc, #472]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007746:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	4973      	ldr	r1, [pc, #460]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007750:	4313      	orrs	r3, r2
 8007752:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00a      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007762:	4b6e      	ldr	r3, [pc, #440]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007764:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007768:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	69db      	ldr	r3, [r3, #28]
 8007770:	496a      	ldr	r1, [pc, #424]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007772:	4313      	orrs	r3, r2
 8007774:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00a      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007784:	4b65      	ldr	r3, [pc, #404]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800778a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a1b      	ldr	r3, [r3, #32]
 8007792:	4962      	ldr	r1, [pc, #392]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007794:	4313      	orrs	r3, r2
 8007796:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00a      	beq.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80077a6:	4b5d      	ldr	r3, [pc, #372]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b4:	4959      	ldr	r1, [pc, #356]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00a      	beq.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80077c8:	4b54      	ldr	r3, [pc, #336]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80077ce:	f023 0203 	bic.w	r2, r3, #3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d6:	4951      	ldr	r1, [pc, #324]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077d8:	4313      	orrs	r3, r2
 80077da:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00a      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80077ea:	4b4c      	ldr	r3, [pc, #304]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077f0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f8:	4948      	ldr	r1, [pc, #288]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077fa:	4313      	orrs	r3, r2
 80077fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007808:	2b00      	cmp	r3, #0
 800780a:	d015      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800780c:	4b43      	ldr	r3, [pc, #268]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800780e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007812:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800781a:	4940      	ldr	r1, [pc, #256]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800781c:	4313      	orrs	r3, r2
 800781e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007826:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800782a:	d105      	bne.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800782c:	4b3b      	ldr	r3, [pc, #236]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	4a3a      	ldr	r2, [pc, #232]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007832:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007836:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007840:	2b00      	cmp	r3, #0
 8007842:	d015      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007844:	4b35      	ldr	r3, [pc, #212]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800784a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007852:	4932      	ldr	r1, [pc, #200]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007854:	4313      	orrs	r3, r2
 8007856:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800785e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007862:	d105      	bne.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007864:	4b2d      	ldr	r3, [pc, #180]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	4a2c      	ldr	r2, [pc, #176]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800786a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800786e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007878:	2b00      	cmp	r3, #0
 800787a:	d015      	beq.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800787c:	4b27      	ldr	r3, [pc, #156]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800787e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007882:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800788a:	4924      	ldr	r1, [pc, #144]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800788c:	4313      	orrs	r3, r2
 800788e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007896:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800789a:	d105      	bne.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800789c:	4b1f      	ldr	r3, [pc, #124]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	4a1e      	ldr	r2, [pc, #120]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078a6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d015      	beq.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80078b4:	4b19      	ldr	r3, [pc, #100]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078c2:	4916      	ldr	r1, [pc, #88]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078c4:	4313      	orrs	r3, r2
 80078c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078d2:	d105      	bne.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80078d4:	4b11      	ldr	r3, [pc, #68]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	4a10      	ldr	r2, [pc, #64]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078de:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d019      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80078ec:	4b0b      	ldr	r3, [pc, #44]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078fa:	4908      	ldr	r1, [pc, #32]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078fc:	4313      	orrs	r3, r2
 80078fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007906:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800790a:	d109      	bne.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800790c:	4b03      	ldr	r3, [pc, #12]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	4a02      	ldr	r2, [pc, #8]	@ (800791c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007912:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007916:	60d3      	str	r3, [r2, #12]
 8007918:	e002      	b.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800791a:	bf00      	nop
 800791c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007928:	2b00      	cmp	r3, #0
 800792a:	d015      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800792c:	4b29      	ldr	r3, [pc, #164]	@ (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800792e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007932:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800793a:	4926      	ldr	r1, [pc, #152]	@ (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800793c:	4313      	orrs	r3, r2
 800793e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007946:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800794a:	d105      	bne.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800794c:	4b21      	ldr	r3, [pc, #132]	@ (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	4a20      	ldr	r2, [pc, #128]	@ (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007952:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007956:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007960:	2b00      	cmp	r3, #0
 8007962:	d015      	beq.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007964:	4b1b      	ldr	r3, [pc, #108]	@ (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800796a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007972:	4918      	ldr	r1, [pc, #96]	@ (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007974:	4313      	orrs	r3, r2
 8007976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800797e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007982:	d105      	bne.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007984:	4b13      	ldr	r3, [pc, #76]	@ (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	4a12      	ldr	r2, [pc, #72]	@ (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800798a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800798e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007998:	2b00      	cmp	r3, #0
 800799a:	d015      	beq.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800799c:	4b0d      	ldr	r3, [pc, #52]	@ (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800799e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80079a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079aa:	490a      	ldr	r1, [pc, #40]	@ (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80079ac:	4313      	orrs	r3, r2
 80079ae:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80079ba:	d105      	bne.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80079bc:	4b05      	ldr	r3, [pc, #20]	@ (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	4a04      	ldr	r2, [pc, #16]	@ (80079d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80079c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80079c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80079c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3718      	adds	r7, #24
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	40021000 	.word	0x40021000

080079d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d101      	bne.n	80079ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e054      	b.n	8007a94 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d111      	bne.n	8007a1a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f001 ff3a 	bl	8009878 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d102      	bne.n	8007a12 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a23      	ldr	r2, [pc, #140]	@ (8007a9c <HAL_TIM_Base_Init+0xc4>)
 8007a10:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2202      	movs	r2, #2
 8007a1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	3304      	adds	r3, #4
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	f001 fa83 	bl	8008f38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2201      	movs	r2, #1
 8007a36:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2201      	movs	r2, #1
 8007a46:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2201      	movs	r2, #1
 8007a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2201      	movs	r2, #1
 8007a66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2201      	movs	r2, #1
 8007a76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2201      	movs	r2, #1
 8007a86:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3708      	adds	r7, #8
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}
 8007a9c:	080045bd 	.word	0x080045bd

08007aa0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b085      	sub	sp, #20
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d001      	beq.n	8007ab8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e04c      	b.n	8007b52 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2202      	movs	r2, #2
 8007abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a26      	ldr	r2, [pc, #152]	@ (8007b60 <HAL_TIM_Base_Start+0xc0>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d022      	beq.n	8007b10 <HAL_TIM_Base_Start+0x70>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ad2:	d01d      	beq.n	8007b10 <HAL_TIM_Base_Start+0x70>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a22      	ldr	r2, [pc, #136]	@ (8007b64 <HAL_TIM_Base_Start+0xc4>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d018      	beq.n	8007b10 <HAL_TIM_Base_Start+0x70>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a21      	ldr	r2, [pc, #132]	@ (8007b68 <HAL_TIM_Base_Start+0xc8>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d013      	beq.n	8007b10 <HAL_TIM_Base_Start+0x70>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a1f      	ldr	r2, [pc, #124]	@ (8007b6c <HAL_TIM_Base_Start+0xcc>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d00e      	beq.n	8007b10 <HAL_TIM_Base_Start+0x70>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a1e      	ldr	r2, [pc, #120]	@ (8007b70 <HAL_TIM_Base_Start+0xd0>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d009      	beq.n	8007b10 <HAL_TIM_Base_Start+0x70>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a1c      	ldr	r2, [pc, #112]	@ (8007b74 <HAL_TIM_Base_Start+0xd4>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d004      	beq.n	8007b10 <HAL_TIM_Base_Start+0x70>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a1b      	ldr	r2, [pc, #108]	@ (8007b78 <HAL_TIM_Base_Start+0xd8>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d115      	bne.n	8007b3c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	689a      	ldr	r2, [r3, #8]
 8007b16:	4b19      	ldr	r3, [pc, #100]	@ (8007b7c <HAL_TIM_Base_Start+0xdc>)
 8007b18:	4013      	ands	r3, r2
 8007b1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2b06      	cmp	r3, #6
 8007b20:	d015      	beq.n	8007b4e <HAL_TIM_Base_Start+0xae>
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b28:	d011      	beq.n	8007b4e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f042 0201 	orr.w	r2, r2, #1
 8007b38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b3a:	e008      	b.n	8007b4e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f042 0201 	orr.w	r2, r2, #1
 8007b4a:	601a      	str	r2, [r3, #0]
 8007b4c:	e000      	b.n	8007b50 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3714      	adds	r7, #20
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	40012c00 	.word	0x40012c00
 8007b64:	40000400 	.word	0x40000400
 8007b68:	40000800 	.word	0x40000800
 8007b6c:	40000c00 	.word	0x40000c00
 8007b70:	40013400 	.word	0x40013400
 8007b74:	40014000 	.word	0x40014000
 8007b78:	40015000 	.word	0x40015000
 8007b7c:	00010007 	.word	0x00010007

08007b80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d001      	beq.n	8007b98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b94:	2301      	movs	r3, #1
 8007b96:	e054      	b.n	8007c42 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2202      	movs	r2, #2
 8007b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	68da      	ldr	r2, [r3, #12]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f042 0201 	orr.w	r2, r2, #1
 8007bae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a26      	ldr	r2, [pc, #152]	@ (8007c50 <HAL_TIM_Base_Start_IT+0xd0>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d022      	beq.n	8007c00 <HAL_TIM_Base_Start_IT+0x80>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bc2:	d01d      	beq.n	8007c00 <HAL_TIM_Base_Start_IT+0x80>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a22      	ldr	r2, [pc, #136]	@ (8007c54 <HAL_TIM_Base_Start_IT+0xd4>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d018      	beq.n	8007c00 <HAL_TIM_Base_Start_IT+0x80>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a21      	ldr	r2, [pc, #132]	@ (8007c58 <HAL_TIM_Base_Start_IT+0xd8>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d013      	beq.n	8007c00 <HAL_TIM_Base_Start_IT+0x80>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a1f      	ldr	r2, [pc, #124]	@ (8007c5c <HAL_TIM_Base_Start_IT+0xdc>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d00e      	beq.n	8007c00 <HAL_TIM_Base_Start_IT+0x80>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a1e      	ldr	r2, [pc, #120]	@ (8007c60 <HAL_TIM_Base_Start_IT+0xe0>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d009      	beq.n	8007c00 <HAL_TIM_Base_Start_IT+0x80>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a1c      	ldr	r2, [pc, #112]	@ (8007c64 <HAL_TIM_Base_Start_IT+0xe4>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d004      	beq.n	8007c00 <HAL_TIM_Base_Start_IT+0x80>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a1b      	ldr	r2, [pc, #108]	@ (8007c68 <HAL_TIM_Base_Start_IT+0xe8>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d115      	bne.n	8007c2c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	689a      	ldr	r2, [r3, #8]
 8007c06:	4b19      	ldr	r3, [pc, #100]	@ (8007c6c <HAL_TIM_Base_Start_IT+0xec>)
 8007c08:	4013      	ands	r3, r2
 8007c0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2b06      	cmp	r3, #6
 8007c10:	d015      	beq.n	8007c3e <HAL_TIM_Base_Start_IT+0xbe>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c18:	d011      	beq.n	8007c3e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f042 0201 	orr.w	r2, r2, #1
 8007c28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c2a:	e008      	b.n	8007c3e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f042 0201 	orr.w	r2, r2, #1
 8007c3a:	601a      	str	r2, [r3, #0]
 8007c3c:	e000      	b.n	8007c40 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3714      	adds	r7, #20
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr
 8007c4e:	bf00      	nop
 8007c50:	40012c00 	.word	0x40012c00
 8007c54:	40000400 	.word	0x40000400
 8007c58:	40000800 	.word	0x40000800
 8007c5c:	40000c00 	.word	0x40000c00
 8007c60:	40013400 	.word	0x40013400
 8007c64:	40014000 	.word	0x40014000
 8007c68:	40015000 	.word	0x40015000
 8007c6c:	00010007 	.word	0x00010007

08007c70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e054      	b.n	8007d2c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d111      	bne.n	8007cb2 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f001 fdee 	bl	8009878 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d102      	bne.n	8007caa <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a23      	ldr	r2, [pc, #140]	@ (8007d34 <HAL_TIM_PWM_Init+0xc4>)
 8007ca8:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2202      	movs	r2, #2
 8007cb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	3304      	adds	r3, #4
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	4610      	mov	r0, r2
 8007cc6:	f001 f937 	bl	8008f38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2201      	movs	r2, #1
 8007cee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2201      	movs	r2, #1
 8007d06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3708      	adds	r7, #8
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	08007d39 	.word	0x08007d39

08007d38 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007d40:	bf00      	nop
 8007d42:	370c      	adds	r7, #12
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d56:	2300      	movs	r3, #0
 8007d58:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d109      	bne.n	8007d74 <HAL_TIM_PWM_Start_IT+0x28>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	bf14      	ite	ne
 8007d6c:	2301      	movne	r3, #1
 8007d6e:	2300      	moveq	r3, #0
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	e03c      	b.n	8007dee <HAL_TIM_PWM_Start_IT+0xa2>
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	2b04      	cmp	r3, #4
 8007d78:	d109      	bne.n	8007d8e <HAL_TIM_PWM_Start_IT+0x42>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	bf14      	ite	ne
 8007d86:	2301      	movne	r3, #1
 8007d88:	2300      	moveq	r3, #0
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	e02f      	b.n	8007dee <HAL_TIM_PWM_Start_IT+0xa2>
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	2b08      	cmp	r3, #8
 8007d92:	d109      	bne.n	8007da8 <HAL_TIM_PWM_Start_IT+0x5c>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	bf14      	ite	ne
 8007da0:	2301      	movne	r3, #1
 8007da2:	2300      	moveq	r3, #0
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	e022      	b.n	8007dee <HAL_TIM_PWM_Start_IT+0xa2>
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	2b0c      	cmp	r3, #12
 8007dac:	d109      	bne.n	8007dc2 <HAL_TIM_PWM_Start_IT+0x76>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	bf14      	ite	ne
 8007dba:	2301      	movne	r3, #1
 8007dbc:	2300      	moveq	r3, #0
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	e015      	b.n	8007dee <HAL_TIM_PWM_Start_IT+0xa2>
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	2b10      	cmp	r3, #16
 8007dc6:	d109      	bne.n	8007ddc <HAL_TIM_PWM_Start_IT+0x90>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	bf14      	ite	ne
 8007dd4:	2301      	movne	r3, #1
 8007dd6:	2300      	moveq	r3, #0
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	e008      	b.n	8007dee <HAL_TIM_PWM_Start_IT+0xa2>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	bf14      	ite	ne
 8007de8:	2301      	movne	r3, #1
 8007dea:	2300      	moveq	r3, #0
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d001      	beq.n	8007df6 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	e0f1      	b.n	8007fda <HAL_TIM_PWM_Start_IT+0x28e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d104      	bne.n	8007e06 <HAL_TIM_PWM_Start_IT+0xba>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2202      	movs	r2, #2
 8007e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e04:	e023      	b.n	8007e4e <HAL_TIM_PWM_Start_IT+0x102>
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	2b04      	cmp	r3, #4
 8007e0a:	d104      	bne.n	8007e16 <HAL_TIM_PWM_Start_IT+0xca>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2202      	movs	r2, #2
 8007e10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e14:	e01b      	b.n	8007e4e <HAL_TIM_PWM_Start_IT+0x102>
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	2b08      	cmp	r3, #8
 8007e1a:	d104      	bne.n	8007e26 <HAL_TIM_PWM_Start_IT+0xda>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2202      	movs	r2, #2
 8007e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e24:	e013      	b.n	8007e4e <HAL_TIM_PWM_Start_IT+0x102>
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	2b0c      	cmp	r3, #12
 8007e2a:	d104      	bne.n	8007e36 <HAL_TIM_PWM_Start_IT+0xea>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2202      	movs	r2, #2
 8007e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e34:	e00b      	b.n	8007e4e <HAL_TIM_PWM_Start_IT+0x102>
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	2b10      	cmp	r3, #16
 8007e3a:	d104      	bne.n	8007e46 <HAL_TIM_PWM_Start_IT+0xfa>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2202      	movs	r2, #2
 8007e40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e44:	e003      	b.n	8007e4e <HAL_TIM_PWM_Start_IT+0x102>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2202      	movs	r2, #2
 8007e4a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	2b0c      	cmp	r3, #12
 8007e52:	d841      	bhi.n	8007ed8 <HAL_TIM_PWM_Start_IT+0x18c>
 8007e54:	a201      	add	r2, pc, #4	@ (adr r2, 8007e5c <HAL_TIM_PWM_Start_IT+0x110>)
 8007e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e5a:	bf00      	nop
 8007e5c:	08007e91 	.word	0x08007e91
 8007e60:	08007ed9 	.word	0x08007ed9
 8007e64:	08007ed9 	.word	0x08007ed9
 8007e68:	08007ed9 	.word	0x08007ed9
 8007e6c:	08007ea3 	.word	0x08007ea3
 8007e70:	08007ed9 	.word	0x08007ed9
 8007e74:	08007ed9 	.word	0x08007ed9
 8007e78:	08007ed9 	.word	0x08007ed9
 8007e7c:	08007eb5 	.word	0x08007eb5
 8007e80:	08007ed9 	.word	0x08007ed9
 8007e84:	08007ed9 	.word	0x08007ed9
 8007e88:	08007ed9 	.word	0x08007ed9
 8007e8c:	08007ec7 	.word	0x08007ec7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68da      	ldr	r2, [r3, #12]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f042 0202 	orr.w	r2, r2, #2
 8007e9e:	60da      	str	r2, [r3, #12]
      break;
 8007ea0:	e01d      	b.n	8007ede <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	68da      	ldr	r2, [r3, #12]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f042 0204 	orr.w	r2, r2, #4
 8007eb0:	60da      	str	r2, [r3, #12]
      break;
 8007eb2:	e014      	b.n	8007ede <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	68da      	ldr	r2, [r3, #12]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f042 0208 	orr.w	r2, r2, #8
 8007ec2:	60da      	str	r2, [r3, #12]
      break;
 8007ec4:	e00b      	b.n	8007ede <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68da      	ldr	r2, [r3, #12]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f042 0210 	orr.w	r2, r2, #16
 8007ed4:	60da      	str	r2, [r3, #12]
      break;
 8007ed6:	e002      	b.n	8007ede <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	73fb      	strb	r3, [r7, #15]
      break;
 8007edc:	bf00      	nop
  }

  if (status == HAL_OK)
 8007ede:	7bfb      	ldrb	r3, [r7, #15]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d179      	bne.n	8007fd8 <HAL_TIM_PWM_Start_IT+0x28c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	4618      	mov	r0, r3
 8007eee:	f001 fc9d 	bl	800982c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a3b      	ldr	r2, [pc, #236]	@ (8007fe4 <HAL_TIM_PWM_Start_IT+0x298>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d018      	beq.n	8007f2e <HAL_TIM_PWM_Start_IT+0x1e2>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a39      	ldr	r2, [pc, #228]	@ (8007fe8 <HAL_TIM_PWM_Start_IT+0x29c>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d013      	beq.n	8007f2e <HAL_TIM_PWM_Start_IT+0x1e2>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a38      	ldr	r2, [pc, #224]	@ (8007fec <HAL_TIM_PWM_Start_IT+0x2a0>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d00e      	beq.n	8007f2e <HAL_TIM_PWM_Start_IT+0x1e2>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a36      	ldr	r2, [pc, #216]	@ (8007ff0 <HAL_TIM_PWM_Start_IT+0x2a4>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d009      	beq.n	8007f2e <HAL_TIM_PWM_Start_IT+0x1e2>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a35      	ldr	r2, [pc, #212]	@ (8007ff4 <HAL_TIM_PWM_Start_IT+0x2a8>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d004      	beq.n	8007f2e <HAL_TIM_PWM_Start_IT+0x1e2>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a33      	ldr	r2, [pc, #204]	@ (8007ff8 <HAL_TIM_PWM_Start_IT+0x2ac>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d101      	bne.n	8007f32 <HAL_TIM_PWM_Start_IT+0x1e6>
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e000      	b.n	8007f34 <HAL_TIM_PWM_Start_IT+0x1e8>
 8007f32:	2300      	movs	r3, #0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d007      	beq.n	8007f48 <HAL_TIM_PWM_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007f46:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a25      	ldr	r2, [pc, #148]	@ (8007fe4 <HAL_TIM_PWM_Start_IT+0x298>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d022      	beq.n	8007f98 <HAL_TIM_PWM_Start_IT+0x24c>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f5a:	d01d      	beq.n	8007f98 <HAL_TIM_PWM_Start_IT+0x24c>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a26      	ldr	r2, [pc, #152]	@ (8007ffc <HAL_TIM_PWM_Start_IT+0x2b0>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d018      	beq.n	8007f98 <HAL_TIM_PWM_Start_IT+0x24c>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a25      	ldr	r2, [pc, #148]	@ (8008000 <HAL_TIM_PWM_Start_IT+0x2b4>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d013      	beq.n	8007f98 <HAL_TIM_PWM_Start_IT+0x24c>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a23      	ldr	r2, [pc, #140]	@ (8008004 <HAL_TIM_PWM_Start_IT+0x2b8>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d00e      	beq.n	8007f98 <HAL_TIM_PWM_Start_IT+0x24c>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a1a      	ldr	r2, [pc, #104]	@ (8007fe8 <HAL_TIM_PWM_Start_IT+0x29c>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d009      	beq.n	8007f98 <HAL_TIM_PWM_Start_IT+0x24c>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a18      	ldr	r2, [pc, #96]	@ (8007fec <HAL_TIM_PWM_Start_IT+0x2a0>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d004      	beq.n	8007f98 <HAL_TIM_PWM_Start_IT+0x24c>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a19      	ldr	r2, [pc, #100]	@ (8007ff8 <HAL_TIM_PWM_Start_IT+0x2ac>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d115      	bne.n	8007fc4 <HAL_TIM_PWM_Start_IT+0x278>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	689a      	ldr	r2, [r3, #8]
 8007f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8008008 <HAL_TIM_PWM_Start_IT+0x2bc>)
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	2b06      	cmp	r3, #6
 8007fa8:	d015      	beq.n	8007fd6 <HAL_TIM_PWM_Start_IT+0x28a>
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fb0:	d011      	beq.n	8007fd6 <HAL_TIM_PWM_Start_IT+0x28a>
      {
        __HAL_TIM_ENABLE(htim);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f042 0201 	orr.w	r2, r2, #1
 8007fc0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fc2:	e008      	b.n	8007fd6 <HAL_TIM_PWM_Start_IT+0x28a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f042 0201 	orr.w	r2, r2, #1
 8007fd2:	601a      	str	r2, [r3, #0]
 8007fd4:	e000      	b.n	8007fd8 <HAL_TIM_PWM_Start_IT+0x28c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fd6:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	40012c00 	.word	0x40012c00
 8007fe8:	40013400 	.word	0x40013400
 8007fec:	40014000 	.word	0x40014000
 8007ff0:	40014400 	.word	0x40014400
 8007ff4:	40014800 	.word	0x40014800
 8007ff8:	40015000 	.word	0x40015000
 8007ffc:	40000400 	.word	0x40000400
 8008000:	40000800 	.word	0x40000800
 8008004:	40000c00 	.word	0x40000c00
 8008008:	00010007 	.word	0x00010007

0800800c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d101      	bne.n	8008020 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800801c:	2301      	movs	r3, #1
 800801e:	e04c      	b.n	80080ba <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008026:	b2db      	uxtb	r3, r3
 8008028:	2b00      	cmp	r3, #0
 800802a:	d111      	bne.n	8008050 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f001 fc1f 	bl	8009878 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800803e:	2b00      	cmp	r3, #0
 8008040:	d102      	bne.n	8008048 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4a1f      	ldr	r2, [pc, #124]	@ (80080c4 <HAL_TIM_OnePulse_Init+0xb8>)
 8008046:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2202      	movs	r2, #2
 8008054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	3304      	adds	r3, #4
 8008060:	4619      	mov	r1, r3
 8008062:	4610      	mov	r0, r2
 8008064:	f000 ff68 	bl	8008f38 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f022 0208 	bic.w	r2, r2, #8
 8008076:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	6819      	ldr	r1, [r3, #0]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	683a      	ldr	r2, [r7, #0]
 8008084:	430a      	orrs	r2, r1
 8008086:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3708      	adds	r7, #8
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	080080c9 	.word	0x080080c9

080080c8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80080ec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80080f4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080fc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008104:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008106:	7bfb      	ldrb	r3, [r7, #15]
 8008108:	2b01      	cmp	r3, #1
 800810a:	d108      	bne.n	800811e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800810c:	7bbb      	ldrb	r3, [r7, #14]
 800810e:	2b01      	cmp	r3, #1
 8008110:	d105      	bne.n	800811e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008112:	7b7b      	ldrb	r3, [r7, #13]
 8008114:	2b01      	cmp	r3, #1
 8008116:	d102      	bne.n	800811e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008118:	7b3b      	ldrb	r3, [r7, #12]
 800811a:	2b01      	cmp	r3, #1
 800811c:	d001      	beq.n	8008122 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	e059      	b.n	80081d6 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2202      	movs	r2, #2
 8008126:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2202      	movs	r2, #2
 800812e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2202      	movs	r2, #2
 8008136:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2202      	movs	r2, #2
 800813e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68da      	ldr	r2, [r3, #12]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f042 0202 	orr.w	r2, r2, #2
 8008150:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68da      	ldr	r2, [r3, #12]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f042 0204 	orr.w	r2, r2, #4
 8008160:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2201      	movs	r2, #1
 8008168:	2100      	movs	r1, #0
 800816a:	4618      	mov	r0, r3
 800816c:	f001 fb5e 	bl	800982c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2201      	movs	r2, #1
 8008176:	2104      	movs	r1, #4
 8008178:	4618      	mov	r0, r3
 800817a:	f001 fb57 	bl	800982c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a17      	ldr	r2, [pc, #92]	@ (80081e0 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d018      	beq.n	80081ba <HAL_TIM_OnePulse_Start_IT+0xde>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a15      	ldr	r2, [pc, #84]	@ (80081e4 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d013      	beq.n	80081ba <HAL_TIM_OnePulse_Start_IT+0xde>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a14      	ldr	r2, [pc, #80]	@ (80081e8 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d00e      	beq.n	80081ba <HAL_TIM_OnePulse_Start_IT+0xde>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a12      	ldr	r2, [pc, #72]	@ (80081ec <HAL_TIM_OnePulse_Start_IT+0x110>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d009      	beq.n	80081ba <HAL_TIM_OnePulse_Start_IT+0xde>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a11      	ldr	r2, [pc, #68]	@ (80081f0 <HAL_TIM_OnePulse_Start_IT+0x114>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d004      	beq.n	80081ba <HAL_TIM_OnePulse_Start_IT+0xde>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a0f      	ldr	r2, [pc, #60]	@ (80081f4 <HAL_TIM_OnePulse_Start_IT+0x118>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d101      	bne.n	80081be <HAL_TIM_OnePulse_Start_IT+0xe2>
 80081ba:	2301      	movs	r3, #1
 80081bc:	e000      	b.n	80081c0 <HAL_TIM_OnePulse_Start_IT+0xe4>
 80081be:	2300      	movs	r3, #0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d007      	beq.n	80081d4 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80081d2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3710      	adds	r7, #16
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop
 80081e0:	40012c00 	.word	0x40012c00
 80081e4:	40013400 	.word	0x40013400
 80081e8:	40014000 	.word	0x40014000
 80081ec:	40014400 	.word	0x40014400
 80081f0:	40014800 	.word	0x40014800
 80081f4:	40015000 	.word	0x40015000

080081f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b086      	sub	sp, #24
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d101      	bne.n	800820c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	e0a2      	b.n	8008352 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008212:	b2db      	uxtb	r3, r3
 8008214:	2b00      	cmp	r3, #0
 8008216:	d111      	bne.n	800823c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f001 fb29 	bl	8009878 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800822a:	2b00      	cmp	r3, #0
 800822c:	d102      	bne.n	8008234 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4a4a      	ldr	r2, [pc, #296]	@ (800835c <HAL_TIM_Encoder_Init+0x164>)
 8008232:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2202      	movs	r2, #2
 8008240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	6812      	ldr	r2, [r2, #0]
 800824e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8008252:	f023 0307 	bic.w	r3, r3, #7
 8008256:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	3304      	adds	r3, #4
 8008260:	4619      	mov	r1, r3
 8008262:	4610      	mov	r0, r2
 8008264:	f000 fe68 	bl	8008f38 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	699b      	ldr	r3, [r3, #24]
 8008276:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	6a1b      	ldr	r3, [r3, #32]
 800827e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	697a      	ldr	r2, [r7, #20]
 8008286:	4313      	orrs	r3, r2
 8008288:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008290:	f023 0303 	bic.w	r3, r3, #3
 8008294:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	689a      	ldr	r2, [r3, #8]
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	699b      	ldr	r3, [r3, #24]
 800829e:	021b      	lsls	r3, r3, #8
 80082a0:	4313      	orrs	r3, r2
 80082a2:	693a      	ldr	r2, [r7, #16]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80082ae:	f023 030c 	bic.w	r3, r3, #12
 80082b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80082ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80082be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	68da      	ldr	r2, [r3, #12]
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	69db      	ldr	r3, [r3, #28]
 80082c8:	021b      	lsls	r3, r3, #8
 80082ca:	4313      	orrs	r3, r2
 80082cc:	693a      	ldr	r2, [r7, #16]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	011a      	lsls	r2, r3, #4
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	6a1b      	ldr	r3, [r3, #32]
 80082dc:	031b      	lsls	r3, r3, #12
 80082de:	4313      	orrs	r3, r2
 80082e0:	693a      	ldr	r2, [r7, #16]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80082ec:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80082f4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	685a      	ldr	r2, [r3, #4]
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	011b      	lsls	r3, r3, #4
 8008300:	4313      	orrs	r3, r2
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	4313      	orrs	r3, r2
 8008306:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	697a      	ldr	r2, [r7, #20]
 800830e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	693a      	ldr	r2, [r7, #16]
 8008316:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3718      	adds	r7, #24
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	0800453d 	.word	0x0800453d

08008360 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008370:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008378:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008380:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008388:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d110      	bne.n	80083b2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008390:	7bfb      	ldrb	r3, [r7, #15]
 8008392:	2b01      	cmp	r3, #1
 8008394:	d102      	bne.n	800839c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008396:	7b7b      	ldrb	r3, [r7, #13]
 8008398:	2b01      	cmp	r3, #1
 800839a:	d001      	beq.n	80083a0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800839c:	2301      	movs	r3, #1
 800839e:	e069      	b.n	8008474 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2202      	movs	r2, #2
 80083a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2202      	movs	r2, #2
 80083ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083b0:	e031      	b.n	8008416 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	2b04      	cmp	r3, #4
 80083b6:	d110      	bne.n	80083da <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80083b8:	7bbb      	ldrb	r3, [r7, #14]
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d102      	bne.n	80083c4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80083be:	7b3b      	ldrb	r3, [r7, #12]
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d001      	beq.n	80083c8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	e055      	b.n	8008474 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2202      	movs	r2, #2
 80083cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2202      	movs	r2, #2
 80083d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80083d8:	e01d      	b.n	8008416 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80083da:	7bfb      	ldrb	r3, [r7, #15]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d108      	bne.n	80083f2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80083e0:	7bbb      	ldrb	r3, [r7, #14]
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d105      	bne.n	80083f2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80083e6:	7b7b      	ldrb	r3, [r7, #13]
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d102      	bne.n	80083f2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80083ec:	7b3b      	ldrb	r3, [r7, #12]
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d001      	beq.n	80083f6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	e03e      	b.n	8008474 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2202      	movs	r2, #2
 80083fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2202      	movs	r2, #2
 8008402:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2202      	movs	r2, #2
 800840a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2202      	movs	r2, #2
 8008412:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d003      	beq.n	8008424 <HAL_TIM_Encoder_Start+0xc4>
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	2b04      	cmp	r3, #4
 8008420:	d008      	beq.n	8008434 <HAL_TIM_Encoder_Start+0xd4>
 8008422:	e00f      	b.n	8008444 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2201      	movs	r2, #1
 800842a:	2100      	movs	r1, #0
 800842c:	4618      	mov	r0, r3
 800842e:	f001 f9fd 	bl	800982c <TIM_CCxChannelCmd>
      break;
 8008432:	e016      	b.n	8008462 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2201      	movs	r2, #1
 800843a:	2104      	movs	r1, #4
 800843c:	4618      	mov	r0, r3
 800843e:	f001 f9f5 	bl	800982c <TIM_CCxChannelCmd>
      break;
 8008442:	e00e      	b.n	8008462 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2201      	movs	r2, #1
 800844a:	2100      	movs	r1, #0
 800844c:	4618      	mov	r0, r3
 800844e:	f001 f9ed 	bl	800982c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2201      	movs	r2, #1
 8008458:	2104      	movs	r1, #4
 800845a:	4618      	mov	r0, r3
 800845c:	f001 f9e6 	bl	800982c <TIM_CCxChannelCmd>
      break;
 8008460:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f042 0201 	orr.w	r2, r2, #1
 8008470:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	f003 0302 	and.w	r3, r3, #2
 800849a:	2b00      	cmp	r3, #0
 800849c:	d026      	beq.n	80084ec <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f003 0302 	and.w	r3, r3, #2
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d021      	beq.n	80084ec <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f06f 0202 	mvn.w	r2, #2
 80084b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2201      	movs	r2, #1
 80084b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	699b      	ldr	r3, [r3, #24]
 80084be:	f003 0303 	and.w	r3, r3, #3
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d005      	beq.n	80084d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	4798      	blx	r3
 80084d0:	e009      	b.n	80084e6 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	f003 0304 	and.w	r3, r3, #4
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d026      	beq.n	8008544 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f003 0304 	and.w	r3, r3, #4
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d021      	beq.n	8008544 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f06f 0204 	mvn.w	r2, #4
 8008508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2202      	movs	r2, #2
 800850e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	699b      	ldr	r3, [r3, #24]
 8008516:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800851a:	2b00      	cmp	r3, #0
 800851c:	d005      	beq.n	800852a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	4798      	blx	r3
 8008528:	e009      	b.n	800853e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	f003 0308 	and.w	r3, r3, #8
 800854a:	2b00      	cmp	r3, #0
 800854c:	d026      	beq.n	800859c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f003 0308 	and.w	r3, r3, #8
 8008554:	2b00      	cmp	r3, #0
 8008556:	d021      	beq.n	800859c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f06f 0208 	mvn.w	r2, #8
 8008560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2204      	movs	r2, #4
 8008566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	69db      	ldr	r3, [r3, #28]
 800856e:	f003 0303 	and.w	r3, r3, #3
 8008572:	2b00      	cmp	r3, #0
 8008574:	d005      	beq.n	8008582 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	4798      	blx	r3
 8008580:	e009      	b.n	8008596 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	f003 0310 	and.w	r3, r3, #16
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d026      	beq.n	80085f4 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f003 0310 	and.w	r3, r3, #16
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d021      	beq.n	80085f4 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f06f 0210 	mvn.w	r2, #16
 80085b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2208      	movs	r2, #8
 80085be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	69db      	ldr	r3, [r3, #28]
 80085c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d005      	beq.n	80085da <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	4798      	blx	r3
 80085d8:	e009      	b.n	80085ee <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2200      	movs	r2, #0
 80085f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	f003 0301 	and.w	r3, r3, #1
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d00e      	beq.n	800861c <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f003 0301 	and.w	r3, r3, #1
 8008604:	2b00      	cmp	r3, #0
 8008606:	d009      	beq.n	800861c <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f06f 0201 	mvn.w	r2, #1
 8008610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008622:	2b00      	cmp	r3, #0
 8008624:	d104      	bne.n	8008630 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00e      	beq.n	800864e <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008636:	2b00      	cmp	r3, #0
 8008638:	d009      	beq.n	800864e <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00e      	beq.n	8008676 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800865e:	2b00      	cmp	r3, #0
 8008660:	d009      	beq.n	8008676 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800866a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800867c:	2b00      	cmp	r3, #0
 800867e:	d00e      	beq.n	800869e <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008686:	2b00      	cmp	r3, #0
 8008688:	d009      	beq.n	800869e <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	f003 0320 	and.w	r3, r3, #32
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00e      	beq.n	80086c6 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f003 0320 	and.w	r3, r3, #32
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d009      	beq.n	80086c6 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f06f 0220 	mvn.w	r2, #32
 80086ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d00e      	beq.n	80086ee <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d009      	beq.n	80086ee <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80086e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d00e      	beq.n	8008716 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d009      	beq.n	8008716 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800870a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800871c:	2b00      	cmp	r3, #0
 800871e:	d00e      	beq.n	800873e <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008726:	2b00      	cmp	r3, #0
 8008728:	d009      	beq.n	800873e <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008744:	2b00      	cmp	r3, #0
 8008746:	d00e      	beq.n	8008766 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800874e:	2b00      	cmp	r3, #0
 8008750:	d009      	beq.n	8008766 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800875a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008766:	bf00      	nop
 8008768:	3710      	adds	r7, #16
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
	...

08008770 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b086      	sub	sp, #24
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800877c:	2300      	movs	r3, #0
 800877e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008786:	2b01      	cmp	r3, #1
 8008788:	d101      	bne.n	800878e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800878a:	2302      	movs	r3, #2
 800878c:	e0ff      	b.n	800898e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2201      	movs	r2, #1
 8008792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2b14      	cmp	r3, #20
 800879a:	f200 80f0 	bhi.w	800897e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800879e:	a201      	add	r2, pc, #4	@ (adr r2, 80087a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80087a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a4:	080087f9 	.word	0x080087f9
 80087a8:	0800897f 	.word	0x0800897f
 80087ac:	0800897f 	.word	0x0800897f
 80087b0:	0800897f 	.word	0x0800897f
 80087b4:	08008839 	.word	0x08008839
 80087b8:	0800897f 	.word	0x0800897f
 80087bc:	0800897f 	.word	0x0800897f
 80087c0:	0800897f 	.word	0x0800897f
 80087c4:	0800887b 	.word	0x0800887b
 80087c8:	0800897f 	.word	0x0800897f
 80087cc:	0800897f 	.word	0x0800897f
 80087d0:	0800897f 	.word	0x0800897f
 80087d4:	080088bb 	.word	0x080088bb
 80087d8:	0800897f 	.word	0x0800897f
 80087dc:	0800897f 	.word	0x0800897f
 80087e0:	0800897f 	.word	0x0800897f
 80087e4:	080088fd 	.word	0x080088fd
 80087e8:	0800897f 	.word	0x0800897f
 80087ec:	0800897f 	.word	0x0800897f
 80087f0:	0800897f 	.word	0x0800897f
 80087f4:	0800893d 	.word	0x0800893d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	68b9      	ldr	r1, [r7, #8]
 80087fe:	4618      	mov	r0, r3
 8008800:	f000 fc4e 	bl	80090a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	699a      	ldr	r2, [r3, #24]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f042 0208 	orr.w	r2, r2, #8
 8008812:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	699a      	ldr	r2, [r3, #24]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f022 0204 	bic.w	r2, r2, #4
 8008822:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	6999      	ldr	r1, [r3, #24]
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	691a      	ldr	r2, [r3, #16]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	430a      	orrs	r2, r1
 8008834:	619a      	str	r2, [r3, #24]
      break;
 8008836:	e0a5      	b.n	8008984 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	68b9      	ldr	r1, [r7, #8]
 800883e:	4618      	mov	r0, r3
 8008840:	f000 fcc8 	bl	80091d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	699a      	ldr	r2, [r3, #24]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008852:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	699a      	ldr	r2, [r3, #24]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008862:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	6999      	ldr	r1, [r3, #24]
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	691b      	ldr	r3, [r3, #16]
 800886e:	021a      	lsls	r2, r3, #8
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	430a      	orrs	r2, r1
 8008876:	619a      	str	r2, [r3, #24]
      break;
 8008878:	e084      	b.n	8008984 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68b9      	ldr	r1, [r7, #8]
 8008880:	4618      	mov	r0, r3
 8008882:	f000 fd3b 	bl	80092fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	69da      	ldr	r2, [r3, #28]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f042 0208 	orr.w	r2, r2, #8
 8008894:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	69da      	ldr	r2, [r3, #28]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f022 0204 	bic.w	r2, r2, #4
 80088a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	69d9      	ldr	r1, [r3, #28]
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	691a      	ldr	r2, [r3, #16]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	430a      	orrs	r2, r1
 80088b6:	61da      	str	r2, [r3, #28]
      break;
 80088b8:	e064      	b.n	8008984 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68b9      	ldr	r1, [r7, #8]
 80088c0:	4618      	mov	r0, r3
 80088c2:	f000 fdad 	bl	8009420 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	69da      	ldr	r2, [r3, #28]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80088d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	69da      	ldr	r2, [r3, #28]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	69d9      	ldr	r1, [r3, #28]
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	691b      	ldr	r3, [r3, #16]
 80088f0:	021a      	lsls	r2, r3, #8
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	430a      	orrs	r2, r1
 80088f8:	61da      	str	r2, [r3, #28]
      break;
 80088fa:	e043      	b.n	8008984 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	68b9      	ldr	r1, [r7, #8]
 8008902:	4618      	mov	r0, r3
 8008904:	f000 fe20 	bl	8009548 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f042 0208 	orr.w	r2, r2, #8
 8008916:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f022 0204 	bic.w	r2, r2, #4
 8008926:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	691a      	ldr	r2, [r3, #16]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	430a      	orrs	r2, r1
 8008938:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800893a:	e023      	b.n	8008984 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68b9      	ldr	r1, [r7, #8]
 8008942:	4618      	mov	r0, r3
 8008944:	f000 fe6a 	bl	800961c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008956:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008966:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	691b      	ldr	r3, [r3, #16]
 8008972:	021a      	lsls	r2, r3, #8
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	430a      	orrs	r2, r1
 800897a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800897c:	e002      	b.n	8008984 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	75fb      	strb	r3, [r7, #23]
      break;
 8008982:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2200      	movs	r2, #0
 8008988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800898c:	7dfb      	ldrb	r3, [r7, #23]
}
 800898e:	4618      	mov	r0, r3
 8008990:	3718      	adds	r7, #24
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop

08008998 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80089a2:	2300      	movs	r3, #0
 80089a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d101      	bne.n	80089b4 <HAL_TIM_ConfigClockSource+0x1c>
 80089b0:	2302      	movs	r3, #2
 80089b2:	e0f6      	b.n	8008ba2 <HAL_TIM_ConfigClockSource+0x20a>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2201      	movs	r2, #1
 80089b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2202      	movs	r2, #2
 80089c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80089d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80089d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80089de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	68ba      	ldr	r2, [r7, #8]
 80089e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a6f      	ldr	r2, [pc, #444]	@ (8008bac <HAL_TIM_ConfigClockSource+0x214>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	f000 80c1 	beq.w	8008b76 <HAL_TIM_ConfigClockSource+0x1de>
 80089f4:	4a6d      	ldr	r2, [pc, #436]	@ (8008bac <HAL_TIM_ConfigClockSource+0x214>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	f200 80c6 	bhi.w	8008b88 <HAL_TIM_ConfigClockSource+0x1f0>
 80089fc:	4a6c      	ldr	r2, [pc, #432]	@ (8008bb0 <HAL_TIM_ConfigClockSource+0x218>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	f000 80b9 	beq.w	8008b76 <HAL_TIM_ConfigClockSource+0x1de>
 8008a04:	4a6a      	ldr	r2, [pc, #424]	@ (8008bb0 <HAL_TIM_ConfigClockSource+0x218>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	f200 80be 	bhi.w	8008b88 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a0c:	4a69      	ldr	r2, [pc, #420]	@ (8008bb4 <HAL_TIM_ConfigClockSource+0x21c>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	f000 80b1 	beq.w	8008b76 <HAL_TIM_ConfigClockSource+0x1de>
 8008a14:	4a67      	ldr	r2, [pc, #412]	@ (8008bb4 <HAL_TIM_ConfigClockSource+0x21c>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	f200 80b6 	bhi.w	8008b88 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a1c:	4a66      	ldr	r2, [pc, #408]	@ (8008bb8 <HAL_TIM_ConfigClockSource+0x220>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	f000 80a9 	beq.w	8008b76 <HAL_TIM_ConfigClockSource+0x1de>
 8008a24:	4a64      	ldr	r2, [pc, #400]	@ (8008bb8 <HAL_TIM_ConfigClockSource+0x220>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	f200 80ae 	bhi.w	8008b88 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a2c:	4a63      	ldr	r2, [pc, #396]	@ (8008bbc <HAL_TIM_ConfigClockSource+0x224>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	f000 80a1 	beq.w	8008b76 <HAL_TIM_ConfigClockSource+0x1de>
 8008a34:	4a61      	ldr	r2, [pc, #388]	@ (8008bbc <HAL_TIM_ConfigClockSource+0x224>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	f200 80a6 	bhi.w	8008b88 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a3c:	4a60      	ldr	r2, [pc, #384]	@ (8008bc0 <HAL_TIM_ConfigClockSource+0x228>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	f000 8099 	beq.w	8008b76 <HAL_TIM_ConfigClockSource+0x1de>
 8008a44:	4a5e      	ldr	r2, [pc, #376]	@ (8008bc0 <HAL_TIM_ConfigClockSource+0x228>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	f200 809e 	bhi.w	8008b88 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a4c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008a50:	f000 8091 	beq.w	8008b76 <HAL_TIM_ConfigClockSource+0x1de>
 8008a54:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008a58:	f200 8096 	bhi.w	8008b88 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a60:	f000 8089 	beq.w	8008b76 <HAL_TIM_ConfigClockSource+0x1de>
 8008a64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a68:	f200 808e 	bhi.w	8008b88 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a70:	d03e      	beq.n	8008af0 <HAL_TIM_ConfigClockSource+0x158>
 8008a72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a76:	f200 8087 	bhi.w	8008b88 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a7e:	f000 8086 	beq.w	8008b8e <HAL_TIM_ConfigClockSource+0x1f6>
 8008a82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a86:	d87f      	bhi.n	8008b88 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a88:	2b70      	cmp	r3, #112	@ 0x70
 8008a8a:	d01a      	beq.n	8008ac2 <HAL_TIM_ConfigClockSource+0x12a>
 8008a8c:	2b70      	cmp	r3, #112	@ 0x70
 8008a8e:	d87b      	bhi.n	8008b88 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a90:	2b60      	cmp	r3, #96	@ 0x60
 8008a92:	d050      	beq.n	8008b36 <HAL_TIM_ConfigClockSource+0x19e>
 8008a94:	2b60      	cmp	r3, #96	@ 0x60
 8008a96:	d877      	bhi.n	8008b88 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a98:	2b50      	cmp	r3, #80	@ 0x50
 8008a9a:	d03c      	beq.n	8008b16 <HAL_TIM_ConfigClockSource+0x17e>
 8008a9c:	2b50      	cmp	r3, #80	@ 0x50
 8008a9e:	d873      	bhi.n	8008b88 <HAL_TIM_ConfigClockSource+0x1f0>
 8008aa0:	2b40      	cmp	r3, #64	@ 0x40
 8008aa2:	d058      	beq.n	8008b56 <HAL_TIM_ConfigClockSource+0x1be>
 8008aa4:	2b40      	cmp	r3, #64	@ 0x40
 8008aa6:	d86f      	bhi.n	8008b88 <HAL_TIM_ConfigClockSource+0x1f0>
 8008aa8:	2b30      	cmp	r3, #48	@ 0x30
 8008aaa:	d064      	beq.n	8008b76 <HAL_TIM_ConfigClockSource+0x1de>
 8008aac:	2b30      	cmp	r3, #48	@ 0x30
 8008aae:	d86b      	bhi.n	8008b88 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ab0:	2b20      	cmp	r3, #32
 8008ab2:	d060      	beq.n	8008b76 <HAL_TIM_ConfigClockSource+0x1de>
 8008ab4:	2b20      	cmp	r3, #32
 8008ab6:	d867      	bhi.n	8008b88 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d05c      	beq.n	8008b76 <HAL_TIM_ConfigClockSource+0x1de>
 8008abc:	2b10      	cmp	r3, #16
 8008abe:	d05a      	beq.n	8008b76 <HAL_TIM_ConfigClockSource+0x1de>
 8008ac0:	e062      	b.n	8008b88 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008ad2:	f000 fe8b 	bl	80097ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008ae4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68ba      	ldr	r2, [r7, #8]
 8008aec:	609a      	str	r2, [r3, #8]
      break;
 8008aee:	e04f      	b.n	8008b90 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008b00:	f000 fe74 	bl	80097ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	689a      	ldr	r2, [r3, #8]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008b12:	609a      	str	r2, [r3, #8]
      break;
 8008b14:	e03c      	b.n	8008b90 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b22:	461a      	mov	r2, r3
 8008b24:	f000 fde6 	bl	80096f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2150      	movs	r1, #80	@ 0x50
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f000 fe3f 	bl	80097b2 <TIM_ITRx_SetConfig>
      break;
 8008b34:	e02c      	b.n	8008b90 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b42:	461a      	mov	r2, r3
 8008b44:	f000 fe05 	bl	8009752 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2160      	movs	r1, #96	@ 0x60
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f000 fe2f 	bl	80097b2 <TIM_ITRx_SetConfig>
      break;
 8008b54:	e01c      	b.n	8008b90 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b62:	461a      	mov	r2, r3
 8008b64:	f000 fdc6 	bl	80096f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2140      	movs	r1, #64	@ 0x40
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f000 fe1f 	bl	80097b2 <TIM_ITRx_SetConfig>
      break;
 8008b74:	e00c      	b.n	8008b90 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4619      	mov	r1, r3
 8008b80:	4610      	mov	r0, r2
 8008b82:	f000 fe16 	bl	80097b2 <TIM_ITRx_SetConfig>
      break;
 8008b86:	e003      	b.n	8008b90 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8008b8c:	e000      	b.n	8008b90 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008b8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	00100070 	.word	0x00100070
 8008bb0:	00100060 	.word	0x00100060
 8008bb4:	00100050 	.word	0x00100050
 8008bb8:	00100040 	.word	0x00100040
 8008bbc:	00100030 	.word	0x00100030
 8008bc0:	00100020 	.word	0x00100020

08008bc4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008bcc:	bf00      	nop
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008be0:	bf00      	nop
 8008be2:	370c      	adds	r7, #12
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008bf4:	bf00      	nop
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b083      	sub	sp, #12
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008c08:	bf00      	nop
 8008c0a:	370c      	adds	r7, #12
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c1c:	bf00      	nop
 8008c1e:	370c      	adds	r7, #12
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008c30:	bf00      	nop
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c44:	bf00      	nop
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008c58:	bf00      	nop
 8008c5a:	370c      	adds	r7, #12
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr

08008c64 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008c6c:	bf00      	nop
 8008c6e:	370c      	adds	r7, #12
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b087      	sub	sp, #28
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	460b      	mov	r3, r1
 8008c82:	607a      	str	r2, [r7, #4]
 8008c84:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008c86:	2300      	movs	r3, #0
 8008c88:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d101      	bne.n	8008c94 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	e14a      	b.n	8008f2a <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	f040 80dd 	bne.w	8008e5c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8008ca2:	7afb      	ldrb	r3, [r7, #11]
 8008ca4:	2b1f      	cmp	r3, #31
 8008ca6:	f200 80d6 	bhi.w	8008e56 <HAL_TIM_RegisterCallback+0x1de>
 8008caa:	a201      	add	r2, pc, #4	@ (adr r2, 8008cb0 <HAL_TIM_RegisterCallback+0x38>)
 8008cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb0:	08008d31 	.word	0x08008d31
 8008cb4:	08008d39 	.word	0x08008d39
 8008cb8:	08008d41 	.word	0x08008d41
 8008cbc:	08008d49 	.word	0x08008d49
 8008cc0:	08008d51 	.word	0x08008d51
 8008cc4:	08008d59 	.word	0x08008d59
 8008cc8:	08008d61 	.word	0x08008d61
 8008ccc:	08008d69 	.word	0x08008d69
 8008cd0:	08008d71 	.word	0x08008d71
 8008cd4:	08008d79 	.word	0x08008d79
 8008cd8:	08008d81 	.word	0x08008d81
 8008cdc:	08008d89 	.word	0x08008d89
 8008ce0:	08008d91 	.word	0x08008d91
 8008ce4:	08008d99 	.word	0x08008d99
 8008ce8:	08008da3 	.word	0x08008da3
 8008cec:	08008dad 	.word	0x08008dad
 8008cf0:	08008db7 	.word	0x08008db7
 8008cf4:	08008dc1 	.word	0x08008dc1
 8008cf8:	08008dcb 	.word	0x08008dcb
 8008cfc:	08008dd5 	.word	0x08008dd5
 8008d00:	08008ddf 	.word	0x08008ddf
 8008d04:	08008de9 	.word	0x08008de9
 8008d08:	08008df3 	.word	0x08008df3
 8008d0c:	08008dfd 	.word	0x08008dfd
 8008d10:	08008e07 	.word	0x08008e07
 8008d14:	08008e11 	.word	0x08008e11
 8008d18:	08008e1b 	.word	0x08008e1b
 8008d1c:	08008e25 	.word	0x08008e25
 8008d20:	08008e2f 	.word	0x08008e2f
 8008d24:	08008e39 	.word	0x08008e39
 8008d28:	08008e43 	.word	0x08008e43
 8008d2c:	08008e4d 	.word	0x08008e4d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008d36:	e0f7      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008d3e:	e0f3      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008d46:	e0ef      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008d4e:	e0eb      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008d56:	e0e7      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008d5e:	e0e3      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008d66:	e0df      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008d6e:	e0db      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008d76:	e0d7      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008d7e:	e0d3      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008d86:	e0cf      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008d8e:	e0cb      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008d96:	e0c7      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008da0:	e0c2      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8008daa:	e0bd      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8008db4:	e0b8      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8008dbe:	e0b3      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8008dc8:	e0ae      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008dd2:	e0a9      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8008ddc:	e0a4      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008de6:	e09f      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008df0:	e09a      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008dfa:	e095      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008e04:	e090      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008e0e:	e08b      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008e18:	e086      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008e22:	e081      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008e2c:	e07c      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008e36:	e077      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8008e40:	e072      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008e4a:	e06d      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008e54:	e068      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	75fb      	strb	r3, [r7, #23]
        break;
 8008e5a:	e065      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d15d      	bne.n	8008f24 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8008e68:	7afb      	ldrb	r3, [r7, #11]
 8008e6a:	2b0d      	cmp	r3, #13
 8008e6c:	d857      	bhi.n	8008f1e <HAL_TIM_RegisterCallback+0x2a6>
 8008e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e74 <HAL_TIM_RegisterCallback+0x1fc>)
 8008e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e74:	08008ead 	.word	0x08008ead
 8008e78:	08008eb5 	.word	0x08008eb5
 8008e7c:	08008ebd 	.word	0x08008ebd
 8008e80:	08008ec5 	.word	0x08008ec5
 8008e84:	08008ecd 	.word	0x08008ecd
 8008e88:	08008ed5 	.word	0x08008ed5
 8008e8c:	08008edd 	.word	0x08008edd
 8008e90:	08008ee5 	.word	0x08008ee5
 8008e94:	08008eed 	.word	0x08008eed
 8008e98:	08008ef5 	.word	0x08008ef5
 8008e9c:	08008efd 	.word	0x08008efd
 8008ea0:	08008f05 	.word	0x08008f05
 8008ea4:	08008f0d 	.word	0x08008f0d
 8008ea8:	08008f15 	.word	0x08008f15
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008eb2:	e039      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008eba:	e035      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008ec2:	e031      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008eca:	e02d      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008ed2:	e029      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008eda:	e025      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008ee2:	e021      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008eea:	e01d      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008ef2:	e019      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008efa:	e015      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008f02:	e011      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008f0a:	e00d      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008f12:	e009      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008f1c:	e004      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	75fb      	strb	r3, [r7, #23]
        break;
 8008f22:	e001      	b.n	8008f28 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	371c      	adds	r7, #28
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr
 8008f36:	bf00      	nop

08008f38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b085      	sub	sp, #20
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4a4c      	ldr	r2, [pc, #304]	@ (800907c <TIM_Base_SetConfig+0x144>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d017      	beq.n	8008f80 <TIM_Base_SetConfig+0x48>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f56:	d013      	beq.n	8008f80 <TIM_Base_SetConfig+0x48>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4a49      	ldr	r2, [pc, #292]	@ (8009080 <TIM_Base_SetConfig+0x148>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d00f      	beq.n	8008f80 <TIM_Base_SetConfig+0x48>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	4a48      	ldr	r2, [pc, #288]	@ (8009084 <TIM_Base_SetConfig+0x14c>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d00b      	beq.n	8008f80 <TIM_Base_SetConfig+0x48>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	4a47      	ldr	r2, [pc, #284]	@ (8009088 <TIM_Base_SetConfig+0x150>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d007      	beq.n	8008f80 <TIM_Base_SetConfig+0x48>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a46      	ldr	r2, [pc, #280]	@ (800908c <TIM_Base_SetConfig+0x154>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d003      	beq.n	8008f80 <TIM_Base_SetConfig+0x48>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a45      	ldr	r2, [pc, #276]	@ (8009090 <TIM_Base_SetConfig+0x158>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d108      	bne.n	8008f92 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	68fa      	ldr	r2, [r7, #12]
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	4a39      	ldr	r2, [pc, #228]	@ (800907c <TIM_Base_SetConfig+0x144>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d023      	beq.n	8008fe2 <TIM_Base_SetConfig+0xaa>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fa0:	d01f      	beq.n	8008fe2 <TIM_Base_SetConfig+0xaa>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	4a36      	ldr	r2, [pc, #216]	@ (8009080 <TIM_Base_SetConfig+0x148>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d01b      	beq.n	8008fe2 <TIM_Base_SetConfig+0xaa>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	4a35      	ldr	r2, [pc, #212]	@ (8009084 <TIM_Base_SetConfig+0x14c>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d017      	beq.n	8008fe2 <TIM_Base_SetConfig+0xaa>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	4a34      	ldr	r2, [pc, #208]	@ (8009088 <TIM_Base_SetConfig+0x150>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d013      	beq.n	8008fe2 <TIM_Base_SetConfig+0xaa>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	4a33      	ldr	r2, [pc, #204]	@ (800908c <TIM_Base_SetConfig+0x154>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d00f      	beq.n	8008fe2 <TIM_Base_SetConfig+0xaa>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	4a33      	ldr	r2, [pc, #204]	@ (8009094 <TIM_Base_SetConfig+0x15c>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d00b      	beq.n	8008fe2 <TIM_Base_SetConfig+0xaa>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	4a32      	ldr	r2, [pc, #200]	@ (8009098 <TIM_Base_SetConfig+0x160>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d007      	beq.n	8008fe2 <TIM_Base_SetConfig+0xaa>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	4a31      	ldr	r2, [pc, #196]	@ (800909c <TIM_Base_SetConfig+0x164>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d003      	beq.n	8008fe2 <TIM_Base_SetConfig+0xaa>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	4a2c      	ldr	r2, [pc, #176]	@ (8009090 <TIM_Base_SetConfig+0x158>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d108      	bne.n	8008ff4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008fe8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	68fa      	ldr	r2, [r7, #12]
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	695b      	ldr	r3, [r3, #20]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	689a      	ldr	r2, [r3, #8]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	4a18      	ldr	r2, [pc, #96]	@ (800907c <TIM_Base_SetConfig+0x144>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d013      	beq.n	8009048 <TIM_Base_SetConfig+0x110>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	4a1a      	ldr	r2, [pc, #104]	@ (800908c <TIM_Base_SetConfig+0x154>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d00f      	beq.n	8009048 <TIM_Base_SetConfig+0x110>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	4a1a      	ldr	r2, [pc, #104]	@ (8009094 <TIM_Base_SetConfig+0x15c>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d00b      	beq.n	8009048 <TIM_Base_SetConfig+0x110>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	4a19      	ldr	r2, [pc, #100]	@ (8009098 <TIM_Base_SetConfig+0x160>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d007      	beq.n	8009048 <TIM_Base_SetConfig+0x110>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	4a18      	ldr	r2, [pc, #96]	@ (800909c <TIM_Base_SetConfig+0x164>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d003      	beq.n	8009048 <TIM_Base_SetConfig+0x110>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	4a13      	ldr	r2, [pc, #76]	@ (8009090 <TIM_Base_SetConfig+0x158>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d103      	bne.n	8009050 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	691a      	ldr	r2, [r3, #16]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2201      	movs	r2, #1
 8009054:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	691b      	ldr	r3, [r3, #16]
 800905a:	f003 0301 	and.w	r3, r3, #1
 800905e:	2b01      	cmp	r3, #1
 8009060:	d105      	bne.n	800906e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	f023 0201 	bic.w	r2, r3, #1
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	611a      	str	r2, [r3, #16]
  }
}
 800906e:	bf00      	nop
 8009070:	3714      	adds	r7, #20
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr
 800907a:	bf00      	nop
 800907c:	40012c00 	.word	0x40012c00
 8009080:	40000400 	.word	0x40000400
 8009084:	40000800 	.word	0x40000800
 8009088:	40000c00 	.word	0x40000c00
 800908c:	40013400 	.word	0x40013400
 8009090:	40015000 	.word	0x40015000
 8009094:	40014000 	.word	0x40014000
 8009098:	40014400 	.word	0x40014400
 800909c:	40014800 	.word	0x40014800

080090a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b087      	sub	sp, #28
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6a1b      	ldr	r3, [r3, #32]
 80090ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6a1b      	ldr	r3, [r3, #32]
 80090b4:	f023 0201 	bic.w	r2, r3, #1
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	699b      	ldr	r3, [r3, #24]
 80090c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f023 0303 	bic.w	r3, r3, #3
 80090da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	68fa      	ldr	r2, [r7, #12]
 80090e2:	4313      	orrs	r3, r2
 80090e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	f023 0302 	bic.w	r3, r3, #2
 80090ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	697a      	ldr	r2, [r7, #20]
 80090f4:	4313      	orrs	r3, r2
 80090f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	4a30      	ldr	r2, [pc, #192]	@ (80091bc <TIM_OC1_SetConfig+0x11c>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d013      	beq.n	8009128 <TIM_OC1_SetConfig+0x88>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	4a2f      	ldr	r2, [pc, #188]	@ (80091c0 <TIM_OC1_SetConfig+0x120>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d00f      	beq.n	8009128 <TIM_OC1_SetConfig+0x88>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	4a2e      	ldr	r2, [pc, #184]	@ (80091c4 <TIM_OC1_SetConfig+0x124>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d00b      	beq.n	8009128 <TIM_OC1_SetConfig+0x88>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4a2d      	ldr	r2, [pc, #180]	@ (80091c8 <TIM_OC1_SetConfig+0x128>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d007      	beq.n	8009128 <TIM_OC1_SetConfig+0x88>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4a2c      	ldr	r2, [pc, #176]	@ (80091cc <TIM_OC1_SetConfig+0x12c>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d003      	beq.n	8009128 <TIM_OC1_SetConfig+0x88>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4a2b      	ldr	r2, [pc, #172]	@ (80091d0 <TIM_OC1_SetConfig+0x130>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d10c      	bne.n	8009142 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	f023 0308 	bic.w	r3, r3, #8
 800912e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	697a      	ldr	r2, [r7, #20]
 8009136:	4313      	orrs	r3, r2
 8009138:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	f023 0304 	bic.w	r3, r3, #4
 8009140:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	4a1d      	ldr	r2, [pc, #116]	@ (80091bc <TIM_OC1_SetConfig+0x11c>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d013      	beq.n	8009172 <TIM_OC1_SetConfig+0xd2>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4a1c      	ldr	r2, [pc, #112]	@ (80091c0 <TIM_OC1_SetConfig+0x120>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d00f      	beq.n	8009172 <TIM_OC1_SetConfig+0xd2>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	4a1b      	ldr	r2, [pc, #108]	@ (80091c4 <TIM_OC1_SetConfig+0x124>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d00b      	beq.n	8009172 <TIM_OC1_SetConfig+0xd2>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4a1a      	ldr	r2, [pc, #104]	@ (80091c8 <TIM_OC1_SetConfig+0x128>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d007      	beq.n	8009172 <TIM_OC1_SetConfig+0xd2>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4a19      	ldr	r2, [pc, #100]	@ (80091cc <TIM_OC1_SetConfig+0x12c>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d003      	beq.n	8009172 <TIM_OC1_SetConfig+0xd2>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4a18      	ldr	r2, [pc, #96]	@ (80091d0 <TIM_OC1_SetConfig+0x130>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d111      	bne.n	8009196 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009178:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009180:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	695b      	ldr	r3, [r3, #20]
 8009186:	693a      	ldr	r2, [r7, #16]
 8009188:	4313      	orrs	r3, r2
 800918a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	699b      	ldr	r3, [r3, #24]
 8009190:	693a      	ldr	r2, [r7, #16]
 8009192:	4313      	orrs	r3, r2
 8009194:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	693a      	ldr	r2, [r7, #16]
 800919a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	68fa      	ldr	r2, [r7, #12]
 80091a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	685a      	ldr	r2, [r3, #4]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	697a      	ldr	r2, [r7, #20]
 80091ae:	621a      	str	r2, [r3, #32]
}
 80091b0:	bf00      	nop
 80091b2:	371c      	adds	r7, #28
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr
 80091bc:	40012c00 	.word	0x40012c00
 80091c0:	40013400 	.word	0x40013400
 80091c4:	40014000 	.word	0x40014000
 80091c8:	40014400 	.word	0x40014400
 80091cc:	40014800 	.word	0x40014800
 80091d0:	40015000 	.word	0x40015000

080091d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b087      	sub	sp, #28
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6a1b      	ldr	r3, [r3, #32]
 80091e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6a1b      	ldr	r3, [r3, #32]
 80091e8:	f023 0210 	bic.w	r2, r3, #16
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	699b      	ldr	r3, [r3, #24]
 80091fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009202:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800920e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	021b      	lsls	r3, r3, #8
 8009216:	68fa      	ldr	r2, [r7, #12]
 8009218:	4313      	orrs	r3, r2
 800921a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	f023 0320 	bic.w	r3, r3, #32
 8009222:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	011b      	lsls	r3, r3, #4
 800922a:	697a      	ldr	r2, [r7, #20]
 800922c:	4313      	orrs	r3, r2
 800922e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4a2c      	ldr	r2, [pc, #176]	@ (80092e4 <TIM_OC2_SetConfig+0x110>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d007      	beq.n	8009248 <TIM_OC2_SetConfig+0x74>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	4a2b      	ldr	r2, [pc, #172]	@ (80092e8 <TIM_OC2_SetConfig+0x114>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d003      	beq.n	8009248 <TIM_OC2_SetConfig+0x74>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	4a2a      	ldr	r2, [pc, #168]	@ (80092ec <TIM_OC2_SetConfig+0x118>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d10d      	bne.n	8009264 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800924e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	011b      	lsls	r3, r3, #4
 8009256:	697a      	ldr	r2, [r7, #20]
 8009258:	4313      	orrs	r3, r2
 800925a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009262:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	4a1f      	ldr	r2, [pc, #124]	@ (80092e4 <TIM_OC2_SetConfig+0x110>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d013      	beq.n	8009294 <TIM_OC2_SetConfig+0xc0>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4a1e      	ldr	r2, [pc, #120]	@ (80092e8 <TIM_OC2_SetConfig+0x114>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d00f      	beq.n	8009294 <TIM_OC2_SetConfig+0xc0>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	4a1e      	ldr	r2, [pc, #120]	@ (80092f0 <TIM_OC2_SetConfig+0x11c>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d00b      	beq.n	8009294 <TIM_OC2_SetConfig+0xc0>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4a1d      	ldr	r2, [pc, #116]	@ (80092f4 <TIM_OC2_SetConfig+0x120>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d007      	beq.n	8009294 <TIM_OC2_SetConfig+0xc0>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4a1c      	ldr	r2, [pc, #112]	@ (80092f8 <TIM_OC2_SetConfig+0x124>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d003      	beq.n	8009294 <TIM_OC2_SetConfig+0xc0>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4a17      	ldr	r2, [pc, #92]	@ (80092ec <TIM_OC2_SetConfig+0x118>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d113      	bne.n	80092bc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800929a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80092a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	695b      	ldr	r3, [r3, #20]
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	693a      	ldr	r2, [r7, #16]
 80092ac:	4313      	orrs	r3, r2
 80092ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	699b      	ldr	r3, [r3, #24]
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	693a      	ldr	r2, [r7, #16]
 80092b8:	4313      	orrs	r3, r2
 80092ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	693a      	ldr	r2, [r7, #16]
 80092c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	68fa      	ldr	r2, [r7, #12]
 80092c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	685a      	ldr	r2, [r3, #4]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	697a      	ldr	r2, [r7, #20]
 80092d4:	621a      	str	r2, [r3, #32]
}
 80092d6:	bf00      	nop
 80092d8:	371c      	adds	r7, #28
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr
 80092e2:	bf00      	nop
 80092e4:	40012c00 	.word	0x40012c00
 80092e8:	40013400 	.word	0x40013400
 80092ec:	40015000 	.word	0x40015000
 80092f0:	40014000 	.word	0x40014000
 80092f4:	40014400 	.word	0x40014400
 80092f8:	40014800 	.word	0x40014800

080092fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b087      	sub	sp, #28
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6a1b      	ldr	r3, [r3, #32]
 800930a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6a1b      	ldr	r3, [r3, #32]
 8009310:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	69db      	ldr	r3, [r3, #28]
 8009322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800932a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800932e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f023 0303 	bic.w	r3, r3, #3
 8009336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	68fa      	ldr	r2, [r7, #12]
 800933e:	4313      	orrs	r3, r2
 8009340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	689b      	ldr	r3, [r3, #8]
 800934e:	021b      	lsls	r3, r3, #8
 8009350:	697a      	ldr	r2, [r7, #20]
 8009352:	4313      	orrs	r3, r2
 8009354:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	4a2b      	ldr	r2, [pc, #172]	@ (8009408 <TIM_OC3_SetConfig+0x10c>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d007      	beq.n	800936e <TIM_OC3_SetConfig+0x72>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	4a2a      	ldr	r2, [pc, #168]	@ (800940c <TIM_OC3_SetConfig+0x110>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d003      	beq.n	800936e <TIM_OC3_SetConfig+0x72>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	4a29      	ldr	r2, [pc, #164]	@ (8009410 <TIM_OC3_SetConfig+0x114>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d10d      	bne.n	800938a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009374:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	68db      	ldr	r3, [r3, #12]
 800937a:	021b      	lsls	r3, r3, #8
 800937c:	697a      	ldr	r2, [r7, #20]
 800937e:	4313      	orrs	r3, r2
 8009380:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009388:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4a1e      	ldr	r2, [pc, #120]	@ (8009408 <TIM_OC3_SetConfig+0x10c>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d013      	beq.n	80093ba <TIM_OC3_SetConfig+0xbe>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	4a1d      	ldr	r2, [pc, #116]	@ (800940c <TIM_OC3_SetConfig+0x110>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d00f      	beq.n	80093ba <TIM_OC3_SetConfig+0xbe>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	4a1d      	ldr	r2, [pc, #116]	@ (8009414 <TIM_OC3_SetConfig+0x118>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d00b      	beq.n	80093ba <TIM_OC3_SetConfig+0xbe>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4a1c      	ldr	r2, [pc, #112]	@ (8009418 <TIM_OC3_SetConfig+0x11c>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d007      	beq.n	80093ba <TIM_OC3_SetConfig+0xbe>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4a1b      	ldr	r2, [pc, #108]	@ (800941c <TIM_OC3_SetConfig+0x120>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d003      	beq.n	80093ba <TIM_OC3_SetConfig+0xbe>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a16      	ldr	r2, [pc, #88]	@ (8009410 <TIM_OC3_SetConfig+0x114>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d113      	bne.n	80093e2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80093c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80093c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	695b      	ldr	r3, [r3, #20]
 80093ce:	011b      	lsls	r3, r3, #4
 80093d0:	693a      	ldr	r2, [r7, #16]
 80093d2:	4313      	orrs	r3, r2
 80093d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	699b      	ldr	r3, [r3, #24]
 80093da:	011b      	lsls	r3, r3, #4
 80093dc:	693a      	ldr	r2, [r7, #16]
 80093de:	4313      	orrs	r3, r2
 80093e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	693a      	ldr	r2, [r7, #16]
 80093e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	685a      	ldr	r2, [r3, #4]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	697a      	ldr	r2, [r7, #20]
 80093fa:	621a      	str	r2, [r3, #32]
}
 80093fc:	bf00      	nop
 80093fe:	371c      	adds	r7, #28
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr
 8009408:	40012c00 	.word	0x40012c00
 800940c:	40013400 	.word	0x40013400
 8009410:	40015000 	.word	0x40015000
 8009414:	40014000 	.word	0x40014000
 8009418:	40014400 	.word	0x40014400
 800941c:	40014800 	.word	0x40014800

08009420 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009420:	b480      	push	{r7}
 8009422:	b087      	sub	sp, #28
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6a1b      	ldr	r3, [r3, #32]
 800942e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6a1b      	ldr	r3, [r3, #32]
 8009434:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	69db      	ldr	r3, [r3, #28]
 8009446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800944e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800945a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	021b      	lsls	r3, r3, #8
 8009462:	68fa      	ldr	r2, [r7, #12]
 8009464:	4313      	orrs	r3, r2
 8009466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800946e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	031b      	lsls	r3, r3, #12
 8009476:	697a      	ldr	r2, [r7, #20]
 8009478:	4313      	orrs	r3, r2
 800947a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	4a2c      	ldr	r2, [pc, #176]	@ (8009530 <TIM_OC4_SetConfig+0x110>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d007      	beq.n	8009494 <TIM_OC4_SetConfig+0x74>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4a2b      	ldr	r2, [pc, #172]	@ (8009534 <TIM_OC4_SetConfig+0x114>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d003      	beq.n	8009494 <TIM_OC4_SetConfig+0x74>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	4a2a      	ldr	r2, [pc, #168]	@ (8009538 <TIM_OC4_SetConfig+0x118>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d10d      	bne.n	80094b0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800949a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	031b      	lsls	r3, r3, #12
 80094a2:	697a      	ldr	r2, [r7, #20]
 80094a4:	4313      	orrs	r3, r2
 80094a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80094ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4a1f      	ldr	r2, [pc, #124]	@ (8009530 <TIM_OC4_SetConfig+0x110>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d013      	beq.n	80094e0 <TIM_OC4_SetConfig+0xc0>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	4a1e      	ldr	r2, [pc, #120]	@ (8009534 <TIM_OC4_SetConfig+0x114>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d00f      	beq.n	80094e0 <TIM_OC4_SetConfig+0xc0>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	4a1e      	ldr	r2, [pc, #120]	@ (800953c <TIM_OC4_SetConfig+0x11c>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d00b      	beq.n	80094e0 <TIM_OC4_SetConfig+0xc0>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	4a1d      	ldr	r2, [pc, #116]	@ (8009540 <TIM_OC4_SetConfig+0x120>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d007      	beq.n	80094e0 <TIM_OC4_SetConfig+0xc0>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	4a1c      	ldr	r2, [pc, #112]	@ (8009544 <TIM_OC4_SetConfig+0x124>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d003      	beq.n	80094e0 <TIM_OC4_SetConfig+0xc0>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	4a17      	ldr	r2, [pc, #92]	@ (8009538 <TIM_OC4_SetConfig+0x118>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d113      	bne.n	8009508 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80094e6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80094ee:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	695b      	ldr	r3, [r3, #20]
 80094f4:	019b      	lsls	r3, r3, #6
 80094f6:	693a      	ldr	r2, [r7, #16]
 80094f8:	4313      	orrs	r3, r2
 80094fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	699b      	ldr	r3, [r3, #24]
 8009500:	019b      	lsls	r3, r3, #6
 8009502:	693a      	ldr	r2, [r7, #16]
 8009504:	4313      	orrs	r3, r2
 8009506:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	693a      	ldr	r2, [r7, #16]
 800950c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	68fa      	ldr	r2, [r7, #12]
 8009512:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	685a      	ldr	r2, [r3, #4]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	697a      	ldr	r2, [r7, #20]
 8009520:	621a      	str	r2, [r3, #32]
}
 8009522:	bf00      	nop
 8009524:	371c      	adds	r7, #28
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop
 8009530:	40012c00 	.word	0x40012c00
 8009534:	40013400 	.word	0x40013400
 8009538:	40015000 	.word	0x40015000
 800953c:	40014000 	.word	0x40014000
 8009540:	40014400 	.word	0x40014400
 8009544:	40014800 	.word	0x40014800

08009548 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009548:	b480      	push	{r7}
 800954a:	b087      	sub	sp, #28
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6a1b      	ldr	r3, [r3, #32]
 8009556:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6a1b      	ldr	r3, [r3, #32]
 800955c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800956e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009576:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800957a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	68fa      	ldr	r2, [r7, #12]
 8009582:	4313      	orrs	r3, r2
 8009584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800958c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	041b      	lsls	r3, r3, #16
 8009594:	693a      	ldr	r2, [r7, #16]
 8009596:	4313      	orrs	r3, r2
 8009598:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	4a19      	ldr	r2, [pc, #100]	@ (8009604 <TIM_OC5_SetConfig+0xbc>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d013      	beq.n	80095ca <TIM_OC5_SetConfig+0x82>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4a18      	ldr	r2, [pc, #96]	@ (8009608 <TIM_OC5_SetConfig+0xc0>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d00f      	beq.n	80095ca <TIM_OC5_SetConfig+0x82>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4a17      	ldr	r2, [pc, #92]	@ (800960c <TIM_OC5_SetConfig+0xc4>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d00b      	beq.n	80095ca <TIM_OC5_SetConfig+0x82>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	4a16      	ldr	r2, [pc, #88]	@ (8009610 <TIM_OC5_SetConfig+0xc8>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d007      	beq.n	80095ca <TIM_OC5_SetConfig+0x82>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4a15      	ldr	r2, [pc, #84]	@ (8009614 <TIM_OC5_SetConfig+0xcc>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d003      	beq.n	80095ca <TIM_OC5_SetConfig+0x82>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	4a14      	ldr	r2, [pc, #80]	@ (8009618 <TIM_OC5_SetConfig+0xd0>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d109      	bne.n	80095de <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80095d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	695b      	ldr	r3, [r3, #20]
 80095d6:	021b      	lsls	r3, r3, #8
 80095d8:	697a      	ldr	r2, [r7, #20]
 80095da:	4313      	orrs	r3, r2
 80095dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	697a      	ldr	r2, [r7, #20]
 80095e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	68fa      	ldr	r2, [r7, #12]
 80095e8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	685a      	ldr	r2, [r3, #4]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	693a      	ldr	r2, [r7, #16]
 80095f6:	621a      	str	r2, [r3, #32]
}
 80095f8:	bf00      	nop
 80095fa:	371c      	adds	r7, #28
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr
 8009604:	40012c00 	.word	0x40012c00
 8009608:	40013400 	.word	0x40013400
 800960c:	40014000 	.word	0x40014000
 8009610:	40014400 	.word	0x40014400
 8009614:	40014800 	.word	0x40014800
 8009618:	40015000 	.word	0x40015000

0800961c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800961c:	b480      	push	{r7}
 800961e:	b087      	sub	sp, #28
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6a1b      	ldr	r3, [r3, #32]
 800962a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6a1b      	ldr	r3, [r3, #32]
 8009630:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800964a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800964e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	021b      	lsls	r3, r3, #8
 8009656:	68fa      	ldr	r2, [r7, #12]
 8009658:	4313      	orrs	r3, r2
 800965a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009662:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	051b      	lsls	r3, r3, #20
 800966a:	693a      	ldr	r2, [r7, #16]
 800966c:	4313      	orrs	r3, r2
 800966e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	4a1a      	ldr	r2, [pc, #104]	@ (80096dc <TIM_OC6_SetConfig+0xc0>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d013      	beq.n	80096a0 <TIM_OC6_SetConfig+0x84>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	4a19      	ldr	r2, [pc, #100]	@ (80096e0 <TIM_OC6_SetConfig+0xc4>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d00f      	beq.n	80096a0 <TIM_OC6_SetConfig+0x84>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	4a18      	ldr	r2, [pc, #96]	@ (80096e4 <TIM_OC6_SetConfig+0xc8>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d00b      	beq.n	80096a0 <TIM_OC6_SetConfig+0x84>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	4a17      	ldr	r2, [pc, #92]	@ (80096e8 <TIM_OC6_SetConfig+0xcc>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d007      	beq.n	80096a0 <TIM_OC6_SetConfig+0x84>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4a16      	ldr	r2, [pc, #88]	@ (80096ec <TIM_OC6_SetConfig+0xd0>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d003      	beq.n	80096a0 <TIM_OC6_SetConfig+0x84>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a15      	ldr	r2, [pc, #84]	@ (80096f0 <TIM_OC6_SetConfig+0xd4>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d109      	bne.n	80096b4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80096a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	695b      	ldr	r3, [r3, #20]
 80096ac:	029b      	lsls	r3, r3, #10
 80096ae:	697a      	ldr	r2, [r7, #20]
 80096b0:	4313      	orrs	r3, r2
 80096b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	697a      	ldr	r2, [r7, #20]
 80096b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	68fa      	ldr	r2, [r7, #12]
 80096be:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	685a      	ldr	r2, [r3, #4]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	693a      	ldr	r2, [r7, #16]
 80096cc:	621a      	str	r2, [r3, #32]
}
 80096ce:	bf00      	nop
 80096d0:	371c      	adds	r7, #28
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr
 80096da:	bf00      	nop
 80096dc:	40012c00 	.word	0x40012c00
 80096e0:	40013400 	.word	0x40013400
 80096e4:	40014000 	.word	0x40014000
 80096e8:	40014400 	.word	0x40014400
 80096ec:	40014800 	.word	0x40014800
 80096f0:	40015000 	.word	0x40015000

080096f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b087      	sub	sp, #28
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	6a1b      	ldr	r3, [r3, #32]
 8009704:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6a1b      	ldr	r3, [r3, #32]
 800970a:	f023 0201 	bic.w	r2, r3, #1
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	699b      	ldr	r3, [r3, #24]
 8009716:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800971e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	011b      	lsls	r3, r3, #4
 8009724:	693a      	ldr	r2, [r7, #16]
 8009726:	4313      	orrs	r3, r2
 8009728:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	f023 030a 	bic.w	r3, r3, #10
 8009730:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009732:	697a      	ldr	r2, [r7, #20]
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	4313      	orrs	r3, r2
 8009738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	693a      	ldr	r2, [r7, #16]
 800973e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	697a      	ldr	r2, [r7, #20]
 8009744:	621a      	str	r2, [r3, #32]
}
 8009746:	bf00      	nop
 8009748:	371c      	adds	r7, #28
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr

08009752 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009752:	b480      	push	{r7}
 8009754:	b087      	sub	sp, #28
 8009756:	af00      	add	r7, sp, #0
 8009758:	60f8      	str	r0, [r7, #12]
 800975a:	60b9      	str	r1, [r7, #8]
 800975c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	6a1b      	ldr	r3, [r3, #32]
 8009762:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	6a1b      	ldr	r3, [r3, #32]
 8009768:	f023 0210 	bic.w	r2, r3, #16
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	699b      	ldr	r3, [r3, #24]
 8009774:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800977c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	031b      	lsls	r3, r3, #12
 8009782:	693a      	ldr	r2, [r7, #16]
 8009784:	4313      	orrs	r3, r2
 8009786:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800978e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	011b      	lsls	r3, r3, #4
 8009794:	697a      	ldr	r2, [r7, #20]
 8009796:	4313      	orrs	r3, r2
 8009798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	693a      	ldr	r2, [r7, #16]
 800979e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	697a      	ldr	r2, [r7, #20]
 80097a4:	621a      	str	r2, [r3, #32]
}
 80097a6:	bf00      	nop
 80097a8:	371c      	adds	r7, #28
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr

080097b2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80097b2:	b480      	push	{r7}
 80097b4:	b085      	sub	sp, #20
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
 80097ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	689b      	ldr	r3, [r3, #8]
 80097c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80097c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80097ce:	683a      	ldr	r2, [r7, #0]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	4313      	orrs	r3, r2
 80097d4:	f043 0307 	orr.w	r3, r3, #7
 80097d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	68fa      	ldr	r2, [r7, #12]
 80097de:	609a      	str	r2, [r3, #8]
}
 80097e0:	bf00      	nop
 80097e2:	3714      	adds	r7, #20
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b087      	sub	sp, #28
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	60b9      	str	r1, [r7, #8]
 80097f6:	607a      	str	r2, [r7, #4]
 80097f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	689b      	ldr	r3, [r3, #8]
 80097fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009806:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	021a      	lsls	r2, r3, #8
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	431a      	orrs	r2, r3
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	4313      	orrs	r3, r2
 8009814:	697a      	ldr	r2, [r7, #20]
 8009816:	4313      	orrs	r3, r2
 8009818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	697a      	ldr	r2, [r7, #20]
 800981e:	609a      	str	r2, [r3, #8]
}
 8009820:	bf00      	nop
 8009822:	371c      	adds	r7, #28
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800982c:	b480      	push	{r7}
 800982e:	b087      	sub	sp, #28
 8009830:	af00      	add	r7, sp, #0
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	60b9      	str	r1, [r7, #8]
 8009836:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	f003 031f 	and.w	r3, r3, #31
 800983e:	2201      	movs	r2, #1
 8009840:	fa02 f303 	lsl.w	r3, r2, r3
 8009844:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	6a1a      	ldr	r2, [r3, #32]
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	43db      	mvns	r3, r3
 800984e:	401a      	ands	r2, r3
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	6a1a      	ldr	r2, [r3, #32]
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	f003 031f 	and.w	r3, r3, #31
 800985e:	6879      	ldr	r1, [r7, #4]
 8009860:	fa01 f303 	lsl.w	r3, r1, r3
 8009864:	431a      	orrs	r2, r3
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	621a      	str	r2, [r3, #32]
}
 800986a:	bf00      	nop
 800986c:	371c      	adds	r7, #28
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr
	...

08009878 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8009878:	b480      	push	{r7}
 800987a:	b083      	sub	sp, #12
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	4a26      	ldr	r2, [pc, #152]	@ (800991c <TIM_ResetCallback+0xa4>)
 8009884:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4a25      	ldr	r2, [pc, #148]	@ (8009920 <TIM_ResetCallback+0xa8>)
 800988c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a24      	ldr	r2, [pc, #144]	@ (8009924 <TIM_ResetCallback+0xac>)
 8009894:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4a23      	ldr	r2, [pc, #140]	@ (8009928 <TIM_ResetCallback+0xb0>)
 800989c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4a22      	ldr	r2, [pc, #136]	@ (800992c <TIM_ResetCallback+0xb4>)
 80098a4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4a21      	ldr	r2, [pc, #132]	@ (8009930 <TIM_ResetCallback+0xb8>)
 80098ac:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	4a20      	ldr	r2, [pc, #128]	@ (8009934 <TIM_ResetCallback+0xbc>)
 80098b4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	4a1f      	ldr	r2, [pc, #124]	@ (8009938 <TIM_ResetCallback+0xc0>)
 80098bc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	4a1e      	ldr	r2, [pc, #120]	@ (800993c <TIM_ResetCallback+0xc4>)
 80098c4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	4a1d      	ldr	r2, [pc, #116]	@ (8009940 <TIM_ResetCallback+0xc8>)
 80098cc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	4a1c      	ldr	r2, [pc, #112]	@ (8009944 <TIM_ResetCallback+0xcc>)
 80098d4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	4a1b      	ldr	r2, [pc, #108]	@ (8009948 <TIM_ResetCallback+0xd0>)
 80098dc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	4a1a      	ldr	r2, [pc, #104]	@ (800994c <TIM_ResetCallback+0xd4>)
 80098e4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	4a19      	ldr	r2, [pc, #100]	@ (8009950 <TIM_ResetCallback+0xd8>)
 80098ec:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	4a18      	ldr	r2, [pc, #96]	@ (8009954 <TIM_ResetCallback+0xdc>)
 80098f4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	4a17      	ldr	r2, [pc, #92]	@ (8009958 <TIM_ResetCallback+0xe0>)
 80098fc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	4a16      	ldr	r2, [pc, #88]	@ (800995c <TIM_ResetCallback+0xe4>)
 8009904:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	4a15      	ldr	r2, [pc, #84]	@ (8009960 <TIM_ResetCallback+0xe8>)
 800990c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8009910:	bf00      	nop
 8009912:	370c      	adds	r7, #12
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr
 800991c:	08004151 	.word	0x08004151
 8009920:	08008bc5 	.word	0x08008bc5
 8009924:	08008c3d 	.word	0x08008c3d
 8009928:	08008c51 	.word	0x08008c51
 800992c:	08008bed 	.word	0x08008bed
 8009930:	08008c01 	.word	0x08008c01
 8009934:	08008bd9 	.word	0x08008bd9
 8009938:	08008c15 	.word	0x08008c15
 800993c:	08008c29 	.word	0x08008c29
 8009940:	08008c65 	.word	0x08008c65
 8009944:	08009a91 	.word	0x08009a91
 8009948:	08009aa5 	.word	0x08009aa5
 800994c:	08009ab9 	.word	0x08009ab9
 8009950:	08009acd 	.word	0x08009acd
 8009954:	08009ae1 	.word	0x08009ae1
 8009958:	08009af5 	.word	0x08009af5
 800995c:	08009b09 	.word	0x08009b09
 8009960:	08009b1d 	.word	0x08009b1d

08009964 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009974:	2b01      	cmp	r3, #1
 8009976:	d101      	bne.n	800997c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009978:	2302      	movs	r3, #2
 800997a:	e074      	b.n	8009a66 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2201      	movs	r2, #1
 8009980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2202      	movs	r2, #2
 8009988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a34      	ldr	r2, [pc, #208]	@ (8009a74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d009      	beq.n	80099ba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a33      	ldr	r2, [pc, #204]	@ (8009a78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d004      	beq.n	80099ba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a31      	ldr	r2, [pc, #196]	@ (8009a7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d108      	bne.n	80099cc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80099c0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	68fa      	ldr	r2, [r7, #12]
 80099c8:	4313      	orrs	r3, r2
 80099ca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80099d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	68fa      	ldr	r2, [r7, #12]
 80099de:	4313      	orrs	r3, r2
 80099e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	68fa      	ldr	r2, [r7, #12]
 80099e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4a21      	ldr	r2, [pc, #132]	@ (8009a74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d022      	beq.n	8009a3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099fc:	d01d      	beq.n	8009a3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a1f      	ldr	r2, [pc, #124]	@ (8009a80 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d018      	beq.n	8009a3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8009a84 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d013      	beq.n	8009a3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a1c      	ldr	r2, [pc, #112]	@ (8009a88 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d00e      	beq.n	8009a3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a15      	ldr	r2, [pc, #84]	@ (8009a78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d009      	beq.n	8009a3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a18      	ldr	r2, [pc, #96]	@ (8009a8c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d004      	beq.n	8009a3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a11      	ldr	r2, [pc, #68]	@ (8009a7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d10c      	bne.n	8009a54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	68ba      	ldr	r2, [r7, #8]
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	68ba      	ldr	r2, [r7, #8]
 8009a52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2201      	movs	r2, #1
 8009a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3714      	adds	r7, #20
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	40012c00 	.word	0x40012c00
 8009a78:	40013400 	.word	0x40013400
 8009a7c:	40015000 	.word	0x40015000
 8009a80:	40000400 	.word	0x40000400
 8009a84:	40000800 	.word	0x40000800
 8009a88:	40000c00 	.word	0x40000c00
 8009a8c:	40014000 	.word	0x40014000

08009a90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a98:	bf00      	nop
 8009a9a:	370c      	adds	r7, #12
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009aac:	bf00      	nop
 8009aae:	370c      	adds	r7, #12
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ac0:	bf00      	nop
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009ad4:	bf00      	nop
 8009ad6:	370c      	adds	r7, #12
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b083      	sub	sp, #12
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009ae8:	bf00      	nop
 8009aea:	370c      	adds	r7, #12
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009afc:	bf00      	nop
 8009afe:	370c      	adds	r7, #12
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b083      	sub	sp, #12
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009b10:	bf00      	nop
 8009b12:	370c      	adds	r7, #12
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr

08009b1c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009b24:	bf00      	nop
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d101      	bne.n	8009b42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	e050      	b.n	8009be4 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d114      	bne.n	8009b76 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 fe8d 	bl	800a874 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d103      	bne.n	8009b6c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	4a21      	ldr	r2, [pc, #132]	@ (8009bec <HAL_UART_Init+0xbc>)
 8009b68:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2224      	movs	r2, #36	@ 0x24
 8009b7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f022 0201 	bic.w	r2, r2, #1
 8009b8c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d002      	beq.n	8009b9c <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	f001 f9ba 	bl	800af10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 febb 	bl	800a918 <UART_SetConfig>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d101      	bne.n	8009bac <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	e01b      	b.n	8009be4 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	685a      	ldr	r2, [r3, #4]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009bba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	689a      	ldr	r2, [r3, #8]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009bca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f042 0201 	orr.w	r2, r2, #1
 8009bda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f001 fa39 	bl	800b054 <UART_CheckIdleState>
 8009be2:	4603      	mov	r3, r0
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3708      	adds	r7, #8
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	08004711 	.word	0x08004711

08009bf0 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b087      	sub	sp, #28
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	607a      	str	r2, [r7, #4]
 8009bfc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d109      	bne.n	8009c1c <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c0e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	e09c      	b.n	8009d56 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c22:	2b20      	cmp	r3, #32
 8009c24:	d16c      	bne.n	8009d00 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8009c26:	7afb      	ldrb	r3, [r7, #11]
 8009c28:	2b0c      	cmp	r3, #12
 8009c2a:	d85e      	bhi.n	8009cea <HAL_UART_RegisterCallback+0xfa>
 8009c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8009c34 <HAL_UART_RegisterCallback+0x44>)
 8009c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c32:	bf00      	nop
 8009c34:	08009c69 	.word	0x08009c69
 8009c38:	08009c73 	.word	0x08009c73
 8009c3c:	08009c7d 	.word	0x08009c7d
 8009c40:	08009c87 	.word	0x08009c87
 8009c44:	08009c91 	.word	0x08009c91
 8009c48:	08009c9b 	.word	0x08009c9b
 8009c4c:	08009ca5 	.word	0x08009ca5
 8009c50:	08009caf 	.word	0x08009caf
 8009c54:	08009cb9 	.word	0x08009cb9
 8009c58:	08009cc3 	.word	0x08009cc3
 8009c5c:	08009ccd 	.word	0x08009ccd
 8009c60:	08009cd7 	.word	0x08009cd7
 8009c64:	08009ce1 	.word	0x08009ce1
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009c70:	e070      	b.n	8009d54 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8009c7a:	e06b      	b.n	8009d54 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8009c84:	e066      	b.n	8009d54 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009c8e:	e061      	b.n	8009d54 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009c98:	e05c      	b.n	8009d54 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8009ca2:	e057      	b.n	8009d54 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009cac:	e052      	b.n	8009d54 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	687a      	ldr	r2, [r7, #4]
 8009cb2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009cb6:	e04d      	b.n	8009d54 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	687a      	ldr	r2, [r7, #4]
 8009cbc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009cc0:	e048      	b.n	8009d54 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009cca:	e043      	b.n	8009d54 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009cd4:	e03e      	b.n	8009d54 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009cde:	e039      	b.n	8009d54 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009ce8:	e034      	b.n	8009d54 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cf0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	75fb      	strb	r3, [r7, #23]
        break;
 8009cfe:	e029      	b.n	8009d54 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d11a      	bne.n	8009d40 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8009d0a:	7afb      	ldrb	r3, [r7, #11]
 8009d0c:	2b0b      	cmp	r3, #11
 8009d0e:	d002      	beq.n	8009d16 <HAL_UART_RegisterCallback+0x126>
 8009d10:	2b0c      	cmp	r3, #12
 8009d12:	d005      	beq.n	8009d20 <HAL_UART_RegisterCallback+0x130>
 8009d14:	e009      	b.n	8009d2a <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009d1e:	e019      	b.n	8009d54 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009d28:	e014      	b.n	8009d54 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d30:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	75fb      	strb	r3, [r7, #23]
        break;
 8009d3e:	e009      	b.n	8009d54 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d46:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8009d50:	2301      	movs	r3, #1
 8009d52:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	371c      	adds	r7, #28
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr
 8009d62:	bf00      	nop

08009d64 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b08a      	sub	sp, #40	@ 0x28
 8009d68:	af02      	add	r7, sp, #8
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	60b9      	str	r1, [r7, #8]
 8009d6e:	603b      	str	r3, [r7, #0]
 8009d70:	4613      	mov	r3, r2
 8009d72:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009d7a:	2b20      	cmp	r3, #32
 8009d7c:	f040 80b5 	bne.w	8009eea <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d002      	beq.n	8009d8c <HAL_UART_Receive+0x28>
 8009d86:	88fb      	ldrh	r3, [r7, #6]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d101      	bne.n	8009d90 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	e0ad      	b.n	8009eec <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2222      	movs	r2, #34	@ 0x22
 8009d9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2200      	movs	r2, #0
 8009da4:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009da6:	f7fa fec3 	bl	8004b30 <HAL_GetTick>
 8009daa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	88fa      	ldrh	r2, [r7, #6]
 8009db0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	88fa      	ldrh	r2, [r7, #6]
 8009db8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	689b      	ldr	r3, [r3, #8]
 8009dc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009dc4:	d10e      	bne.n	8009de4 <HAL_UART_Receive+0x80>
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	691b      	ldr	r3, [r3, #16]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d105      	bne.n	8009dda <HAL_UART_Receive+0x76>
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009dd4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009dd8:	e02d      	b.n	8009e36 <HAL_UART_Receive+0xd2>
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	22ff      	movs	r2, #255	@ 0xff
 8009dde:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009de2:	e028      	b.n	8009e36 <HAL_UART_Receive+0xd2>
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d10d      	bne.n	8009e08 <HAL_UART_Receive+0xa4>
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	691b      	ldr	r3, [r3, #16]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d104      	bne.n	8009dfe <HAL_UART_Receive+0x9a>
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	22ff      	movs	r2, #255	@ 0xff
 8009df8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009dfc:	e01b      	b.n	8009e36 <HAL_UART_Receive+0xd2>
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	227f      	movs	r2, #127	@ 0x7f
 8009e02:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009e06:	e016      	b.n	8009e36 <HAL_UART_Receive+0xd2>
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e10:	d10d      	bne.n	8009e2e <HAL_UART_Receive+0xca>
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	691b      	ldr	r3, [r3, #16]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d104      	bne.n	8009e24 <HAL_UART_Receive+0xc0>
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	227f      	movs	r2, #127	@ 0x7f
 8009e1e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009e22:	e008      	b.n	8009e36 <HAL_UART_Receive+0xd2>
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	223f      	movs	r2, #63	@ 0x3f
 8009e28:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009e2c:	e003      	b.n	8009e36 <HAL_UART_Receive+0xd2>
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2200      	movs	r2, #0
 8009e32:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009e3c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	689b      	ldr	r3, [r3, #8]
 8009e42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e46:	d108      	bne.n	8009e5a <HAL_UART_Receive+0xf6>
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	691b      	ldr	r3, [r3, #16]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d104      	bne.n	8009e5a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8009e50:	2300      	movs	r3, #0
 8009e52:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	61bb      	str	r3, [r7, #24]
 8009e58:	e003      	b.n	8009e62 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009e62:	e036      	b.n	8009ed2 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	9300      	str	r3, [sp, #0]
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	2120      	movs	r1, #32
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f001 f99a 	bl	800b1a8 <UART_WaitOnFlagUntilTimeout>
 8009e74:	4603      	mov	r3, r0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d005      	beq.n	8009e86 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2220      	movs	r2, #32
 8009e7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8009e82:	2303      	movs	r3, #3
 8009e84:	e032      	b.n	8009eec <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d10c      	bne.n	8009ea6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e92:	b29a      	uxth	r2, r3
 8009e94:	8a7b      	ldrh	r3, [r7, #18]
 8009e96:	4013      	ands	r3, r2
 8009e98:	b29a      	uxth	r2, r3
 8009e9a:	69bb      	ldr	r3, [r7, #24]
 8009e9c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009e9e:	69bb      	ldr	r3, [r7, #24]
 8009ea0:	3302      	adds	r3, #2
 8009ea2:	61bb      	str	r3, [r7, #24]
 8009ea4:	e00c      	b.n	8009ec0 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eac:	b2da      	uxtb	r2, r3
 8009eae:	8a7b      	ldrh	r3, [r7, #18]
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	4013      	ands	r3, r2
 8009eb4:	b2da      	uxtb	r2, r3
 8009eb6:	69fb      	ldr	r3, [r7, #28]
 8009eb8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009eba:	69fb      	ldr	r3, [r7, #28]
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	3b01      	subs	r3, #1
 8009eca:	b29a      	uxth	r2, r3
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d1c2      	bne.n	8009e64 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2220      	movs	r2, #32
 8009ee2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	e000      	b.n	8009eec <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8009eea:	2302      	movs	r3, #2
  }
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3720      	adds	r7, #32
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b08a      	sub	sp, #40	@ 0x28
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	4613      	mov	r3, r2
 8009f00:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f08:	2b20      	cmp	r3, #32
 8009f0a:	d167      	bne.n	8009fdc <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d002      	beq.n	8009f18 <HAL_UART_Transmit_DMA+0x24>
 8009f12:	88fb      	ldrh	r3, [r7, #6]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d101      	bne.n	8009f1c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009f18:	2301      	movs	r3, #1
 8009f1a:	e060      	b.n	8009fde <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	68ba      	ldr	r2, [r7, #8]
 8009f20:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	88fa      	ldrh	r2, [r7, #6]
 8009f26:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	88fa      	ldrh	r2, [r7, #6]
 8009f2e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2200      	movs	r2, #0
 8009f36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2221      	movs	r2, #33	@ 0x21
 8009f3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d028      	beq.n	8009f9c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f4e:	4a26      	ldr	r2, [pc, #152]	@ (8009fe8 <HAL_UART_Transmit_DMA+0xf4>)
 8009f50:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f56:	4a25      	ldr	r2, [pc, #148]	@ (8009fec <HAL_UART_Transmit_DMA+0xf8>)
 8009f58:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f5e:	4a24      	ldr	r2, [pc, #144]	@ (8009ff0 <HAL_UART_Transmit_DMA+0xfc>)
 8009f60:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009f66:	2200      	movs	r2, #0
 8009f68:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f72:	4619      	mov	r1, r3
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	3328      	adds	r3, #40	@ 0x28
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	88fb      	ldrh	r3, [r7, #6]
 8009f7e:	f7fc f89b 	bl	80060b8 <HAL_DMA_Start_IT>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d009      	beq.n	8009f9c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2210      	movs	r2, #16
 8009f8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2220      	movs	r2, #32
 8009f94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	e020      	b.n	8009fde <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	2240      	movs	r2, #64	@ 0x40
 8009fa2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	3308      	adds	r3, #8
 8009faa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	e853 3f00 	ldrex	r3, [r3]
 8009fb2:	613b      	str	r3, [r7, #16]
   return(result);
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fba:	627b      	str	r3, [r7, #36]	@ 0x24
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	3308      	adds	r3, #8
 8009fc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fc4:	623a      	str	r2, [r7, #32]
 8009fc6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc8:	69f9      	ldr	r1, [r7, #28]
 8009fca:	6a3a      	ldr	r2, [r7, #32]
 8009fcc:	e841 2300 	strex	r3, r2, [r1]
 8009fd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8009fd2:	69bb      	ldr	r3, [r7, #24]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d1e5      	bne.n	8009fa4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	e000      	b.n	8009fde <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009fdc:	2302      	movs	r3, #2
  }
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3728      	adds	r7, #40	@ 0x28
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	0800b51f 	.word	0x0800b51f
 8009fec:	0800b5bd 	.word	0x0800b5bd
 8009ff0:	0800b757 	.word	0x0800b757

08009ff4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b08a      	sub	sp, #40	@ 0x28
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	60f8      	str	r0, [r7, #12]
 8009ffc:	60b9      	str	r1, [r7, #8]
 8009ffe:	4613      	mov	r3, r2
 800a000:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a008:	2b20      	cmp	r3, #32
 800a00a:	d137      	bne.n	800a07c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d002      	beq.n	800a018 <HAL_UART_Receive_DMA+0x24>
 800a012:	88fb      	ldrh	r3, [r7, #6]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d101      	bne.n	800a01c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a018:	2301      	movs	r3, #1
 800a01a:	e030      	b.n	800a07e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2200      	movs	r2, #0
 800a020:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4a18      	ldr	r2, [pc, #96]	@ (800a088 <HAL_UART_Receive_DMA+0x94>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d01f      	beq.n	800a06c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a036:	2b00      	cmp	r3, #0
 800a038:	d018      	beq.n	800a06c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	e853 3f00 	ldrex	r3, [r3]
 800a046:	613b      	str	r3, [r7, #16]
   return(result);
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a04e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	461a      	mov	r2, r3
 800a056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a058:	623b      	str	r3, [r7, #32]
 800a05a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a05c:	69f9      	ldr	r1, [r7, #28]
 800a05e:	6a3a      	ldr	r2, [r7, #32]
 800a060:	e841 2300 	strex	r3, r2, [r1]
 800a064:	61bb      	str	r3, [r7, #24]
   return(result);
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d1e6      	bne.n	800a03a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a06c:	88fb      	ldrh	r3, [r7, #6]
 800a06e:	461a      	mov	r2, r3
 800a070:	68b9      	ldr	r1, [r7, #8]
 800a072:	68f8      	ldr	r0, [r7, #12]
 800a074:	f001 f906 	bl	800b284 <UART_Start_Receive_DMA>
 800a078:	4603      	mov	r3, r0
 800a07a:	e000      	b.n	800a07e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a07c:	2302      	movs	r3, #2
  }
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3728      	adds	r7, #40	@ 0x28
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
 800a086:	bf00      	nop
 800a088:	40008000 	.word	0x40008000

0800a08c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b0ba      	sub	sp, #232	@ 0xe8
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	69db      	ldr	r3, [r3, #28]
 800a09a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a0b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a0b6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a0ba:	4013      	ands	r3, r2
 800a0bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a0c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d11b      	bne.n	800a100 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a0c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0cc:	f003 0320 	and.w	r3, r3, #32
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d015      	beq.n	800a100 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a0d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0d8:	f003 0320 	and.w	r3, r3, #32
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d105      	bne.n	800a0ec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a0e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a0e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d009      	beq.n	800a100 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	f000 82f3 	beq.w	800a6dc <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	4798      	blx	r3
      }
      return;
 800a0fe:	e2ed      	b.n	800a6dc <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a100:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a104:	2b00      	cmp	r3, #0
 800a106:	f000 8129 	beq.w	800a35c <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a10a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a10e:	4b90      	ldr	r3, [pc, #576]	@ (800a350 <HAL_UART_IRQHandler+0x2c4>)
 800a110:	4013      	ands	r3, r2
 800a112:	2b00      	cmp	r3, #0
 800a114:	d106      	bne.n	800a124 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a116:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a11a:	4b8e      	ldr	r3, [pc, #568]	@ (800a354 <HAL_UART_IRQHandler+0x2c8>)
 800a11c:	4013      	ands	r3, r2
 800a11e:	2b00      	cmp	r3, #0
 800a120:	f000 811c 	beq.w	800a35c <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a128:	f003 0301 	and.w	r3, r3, #1
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d011      	beq.n	800a154 <HAL_UART_IRQHandler+0xc8>
 800a130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d00b      	beq.n	800a154 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2201      	movs	r2, #1
 800a142:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a14a:	f043 0201 	orr.w	r2, r3, #1
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a158:	f003 0302 	and.w	r3, r3, #2
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d011      	beq.n	800a184 <HAL_UART_IRQHandler+0xf8>
 800a160:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a164:	f003 0301 	and.w	r3, r3, #1
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d00b      	beq.n	800a184 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2202      	movs	r2, #2
 800a172:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a17a:	f043 0204 	orr.w	r2, r3, #4
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a188:	f003 0304 	and.w	r3, r3, #4
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d011      	beq.n	800a1b4 <HAL_UART_IRQHandler+0x128>
 800a190:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a194:	f003 0301 	and.w	r3, r3, #1
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d00b      	beq.n	800a1b4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	2204      	movs	r2, #4
 800a1a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1aa:	f043 0202 	orr.w	r2, r3, #2
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a1b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1b8:	f003 0308 	and.w	r3, r3, #8
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d017      	beq.n	800a1f0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a1c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1c4:	f003 0320 	and.w	r3, r3, #32
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d105      	bne.n	800a1d8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a1cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a1d0:	4b5f      	ldr	r3, [pc, #380]	@ (800a350 <HAL_UART_IRQHandler+0x2c4>)
 800a1d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d00b      	beq.n	800a1f0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	2208      	movs	r2, #8
 800a1de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1e6:	f043 0208 	orr.w	r2, r3, #8
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a1f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d012      	beq.n	800a222 <HAL_UART_IRQHandler+0x196>
 800a1fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a200:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a204:	2b00      	cmp	r3, #0
 800a206:	d00c      	beq.n	800a222 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a210:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a218:	f043 0220 	orr.w	r2, r3, #32
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a228:	2b00      	cmp	r3, #0
 800a22a:	f000 8259 	beq.w	800a6e0 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a22e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a232:	f003 0320 	and.w	r3, r3, #32
 800a236:	2b00      	cmp	r3, #0
 800a238:	d013      	beq.n	800a262 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a23a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a23e:	f003 0320 	and.w	r3, r3, #32
 800a242:	2b00      	cmp	r3, #0
 800a244:	d105      	bne.n	800a252 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a24a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d007      	beq.n	800a262 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a256:	2b00      	cmp	r3, #0
 800a258:	d003      	beq.n	800a262 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a268:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	689b      	ldr	r3, [r3, #8]
 800a272:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a276:	2b40      	cmp	r3, #64	@ 0x40
 800a278:	d005      	beq.n	800a286 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a27a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a27e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a282:	2b00      	cmp	r3, #0
 800a284:	d058      	beq.n	800a338 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f001 f8e3 	bl	800b452 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	689b      	ldr	r3, [r3, #8]
 800a292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a296:	2b40      	cmp	r3, #64	@ 0x40
 800a298:	d148      	bne.n	800a32c <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	3308      	adds	r3, #8
 800a2a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a2a8:	e853 3f00 	ldrex	r3, [r3]
 800a2ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a2b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a2b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a2b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	3308      	adds	r3, #8
 800a2c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a2c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a2ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a2d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a2d6:	e841 2300 	strex	r3, r2, [r1]
 800a2da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a2de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d1d9      	bne.n	800a29a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d017      	beq.n	800a320 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2f6:	4a18      	ldr	r2, [pc, #96]	@ (800a358 <HAL_UART_IRQHandler+0x2cc>)
 800a2f8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a300:	4618      	mov	r0, r3
 800a302:	f7fb ffad 	bl	8006260 <HAL_DMA_Abort_IT>
 800a306:	4603      	mov	r3, r0
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d01f      	beq.n	800a34c <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a31a:	4610      	mov	r0, r2
 800a31c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a31e:	e015      	b.n	800a34c <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a32a:	e00f      	b.n	800a34c <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a336:	e009      	b.n	800a34c <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2200      	movs	r2, #0
 800a346:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a34a:	e1c9      	b.n	800a6e0 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a34c:	bf00      	nop
    return;
 800a34e:	e1c7      	b.n	800a6e0 <HAL_UART_IRQHandler+0x654>
 800a350:	10000001 	.word	0x10000001
 800a354:	04000120 	.word	0x04000120
 800a358:	0800b7db 	.word	0x0800b7db

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a360:	2b01      	cmp	r3, #1
 800a362:	f040 8157 	bne.w	800a614 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a36a:	f003 0310 	and.w	r3, r3, #16
 800a36e:	2b00      	cmp	r3, #0
 800a370:	f000 8150 	beq.w	800a614 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a378:	f003 0310 	and.w	r3, r3, #16
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	f000 8149 	beq.w	800a614 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2210      	movs	r2, #16
 800a388:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	689b      	ldr	r3, [r3, #8]
 800a390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a394:	2b40      	cmp	r3, #64	@ 0x40
 800a396:	f040 80bd 	bne.w	800a514 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a3a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	f000 8199 	beq.w	800a6e4 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a3b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	f080 8191 	bcs.w	800a6e4 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a3c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f003 0320 	and.w	r3, r3, #32
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	f040 8087 	bne.w	800a4ee <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a3ec:	e853 3f00 	ldrex	r3, [r3]
 800a3f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a3f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a3f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a3fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	461a      	mov	r2, r3
 800a406:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a40a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a40e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a412:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a416:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a41a:	e841 2300 	strex	r3, r2, [r1]
 800a41e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a422:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a426:	2b00      	cmp	r3, #0
 800a428:	d1da      	bne.n	800a3e0 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	3308      	adds	r3, #8
 800a430:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a432:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a434:	e853 3f00 	ldrex	r3, [r3]
 800a438:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a43a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a43c:	f023 0301 	bic.w	r3, r3, #1
 800a440:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	3308      	adds	r3, #8
 800a44a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a44e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a452:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a454:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a456:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a45a:	e841 2300 	strex	r3, r2, [r1]
 800a45e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a460:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a462:	2b00      	cmp	r3, #0
 800a464:	d1e1      	bne.n	800a42a <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	3308      	adds	r3, #8
 800a46c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a46e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a470:	e853 3f00 	ldrex	r3, [r3]
 800a474:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a476:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a478:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a47c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	3308      	adds	r3, #8
 800a486:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a48a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a48c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a48e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a490:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a492:	e841 2300 	strex	r3, r2, [r1]
 800a496:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a498:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d1e3      	bne.n	800a466 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2220      	movs	r2, #32
 800a4a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4b4:	e853 3f00 	ldrex	r3, [r3]
 800a4b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a4ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4bc:	f023 0310 	bic.w	r3, r3, #16
 800a4c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a4ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a4d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a4d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a4d6:	e841 2300 	strex	r3, r2, [r1]
 800a4da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a4dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d1e4      	bne.n	800a4ac <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f7fb fe60 	bl	80061ae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2202      	movs	r2, #2
 800a4f2:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a4fa:	687a      	ldr	r2, [r7, #4]
 800a4fc:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800a500:	687a      	ldr	r2, [r7, #4]
 800a502:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800a506:	b292      	uxth	r2, r2
 800a508:	1a8a      	subs	r2, r1, r2
 800a50a:	b292      	uxth	r2, r2
 800a50c:	4611      	mov	r1, r2
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a512:	e0e7      	b.n	800a6e4 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a520:	b29b      	uxth	r3, r3
 800a522:	1ad3      	subs	r3, r2, r3
 800a524:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a52e:	b29b      	uxth	r3, r3
 800a530:	2b00      	cmp	r3, #0
 800a532:	f000 80d9 	beq.w	800a6e8 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 800a536:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	f000 80d4 	beq.w	800a6e8 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a548:	e853 3f00 	ldrex	r3, [r3]
 800a54c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a54e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a550:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a554:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	461a      	mov	r2, r3
 800a55e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a562:	647b      	str	r3, [r7, #68]	@ 0x44
 800a564:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a566:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a568:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a56a:	e841 2300 	strex	r3, r2, [r1]
 800a56e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a572:	2b00      	cmp	r3, #0
 800a574:	d1e4      	bne.n	800a540 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	3308      	adds	r3, #8
 800a57c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a57e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a580:	e853 3f00 	ldrex	r3, [r3]
 800a584:	623b      	str	r3, [r7, #32]
   return(result);
 800a586:	6a3b      	ldr	r3, [r7, #32]
 800a588:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a58c:	f023 0301 	bic.w	r3, r3, #1
 800a590:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	3308      	adds	r3, #8
 800a59a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a59e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a5a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a5a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5a6:	e841 2300 	strex	r3, r2, [r1]
 800a5aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a5ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d1e1      	bne.n	800a576 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2220      	movs	r2, #32
 800a5b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	e853 3f00 	ldrex	r3, [r3]
 800a5d2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f023 0310 	bic.w	r3, r3, #16
 800a5da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a5e8:	61fb      	str	r3, [r7, #28]
 800a5ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ec:	69b9      	ldr	r1, [r7, #24]
 800a5ee:	69fa      	ldr	r2, [r7, #28]
 800a5f0:	e841 2300 	strex	r3, r2, [r1]
 800a5f4:	617b      	str	r3, [r7, #20]
   return(result);
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d1e4      	bne.n	800a5c6 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2202      	movs	r2, #2
 800a600:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a608:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800a60c:	4611      	mov	r1, r2
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a612:	e069      	b.n	800a6e8 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a618:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d010      	beq.n	800a642 <HAL_UART_IRQHandler+0x5b6>
 800a620:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a624:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d00a      	beq.n	800a642 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a634:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a640:	e055      	b.n	800a6ee <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d014      	beq.n	800a678 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a64e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a656:	2b00      	cmp	r3, #0
 800a658:	d105      	bne.n	800a666 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a65a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a65e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a662:	2b00      	cmp	r3, #0
 800a664:	d008      	beq.n	800a678 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d03e      	beq.n	800a6ec <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	4798      	blx	r3
    }
    return;
 800a676:	e039      	b.n	800a6ec <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a67c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a680:	2b00      	cmp	r3, #0
 800a682:	d009      	beq.n	800a698 <HAL_UART_IRQHandler+0x60c>
 800a684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d003      	beq.n	800a698 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f001 f8ba 	bl	800b80a <UART_EndTransmit_IT>
    return;
 800a696:	e02a      	b.n	800a6ee <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a69c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d00b      	beq.n	800a6bc <HAL_UART_IRQHandler+0x630>
 800a6a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6a8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d005      	beq.n	800a6bc <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a6ba:	e018      	b.n	800a6ee <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a6bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d012      	beq.n	800a6ee <HAL_UART_IRQHandler+0x662>
 800a6c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	da0e      	bge.n	800a6ee <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a6da:	e008      	b.n	800a6ee <HAL_UART_IRQHandler+0x662>
      return;
 800a6dc:	bf00      	nop
 800a6de:	e006      	b.n	800a6ee <HAL_UART_IRQHandler+0x662>
    return;
 800a6e0:	bf00      	nop
 800a6e2:	e004      	b.n	800a6ee <HAL_UART_IRQHandler+0x662>
      return;
 800a6e4:	bf00      	nop
 800a6e6:	e002      	b.n	800a6ee <HAL_UART_IRQHandler+0x662>
      return;
 800a6e8:	bf00      	nop
 800a6ea:	e000      	b.n	800a6ee <HAL_UART_IRQHandler+0x662>
    return;
 800a6ec:	bf00      	nop
  }
}
 800a6ee:	37e8      	adds	r7, #232	@ 0xe8
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b083      	sub	sp, #12
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a6fc:	bf00      	nop
 800a6fe:	370c      	adds	r7, #12
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr

0800a708 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a708:	b480      	push	{r7}
 800a70a:	b083      	sub	sp, #12
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a710:	bf00      	nop
 800a712:	370c      	adds	r7, #12
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a724:	bf00      	nop
 800a726:	370c      	adds	r7, #12
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr

0800a730 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a738:	bf00      	nop
 800a73a:	370c      	adds	r7, #12
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a74c:	bf00      	nop
 800a74e:	370c      	adds	r7, #12
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800a760:	bf00      	nop
 800a762:	370c      	adds	r7, #12
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800a774:	bf00      	nop
 800a776:	370c      	adds	r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr

0800a780 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800a788:	bf00      	nop
 800a78a:	370c      	adds	r7, #12
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	460b      	mov	r3, r1
 800a79e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a7a0:	bf00      	nop
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr

0800a7ac <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a09      	ldr	r2, [pc, #36]	@ (800a7e0 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d009      	beq.n	800a7d4 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	695b      	ldr	r3, [r3, #20]
 800a7c6:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	683a      	ldr	r2, [r7, #0]
 800a7d0:	430a      	orrs	r2, r1
 800a7d2:	615a      	str	r2, [r3, #20]
  }
}
 800a7d4:	bf00      	nop
 800a7d6:	370c      	adds	r7, #12
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr
 800a7e0:	40008000 	.word	0x40008000

0800a7e4 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a18      	ldr	r2, [pc, #96]	@ (800a854 <HAL_UART_EnableReceiverTimeout+0x70>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d027      	beq.n	800a846 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7fc:	2b20      	cmp	r3, #32
 800a7fe:	d120      	bne.n	800a842 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a806:	2b01      	cmp	r3, #1
 800a808:	d101      	bne.n	800a80e <HAL_UART_EnableReceiverTimeout+0x2a>
 800a80a:	2302      	movs	r3, #2
 800a80c:	e01c      	b.n	800a848 <HAL_UART_EnableReceiverTimeout+0x64>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2201      	movs	r2, #1
 800a812:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2224      	movs	r2, #36	@ 0x24
 800a81a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	685a      	ldr	r2, [r3, #4]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800a82c:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2220      	movs	r2, #32
 800a832:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2200      	movs	r2, #0
 800a83a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800a83e:	2300      	movs	r3, #0
 800a840:	e002      	b.n	800a848 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800a842:	2302      	movs	r3, #2
 800a844:	e000      	b.n	800a848 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800a846:	2301      	movs	r3, #1
  }
}
 800a848:	4618      	mov	r0, r3
 800a84a:	370c      	adds	r7, #12
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr
 800a854:	40008000 	.word	0x40008000

0800a858 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800a858:	b480      	push	{r7}
 800a85a:	b083      	sub	sp, #12
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800a866:	4618      	mov	r0, r3
 800a868:	370c      	adds	r7, #12
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr
	...

0800a874 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800a874:	b480      	push	{r7}
 800a876:	b083      	sub	sp, #12
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	4a1a      	ldr	r2, [pc, #104]	@ (800a8e8 <UART_InitCallbacksToDefault+0x74>)
 800a880:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	4a19      	ldr	r2, [pc, #100]	@ (800a8ec <UART_InitCallbacksToDefault+0x78>)
 800a888:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	4a18      	ldr	r2, [pc, #96]	@ (800a8f0 <UART_InitCallbacksToDefault+0x7c>)
 800a890:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	4a17      	ldr	r2, [pc, #92]	@ (800a8f4 <UART_InitCallbacksToDefault+0x80>)
 800a898:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	4a16      	ldr	r2, [pc, #88]	@ (800a8f8 <UART_InitCallbacksToDefault+0x84>)
 800a8a0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	4a15      	ldr	r2, [pc, #84]	@ (800a8fc <UART_InitCallbacksToDefault+0x88>)
 800a8a8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	4a14      	ldr	r2, [pc, #80]	@ (800a900 <UART_InitCallbacksToDefault+0x8c>)
 800a8b0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	4a13      	ldr	r2, [pc, #76]	@ (800a904 <UART_InitCallbacksToDefault+0x90>)
 800a8b8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	4a12      	ldr	r2, [pc, #72]	@ (800a908 <UART_InitCallbacksToDefault+0x94>)
 800a8c0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	4a11      	ldr	r2, [pc, #68]	@ (800a90c <UART_InitCallbacksToDefault+0x98>)
 800a8c8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	4a10      	ldr	r2, [pc, #64]	@ (800a910 <UART_InitCallbacksToDefault+0x9c>)
 800a8d0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	4a0f      	ldr	r2, [pc, #60]	@ (800a914 <UART_InitCallbacksToDefault+0xa0>)
 800a8d8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800a8dc:	bf00      	nop
 800a8de:	370c      	adds	r7, #12
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr
 800a8e8:	0800a709 	.word	0x0800a709
 800a8ec:	0800a6f5 	.word	0x0800a6f5
 800a8f0:	0800a731 	.word	0x0800a731
 800a8f4:	0800a71d 	.word	0x0800a71d
 800a8f8:	0800a745 	.word	0x0800a745
 800a8fc:	0800a759 	.word	0x0800a759
 800a900:	0800a76d 	.word	0x0800a76d
 800a904:	0800a781 	.word	0x0800a781
 800a908:	0800b865 	.word	0x0800b865
 800a90c:	0800b879 	.word	0x0800b879
 800a910:	0800b88d 	.word	0x0800b88d
 800a914:	0800a795 	.word	0x0800a795

0800a918 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a91c:	b08c      	sub	sp, #48	@ 0x30
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a922:	2300      	movs	r3, #0
 800a924:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	689a      	ldr	r2, [r3, #8]
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	691b      	ldr	r3, [r3, #16]
 800a930:	431a      	orrs	r2, r3
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	695b      	ldr	r3, [r3, #20]
 800a936:	431a      	orrs	r2, r3
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	69db      	ldr	r3, [r3, #28]
 800a93c:	4313      	orrs	r3, r2
 800a93e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	4baa      	ldr	r3, [pc, #680]	@ (800abf0 <UART_SetConfig+0x2d8>)
 800a948:	4013      	ands	r3, r2
 800a94a:	697a      	ldr	r2, [r7, #20]
 800a94c:	6812      	ldr	r2, [r2, #0]
 800a94e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a950:	430b      	orrs	r3, r1
 800a952:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	68da      	ldr	r2, [r3, #12]
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	430a      	orrs	r2, r1
 800a968:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	699b      	ldr	r3, [r3, #24]
 800a96e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4a9f      	ldr	r2, [pc, #636]	@ (800abf4 <UART_SetConfig+0x2dc>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d004      	beq.n	800a984 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	6a1b      	ldr	r3, [r3, #32]
 800a97e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a980:	4313      	orrs	r3, r2
 800a982:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	689b      	ldr	r3, [r3, #8]
 800a98a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a98e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a992:	697a      	ldr	r2, [r7, #20]
 800a994:	6812      	ldr	r2, [r2, #0]
 800a996:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a998:	430b      	orrs	r3, r1
 800a99a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9a2:	f023 010f 	bic.w	r1, r3, #15
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	430a      	orrs	r2, r1
 800a9b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	4a90      	ldr	r2, [pc, #576]	@ (800abf8 <UART_SetConfig+0x2e0>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d125      	bne.n	800aa08 <UART_SetConfig+0xf0>
 800a9bc:	4b8f      	ldr	r3, [pc, #572]	@ (800abfc <UART_SetConfig+0x2e4>)
 800a9be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9c2:	f003 0303 	and.w	r3, r3, #3
 800a9c6:	2b03      	cmp	r3, #3
 800a9c8:	d81a      	bhi.n	800aa00 <UART_SetConfig+0xe8>
 800a9ca:	a201      	add	r2, pc, #4	@ (adr r2, 800a9d0 <UART_SetConfig+0xb8>)
 800a9cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9d0:	0800a9e1 	.word	0x0800a9e1
 800a9d4:	0800a9f1 	.word	0x0800a9f1
 800a9d8:	0800a9e9 	.word	0x0800a9e9
 800a9dc:	0800a9f9 	.word	0x0800a9f9
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9e6:	e116      	b.n	800ac16 <UART_SetConfig+0x2fe>
 800a9e8:	2302      	movs	r3, #2
 800a9ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9ee:	e112      	b.n	800ac16 <UART_SetConfig+0x2fe>
 800a9f0:	2304      	movs	r3, #4
 800a9f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9f6:	e10e      	b.n	800ac16 <UART_SetConfig+0x2fe>
 800a9f8:	2308      	movs	r3, #8
 800a9fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9fe:	e10a      	b.n	800ac16 <UART_SetConfig+0x2fe>
 800aa00:	2310      	movs	r3, #16
 800aa02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa06:	e106      	b.n	800ac16 <UART_SetConfig+0x2fe>
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	4a7c      	ldr	r2, [pc, #496]	@ (800ac00 <UART_SetConfig+0x2e8>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d138      	bne.n	800aa84 <UART_SetConfig+0x16c>
 800aa12:	4b7a      	ldr	r3, [pc, #488]	@ (800abfc <UART_SetConfig+0x2e4>)
 800aa14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa18:	f003 030c 	and.w	r3, r3, #12
 800aa1c:	2b0c      	cmp	r3, #12
 800aa1e:	d82d      	bhi.n	800aa7c <UART_SetConfig+0x164>
 800aa20:	a201      	add	r2, pc, #4	@ (adr r2, 800aa28 <UART_SetConfig+0x110>)
 800aa22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa26:	bf00      	nop
 800aa28:	0800aa5d 	.word	0x0800aa5d
 800aa2c:	0800aa7d 	.word	0x0800aa7d
 800aa30:	0800aa7d 	.word	0x0800aa7d
 800aa34:	0800aa7d 	.word	0x0800aa7d
 800aa38:	0800aa6d 	.word	0x0800aa6d
 800aa3c:	0800aa7d 	.word	0x0800aa7d
 800aa40:	0800aa7d 	.word	0x0800aa7d
 800aa44:	0800aa7d 	.word	0x0800aa7d
 800aa48:	0800aa65 	.word	0x0800aa65
 800aa4c:	0800aa7d 	.word	0x0800aa7d
 800aa50:	0800aa7d 	.word	0x0800aa7d
 800aa54:	0800aa7d 	.word	0x0800aa7d
 800aa58:	0800aa75 	.word	0x0800aa75
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa62:	e0d8      	b.n	800ac16 <UART_SetConfig+0x2fe>
 800aa64:	2302      	movs	r3, #2
 800aa66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa6a:	e0d4      	b.n	800ac16 <UART_SetConfig+0x2fe>
 800aa6c:	2304      	movs	r3, #4
 800aa6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa72:	e0d0      	b.n	800ac16 <UART_SetConfig+0x2fe>
 800aa74:	2308      	movs	r3, #8
 800aa76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa7a:	e0cc      	b.n	800ac16 <UART_SetConfig+0x2fe>
 800aa7c:	2310      	movs	r3, #16
 800aa7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa82:	e0c8      	b.n	800ac16 <UART_SetConfig+0x2fe>
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4a5e      	ldr	r2, [pc, #376]	@ (800ac04 <UART_SetConfig+0x2ec>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d125      	bne.n	800aada <UART_SetConfig+0x1c2>
 800aa8e:	4b5b      	ldr	r3, [pc, #364]	@ (800abfc <UART_SetConfig+0x2e4>)
 800aa90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa94:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800aa98:	2b30      	cmp	r3, #48	@ 0x30
 800aa9a:	d016      	beq.n	800aaca <UART_SetConfig+0x1b2>
 800aa9c:	2b30      	cmp	r3, #48	@ 0x30
 800aa9e:	d818      	bhi.n	800aad2 <UART_SetConfig+0x1ba>
 800aaa0:	2b20      	cmp	r3, #32
 800aaa2:	d00a      	beq.n	800aaba <UART_SetConfig+0x1a2>
 800aaa4:	2b20      	cmp	r3, #32
 800aaa6:	d814      	bhi.n	800aad2 <UART_SetConfig+0x1ba>
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d002      	beq.n	800aab2 <UART_SetConfig+0x19a>
 800aaac:	2b10      	cmp	r3, #16
 800aaae:	d008      	beq.n	800aac2 <UART_SetConfig+0x1aa>
 800aab0:	e00f      	b.n	800aad2 <UART_SetConfig+0x1ba>
 800aab2:	2300      	movs	r3, #0
 800aab4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aab8:	e0ad      	b.n	800ac16 <UART_SetConfig+0x2fe>
 800aaba:	2302      	movs	r3, #2
 800aabc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aac0:	e0a9      	b.n	800ac16 <UART_SetConfig+0x2fe>
 800aac2:	2304      	movs	r3, #4
 800aac4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aac8:	e0a5      	b.n	800ac16 <UART_SetConfig+0x2fe>
 800aaca:	2308      	movs	r3, #8
 800aacc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aad0:	e0a1      	b.n	800ac16 <UART_SetConfig+0x2fe>
 800aad2:	2310      	movs	r3, #16
 800aad4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aad8:	e09d      	b.n	800ac16 <UART_SetConfig+0x2fe>
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	4a4a      	ldr	r2, [pc, #296]	@ (800ac08 <UART_SetConfig+0x2f0>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d125      	bne.n	800ab30 <UART_SetConfig+0x218>
 800aae4:	4b45      	ldr	r3, [pc, #276]	@ (800abfc <UART_SetConfig+0x2e4>)
 800aae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aaea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800aaee:	2bc0      	cmp	r3, #192	@ 0xc0
 800aaf0:	d016      	beq.n	800ab20 <UART_SetConfig+0x208>
 800aaf2:	2bc0      	cmp	r3, #192	@ 0xc0
 800aaf4:	d818      	bhi.n	800ab28 <UART_SetConfig+0x210>
 800aaf6:	2b80      	cmp	r3, #128	@ 0x80
 800aaf8:	d00a      	beq.n	800ab10 <UART_SetConfig+0x1f8>
 800aafa:	2b80      	cmp	r3, #128	@ 0x80
 800aafc:	d814      	bhi.n	800ab28 <UART_SetConfig+0x210>
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d002      	beq.n	800ab08 <UART_SetConfig+0x1f0>
 800ab02:	2b40      	cmp	r3, #64	@ 0x40
 800ab04:	d008      	beq.n	800ab18 <UART_SetConfig+0x200>
 800ab06:	e00f      	b.n	800ab28 <UART_SetConfig+0x210>
 800ab08:	2300      	movs	r3, #0
 800ab0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab0e:	e082      	b.n	800ac16 <UART_SetConfig+0x2fe>
 800ab10:	2302      	movs	r3, #2
 800ab12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab16:	e07e      	b.n	800ac16 <UART_SetConfig+0x2fe>
 800ab18:	2304      	movs	r3, #4
 800ab1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab1e:	e07a      	b.n	800ac16 <UART_SetConfig+0x2fe>
 800ab20:	2308      	movs	r3, #8
 800ab22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab26:	e076      	b.n	800ac16 <UART_SetConfig+0x2fe>
 800ab28:	2310      	movs	r3, #16
 800ab2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab2e:	e072      	b.n	800ac16 <UART_SetConfig+0x2fe>
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4a35      	ldr	r2, [pc, #212]	@ (800ac0c <UART_SetConfig+0x2f4>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d12a      	bne.n	800ab90 <UART_SetConfig+0x278>
 800ab3a:	4b30      	ldr	r3, [pc, #192]	@ (800abfc <UART_SetConfig+0x2e4>)
 800ab3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ab44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ab48:	d01a      	beq.n	800ab80 <UART_SetConfig+0x268>
 800ab4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ab4e:	d81b      	bhi.n	800ab88 <UART_SetConfig+0x270>
 800ab50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab54:	d00c      	beq.n	800ab70 <UART_SetConfig+0x258>
 800ab56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab5a:	d815      	bhi.n	800ab88 <UART_SetConfig+0x270>
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d003      	beq.n	800ab68 <UART_SetConfig+0x250>
 800ab60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab64:	d008      	beq.n	800ab78 <UART_SetConfig+0x260>
 800ab66:	e00f      	b.n	800ab88 <UART_SetConfig+0x270>
 800ab68:	2300      	movs	r3, #0
 800ab6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab6e:	e052      	b.n	800ac16 <UART_SetConfig+0x2fe>
 800ab70:	2302      	movs	r3, #2
 800ab72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab76:	e04e      	b.n	800ac16 <UART_SetConfig+0x2fe>
 800ab78:	2304      	movs	r3, #4
 800ab7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab7e:	e04a      	b.n	800ac16 <UART_SetConfig+0x2fe>
 800ab80:	2308      	movs	r3, #8
 800ab82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab86:	e046      	b.n	800ac16 <UART_SetConfig+0x2fe>
 800ab88:	2310      	movs	r3, #16
 800ab8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab8e:	e042      	b.n	800ac16 <UART_SetConfig+0x2fe>
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a17      	ldr	r2, [pc, #92]	@ (800abf4 <UART_SetConfig+0x2dc>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d13a      	bne.n	800ac10 <UART_SetConfig+0x2f8>
 800ab9a:	4b18      	ldr	r3, [pc, #96]	@ (800abfc <UART_SetConfig+0x2e4>)
 800ab9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aba0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800aba4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aba8:	d01a      	beq.n	800abe0 <UART_SetConfig+0x2c8>
 800abaa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800abae:	d81b      	bhi.n	800abe8 <UART_SetConfig+0x2d0>
 800abb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800abb4:	d00c      	beq.n	800abd0 <UART_SetConfig+0x2b8>
 800abb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800abba:	d815      	bhi.n	800abe8 <UART_SetConfig+0x2d0>
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d003      	beq.n	800abc8 <UART_SetConfig+0x2b0>
 800abc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800abc4:	d008      	beq.n	800abd8 <UART_SetConfig+0x2c0>
 800abc6:	e00f      	b.n	800abe8 <UART_SetConfig+0x2d0>
 800abc8:	2300      	movs	r3, #0
 800abca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abce:	e022      	b.n	800ac16 <UART_SetConfig+0x2fe>
 800abd0:	2302      	movs	r3, #2
 800abd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abd6:	e01e      	b.n	800ac16 <UART_SetConfig+0x2fe>
 800abd8:	2304      	movs	r3, #4
 800abda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abde:	e01a      	b.n	800ac16 <UART_SetConfig+0x2fe>
 800abe0:	2308      	movs	r3, #8
 800abe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abe6:	e016      	b.n	800ac16 <UART_SetConfig+0x2fe>
 800abe8:	2310      	movs	r3, #16
 800abea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abee:	e012      	b.n	800ac16 <UART_SetConfig+0x2fe>
 800abf0:	cfff69f3 	.word	0xcfff69f3
 800abf4:	40008000 	.word	0x40008000
 800abf8:	40013800 	.word	0x40013800
 800abfc:	40021000 	.word	0x40021000
 800ac00:	40004400 	.word	0x40004400
 800ac04:	40004800 	.word	0x40004800
 800ac08:	40004c00 	.word	0x40004c00
 800ac0c:	40005000 	.word	0x40005000
 800ac10:	2310      	movs	r3, #16
 800ac12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4aae      	ldr	r2, [pc, #696]	@ (800aed4 <UART_SetConfig+0x5bc>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	f040 8097 	bne.w	800ad50 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ac22:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ac26:	2b08      	cmp	r3, #8
 800ac28:	d823      	bhi.n	800ac72 <UART_SetConfig+0x35a>
 800ac2a:	a201      	add	r2, pc, #4	@ (adr r2, 800ac30 <UART_SetConfig+0x318>)
 800ac2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac30:	0800ac55 	.word	0x0800ac55
 800ac34:	0800ac73 	.word	0x0800ac73
 800ac38:	0800ac5d 	.word	0x0800ac5d
 800ac3c:	0800ac73 	.word	0x0800ac73
 800ac40:	0800ac63 	.word	0x0800ac63
 800ac44:	0800ac73 	.word	0x0800ac73
 800ac48:	0800ac73 	.word	0x0800ac73
 800ac4c:	0800ac73 	.word	0x0800ac73
 800ac50:	0800ac6b 	.word	0x0800ac6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac54:	f7fc fc00 	bl	8007458 <HAL_RCC_GetPCLK1Freq>
 800ac58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ac5a:	e010      	b.n	800ac7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ac5c:	4b9e      	ldr	r3, [pc, #632]	@ (800aed8 <UART_SetConfig+0x5c0>)
 800ac5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ac60:	e00d      	b.n	800ac7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac62:	f7fc fb8b 	bl	800737c <HAL_RCC_GetSysClockFreq>
 800ac66:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ac68:	e009      	b.n	800ac7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ac70:	e005      	b.n	800ac7e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800ac72:	2300      	movs	r3, #0
 800ac74:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ac76:	2301      	movs	r3, #1
 800ac78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ac7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ac7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	f000 8130 	beq.w	800aee6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac8a:	4a94      	ldr	r2, [pc, #592]	@ (800aedc <UART_SetConfig+0x5c4>)
 800ac8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac90:	461a      	mov	r2, r3
 800ac92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac94:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac98:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	685a      	ldr	r2, [r3, #4]
 800ac9e:	4613      	mov	r3, r2
 800aca0:	005b      	lsls	r3, r3, #1
 800aca2:	4413      	add	r3, r2
 800aca4:	69ba      	ldr	r2, [r7, #24]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d305      	bcc.n	800acb6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800acb0:	69ba      	ldr	r2, [r7, #24]
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d903      	bls.n	800acbe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800acb6:	2301      	movs	r3, #1
 800acb8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800acbc:	e113      	b.n	800aee6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc0:	2200      	movs	r2, #0
 800acc2:	60bb      	str	r3, [r7, #8]
 800acc4:	60fa      	str	r2, [r7, #12]
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acca:	4a84      	ldr	r2, [pc, #528]	@ (800aedc <UART_SetConfig+0x5c4>)
 800accc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acd0:	b29b      	uxth	r3, r3
 800acd2:	2200      	movs	r2, #0
 800acd4:	603b      	str	r3, [r7, #0]
 800acd6:	607a      	str	r2, [r7, #4]
 800acd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acdc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ace0:	f7f6 f864 	bl	8000dac <__aeabi_uldivmod>
 800ace4:	4602      	mov	r2, r0
 800ace6:	460b      	mov	r3, r1
 800ace8:	4610      	mov	r0, r2
 800acea:	4619      	mov	r1, r3
 800acec:	f04f 0200 	mov.w	r2, #0
 800acf0:	f04f 0300 	mov.w	r3, #0
 800acf4:	020b      	lsls	r3, r1, #8
 800acf6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800acfa:	0202      	lsls	r2, r0, #8
 800acfc:	6979      	ldr	r1, [r7, #20]
 800acfe:	6849      	ldr	r1, [r1, #4]
 800ad00:	0849      	lsrs	r1, r1, #1
 800ad02:	2000      	movs	r0, #0
 800ad04:	460c      	mov	r4, r1
 800ad06:	4605      	mov	r5, r0
 800ad08:	eb12 0804 	adds.w	r8, r2, r4
 800ad0c:	eb43 0905 	adc.w	r9, r3, r5
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	2200      	movs	r2, #0
 800ad16:	469a      	mov	sl, r3
 800ad18:	4693      	mov	fp, r2
 800ad1a:	4652      	mov	r2, sl
 800ad1c:	465b      	mov	r3, fp
 800ad1e:	4640      	mov	r0, r8
 800ad20:	4649      	mov	r1, r9
 800ad22:	f7f6 f843 	bl	8000dac <__aeabi_uldivmod>
 800ad26:	4602      	mov	r2, r0
 800ad28:	460b      	mov	r3, r1
 800ad2a:	4613      	mov	r3, r2
 800ad2c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ad2e:	6a3b      	ldr	r3, [r7, #32]
 800ad30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad34:	d308      	bcc.n	800ad48 <UART_SetConfig+0x430>
 800ad36:	6a3b      	ldr	r3, [r7, #32]
 800ad38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad3c:	d204      	bcs.n	800ad48 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	6a3a      	ldr	r2, [r7, #32]
 800ad44:	60da      	str	r2, [r3, #12]
 800ad46:	e0ce      	b.n	800aee6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800ad48:	2301      	movs	r3, #1
 800ad4a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ad4e:	e0ca      	b.n	800aee6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	69db      	ldr	r3, [r3, #28]
 800ad54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ad58:	d166      	bne.n	800ae28 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800ad5a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ad5e:	2b08      	cmp	r3, #8
 800ad60:	d827      	bhi.n	800adb2 <UART_SetConfig+0x49a>
 800ad62:	a201      	add	r2, pc, #4	@ (adr r2, 800ad68 <UART_SetConfig+0x450>)
 800ad64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad68:	0800ad8d 	.word	0x0800ad8d
 800ad6c:	0800ad95 	.word	0x0800ad95
 800ad70:	0800ad9d 	.word	0x0800ad9d
 800ad74:	0800adb3 	.word	0x0800adb3
 800ad78:	0800ada3 	.word	0x0800ada3
 800ad7c:	0800adb3 	.word	0x0800adb3
 800ad80:	0800adb3 	.word	0x0800adb3
 800ad84:	0800adb3 	.word	0x0800adb3
 800ad88:	0800adab 	.word	0x0800adab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad8c:	f7fc fb64 	bl	8007458 <HAL_RCC_GetPCLK1Freq>
 800ad90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ad92:	e014      	b.n	800adbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad94:	f7fc fb76 	bl	8007484 <HAL_RCC_GetPCLK2Freq>
 800ad98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ad9a:	e010      	b.n	800adbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad9c:	4b4e      	ldr	r3, [pc, #312]	@ (800aed8 <UART_SetConfig+0x5c0>)
 800ad9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ada0:	e00d      	b.n	800adbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ada2:	f7fc faeb 	bl	800737c <HAL_RCC_GetSysClockFreq>
 800ada6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ada8:	e009      	b.n	800adbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800adaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800adae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800adb0:	e005      	b.n	800adbe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800adb2:	2300      	movs	r3, #0
 800adb4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800adb6:	2301      	movs	r3, #1
 800adb8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800adbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800adbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	f000 8090 	beq.w	800aee6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adca:	4a44      	ldr	r2, [pc, #272]	@ (800aedc <UART_SetConfig+0x5c4>)
 800adcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800add0:	461a      	mov	r2, r3
 800add2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800add4:	fbb3 f3f2 	udiv	r3, r3, r2
 800add8:	005a      	lsls	r2, r3, #1
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	085b      	lsrs	r3, r3, #1
 800ade0:	441a      	add	r2, r3
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	fbb2 f3f3 	udiv	r3, r2, r3
 800adea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800adec:	6a3b      	ldr	r3, [r7, #32]
 800adee:	2b0f      	cmp	r3, #15
 800adf0:	d916      	bls.n	800ae20 <UART_SetConfig+0x508>
 800adf2:	6a3b      	ldr	r3, [r7, #32]
 800adf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800adf8:	d212      	bcs.n	800ae20 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800adfa:	6a3b      	ldr	r3, [r7, #32]
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	f023 030f 	bic.w	r3, r3, #15
 800ae02:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae04:	6a3b      	ldr	r3, [r7, #32]
 800ae06:	085b      	lsrs	r3, r3, #1
 800ae08:	b29b      	uxth	r3, r3
 800ae0a:	f003 0307 	and.w	r3, r3, #7
 800ae0e:	b29a      	uxth	r2, r3
 800ae10:	8bfb      	ldrh	r3, [r7, #30]
 800ae12:	4313      	orrs	r3, r2
 800ae14:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	8bfa      	ldrh	r2, [r7, #30]
 800ae1c:	60da      	str	r2, [r3, #12]
 800ae1e:	e062      	b.n	800aee6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800ae20:	2301      	movs	r3, #1
 800ae22:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ae26:	e05e      	b.n	800aee6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ae28:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ae2c:	2b08      	cmp	r3, #8
 800ae2e:	d828      	bhi.n	800ae82 <UART_SetConfig+0x56a>
 800ae30:	a201      	add	r2, pc, #4	@ (adr r2, 800ae38 <UART_SetConfig+0x520>)
 800ae32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae36:	bf00      	nop
 800ae38:	0800ae5d 	.word	0x0800ae5d
 800ae3c:	0800ae65 	.word	0x0800ae65
 800ae40:	0800ae6d 	.word	0x0800ae6d
 800ae44:	0800ae83 	.word	0x0800ae83
 800ae48:	0800ae73 	.word	0x0800ae73
 800ae4c:	0800ae83 	.word	0x0800ae83
 800ae50:	0800ae83 	.word	0x0800ae83
 800ae54:	0800ae83 	.word	0x0800ae83
 800ae58:	0800ae7b 	.word	0x0800ae7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae5c:	f7fc fafc 	bl	8007458 <HAL_RCC_GetPCLK1Freq>
 800ae60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae62:	e014      	b.n	800ae8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae64:	f7fc fb0e 	bl	8007484 <HAL_RCC_GetPCLK2Freq>
 800ae68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae6a:	e010      	b.n	800ae8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae6c:	4b1a      	ldr	r3, [pc, #104]	@ (800aed8 <UART_SetConfig+0x5c0>)
 800ae6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ae70:	e00d      	b.n	800ae8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae72:	f7fc fa83 	bl	800737c <HAL_RCC_GetSysClockFreq>
 800ae76:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae78:	e009      	b.n	800ae8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ae80:	e005      	b.n	800ae8e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800ae82:	2300      	movs	r3, #0
 800ae84:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ae86:	2301      	movs	r3, #1
 800ae88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ae8c:	bf00      	nop
    }

    if (pclk != 0U)
 800ae8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d028      	beq.n	800aee6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae98:	4a10      	ldr	r2, [pc, #64]	@ (800aedc <UART_SetConfig+0x5c4>)
 800ae9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae9e:	461a      	mov	r2, r3
 800aea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aea2:	fbb3 f2f2 	udiv	r2, r3, r2
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	685b      	ldr	r3, [r3, #4]
 800aeaa:	085b      	lsrs	r3, r3, #1
 800aeac:	441a      	add	r2, r3
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeb6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aeb8:	6a3b      	ldr	r3, [r7, #32]
 800aeba:	2b0f      	cmp	r3, #15
 800aebc:	d910      	bls.n	800aee0 <UART_SetConfig+0x5c8>
 800aebe:	6a3b      	ldr	r3, [r7, #32]
 800aec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aec4:	d20c      	bcs.n	800aee0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aec6:	6a3b      	ldr	r3, [r7, #32]
 800aec8:	b29a      	uxth	r2, r3
 800aeca:	697b      	ldr	r3, [r7, #20]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	60da      	str	r2, [r3, #12]
 800aed0:	e009      	b.n	800aee6 <UART_SetConfig+0x5ce>
 800aed2:	bf00      	nop
 800aed4:	40008000 	.word	0x40008000
 800aed8:	00f42400 	.word	0x00f42400
 800aedc:	0800bd7c 	.word	0x0800bd7c
      }
      else
      {
        ret = HAL_ERROR;
 800aee0:	2301      	movs	r3, #1
 800aee2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	2201      	movs	r2, #1
 800aeea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	2201      	movs	r2, #1
 800aef2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	2200      	movs	r2, #0
 800aefa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	2200      	movs	r2, #0
 800af00:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800af02:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800af06:	4618      	mov	r0, r3
 800af08:	3730      	adds	r7, #48	@ 0x30
 800af0a:	46bd      	mov	sp, r7
 800af0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800af10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800af10:	b480      	push	{r7}
 800af12:	b083      	sub	sp, #12
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af1c:	f003 0308 	and.w	r3, r3, #8
 800af20:	2b00      	cmp	r3, #0
 800af22:	d00a      	beq.n	800af3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	430a      	orrs	r2, r1
 800af38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af3e:	f003 0301 	and.w	r3, r3, #1
 800af42:	2b00      	cmp	r3, #0
 800af44:	d00a      	beq.n	800af5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	430a      	orrs	r2, r1
 800af5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af60:	f003 0302 	and.w	r3, r3, #2
 800af64:	2b00      	cmp	r3, #0
 800af66:	d00a      	beq.n	800af7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	430a      	orrs	r2, r1
 800af7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af82:	f003 0304 	and.w	r3, r3, #4
 800af86:	2b00      	cmp	r3, #0
 800af88:	d00a      	beq.n	800afa0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	430a      	orrs	r2, r1
 800af9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afa4:	f003 0310 	and.w	r3, r3, #16
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d00a      	beq.n	800afc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	689b      	ldr	r3, [r3, #8]
 800afb2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	430a      	orrs	r2, r1
 800afc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afc6:	f003 0320 	and.w	r3, r3, #32
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d00a      	beq.n	800afe4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	689b      	ldr	r3, [r3, #8]
 800afd4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	430a      	orrs	r2, r1
 800afe2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afec:	2b00      	cmp	r3, #0
 800afee:	d01a      	beq.n	800b026 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	430a      	orrs	r2, r1
 800b004:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b00a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b00e:	d10a      	bne.n	800b026 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	430a      	orrs	r2, r1
 800b024:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b02a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d00a      	beq.n	800b048 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	430a      	orrs	r2, r1
 800b046:	605a      	str	r2, [r3, #4]
  }
}
 800b048:	bf00      	nop
 800b04a:	370c      	adds	r7, #12
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr

0800b054 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b098      	sub	sp, #96	@ 0x60
 800b058:	af02      	add	r7, sp, #8
 800b05a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2200      	movs	r2, #0
 800b060:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b064:	f7f9 fd64 	bl	8004b30 <HAL_GetTick>
 800b068:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f003 0308 	and.w	r3, r3, #8
 800b074:	2b08      	cmp	r3, #8
 800b076:	d12f      	bne.n	800b0d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b078:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b07c:	9300      	str	r3, [sp, #0]
 800b07e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b080:	2200      	movs	r2, #0
 800b082:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f000 f88e 	bl	800b1a8 <UART_WaitOnFlagUntilTimeout>
 800b08c:	4603      	mov	r3, r0
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d022      	beq.n	800b0d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b09a:	e853 3f00 	ldrex	r3, [r3]
 800b09e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b0a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b0a6:	653b      	str	r3, [r7, #80]	@ 0x50
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	461a      	mov	r2, r3
 800b0ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b0b0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0b2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b0b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b0b8:	e841 2300 	strex	r3, r2, [r1]
 800b0bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b0be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d1e6      	bne.n	800b092 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2220      	movs	r2, #32
 800b0c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0d4:	2303      	movs	r3, #3
 800b0d6:	e063      	b.n	800b1a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f003 0304 	and.w	r3, r3, #4
 800b0e2:	2b04      	cmp	r3, #4
 800b0e4:	d149      	bne.n	800b17a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0e6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b0ea:	9300      	str	r3, [sp, #0]
 800b0ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f000 f857 	bl	800b1a8 <UART_WaitOnFlagUntilTimeout>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d03c      	beq.n	800b17a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b108:	e853 3f00 	ldrex	r3, [r3]
 800b10c:	623b      	str	r3, [r7, #32]
   return(result);
 800b10e:	6a3b      	ldr	r3, [r7, #32]
 800b110:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b114:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	461a      	mov	r2, r3
 800b11c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b11e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b120:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b122:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b124:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b126:	e841 2300 	strex	r3, r2, [r1]
 800b12a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b12c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d1e6      	bne.n	800b100 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	3308      	adds	r3, #8
 800b138:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	e853 3f00 	ldrex	r3, [r3]
 800b140:	60fb      	str	r3, [r7, #12]
   return(result);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f023 0301 	bic.w	r3, r3, #1
 800b148:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	3308      	adds	r3, #8
 800b150:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b152:	61fa      	str	r2, [r7, #28]
 800b154:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b156:	69b9      	ldr	r1, [r7, #24]
 800b158:	69fa      	ldr	r2, [r7, #28]
 800b15a:	e841 2300 	strex	r3, r2, [r1]
 800b15e:	617b      	str	r3, [r7, #20]
   return(result);
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d1e5      	bne.n	800b132 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2220      	movs	r2, #32
 800b16a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2200      	movs	r2, #0
 800b172:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b176:	2303      	movs	r3, #3
 800b178:	e012      	b.n	800b1a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2220      	movs	r2, #32
 800b17e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2220      	movs	r2, #32
 800b186:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2200      	movs	r2, #0
 800b18e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2200      	movs	r2, #0
 800b194:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2200      	movs	r2, #0
 800b19a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b19e:	2300      	movs	r3, #0
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3758      	adds	r7, #88	@ 0x58
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b084      	sub	sp, #16
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	60b9      	str	r1, [r7, #8]
 800b1b2:	603b      	str	r3, [r7, #0]
 800b1b4:	4613      	mov	r3, r2
 800b1b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1b8:	e04f      	b.n	800b25a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1ba:	69bb      	ldr	r3, [r7, #24]
 800b1bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1c0:	d04b      	beq.n	800b25a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1c2:	f7f9 fcb5 	bl	8004b30 <HAL_GetTick>
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	1ad3      	subs	r3, r2, r3
 800b1cc:	69ba      	ldr	r2, [r7, #24]
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	d302      	bcc.n	800b1d8 <UART_WaitOnFlagUntilTimeout+0x30>
 800b1d2:	69bb      	ldr	r3, [r7, #24]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d101      	bne.n	800b1dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b1d8:	2303      	movs	r3, #3
 800b1da:	e04e      	b.n	800b27a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f003 0304 	and.w	r3, r3, #4
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d037      	beq.n	800b25a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	2b80      	cmp	r3, #128	@ 0x80
 800b1ee:	d034      	beq.n	800b25a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	2b40      	cmp	r3, #64	@ 0x40
 800b1f4:	d031      	beq.n	800b25a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	69db      	ldr	r3, [r3, #28]
 800b1fc:	f003 0308 	and.w	r3, r3, #8
 800b200:	2b08      	cmp	r3, #8
 800b202:	d110      	bne.n	800b226 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	2208      	movs	r2, #8
 800b20a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b20c:	68f8      	ldr	r0, [r7, #12]
 800b20e:	f000 f920 	bl	800b452 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2208      	movs	r2, #8
 800b216:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2200      	movs	r2, #0
 800b21e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b222:	2301      	movs	r3, #1
 800b224:	e029      	b.n	800b27a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	69db      	ldr	r3, [r3, #28]
 800b22c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b230:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b234:	d111      	bne.n	800b25a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b23e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b240:	68f8      	ldr	r0, [r7, #12]
 800b242:	f000 f906 	bl	800b452 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2220      	movs	r2, #32
 800b24a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2200      	movs	r2, #0
 800b252:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b256:	2303      	movs	r3, #3
 800b258:	e00f      	b.n	800b27a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	69da      	ldr	r2, [r3, #28]
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	4013      	ands	r3, r2
 800b264:	68ba      	ldr	r2, [r7, #8]
 800b266:	429a      	cmp	r2, r3
 800b268:	bf0c      	ite	eq
 800b26a:	2301      	moveq	r3, #1
 800b26c:	2300      	movne	r3, #0
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	461a      	mov	r2, r3
 800b272:	79fb      	ldrb	r3, [r7, #7]
 800b274:	429a      	cmp	r2, r3
 800b276:	d0a0      	beq.n	800b1ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b278:	2300      	movs	r3, #0
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3710      	adds	r7, #16
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
	...

0800b284 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b096      	sub	sp, #88	@ 0x58
 800b288:	af00      	add	r7, sp, #0
 800b28a:	60f8      	str	r0, [r7, #12]
 800b28c:	60b9      	str	r1, [r7, #8]
 800b28e:	4613      	mov	r3, r2
 800b290:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	68ba      	ldr	r2, [r7, #8]
 800b296:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	88fa      	ldrh	r2, [r7, #6]
 800b29c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2222      	movs	r2, #34	@ 0x22
 800b2ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d02d      	beq.n	800b316 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2c0:	4a40      	ldr	r2, [pc, #256]	@ (800b3c4 <UART_Start_Receive_DMA+0x140>)
 800b2c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2ca:	4a3f      	ldr	r2, [pc, #252]	@ (800b3c8 <UART_Start_Receive_DMA+0x144>)
 800b2cc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2d4:	4a3d      	ldr	r2, [pc, #244]	@ (800b3cc <UART_Start_Receive_DMA+0x148>)
 800b2d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2de:	2200      	movs	r2, #0
 800b2e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	3324      	adds	r3, #36	@ 0x24
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b2f4:	461a      	mov	r2, r3
 800b2f6:	88fb      	ldrh	r3, [r7, #6]
 800b2f8:	f7fa fede 	bl	80060b8 <HAL_DMA_Start_IT>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d009      	beq.n	800b316 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2210      	movs	r2, #16
 800b306:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2220      	movs	r2, #32
 800b30e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b312:	2301      	movs	r3, #1
 800b314:	e051      	b.n	800b3ba <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	691b      	ldr	r3, [r3, #16]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d018      	beq.n	800b350 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b326:	e853 3f00 	ldrex	r3, [r3]
 800b32a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b32c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b32e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b332:	657b      	str	r3, [r7, #84]	@ 0x54
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	461a      	mov	r2, r3
 800b33a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b33c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b33e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b340:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b342:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b344:	e841 2300 	strex	r3, r2, [r1]
 800b348:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b34a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d1e6      	bne.n	800b31e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	3308      	adds	r3, #8
 800b356:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b35a:	e853 3f00 	ldrex	r3, [r3]
 800b35e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b362:	f043 0301 	orr.w	r3, r3, #1
 800b366:	653b      	str	r3, [r7, #80]	@ 0x50
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	3308      	adds	r3, #8
 800b36e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b370:	637a      	str	r2, [r7, #52]	@ 0x34
 800b372:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b374:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b376:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b378:	e841 2300 	strex	r3, r2, [r1]
 800b37c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b37e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b380:	2b00      	cmp	r3, #0
 800b382:	d1e5      	bne.n	800b350 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	3308      	adds	r3, #8
 800b38a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	e853 3f00 	ldrex	r3, [r3]
 800b392:	613b      	str	r3, [r7, #16]
   return(result);
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b39a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	3308      	adds	r3, #8
 800b3a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b3a4:	623a      	str	r2, [r7, #32]
 800b3a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3a8:	69f9      	ldr	r1, [r7, #28]
 800b3aa:	6a3a      	ldr	r2, [r7, #32]
 800b3ac:	e841 2300 	strex	r3, r2, [r1]
 800b3b0:	61bb      	str	r3, [r7, #24]
   return(result);
 800b3b2:	69bb      	ldr	r3, [r7, #24]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d1e5      	bne.n	800b384 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b3b8:	2300      	movs	r3, #0
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3758      	adds	r7, #88	@ 0x58
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
 800b3c2:	bf00      	nop
 800b3c4:	0800b5dd 	.word	0x0800b5dd
 800b3c8:	0800b711 	.word	0x0800b711
 800b3cc:	0800b757 	.word	0x0800b757

0800b3d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b08f      	sub	sp, #60	@ 0x3c
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3de:	6a3b      	ldr	r3, [r7, #32]
 800b3e0:	e853 3f00 	ldrex	r3, [r3]
 800b3e4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3e6:	69fb      	ldr	r3, [r7, #28]
 800b3e8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b3ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	461a      	mov	r2, r3
 800b3f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b3f8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b3fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3fe:	e841 2300 	strex	r3, r2, [r1]
 800b402:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b406:	2b00      	cmp	r3, #0
 800b408:	d1e6      	bne.n	800b3d8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	3308      	adds	r3, #8
 800b410:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	e853 3f00 	ldrex	r3, [r3]
 800b418:	60bb      	str	r3, [r7, #8]
   return(result);
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b420:	633b      	str	r3, [r7, #48]	@ 0x30
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	3308      	adds	r3, #8
 800b428:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b42a:	61ba      	str	r2, [r7, #24]
 800b42c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b42e:	6979      	ldr	r1, [r7, #20]
 800b430:	69ba      	ldr	r2, [r7, #24]
 800b432:	e841 2300 	strex	r3, r2, [r1]
 800b436:	613b      	str	r3, [r7, #16]
   return(result);
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d1e5      	bne.n	800b40a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2220      	movs	r2, #32
 800b442:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b446:	bf00      	nop
 800b448:	373c      	adds	r7, #60	@ 0x3c
 800b44a:	46bd      	mov	sp, r7
 800b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b450:	4770      	bx	lr

0800b452 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b452:	b480      	push	{r7}
 800b454:	b095      	sub	sp, #84	@ 0x54
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b462:	e853 3f00 	ldrex	r3, [r3]
 800b466:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b46a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b46e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	461a      	mov	r2, r3
 800b476:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b478:	643b      	str	r3, [r7, #64]	@ 0x40
 800b47a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b47c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b47e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b480:	e841 2300 	strex	r3, r2, [r1]
 800b484:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d1e6      	bne.n	800b45a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	3308      	adds	r3, #8
 800b492:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b494:	6a3b      	ldr	r3, [r7, #32]
 800b496:	e853 3f00 	ldrex	r3, [r3]
 800b49a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b49c:	69fb      	ldr	r3, [r7, #28]
 800b49e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b4a2:	f023 0301 	bic.w	r3, r3, #1
 800b4a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	3308      	adds	r3, #8
 800b4ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b4b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b4b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b4b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4b8:	e841 2300 	strex	r3, r2, [r1]
 800b4bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b4be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d1e3      	bne.n	800b48c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d118      	bne.n	800b4fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	e853 3f00 	ldrex	r3, [r3]
 800b4d8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	f023 0310 	bic.w	r3, r3, #16
 800b4e0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4ea:	61bb      	str	r3, [r7, #24]
 800b4ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ee:	6979      	ldr	r1, [r7, #20]
 800b4f0:	69ba      	ldr	r2, [r7, #24]
 800b4f2:	e841 2300 	strex	r3, r2, [r1]
 800b4f6:	613b      	str	r3, [r7, #16]
   return(result);
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d1e6      	bne.n	800b4cc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2220      	movs	r2, #32
 800b502:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2200      	movs	r2, #0
 800b50a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2200      	movs	r2, #0
 800b510:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b512:	bf00      	nop
 800b514:	3754      	adds	r7, #84	@ 0x54
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr

0800b51e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b51e:	b580      	push	{r7, lr}
 800b520:	b090      	sub	sp, #64	@ 0x40
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b52a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f003 0320 	and.w	r3, r3, #32
 800b536:	2b00      	cmp	r3, #0
 800b538:	d137      	bne.n	800b5aa <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b53a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b53c:	2200      	movs	r2, #0
 800b53e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b542:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	3308      	adds	r3, #8
 800b548:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b54c:	e853 3f00 	ldrex	r3, [r3]
 800b550:	623b      	str	r3, [r7, #32]
   return(result);
 800b552:	6a3b      	ldr	r3, [r7, #32]
 800b554:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b558:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b55a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	3308      	adds	r3, #8
 800b560:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b562:	633a      	str	r2, [r7, #48]	@ 0x30
 800b564:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b566:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b568:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b56a:	e841 2300 	strex	r3, r2, [r1]
 800b56e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b572:	2b00      	cmp	r3, #0
 800b574:	d1e5      	bne.n	800b542 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	e853 3f00 	ldrex	r3, [r3]
 800b582:	60fb      	str	r3, [r7, #12]
   return(result);
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b58a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b58c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	461a      	mov	r2, r3
 800b592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b594:	61fb      	str	r3, [r7, #28]
 800b596:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b598:	69b9      	ldr	r1, [r7, #24]
 800b59a:	69fa      	ldr	r2, [r7, #28]
 800b59c:	e841 2300 	strex	r3, r2, [r1]
 800b5a0:	617b      	str	r3, [r7, #20]
   return(result);
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d1e6      	bne.n	800b576 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b5a8:	e004      	b.n	800b5b4 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800b5aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b5b0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b5b2:	4798      	blx	r3
}
 800b5b4:	bf00      	nop
 800b5b6:	3740      	adds	r7, #64	@ 0x40
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b084      	sub	sp, #16
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5c8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b5d0:	68f8      	ldr	r0, [r7, #12]
 800b5d2:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5d4:	bf00      	nop
 800b5d6:	3710      	adds	r7, #16
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b09c      	sub	sp, #112	@ 0x70
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5e8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f003 0320 	and.w	r3, r3, #32
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d171      	bne.n	800b6dc <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b5f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b600:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b606:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b608:	e853 3f00 	ldrex	r3, [r3]
 800b60c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b60e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b610:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b614:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b616:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	461a      	mov	r2, r3
 800b61c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b61e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b620:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b622:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b624:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b626:	e841 2300 	strex	r3, r2, [r1]
 800b62a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b62c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d1e6      	bne.n	800b600 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b632:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	3308      	adds	r3, #8
 800b638:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b63a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b63c:	e853 3f00 	ldrex	r3, [r3]
 800b640:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b644:	f023 0301 	bic.w	r3, r3, #1
 800b648:	667b      	str	r3, [r7, #100]	@ 0x64
 800b64a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	3308      	adds	r3, #8
 800b650:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b652:	647a      	str	r2, [r7, #68]	@ 0x44
 800b654:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b656:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b658:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b65a:	e841 2300 	strex	r3, r2, [r1]
 800b65e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b662:	2b00      	cmp	r3, #0
 800b664:	d1e5      	bne.n	800b632 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b666:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	3308      	adds	r3, #8
 800b66c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b66e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b670:	e853 3f00 	ldrex	r3, [r3]
 800b674:	623b      	str	r3, [r7, #32]
   return(result);
 800b676:	6a3b      	ldr	r3, [r7, #32]
 800b678:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b67c:	663b      	str	r3, [r7, #96]	@ 0x60
 800b67e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	3308      	adds	r3, #8
 800b684:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b686:	633a      	str	r2, [r7, #48]	@ 0x30
 800b688:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b68a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b68c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b68e:	e841 2300 	strex	r3, r2, [r1]
 800b692:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b696:	2b00      	cmp	r3, #0
 800b698:	d1e5      	bne.n	800b666 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b69a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b69c:	2220      	movs	r2, #32
 800b69e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6a6:	2b01      	cmp	r3, #1
 800b6a8:	d118      	bne.n	800b6dc <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	e853 3f00 	ldrex	r3, [r3]
 800b6b6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f023 0310 	bic.w	r3, r3, #16
 800b6be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b6c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	461a      	mov	r2, r3
 800b6c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b6c8:	61fb      	str	r3, [r7, #28]
 800b6ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6cc:	69b9      	ldr	r1, [r7, #24]
 800b6ce:	69fa      	ldr	r2, [r7, #28]
 800b6d0:	e841 2300 	strex	r3, r2, [r1]
 800b6d4:	617b      	str	r3, [r7, #20]
   return(result);
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d1e6      	bne.n	800b6aa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b6dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6de:	2200      	movs	r2, #0
 800b6e0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	d109      	bne.n	800b6fe <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800b6ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b6f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b6f2:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b6f6:	4611      	mov	r1, r2
 800b6f8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b6fa:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b6fc:	e004      	b.n	800b708 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800b6fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b700:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b704:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b706:	4798      	blx	r3
}
 800b708:	bf00      	nop
 800b70a:	3770      	adds	r7, #112	@ 0x70
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}

0800b710 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b084      	sub	sp, #16
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b71c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2201      	movs	r2, #1
 800b722:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b728:	2b01      	cmp	r3, #1
 800b72a:	d10b      	bne.n	800b744 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b732:	68fa      	ldr	r2, [r7, #12]
 800b734:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b738:	0852      	lsrs	r2, r2, #1
 800b73a:	b292      	uxth	r2, r2
 800b73c:	4611      	mov	r1, r2
 800b73e:	68f8      	ldr	r0, [r7, #12]
 800b740:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b742:	e004      	b.n	800b74e <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b74a:	68f8      	ldr	r0, [r7, #12]
 800b74c:	4798      	blx	r3
}
 800b74e:	bf00      	nop
 800b750:	3710      	adds	r7, #16
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}

0800b756 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b756:	b580      	push	{r7, lr}
 800b758:	b086      	sub	sp, #24
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b762:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b76a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b772:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	689b      	ldr	r3, [r3, #8]
 800b77a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b77e:	2b80      	cmp	r3, #128	@ 0x80
 800b780:	d109      	bne.n	800b796 <UART_DMAError+0x40>
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	2b21      	cmp	r3, #33	@ 0x21
 800b786:	d106      	bne.n	800b796 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	2200      	movs	r2, #0
 800b78c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b790:	6978      	ldr	r0, [r7, #20]
 800b792:	f7ff fe1d 	bl	800b3d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	689b      	ldr	r3, [r3, #8]
 800b79c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7a0:	2b40      	cmp	r3, #64	@ 0x40
 800b7a2:	d109      	bne.n	800b7b8 <UART_DMAError+0x62>
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2b22      	cmp	r3, #34	@ 0x22
 800b7a8:	d106      	bne.n	800b7b8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b7b2:	6978      	ldr	r0, [r7, #20]
 800b7b4:	f7ff fe4d 	bl	800b452 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7be:	f043 0210 	orr.w	r2, r3, #16
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b7ce:	6978      	ldr	r0, [r7, #20]
 800b7d0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7d2:	bf00      	nop
 800b7d4:	3718      	adds	r7, #24
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}

0800b7da <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b7da:	b580      	push	{r7, lr}
 800b7dc:	b084      	sub	sp, #16
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b7fe:	68f8      	ldr	r0, [r7, #12]
 800b800:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b802:	bf00      	nop
 800b804:	3710      	adds	r7, #16
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}

0800b80a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b80a:	b580      	push	{r7, lr}
 800b80c:	b088      	sub	sp, #32
 800b80e:	af00      	add	r7, sp, #0
 800b810:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	e853 3f00 	ldrex	r3, [r3]
 800b81e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b826:	61fb      	str	r3, [r7, #28]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	461a      	mov	r2, r3
 800b82e:	69fb      	ldr	r3, [r7, #28]
 800b830:	61bb      	str	r3, [r7, #24]
 800b832:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b834:	6979      	ldr	r1, [r7, #20]
 800b836:	69ba      	ldr	r2, [r7, #24]
 800b838:	e841 2300 	strex	r3, r2, [r1]
 800b83c:	613b      	str	r3, [r7, #16]
   return(result);
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d1e6      	bne.n	800b812 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2220      	movs	r2, #32
 800b848:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2200      	movs	r2, #0
 800b850:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b85c:	bf00      	nop
 800b85e:	3720      	adds	r7, #32
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}

0800b864 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b864:	b480      	push	{r7}
 800b866:	b083      	sub	sp, #12
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b86c:	bf00      	nop
 800b86e:	370c      	adds	r7, #12
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr

0800b878 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b878:	b480      	push	{r7}
 800b87a:	b083      	sub	sp, #12
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b880:	bf00      	nop
 800b882:	370c      	adds	r7, #12
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr

0800b88c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b083      	sub	sp, #12
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b894:	bf00      	nop
 800b896:	370c      	adds	r7, #12
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr

0800b8a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b085      	sub	sp, #20
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	d101      	bne.n	800b8b6 <HAL_UARTEx_DisableFifoMode+0x16>
 800b8b2:	2302      	movs	r3, #2
 800b8b4:	e027      	b.n	800b906 <HAL_UARTEx_DisableFifoMode+0x66>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2201      	movs	r2, #1
 800b8ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2224      	movs	r2, #36	@ 0x24
 800b8c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	681a      	ldr	r2, [r3, #0]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f022 0201 	bic.w	r2, r2, #1
 800b8dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b8e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	68fa      	ldr	r2, [r7, #12]
 800b8f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2220      	movs	r2, #32
 800b8f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2200      	movs	r2, #0
 800b900:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b904:	2300      	movs	r3, #0
}
 800b906:	4618      	mov	r0, r3
 800b908:	3714      	adds	r7, #20
 800b90a:	46bd      	mov	sp, r7
 800b90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b910:	4770      	bx	lr

0800b912 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b912:	b580      	push	{r7, lr}
 800b914:	b084      	sub	sp, #16
 800b916:	af00      	add	r7, sp, #0
 800b918:	6078      	str	r0, [r7, #4]
 800b91a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b922:	2b01      	cmp	r3, #1
 800b924:	d101      	bne.n	800b92a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b926:	2302      	movs	r3, #2
 800b928:	e02d      	b.n	800b986 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2201      	movs	r2, #1
 800b92e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2224      	movs	r2, #36	@ 0x24
 800b936:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	681a      	ldr	r2, [r3, #0]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f022 0201 	bic.w	r2, r2, #1
 800b950:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	689b      	ldr	r3, [r3, #8]
 800b958:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	683a      	ldr	r2, [r7, #0]
 800b962:	430a      	orrs	r2, r1
 800b964:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f000 f850 	bl	800ba0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	68fa      	ldr	r2, [r7, #12]
 800b972:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2220      	movs	r2, #32
 800b978:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2200      	movs	r2, #0
 800b980:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b984:	2300      	movs	r3, #0
}
 800b986:	4618      	mov	r0, r3
 800b988:	3710      	adds	r7, #16
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}

0800b98e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b98e:	b580      	push	{r7, lr}
 800b990:	b084      	sub	sp, #16
 800b992:	af00      	add	r7, sp, #0
 800b994:	6078      	str	r0, [r7, #4]
 800b996:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d101      	bne.n	800b9a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b9a2:	2302      	movs	r3, #2
 800b9a4:	e02d      	b.n	800ba02 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2201      	movs	r2, #1
 800b9aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2224      	movs	r2, #36	@ 0x24
 800b9b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	681a      	ldr	r2, [r3, #0]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	f022 0201 	bic.w	r2, r2, #1
 800b9cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	689b      	ldr	r3, [r3, #8]
 800b9d4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	683a      	ldr	r2, [r7, #0]
 800b9de:	430a      	orrs	r2, r1
 800b9e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f000 f812 	bl	800ba0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	68fa      	ldr	r2, [r7, #12]
 800b9ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2220      	movs	r2, #32
 800b9f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba00:	2300      	movs	r3, #0
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3710      	adds	r7, #16
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
	...

0800ba0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b085      	sub	sp, #20
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d108      	bne.n	800ba2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2201      	movs	r2, #1
 800ba20:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2201      	movs	r2, #1
 800ba28:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ba2c:	e031      	b.n	800ba92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ba2e:	2308      	movs	r3, #8
 800ba30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ba32:	2308      	movs	r3, #8
 800ba34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	689b      	ldr	r3, [r3, #8]
 800ba3c:	0e5b      	lsrs	r3, r3, #25
 800ba3e:	b2db      	uxtb	r3, r3
 800ba40:	f003 0307 	and.w	r3, r3, #7
 800ba44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	689b      	ldr	r3, [r3, #8]
 800ba4c:	0f5b      	lsrs	r3, r3, #29
 800ba4e:	b2db      	uxtb	r3, r3
 800ba50:	f003 0307 	and.w	r3, r3, #7
 800ba54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba56:	7bbb      	ldrb	r3, [r7, #14]
 800ba58:	7b3a      	ldrb	r2, [r7, #12]
 800ba5a:	4911      	ldr	r1, [pc, #68]	@ (800baa0 <UARTEx_SetNbDataToProcess+0x94>)
 800ba5c:	5c8a      	ldrb	r2, [r1, r2]
 800ba5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ba62:	7b3a      	ldrb	r2, [r7, #12]
 800ba64:	490f      	ldr	r1, [pc, #60]	@ (800baa4 <UARTEx_SetNbDataToProcess+0x98>)
 800ba66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba68:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba6c:	b29a      	uxth	r2, r3
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba74:	7bfb      	ldrb	r3, [r7, #15]
 800ba76:	7b7a      	ldrb	r2, [r7, #13]
 800ba78:	4909      	ldr	r1, [pc, #36]	@ (800baa0 <UARTEx_SetNbDataToProcess+0x94>)
 800ba7a:	5c8a      	ldrb	r2, [r1, r2]
 800ba7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ba80:	7b7a      	ldrb	r2, [r7, #13]
 800ba82:	4908      	ldr	r1, [pc, #32]	@ (800baa4 <UARTEx_SetNbDataToProcess+0x98>)
 800ba84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba86:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba8a:	b29a      	uxth	r2, r3
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ba92:	bf00      	nop
 800ba94:	3714      	adds	r7, #20
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr
 800ba9e:	bf00      	nop
 800baa0:	0800bd94 	.word	0x0800bd94
 800baa4:	0800bd9c 	.word	0x0800bd9c

0800baa8 <memset>:
 800baa8:	4402      	add	r2, r0
 800baaa:	4603      	mov	r3, r0
 800baac:	4293      	cmp	r3, r2
 800baae:	d100      	bne.n	800bab2 <memset+0xa>
 800bab0:	4770      	bx	lr
 800bab2:	f803 1b01 	strb.w	r1, [r3], #1
 800bab6:	e7f9      	b.n	800baac <memset+0x4>

0800bab8 <__errno>:
 800bab8:	4b01      	ldr	r3, [pc, #4]	@ (800bac0 <__errno+0x8>)
 800baba:	6818      	ldr	r0, [r3, #0]
 800babc:	4770      	bx	lr
 800babe:	bf00      	nop
 800bac0:	20000214 	.word	0x20000214

0800bac4 <__libc_init_array>:
 800bac4:	b570      	push	{r4, r5, r6, lr}
 800bac6:	4d0d      	ldr	r5, [pc, #52]	@ (800bafc <__libc_init_array+0x38>)
 800bac8:	4c0d      	ldr	r4, [pc, #52]	@ (800bb00 <__libc_init_array+0x3c>)
 800baca:	1b64      	subs	r4, r4, r5
 800bacc:	10a4      	asrs	r4, r4, #2
 800bace:	2600      	movs	r6, #0
 800bad0:	42a6      	cmp	r6, r4
 800bad2:	d109      	bne.n	800bae8 <__libc_init_array+0x24>
 800bad4:	4d0b      	ldr	r5, [pc, #44]	@ (800bb04 <__libc_init_array+0x40>)
 800bad6:	4c0c      	ldr	r4, [pc, #48]	@ (800bb08 <__libc_init_array+0x44>)
 800bad8:	f000 f92c 	bl	800bd34 <_init>
 800badc:	1b64      	subs	r4, r4, r5
 800bade:	10a4      	asrs	r4, r4, #2
 800bae0:	2600      	movs	r6, #0
 800bae2:	42a6      	cmp	r6, r4
 800bae4:	d105      	bne.n	800baf2 <__libc_init_array+0x2e>
 800bae6:	bd70      	pop	{r4, r5, r6, pc}
 800bae8:	f855 3b04 	ldr.w	r3, [r5], #4
 800baec:	4798      	blx	r3
 800baee:	3601      	adds	r6, #1
 800baf0:	e7ee      	b.n	800bad0 <__libc_init_array+0xc>
 800baf2:	f855 3b04 	ldr.w	r3, [r5], #4
 800baf6:	4798      	blx	r3
 800baf8:	3601      	adds	r6, #1
 800bafa:	e7f2      	b.n	800bae2 <__libc_init_array+0x1e>
 800bafc:	0800bdac 	.word	0x0800bdac
 800bb00:	0800bdac 	.word	0x0800bdac
 800bb04:	0800bdac 	.word	0x0800bdac
 800bb08:	0800bdb0 	.word	0x0800bdb0

0800bb0c <memcpy>:
 800bb0c:	440a      	add	r2, r1
 800bb0e:	4291      	cmp	r1, r2
 800bb10:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb14:	d100      	bne.n	800bb18 <memcpy+0xc>
 800bb16:	4770      	bx	lr
 800bb18:	b510      	push	{r4, lr}
 800bb1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb22:	4291      	cmp	r1, r2
 800bb24:	d1f9      	bne.n	800bb1a <memcpy+0xe>
 800bb26:	bd10      	pop	{r4, pc}

0800bb28 <sqrt>:
 800bb28:	b538      	push	{r3, r4, r5, lr}
 800bb2a:	ed2d 8b02 	vpush	{d8}
 800bb2e:	ec55 4b10 	vmov	r4, r5, d0
 800bb32:	f000 f825 	bl	800bb80 <__ieee754_sqrt>
 800bb36:	4622      	mov	r2, r4
 800bb38:	462b      	mov	r3, r5
 800bb3a:	4620      	mov	r0, r4
 800bb3c:	4629      	mov	r1, r5
 800bb3e:	eeb0 8a40 	vmov.f32	s16, s0
 800bb42:	eef0 8a60 	vmov.f32	s17, s1
 800bb46:	f7f4 ffbd 	bl	8000ac4 <__aeabi_dcmpun>
 800bb4a:	b990      	cbnz	r0, 800bb72 <sqrt+0x4a>
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	2300      	movs	r3, #0
 800bb50:	4620      	mov	r0, r4
 800bb52:	4629      	mov	r1, r5
 800bb54:	f7f4 ff8e 	bl	8000a74 <__aeabi_dcmplt>
 800bb58:	b158      	cbz	r0, 800bb72 <sqrt+0x4a>
 800bb5a:	f7ff ffad 	bl	800bab8 <__errno>
 800bb5e:	2321      	movs	r3, #33	@ 0x21
 800bb60:	6003      	str	r3, [r0, #0]
 800bb62:	2200      	movs	r2, #0
 800bb64:	2300      	movs	r3, #0
 800bb66:	4610      	mov	r0, r2
 800bb68:	4619      	mov	r1, r3
 800bb6a:	f7f4 fe3b 	bl	80007e4 <__aeabi_ddiv>
 800bb6e:	ec41 0b18 	vmov	d8, r0, r1
 800bb72:	eeb0 0a48 	vmov.f32	s0, s16
 800bb76:	eef0 0a68 	vmov.f32	s1, s17
 800bb7a:	ecbd 8b02 	vpop	{d8}
 800bb7e:	bd38      	pop	{r3, r4, r5, pc}

0800bb80 <__ieee754_sqrt>:
 800bb80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb84:	4a68      	ldr	r2, [pc, #416]	@ (800bd28 <__ieee754_sqrt+0x1a8>)
 800bb86:	ec55 4b10 	vmov	r4, r5, d0
 800bb8a:	43aa      	bics	r2, r5
 800bb8c:	462b      	mov	r3, r5
 800bb8e:	4621      	mov	r1, r4
 800bb90:	d110      	bne.n	800bbb4 <__ieee754_sqrt+0x34>
 800bb92:	4622      	mov	r2, r4
 800bb94:	4620      	mov	r0, r4
 800bb96:	4629      	mov	r1, r5
 800bb98:	f7f4 fcfa 	bl	8000590 <__aeabi_dmul>
 800bb9c:	4602      	mov	r2, r0
 800bb9e:	460b      	mov	r3, r1
 800bba0:	4620      	mov	r0, r4
 800bba2:	4629      	mov	r1, r5
 800bba4:	f7f4 fb3e 	bl	8000224 <__adddf3>
 800bba8:	4604      	mov	r4, r0
 800bbaa:	460d      	mov	r5, r1
 800bbac:	ec45 4b10 	vmov	d0, r4, r5
 800bbb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbb4:	2d00      	cmp	r5, #0
 800bbb6:	dc0e      	bgt.n	800bbd6 <__ieee754_sqrt+0x56>
 800bbb8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800bbbc:	4322      	orrs	r2, r4
 800bbbe:	d0f5      	beq.n	800bbac <__ieee754_sqrt+0x2c>
 800bbc0:	b19d      	cbz	r5, 800bbea <__ieee754_sqrt+0x6a>
 800bbc2:	4622      	mov	r2, r4
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	4629      	mov	r1, r5
 800bbc8:	f7f4 fb2a 	bl	8000220 <__aeabi_dsub>
 800bbcc:	4602      	mov	r2, r0
 800bbce:	460b      	mov	r3, r1
 800bbd0:	f7f4 fe08 	bl	80007e4 <__aeabi_ddiv>
 800bbd4:	e7e8      	b.n	800bba8 <__ieee754_sqrt+0x28>
 800bbd6:	152a      	asrs	r2, r5, #20
 800bbd8:	d115      	bne.n	800bc06 <__ieee754_sqrt+0x86>
 800bbda:	2000      	movs	r0, #0
 800bbdc:	e009      	b.n	800bbf2 <__ieee754_sqrt+0x72>
 800bbde:	0acb      	lsrs	r3, r1, #11
 800bbe0:	3a15      	subs	r2, #21
 800bbe2:	0549      	lsls	r1, r1, #21
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d0fa      	beq.n	800bbde <__ieee754_sqrt+0x5e>
 800bbe8:	e7f7      	b.n	800bbda <__ieee754_sqrt+0x5a>
 800bbea:	462a      	mov	r2, r5
 800bbec:	e7fa      	b.n	800bbe4 <__ieee754_sqrt+0x64>
 800bbee:	005b      	lsls	r3, r3, #1
 800bbf0:	3001      	adds	r0, #1
 800bbf2:	02dc      	lsls	r4, r3, #11
 800bbf4:	d5fb      	bpl.n	800bbee <__ieee754_sqrt+0x6e>
 800bbf6:	1e44      	subs	r4, r0, #1
 800bbf8:	1b12      	subs	r2, r2, r4
 800bbfa:	f1c0 0420 	rsb	r4, r0, #32
 800bbfe:	fa21 f404 	lsr.w	r4, r1, r4
 800bc02:	4323      	orrs	r3, r4
 800bc04:	4081      	lsls	r1, r0
 800bc06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc0a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800bc0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bc12:	07d2      	lsls	r2, r2, #31
 800bc14:	bf5c      	itt	pl
 800bc16:	005b      	lslpl	r3, r3, #1
 800bc18:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800bc1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bc20:	bf58      	it	pl
 800bc22:	0049      	lslpl	r1, r1, #1
 800bc24:	2600      	movs	r6, #0
 800bc26:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800bc2a:	106d      	asrs	r5, r5, #1
 800bc2c:	0049      	lsls	r1, r1, #1
 800bc2e:	2016      	movs	r0, #22
 800bc30:	4632      	mov	r2, r6
 800bc32:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800bc36:	1917      	adds	r7, r2, r4
 800bc38:	429f      	cmp	r7, r3
 800bc3a:	bfde      	ittt	le
 800bc3c:	193a      	addle	r2, r7, r4
 800bc3e:	1bdb      	suble	r3, r3, r7
 800bc40:	1936      	addle	r6, r6, r4
 800bc42:	0fcf      	lsrs	r7, r1, #31
 800bc44:	3801      	subs	r0, #1
 800bc46:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800bc4a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bc4e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800bc52:	d1f0      	bne.n	800bc36 <__ieee754_sqrt+0xb6>
 800bc54:	4604      	mov	r4, r0
 800bc56:	2720      	movs	r7, #32
 800bc58:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	eb00 0e0c 	add.w	lr, r0, ip
 800bc62:	db02      	blt.n	800bc6a <__ieee754_sqrt+0xea>
 800bc64:	d113      	bne.n	800bc8e <__ieee754_sqrt+0x10e>
 800bc66:	458e      	cmp	lr, r1
 800bc68:	d811      	bhi.n	800bc8e <__ieee754_sqrt+0x10e>
 800bc6a:	f1be 0f00 	cmp.w	lr, #0
 800bc6e:	eb0e 000c 	add.w	r0, lr, ip
 800bc72:	da42      	bge.n	800bcfa <__ieee754_sqrt+0x17a>
 800bc74:	2800      	cmp	r0, #0
 800bc76:	db40      	blt.n	800bcfa <__ieee754_sqrt+0x17a>
 800bc78:	f102 0801 	add.w	r8, r2, #1
 800bc7c:	1a9b      	subs	r3, r3, r2
 800bc7e:	458e      	cmp	lr, r1
 800bc80:	bf88      	it	hi
 800bc82:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800bc86:	eba1 010e 	sub.w	r1, r1, lr
 800bc8a:	4464      	add	r4, ip
 800bc8c:	4642      	mov	r2, r8
 800bc8e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800bc92:	3f01      	subs	r7, #1
 800bc94:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800bc98:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bc9c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800bca0:	d1dc      	bne.n	800bc5c <__ieee754_sqrt+0xdc>
 800bca2:	4319      	orrs	r1, r3
 800bca4:	d01b      	beq.n	800bcde <__ieee754_sqrt+0x15e>
 800bca6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800bd2c <__ieee754_sqrt+0x1ac>
 800bcaa:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800bd30 <__ieee754_sqrt+0x1b0>
 800bcae:	e9da 0100 	ldrd	r0, r1, [sl]
 800bcb2:	e9db 2300 	ldrd	r2, r3, [fp]
 800bcb6:	f7f4 fab3 	bl	8000220 <__aeabi_dsub>
 800bcba:	e9da 8900 	ldrd	r8, r9, [sl]
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	460b      	mov	r3, r1
 800bcc2:	4640      	mov	r0, r8
 800bcc4:	4649      	mov	r1, r9
 800bcc6:	f7f4 fedf 	bl	8000a88 <__aeabi_dcmple>
 800bcca:	b140      	cbz	r0, 800bcde <__ieee754_sqrt+0x15e>
 800bccc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800bcd0:	e9da 0100 	ldrd	r0, r1, [sl]
 800bcd4:	e9db 2300 	ldrd	r2, r3, [fp]
 800bcd8:	d111      	bne.n	800bcfe <__ieee754_sqrt+0x17e>
 800bcda:	3601      	adds	r6, #1
 800bcdc:	463c      	mov	r4, r7
 800bcde:	1072      	asrs	r2, r6, #1
 800bce0:	0863      	lsrs	r3, r4, #1
 800bce2:	07f1      	lsls	r1, r6, #31
 800bce4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800bce8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800bcec:	bf48      	it	mi
 800bcee:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800bcf2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	e756      	b.n	800bba8 <__ieee754_sqrt+0x28>
 800bcfa:	4690      	mov	r8, r2
 800bcfc:	e7be      	b.n	800bc7c <__ieee754_sqrt+0xfc>
 800bcfe:	f7f4 fa91 	bl	8000224 <__adddf3>
 800bd02:	e9da 8900 	ldrd	r8, r9, [sl]
 800bd06:	4602      	mov	r2, r0
 800bd08:	460b      	mov	r3, r1
 800bd0a:	4640      	mov	r0, r8
 800bd0c:	4649      	mov	r1, r9
 800bd0e:	f7f4 feb1 	bl	8000a74 <__aeabi_dcmplt>
 800bd12:	b120      	cbz	r0, 800bd1e <__ieee754_sqrt+0x19e>
 800bd14:	1ca0      	adds	r0, r4, #2
 800bd16:	bf08      	it	eq
 800bd18:	3601      	addeq	r6, #1
 800bd1a:	3402      	adds	r4, #2
 800bd1c:	e7df      	b.n	800bcde <__ieee754_sqrt+0x15e>
 800bd1e:	1c63      	adds	r3, r4, #1
 800bd20:	f023 0401 	bic.w	r4, r3, #1
 800bd24:	e7db      	b.n	800bcde <__ieee754_sqrt+0x15e>
 800bd26:	bf00      	nop
 800bd28:	7ff00000 	.word	0x7ff00000
 800bd2c:	20000270 	.word	0x20000270
 800bd30:	20000268 	.word	0x20000268

0800bd34 <_init>:
 800bd34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd36:	bf00      	nop
 800bd38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd3a:	bc08      	pop	{r3}
 800bd3c:	469e      	mov	lr, r3
 800bd3e:	4770      	bx	lr

0800bd40 <_fini>:
 800bd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd42:	bf00      	nop
 800bd44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd46:	bc08      	pop	{r3}
 800bd48:	469e      	mov	lr, r3
 800bd4a:	4770      	bx	lr
